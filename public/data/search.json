[{"title":"Addons Documentation","permalink":"https://docs.grabaperch.com/addons/","id":"addons","excerpt":"This section of the documentation contains specific documentation for our first party add-ons to Perch - Apps, Plugins, Dashboard Widgets, Feathers, Translations and Field Types.","text":"This section of the documentation contains specific documentation for our first party add-ons to Perch - Apps, Plugins, Dashboard Widgets, Feathers, Translations and Field Types.\n\n## Perch Add-ons 101\n\nWe try to keep the core of Perch and Runway light, then offer additional functionality by way of our add-ons. This means your content editors don't have to wade through unwanted functionality to edit their site. Add-ons which expose additional template tags or functionality behave as much as possible in a consistent way to the rest of Perch.\n\nYou will find sections for each add-on that exposes functions in the [Functions](/functions) reference, and add-ons which expose additional template tags can be found in the [Apps section of the Template Reference](/templates/apps), refer to these as you create templates and pages to use with an add-on. The pages in this section of the documentation include example code and other information about using add-ons.\n\n### Types of add-ons\n\n- **Apps**: these are the bigger pieces of functionality such as Blog or Shop. Most Apps add additional Control Panel functionality and then functions and template tags for output to your site.\n- **Plugins**: you can add alternate WYSIWYG editors to content areas by way of a plugin\n- **Dashboard Widgets**: the Perch Dashboard is extensible so you can add additional functionality here.\n- **Feathers**: a method of packing front-end code for inclusion in your site.\n- **Translations**: the entire Perch Control Panel can be translated, add a translation so your content editor can work in their own language.\n- **Field Types**: these add additional template tag _types_ which you can then use when creating templates.\n\n### Installing add-ons\n\nDepending on the add-on installation may be as straightforward as dropping a file into your Perch install, or may have a number of steps to follow. Check the individual add-on pages for details.\n\nAdd-ons which create database tables will manage their installation for you, typically you need to go to the add-on page in the Control Panel and installation will be run.\n\n### Updating add-ons\n\nAs with Perch itself, we try to keep add-on updates as simple as replacing the add-on folder in your Perch install. It is always worth checking the update notes however just in case there is something more that needs doing such as a template update.\n\n\n### Creating your own add-ons\n\nAll of the official add-ons have been created using the public Perch API. If there is something you want to add to Perch you can use that API to create your own functionality. Take a look at the [API Documentation](/api) to get started.","type":"addons"},{"title":"API Documentation","permalink":"https://docs.grabaperch.com/api/","id":"api","excerpt":"Perch and Perch Runway share a powerful API that enables you to extend, integrate with, and build on top of the Perch platform.","text":"Perch and Perch Runway share a powerful API that enables you to extend, integrate with, and build on top of the Perch platform.\n\nThere are lots of ways for a developer to use the API, from light CSS and JavaScript additions, right through to building Perch apps. Below are some of the ways you can use the API.\n\nMany of the more advanced API uses are implemented with the use of an App, so that's a good place to start for anything that appears after Apps in the list below.\n\n## [Custom editors](/api/editors)\n\nWant to add your favourite WYSIWYG editor to Perch? This is the place to do it.\n\n## [UI customisations](/api/custom-ui)\n\nModify the control panel by adding in your own custom CSS and JavaScript in a way that shouldn't break when you update.\n\n## [Language translations](/api/translations)\n\nIf you want to use the control panel in a language other than English, this is done with translations.\n\n## [Authentication plugins](/api/auth)\n\nWhen you need to manage your user accounts in an external system, authentication plugins enable you to do just that.\n\n## [Field types](/api/field-types)\n\nIf you want to add new types of field to Perch control panel edit forms, this is how you do it. All edit fields in Perch are field types, from the basic single line text field, to more complex examples like maps and YouTube fields.\n\n## [Apps](/api/apps)\n\nWhen it comes to adding more serious functionality to Perch, you need an app. Apps can be anything from just a couple of quick files to listen for events (see below) to full scale applications built on Perch, such as Perch Shop. They can add pages the control panel, add runtime functions to the page, define custom templates tags and more. They can be powerful and complex, or almost nothing at all. If you want to hook your own code into Perch, an app is usally the route to do it.\n\n## [Form validators](/api/validators)\n\nThe Perch public-facing forms have lots of basic built-in validation for common input types. When you need to apply custom logic to field validation, you can do that with a custom form validator. They enable you do to things like check an email address isn't already in use, or verify some input against an external API. Form validators are implemented with an app.\n\n## [Event hooks](/api/events)\n\nMany interactions that occur within the Perch control panel issue an event which your code can listen for. That might be when a page is published or an image is uploaded. Event hooks enable you to implement code in response to these interactions, such as invalidating a cache or optmizing an image. You can also issue events of your own for other developers (or other apps of your own) to listen for. Event hooks are implemented with an app.\n\n## [Dashboard widgets](/api/dashboard)\n\nThe control panel has a dashboard page which is made up of small interface widgets. These typically give statistical or summary information and offer some quick links. You can add your own widgets with an app.\n\n## [Template handlers](/api/templates)\n\nPerch has a flexible tag-based templating language which can be augmented with custom tags. Template handlers can hook into each phase of template parsing to add custom functionality to templates. Template handlers are implemented with an app.\n\n## [Search handlers](/api/search)\n\nWhen a user performs a search on your website, each search handler is called in turn and can augment the search query and perform transformations on the results. If your app stores content in the database that needs to be returned through a site search, then search handlers are the way to do it. They are implemented with an app.\n\n## [Bucket handlers](/api/buckets)\n\nUploaded assets are stored in resource buckets, which are managed through the user's bucket list. Perch has support for buckets on the local file system, whereas Perch Runway adds support for buckets on Dropbox, Amazon S3, CloudFiles and so on. You can add support for alternative backends using a bucket handler, implemented with an app.","type":"api"},{"title":"Function reference","permalink":"https://docs.grabaperch.com/functions/","id":"functions","excerpt":"Perch functions are PHP functions used on PHP pages in Perch and in your Master Pages in Perch Runway. As these functions are PHP they cannot go into your templates, instead you add these to the pages of your site.","text":"Perch functions are PHP functions used on PHP pages in Perch and in your Master Pages in Perch Runway. As these functions are PHP they cannot go into your templates, instead you add these to the pages of your site.\n\nThere are functions which make up the core functionality of Perch, add-ons also introduce their own functions. These are all detailed in this section of the documentation.\n\nYou use the most basic Perch Function when you get started and create your first **Perch Region**.\n\n```php\n<?php\n\tperch_content('Intro');\n?>\n```\n\nHere we use the `perch_content()` function, passing as a _parameter_ the string 'Intro', this becomes the name of the Region in the Perch Admin.\n\nSome functions have additional parameters, and the page for that function will explain what they are. In general you will be passing into a function one of the following things.\n\n### A String\n\nIn the example above we pass a _string_ into our function, and to indicate this we enclose the text in quotes. This value will be directly passed to the function, Perch then uses it as the name of that Region.\n\n### A Number\n\nYou can also pass numbers into functions. These do not need to be quoted.\n\n### A Boolean\n\nSometimes you will need to pass boolean values of `true` or `false` to your function. An additional parameter for `perch_content()` is to pass in the boolean `true` after the name of the region. Boolean values should not be quoted.\n\n```php\n<?php\n  $my_var = perch_content('Intro', true);\n?>\n```\n\nUsing `perch_content()` without this value means that the content of that Region is directly output to the page, adding `true` stores the content in a PHP Variable named `my_var`.\n\n### A PHP Variable\n\nWe saw a PHP Variable in the last example. PHP Variables start with the dollar symbol `$` and if you pass one into a Perch Function (or other PHP function) they should not be quoted. In the example below I am passing a variable named `$content` into the `perch_template()` function, along with a string to identify the template. You can see how the string is quoted and the variable is not.\n\n```php\nperch_template('content/article.html',$content);\n```\n\n### An Array\n\nMany Perch functions are passed an [array](http://php.net/manual/en/language.types.array.php). These arrays are essentially data stored in a key, value format. The key being the name that Perch expects the data to be referenced by and the value is the current value for that option. It's a way of passing in lots of different options in a structured way.\n\nIn the example below I am using `perch_content_custom()`, passing in the name of the region and then an array which contains two key value pairs. One with a key of `template`, which assigns the template I want to use with this content and another with a key of `count` which has a value of the number of items I want to display.\n\n```php\n<?php\n  perch_content_custom('News', array(\n    'template' => 'content/article.html',\n    'count'    => 4\n  ));\n?>\n```\n\nThe keys and the values are separated with a double arrow `=>` and each line, other than the last ends with a comma. If you are using PHP 5.4 or over you can use a simpler array syntax which replaces `array()` wrapped around the set of key value pairs with `[]`. Our function would then look like this:\n\n```php\n<?php\n  perch_content_custom('News', [\n    'template' => 'content/article.html',\n    'count'    => 4\n  ]);\n?>\n```\n\nIf you are using PHP 5.4+ you can take our pick as to which syntax to use.","type":"functions"},{"title":"Perch Documentation","permalink":"https://docs.grabaperch.com/perch/","id":"perch","excerpt":"Perch is a PHP and MySQL Content Management System (CMS) designed as a \"drop-in\" solution for small websites. This section of the documentation introduces the various aspects of developing websites using Perch.","text":"Perch is a PHP and MySQL Content Management System (CMS) designed as a \"drop-in\" solution for small websites. This section of the documentation introduces the various aspects of developing websites using Perch.","type":"perch"},{"title":"Perch Runway","permalink":"https://docs.grabaperch.com/runway/","id":"runway","excerpt":"Perch Runway is a comprehensive CMS designed for content driven websites. As a superset of Perch, it shares a template language and much functionality with Perch. Rather than being a drop in solution for making parts of the site editable Runway takes a more typical approach with a front controller and routing to display your pages.","text":"Perch Runway is a comprehensive CMS designed for content driven websites. As a superset of Perch, it shares a template language and much functionality with Perch. Rather than being a drop in solution for making parts of the site editable Runway takes a more typical approach with a front controller and routing to display your pages.\n\nIn many cases the Perch documentation should be referred to, this section of the documentation details the things that are different in Runway and any Runway specific functionality. All Perch Add-ons also function within Runway, and some add-ons expose additional functionality when used with Runway rather than Perch.","type":"runway"},{"title":"Template reference","permalink":"https://docs.grabaperch.com/templates/","id":"templates","excerpt":"Any content added by your content editors in the Perch Control Panel is managed by Perch Templates. The template defines both how things are displayed on the website and the forms that the content editor sees when managing their content. You have full control over both aspects.","text":"Any content added by your content editors in the Perch Control Panel is managed by Perch Templates. The template defines both how things are displayed on the website and the forms that the content editor sees when managing their content. You have full control over both aspects.\n\nThis template reference details the variety of template tags available to you, for the various parts of perch and explains how templates work.\n\n### Changes in Perch 3.1\n\nPerch and Perch Runway 3.1 updated the template engine to support tags without a self-closing ` />` and to allow boolean attributes. This is to bring it more closely inline with how most people write HTML tags.\n\nThe changes are backwards compatible, so there is no need to update old templates unless you want to. The documentation here has been updated to use the newer syntax.\n\n#### Example: tag closing\n\nTemplate tags used to use XML-style self-closing tags. Before:\n\n```html\n<perch:content id=\"heading\" type=\"text\" label=\"Heading\" />\n```\n\nThis requirement has been removed. After:\n\n```html\n<perch:content id=\"heading\" type=\"text\" label=\"Heading\">\n```\n\n#### Example: boolean attributes\n\nAttributes used to always require a value:\n\n```html\n<perch:content id=\"intro\" type=\"textarea\" label=\"Introduction\" markdown=\"true\" required=\"true\" />\n```\n\nThis requirement has been removed. Now, if an attribute has no value, it is assumed to be `true`. After:\n\n```html\n<perch:content id=\"intro\" type=\"textarea\" label=\"Introduction\" markdown required>\n```","type":"templates"},{"title":"Perch Documentation Tutorial Videos","permalink":"https://docs.grabaperch.com/video/","id":"video","excerpt":"In this section we publish our growing collection of tutorial and technique videos. If you are interested in short videos explaining single Perch concepts check out techniques. The Swift Migrations video tutorial is a full multiple-video tutorial taking you through the development of one of our demo sites. We also have some specific videos introducing Perch and Perch Runway concepts.","text":"In this section we publish our growing collection of tutorial and technique videos. If you are interested in short videos explaining single Perch concepts check out techniques. The Swift Migrations video tutorial is a full multiple-video tutorial taking you through the development of one of our demo sites. We also have some specific videos introducing Perch and Perch Runway concepts.","type":"video"},{"title":"<cms:content id=\"heading\">","permalink":"https://docs.grabaperch.com/search/templates/result_page/","id":"search.templates.result_page","excerpt":"<!-- <cms:content id=\"content\"> -->","text":"<!-- <cms:content id=\"content\"> -->","type":"search"},{"title":"Overview Videos","permalink":"https://docs.grabaperch.com/video/perch2/overviews/","id":"video.perch2.overviews","excerpt":"<div class=\"callout success\">\n  <h5>Perch and Runway 3 Users</h5>\n  <p>These videos are for version 2, an outdated version of Perch. You can view the new Perch 3 version of the <a href=\"/video/getting-started/\">Swift Migrations tutorial</a>.</p>\n</div>","text":"<div class=\"callout success\">\n  <h5>Perch and Runway 3 Users</h5>\n  <p>These videos are for version 2, an outdated version of Perch. You can view the new Perch 3 version of the <a href=\"/video/getting-started/\">Swift Migrations tutorial</a>.</p>\n</div>","type":"video"},{"title":"Perch Runway","permalink":"https://docs.grabaperch.com/video/perch2/perch-runway/","id":"video.perch2.perch-runway","excerpt":"<div class=\"callout success\">\n  <h5>Perch and Runway 3 Users</h5>\n  <p>These videos are for version 2, an outdated version of Perch. You can view the new Perch 3 version of the <a href=\"/video/getting-started/\">Swift Migrations tutorial</a>.</p>\n</div>","text":"<div class=\"callout success\">\n  <h5>Perch and Runway 3 Users</h5>\n  <p>These videos are for version 2, an outdated version of Perch. You can view the new Perch 3 version of the <a href=\"/video/getting-started/\">Swift Migrations tutorial</a>.</p>\n</div>","type":"video"},{"title":"Swift Migrations Tutorial","permalink":"https://docs.grabaperch.com/video/perch2/swift-migrations/","id":"video.perch2.swift-migrations","excerpt":"<div class=\"callout success\">\n  <h5>Perch and Runway 3 Users</h5>\n  <p>These videos are for version 2, an outdated version of Perch. You can view the new Perch 3 version of the <a href=\"/video/getting-started/\">Swift Migrations tutorial</a>.</p>\n</div>","text":"<div class=\"callout success\">\n  <h5>Perch and Runway 3 Users</h5>\n  <p>These videos are for version 2, an outdated version of Perch. You can view the new Perch 3 version of the <a href=\"/video/getting-started/\">Swift Migrations tutorial</a>.</p>\n</div>","type":"video"},{"title":"Techniques","permalink":"https://docs.grabaperch.com/video/perch2/techniques/","id":"video.perch2.techniques","excerpt":"<div class=\"callout success\">\n  <h5>Perch and Runway 3 Users</h5>\n  <p>These videos are for version 2, an outdated version of Perch. You can view the new Perch 3 version of the <a href=\"/video/getting-started/\">Swift Migrations tutorial</a>.</p>\n</div>","text":"<div class=\"callout success\">\n  <h5>Perch and Runway 3 Users</h5>\n  <p>These videos are for version 2, an outdated version of Perch. You can view the new Perch 3 version of the <a href=\"/video/getting-started/\">Swift Migrations tutorial</a>.</p>\n</div>","type":"video"},{"title":"Adding Help","permalink":"https://docs.grabaperch.com/video/v/adding-help/","id":"video.v.adding-help","excerpt":"We often hear from Perchers about how, when using Perch, they really cut down the amount of time they need to spend training clients on how to use the CMS. And a great way to cut that time down further is to offer help and tips right within the CMS.","text":"## Adding Help to the Perch Admin\n\nWe often hear from Perchers about how, when using Perch, they really cut down the amount of time they need to spend training clients on how to use the CMS. And a great way to cut that time down further is to offer help and tips right within the CMS.\n\nThere are a couple of ways that you can add help to your templates in Perch. Firstly, you can add a help block to the top of a template with the `<perch:help>` tag.\n\nAdd an opening and closing `<perch:help></perch:help>` tag and then inside the tags add any help you like. That can include HTML content, images and we’ve even seen people add a little video.\n\nYou can also add inline hints, by using the help attribute on a template. Add the help attribute with a value of any tip for editing that specific field. This will show up as a tip in the template.\n\nAdding help can really give clients confidence in editing their own content, and in the future if they need to get someone else to edit the content rather than the person you trained, they will be able to use al the tips to get up to speed. It’s a simple thing but really helps your client to benefit from the structured content approach of Perch.","type":"video"},{"title":"Add Perch to a Page","permalink":"https://docs.grabaperch.com/video/v/add-perch-to-a-page/","id":"video.v.add-perch-to-a-page","excerpt":"Perch is different to many content management systems as you don't need to turn your whole site into a theme to start using Perch.","text":"## Add Perch to a Page\n\nPerch is different to many content management systems as you don't need to turn your whole site into a theme to start using Perch.\n\nStart by adding the Perch runtime include to an existing page.\n\nNow add a Perch Region, enclosed in PHP tags. The name you give your region should identify it in the Control Panel.\n\nSave the page and reload it in your browser. Reloading the page allows Perch to pick it up.\n\nNow go to the Control Panel and your Region should display as 'New\" with the name that you chose. Click on it and you will be asked to choose a template.\n\nIf this is your first time using Perch then the templates in the list are our default ones, just to get started. Choose the Text Block template to get started. This will display an editor using Markdown for formatting. Add some content, save and go back to your site. Reload and the content will appear.\n\nFor very simple content on a tiny site, this might be all you need to do. Add a few Regions, pick a standard template, and you or your client can update the content.","type":"video"},{"title":"Adding Blog Posts to the hompage","permalink":"https://docs.grabaperch.com/video/v/adding-blog-posts-to-the-homepage/","id":"video.v.adding-blog-posts-to-the-homepage","excerpt":"The final piece of our homepage content management is the display of blog posts on the homepage. Now that we have set up a blog, adding this listing is easy.","text":"## Video Transcript\n\nThe final piece of our homepage content management is the display of blog posts on the homepage. Now that we have set up a blog, adding this listing is easy.\n\nTo do it we use perch_blog_custom and this function works in a very similar way to the perch_content_custom already used on the homepage to display testimonials. In general our official apps have a custom function and this is what you can use to do more precise filtering and display of data than offered by the standard functions.\n\nFor our homepage posts we want to display a maximum of three most recent posts using a different template to the standard listing template.\n\nFirst create a copy of `post_in_list.html` as `homepage_post_in_list.html` and update it to display the markup and blog tags that you want to show here.\n\nNow go to your homepage file, delete the placeholder blog posts and add the function `perch_blog_custom` passing in an array just as we did with the testimonials. In this case we sort by postDateTime descending (so most recent first) pass in the template and set a count of 3 to return no more than three posts.\n\n```php\n<?php\nperch_blog_custom(array(\n  'sort'=>'postDateTime',\n  'sort-order'=>'DESC',\n  'template'=>'blog/homepage_post_in_list.html',\n  'count'=>3\n)); ?>\n```\n\nSave your page and refresh and the posts will appear. You can pass other arguments into the array – for example only showing one category of the blog here.","type":"video"},{"title":"Adding Your Own Design to the Blog","permalink":"https://docs.grabaperch.com/video/v/adding-your-own-design-to-the-blog/","id":"video.v.adding-your-own-design-to-the-blog","excerpt":"With the blog installed and a few posts in place we can start to make it look like our design. We have some static designs for the blog all ready to use.","text":"## Video Transcript\n\nWith the blog installed and a few posts in place we can start to make it look like our design. We have some static designs for the blog all ready to use.\n\nLet’s first deal with the pages themselves. The Perch /blog folder contains example pages:\n\n* *index.php* – the blog main page\n* *archive.php* – a multifunctional archive page\n* *post.php* – the page on which a post displays\n* *authors.php* – an example authors listing\n* *section.php* – a section page\n* *sections.php* – sections listing page\n\nI’m only interested in the first three as my site does not have an author listing and I am not using sections. I start with the blog/index.php and copy over the bits of my design that surround the listing. The only bits of this example page you need to leave in place is the call to perch_blog_recent_posts as this displays the blog posts.\n\nIf you want an archive then you should leave the call to an archive from the sidebar. I just want a list of categories that have posts.\n\nYou can mix in Perch Content tags as well, I have added the Contact shared region in the footer and a Masthead Region.\n\nThe listing looks a bit different as we haven’t looked at the templates yet that control the markup around that listing, however after adding all of the mark-up our blog is already looking like our site.\n\nWe can do the same with post.php here make sure you keep the PHP in the title as this will put the title of your blog post here using the perch_blog_post_field function.\n\n```php\n<?php perch_blog_post_field(perch_get('s'), 'postTitle'); ?> \n```\n\nYou will want to keep the set of functions that display the blog post on the page, in the example files they are inside a div with a class of post. You can of course change any of the markup here just leave the functions intact.\n\n```php\n<?php perch_blog_post(perch_get('s')); ?>\n\n<?php perch_blog_author_for_post(perch_get('s')); ?>\n                  \n<div class=\"meta\">\n  <div class=\"cats\">\n    <?php perch_blog_post_categories(perch_get('s')); ?>\n  </div>\n  <div class=\"tags\">\n    <?php perch_blog_post_tags(perch_get('s')); ?>\n  </div>\n</div>\n                  \n<?php perch_blog_post_comments(perch_get('s'), array(\n  'count'=>10\n)); ?>\n <?php perch_blog_post_comment_form(perch_get('s')); ?>\n ```\n\nThen we can update archive.php, here we need to keep the blog of code that creates different types of archives. This is quite a long chunk of code, it is commented if you want to see what it is doing – all of the functions used are documented in the Blog documentation.\n\nYou should now be able to click around your blog and see that it is pretty much like the rest of the site.\n\nIn the next video we will edit our blog templates to add the final touches to the design.","type":"video"},{"title":"Create a Blog RSS Feed","permalink":"https://docs.grabaperch.com/video/v/create-a-blog-rss-feed/","id":"video.v.create-a-blog-rss-feed","excerpt":"In the blog example files in a file named rss.php – this is a sample RSS feed that you can use for your blog.","text":"## Video Transcript\n\nIn the blog example files in a file named rss.php – this is a sample RSS feed that you can use for your blog.\n\nYou will need to update the static text in the file in order to make it correct for your blog. The RSS feed uses perch_blog_custom passing in the template `rss_post.html` which you can find in the templates folder.\n\nYou can update this template to create the feed you want to offer.\n\nIf you want to display the full post in your feed change the tag that pulls in the excerpt to instead display postDescHTML.\n\nYou should now be able to go to your feed to view the posts, and can also add a link to the feed into the head of your pages, or even as a link on the page, in order that people can find and add it to their reader.\n\nAs this video has shown it is possible to use Perch to generate any kind of text based content, your templates don’t need to contain html they could be XML, json or anything else that you need.","type":"video"},{"title":"Creating a Perch Template","permalink":"https://docs.grabaperch.com/video/v/creating-a-perch-template/","id":"video.v.creating-a-perch-template","excerpt":"To get the most out of Perch you will soon want to create your own templates. In this video we will have a look at some of the basic concepts.","text":"## Creating a Perch Template\n\nTo get the most out of Perch you will soon want to create your own templates. In this video we will have a look at some of the basic concepts.\n\nAny HTML file that you save into `perch/templates/content` is made available when setting up a Region in Perch.\n\nI am building a site using a free theme from Start Bootstrap. At the bottom of each page is a set of social media links. I want the content admin to be able to add their own urls, but to keep control of the markup around them as it uses special classes.\n\nCopy the entire block of markup into a new file, save it into `perch/templates/content` as social.html.\n\nThe value of the `href` for each link is the hash symbol currently, we want to use a Perch tag to allow the admin to add their own link. The first is for Twitter, we add:\n\n    <perch:content id=\"twitter\" type=\"text\" label=\"Twitter link\">`\n\nDo the same for Facebook, editing the id and label:\n\n    <perch:content id=\"Facebook\" type=\"text\" label=\"Facebook link\">`\n\nAnd the same for GitHub.\n\n    <perch:content id=\"github\" type=\"text\" label=\"GitHub link\">`\n\nSave the template. Replace the content that is now part of a template with a Perch Region.\n\nReload the page. In the Perch Control Panel find your new region and select the social template. You can now edit your social URLs, save them and see them live on a page.","type":"video"},{"title":"Creating a Contact Details Template","permalink":"https://docs.grabaperch.com/video/v/creating-a-contact-details-template/","id":"video.v.creating-a-contact-details-template","excerpt":"We’ve created a simple template already in an earlier tutorial. This time we’re going to create a more complex template, for the contact details on the site.","text":"## Video Transcript\n\nWe’ve created a simple template already in an earlier tutorial. This time we’re going to create a more complex template, for the contact details on the site.\n\nThe page I am working on is `contact.php` and I’ve already added the Perch include to this page.\n\nFind the area of the page that displays the contact details next to the map and copy this markup into a new file, saving it as `perch/templates/content.contact.html`\n\nWe can now add Perch template fields for each part of the address and contact information. I’m starting with the company name in the heading section, and on the next line that is repeated as part of the address. We can use a little trick here to save our editor needing to enter the company name twice.\n\nThe second time the company name appears, use the same ID that you used for the first company name field. Now the editor will only see one company field but the information will appear in both places.\n\nMuch of my address is required, however some addresses need two lines and some one for the main street address. I am wrapping the second address field in perch:if exists tags so that if it is not present we don’t get an empty paragraph element.\n\nWhen adding the email address I use the same reusing the id trick as I did with the company name, to add the address to the mailto and also display it on the page.\n\nWith my template complete, I can add a Perch Region to the page, reload the page go to admin and complete my contact information to then see it appear on the contact page.","type":"video"},{"title":"Creating a Template","permalink":"https://docs.grabaperch.com/video/v/creating-a-template/","id":"video.v.creating-a-template","excerpt":"In the last video we saw how easy it was to edit content on a Perch site using the default templates. However the power of Perch comes when you start to create your own templates with the exact mark-up needed in your site.","text":"## Video Transcript\n\nIn the last video we saw how easy it was to edit content on a Perch site using the default templates. However the power of Perch comes when you start to create your own templates with the exact mark-up needed in your site.\n\nTo demonstrate this we’ll create the slide area at the top of the homepage.\n\nThis uses some JavaScript to switch between the different panels however if we look at the source we can see that each slide is there marked up in the source.\n\nWe have a choice here, we could make this a multiple item region in Perch and allow editors to enter as many slides as they like – however this design doesn’t really scale to doing that so in this instance we will create three Perch Regions for the three editable areas, ensuring that the content editors don’t go crazy adding new sections. We’ll be converting repeated content in a later video though.\n\nEven though we are going to have three regions, the actual template will be the same for all three, so we’ll create that first.\n\nCopy out of one of the slides the mark-up and content so we know what we need in that template.\n\nPaste it into a new html file and save that file into perch/templates/content as home-slide.html.\n\nWe now add Perch Template tags, as described in the Perch documentation, to make the various parts of this template editable.\n\nFor the heading I use the text type that will create a single line text entry field. I am adding some help using the help attribute so that editors know what this content is used for.\n\nThe sub heading is also a single line text type.\n\nI have an image on my slides so I use the image template tag. I am also setting a width and height and the crop attribute to true so that the image will be resized and cropped. I then add a tag with type text for the alt text of this image.\n\nFinally, I use a text area type for the body of the slide. As you can see I am choosing to use Textile as the formatting language and the MarkItUp Editor here. It is worth remembering that if you use Textile or Markdown, paragraphs will be wrapped in a paragraph element. I am removing the tags from the template so I don’t end up with double ones!\n\nSave the file – that’s your template done.\n\nGo back to your page and select the content inside each slide, deleting it and replacing it with a Perch Region.\n\nReload the page and go back to Perch admin. Select each of the new regions in turn and choose your new home-slide template, and add the content.\n\nYour homepage now has simple, content managed slides.","type":"video"},{"title":"Creating Pages","permalink":"https://docs.grabaperch.com/video/v/creating-pages/","id":"video.v.creating-pages","excerpt":"In our simple site I have decided that editors won’t be able to add new pages to the main navigation, however one place they would like to be able to create new pages as they require them is inside the about section. In this video I will create my main about page, and then create a Master Page from which other Pages in the About section can be created.","text":"## Video Transcript\n\nIn our simple site I have decided that editors won’t be able to add new pages to the main navigation, however one place they would like to be able to create new pages as they require them is inside the about section. In this video I will create my main about page, and then create a Master Page from which other Pages in the About section can be created.\n\nI have saved my about.html HTML page into a folder `/about` as `/about/index.php` and have included Perch on the page – making sure the path to Perch is correct now we are in a subfolder, and added two Perch Regions.\n\nOne is for the masthead area, I’ve created a new Perch Template for this that lets the editor add the heading and content as I want to control the mark-up here.\n\nThe second region is for the main body of the Page and for this I’m just using the default Perch textarea template. I have already added some content to the page in Perch.\n\nThe design allows for subpages in this section, so let’s set this up.\n\nThe first thing I need to do is create a Master Page. This is a special kind of full page template which new pages will be based on. We can use our `about/index.php` as a basis of this.\n\nSave `about/index.php` into: `/perch/templates/pages` as `about.php`\n\nYou will see that inside `/perch/templates/pages` there is already a default.php example – this is a simple example Master Page. Open it up as we can copy the relevant tags from it.\n\nFirstly you will see that the runtime include looks a bit different. This is because we don’t know necessarily what our path from root will be when creating a new page so this adds the include from the Server Document Root. Edit your about.php include to use this.\n\nI then replace the word “About” in the title tag with a function that will ensure my new pages get the title given to them by the editor.\n\n```php\n<?php perch_pages_title(); ?>\n```\n\nFinally I need to be able to navigate to these new pages and to do this I need to replace the Navigation with the Perch Navigation function.\n\n```php\n<?php perch_pages_navigation(array(  \n    'from-path' => '/about',  \n    'levels'    => 1));  \n?>\n```\n\nWe are working here on a copy of our original about/index.php page – we will want the Navigation to display there as well so add it to that page now too.\n\nFinally we need to make the about section of the site writable by the webserver – this will depend on your hosting configuration but the setting you use for the resources folder in Perch should work.\nNow log into Perch admin and select the Master Pages link, here we can set up our master page.\n\nGive it a title that will display in the listing of available pages.\nThe Copy Region Options setting lets you choose a page in your site where the regions will be copied from. This means that when your editor creates a new page they won’t have to decide what type of content template to use. The regions will already be set up for them and they can just add content. In our case we want to use about/index.php\n\nThe next setting lets you choose whether the reference this template (meaning that any changes to the template will be updated on any pages created from it) or copy the template (changes to the template will NOT be reflected on created pages). Generally I want to reference the template so I can keep all pages consistent.\n\nSave the template settings and go back to the main page listing.\nI can now add subpages of the about page. They will have the same regions as the about/index.php page that I copied.\n\nIf we go back to the site, we can see the new pages appearing in the navigation.","type":"video"},{"title":"Drafts and Preview","permalink":"https://docs.grabaperch.com/video/v/drafts-and-preview/","id":"video.v.drafts-and-preview","excerpt":"When editing content in Perch you can save a Region as a Draft and Preview it before making the content live.","text":"## Drafts and Preview\n\nWhen editing content in Perch you can save a Region as a Draft and Preview it before making the content live. \n\nEdit some content and then, before saving, check the Save as Draft checkbox.\n\nInstead of immediately updating the site the content will be saved as a draft.\n\nA bar at the top will warn you that you are in a draft and give you a button to preview the content. To make the content live just uncheck the Save as Draft button the next time you save the page.","type":"video"},{"title":"A Contact Form","permalink":"https://docs.grabaperch.com/video/v/a-contact-form/","id":"video.v.a-contact-form","excerpt":"The final part of our contact page is a form. We can use Perch to manage this form.","text":"The final part of our contact page is a form. We can use Perch to manage this form.\n\nTo process forms in Perch you need to install the free forms add-on. Download this now from the add ons section of the Perch site and unzip the archive.\n\nPlace the perch_forms folder into `perch/addons/apps`\n\nOpen `perch/config/apps.php` and add a line to this file to include the app runtime. This is how you install all Perch official apps. Next time you log into the Perch admin Perch will create the tables that this app needs. You will also get a new option - Forms.\n\nThe display of a form is just like any other content template in Perch, so let's create that template.\n\nCopy the form HTML from contact.php and create a new template `perch/templates/content/contactform.html`\n\nEdit this template to use perch:form tags and regular perch content for the various fields.\n\nAt the bottom of the form add perch content for the success message - this will only be shown if the form is successfully completed but this will show up in admin to be edited.\n\n Go back to contact.php, delete the form placeholder content and add a Perch Region.\n\nReload the page in the browser to see the form disappear and then reload your Perch admin. Select the new Region and choose your contact form template.\n\nYou can now add content for the heading and success message.\n\nSave the region and go back to your page - the form has now appeared. Complete all of the fields and send the form, you should see your success message.\n\nNow go back to admin and click the Forms option. Your form will now display here. You can view individual responses and also download data as a csv. \n\nIf you wish to have form responses sent via email then set this up in the form options.\n\nIn the next video I will show you how to add error messaging to a form.","type":"video"},{"title":"Editing the Blog Templates","permalink":"https://docs.grabaperch.com/video/v/editing-the-blog-templates/","id":"video.v.editing-the-blog-templates","excerpt":"To add the finishing touches to our blog we need to edit the templates. As with anything in Perch the output HTML is down to you. When editing templates for any official app you should start by making a copy of the app default templates and placing them into your perch/templates folder. Perch uses the default templates but if there is a template of the same filename in your folder it will use that one first.","text":"## Video Transcript\n\nTo add the finishing touches to our blog we need to edit the templates. As with anything in Perch the output HTML is down to you. When editing templates for any official app you should start by making a copy of the app default templates and placing them into your perch/templates folder. Perch uses the default templates but if there is a template of the same filename in your folder it will use that one first.\n\nBy copying your templates rather than editing the default ones directly, we won’t overwrite your changes when you upgrade.\n\nSo copy the folder `perch/addons/apps/perch_blog/templates/blog` to `perch/templates/blog`\n\nAnother concept to understand about app templates is that every app has a Master Template. This tends to be the one for the detail page of the app. In the case of blog this is the template that displays an individual post – post.html. Any fields that you want available to other views – such as the listing – must appear in this template. As this is the template that generates the admin view and therefore the fields the editor completes.\n\nAs post.html is the master template we will start by editing it.\n\nYou can add or remove any markup here and also add additional fields.\n\nIn our design we use the excerpt as an intro to the post. In the default templates however excerpt does not appear on the detail page, it’s only used for listings. You can see it is down at the bottom of the template outside of the HTML markup and has an attribute suppress=“true”. The suppress attribute is how you add additional fields to your Master Template for the editor to complete without them displaying in that view on the website.\n\nWe want to display our excerpt so I move it into place and remove the suppress attribute.\n\nI’m removing the image field as we aren’t using it in this design. The second field down the bottom would create a cropped version for the listing – again if you need multiple image sizes they all need to be listed in this template.\n\nAt the bottom of the page things look pretty good. My name is displayed there as part of the author credits section, I don’t want that in this design so I need to switch to my post.php page and remove the function that calls that in.\n\nYou can also see on post.php the functions that add the comments listing and form to the post. If you don’t want comments at all you could remove these. We do have comments so I need to update the comments template so that is looks like our design.\n\nThe comments template is comment.html\n\nComments are really just like any repeating content in Perch. If you look at the very top of the template there is a section wrapped in perch:before tags – this will output before the comments are displayed, at the bottom the content with perch:after tags will display after the final comment.\n\nFinally we edit the listing template which is post-in-list.html this should be looking familiar to you now – once again we have perch before and after sections enclosing the list.\n\nYou can tweak and adjust your templates until you are happy with the output.\n\nWith your templates updated the blog is ready to go.","type":"video"},{"title":"Filtering a Region","permalink":"https://docs.grabaperch.com/video/v/filtering-a-region/","id":"video.v.filtering-a-region","excerpt":"Here we have a multi-item region of people, listed by name, gender and age. What if wanted to filter the list to only show some of the items? We can do that with `perch_content_custom()`.","text":"## Video Transcript\n\nHere we have a multi-item region of people, listed by name, gender and age. What if wanted to filter the list to only show some of the items? We can do that with `perch_content_custom()`.\n\nAt the moment the region is being displayed using `perch_content()`. We need to change that to `perch_content_custom()` and then specify some options.\n\nWe want to use a filter, so we set the filter option and set the ID of the field from the template that we want to filter by.\n\n```php\n<?php perch_content_custom('People', array(\n    'filter' => 'gender', \n    'match' => 'eq',\n    'value' => 'Female',\n)); ?>\n```\n\nWe need to set match for the type of comparison we want, for example equal to or greater than or not equal to. Here we’ll use eq for equal to.\n\nWe then set the value to be the value we want to compare against. So over all, we’re setting gender is equal to female.\n\nRefresh the page, and the list is filtered to females only.\n\nWhat if I wanted to filter by an age range? I could set filter to age as that’s the ID from the template. For match, I set between and the value is the range I want the age to be between.\n\n```php\n<?php perch_content_custom('People', array(\n    'filter' => 'age', \n    'match' => 'between',\n    'value' => '20,30',\n)); ?>\n```\n\nIf I refresh, it shows only the people who are between 20 and 30. But we know that James is 20, yet he’s not on the list. That’s because between matches between the values, not including the values as either end. For that, we need eqbetween for equal or between.\n\n```php\n<?php perch_content_custom('People', array(\n    'filter' => 'age', \n    'match' => 'eqbetween',\n    'value' => '20,30',\n)); ?>\n```\n\nJames then appears on the list.","type":"video"},{"title":"Form Error Messages","permalink":"https://docs.grabaperch.com/video/v/form-error-messages/","id":"video.v.form-error-messages","excerpt":"In the last video in the series we created a form with a success message. However if you try to submit the form without completing all of the required fields it just reloads, which isn’t very friendly. We can use Perch forms to create clear error states for our form.","text":"## Video Transcript\n\nIn the last video in the series we created a form with a success message. However if you try to submit the form without completing all of the required fields it just reloads, which isn’t very friendly. We can use Perch forms to create clear error states for our form.\n\nI have an HTML document showing my desired error states, if a field isn’t correctly completed I will show a message and also add a class to the container for that label and field pair to highlight it.\n\nGo back to the template contact form.html. I am first going to add my messages if a field isn’t completed. I add an error at the top of the form which will display if any error state happens. I am using a template tag here so the content editor can create their own message.\n\nBelow each field I add a perch:error tag wrapping my message. The attributes for perch:error are ‘for’ with a value of the id of the required field and type – in this case required.\n\nSave the template and then go into the admin and hit save on the content of the contact form region to update the template cache. Now go to your form and try and submit it without completing it – the errors will show.\n\nI can also add a second tag for the email field to detect when it has been completed but not with a valid email address. In this case I set the value of type to ‘format’.\n\nSo that deals with the error messaging, what about the extra class? Well, you can use these perch:error tags anywhere and multiple times if you want to, so I simply use them to wrap the class for each field.\n\nSubmit the form in admin to update the cache then try and submit the form empty or with some missing field and you will see the class is now being added highlighting the problem area.","type":"video"},{"title":"Google Maps","permalink":"https://docs.grabaperch.com/video/v/google-maps/","id":"video.v.google-maps","excerpt":"On our contact page we have a Google map showing the company location. Perch makes it very easy to add a Google map to your site.","text":"## Video Transcript\n\nOn our contact page we have a Google map showing the company location. Perch makes it very easy to add a Google map to your site.\n\nAdd a new Perch region to the page, replacing the map content. Give this region a name of map. Save the file.\n\nPerch ships with a default map.html template – we’ll need to edit that slightly so that the end results looks like the map on the design. Open perch/templates/content/map.html\n\nI am removing the h2, giving the div a class of frame as my CSS can then style it like the original iframe and setting the width of the map tag to 560×300 pixels. The map perch content tag is what will give editors an interface to browse for and set a map location. Save this file.\n\nRefresh the contact page in your browser.\n\nReload the Perch admin to see the new Map region.\n\nClick on this and select the Map template.\n\nYou can now browse and choose a location on the map. Save this form.\n\nReturn to your site and the map will appear. The map also uses the static map API so if a visitor does not have JavaScript they will still get a static map tile set at the correct location.","type":"video"},{"title":"Gallery: a simple portfolio","permalink":"https://docs.grabaperch.com/video/v/gallery-a-simple-portfolio/","id":"video.v.gallery-a-simple-portfolio","excerpt":"The site HTML5 UP! has some lovely templates free for your use – I thought these might make great starting points to show how easy it is to combine Perch and modern development methods. In this video I’m using the Parallelism portfolio template.","text":"## Video Transcript\n\nThe site HTML5 UP! has some lovely templates free for your use – I thought these might make great starting points to show how easy it is to combine Perch and modern development methods. In this video I’m using the Parallelism portfolio template.\n\nMy starting point is a new install of Perch. I have dropped the base files for Parallelism into the root of my site. I have changed the index.html page in the download to index.php and included the perch runtime include at the top of that page.\n\nI have also installed The free Gallery add-on into Perch, by downloading the add-on and dropping perch_gallery into perch/add-ons/apps.\n\nThen logging into admin so the app will auto install.\n\nI am adding an album named Portfolio, this will store my images.\n\nIn my code I need to open perch/config/apps.php and add a line to include the Gallery runtime.\n\n```php\n    include(PERCH_PATH.'/addons/apps/perch_gallery/runtime.php’);\n```\n\nThis makes gallery functions available.\n\nLike all of our apps, Gallery has default templates inside the app folder, to make your own templates you need to copy these templates to perch/templates/gallery and either edit the default templates there or add your own.\n\nThe master template for all gallery images is image.html if you open this you will see that by default it creates three sizes of image for each uploaded image plus a description.\n\nFor our portfolio we need a large image and the thumb plus a title for the image. So I can edit this template to make that so. We want to constrain images by height as the script that the Parallelism demo uses will work out the widths.\n\nSo I am setting a height, but not cropping the image, the width will be set in proportion to my chosen height. The key attribute is important – this is how you will identify the correct size of image in your templates. Each image listed has the same value for id, so that the editor only needs to upload the image once and all required sizes will be created.\n\nNow I need to make the template that will display the thumbs. If I look at the index.php, the file I downloaded from x each item in the gallery is an article element, with an h2, then a link to the full image and the thumbnail.\n\nEach article has the width of the thumbnail as a data-src attribute.\n\n```html\n    <article class=\"item thumb\" data-width=\"282\"> <h2>You really got me</h2> <a href=\"images/fulls/01.jpg\"><img src=\"images/thumbs/01.jpg\" alt=\"\"></a> </article>\n```\n\nI have created a new file in perch/templates/gallery called album-image.html and pasted in the section of markup relating to an individual image. Then updated that to use the images I specified in my image.html template.\n\nI am using a special value of `small-w` in the data-width attribute as this will get me the all important small image width.\n\nFinally I am editing the template album.html to match the markup used in the small description box in the design.\n\nNow I just need to use Gallery functions to display our gallery.\n\nIn index,php delete all of the thumbnails and replace the with a call to perch_gallery_album_images, we are hardcoding the album slug – portfolio – and in the array passing in our custom template.\n\n```php\n    <?php perch_gallery_album_images(\"portfolio\", array( 'template'=>'album-image.html' )); ?>\n```\n\nIn the title and description area use the function perch_gallery_album_details, again passing in the album slug. We have just modified the default template for album details, album.html but you can pass in a custom template if you like.\n\n```php\n    <?php perch_gallery_album_details('portfolio'); ?>\n```\n\nSave the page and now all you need do is upload some images. Perch will use the image filename as the image alt when you use the batch uploader – that I am also using as a title in my template. You can edit each image to give them a better title.","type":"video"},{"title":"Installing Perch","permalink":"https://docs.grabaperch.com/video/v/installing-perch/","id":"video.v.installing-perch","excerpt":"If you haven’t done so already log into your account on the Perch website and download the Perch files. While you are there, enter your live domain plus development and staging domains where this license will be run.","text":"## Video Transcript\n\nIf you haven’t done so already log into your account on the Perch website and download the Perch files. While you are there, enter your live domain plus development and staging domains where this license will be run.\n\nUnzip the downloaded file.\n\nInside you will find a perch folder and two PHP pages – example.php and search.php.\n\nCopy the perch folder into the root of your website.\n\nVisit /perch through your browser, you should be presented with the Setup page which will ask you for some details.\n\nThe details you complete under Main Administrator Account will be how you log into Perch.\n\nUnder Database Settings you need to add your database information, if you ran the Server Compatibility Test use the details that got you a pass there.\n\nClick Next. For the majority of people you will get a screen with some code that you need to copy into your `perch/config/config.php` file. If Perch is able to write to that file we will do this step for you so if you move onto the next step without having to do this.\n\nIf you need to copy the code, do this now and then click “I’ve done that”. You have now installed Perch.\n\nFollow the steps to delete the Setup folder and make the `perch/resources` folder writable. Then log into Perch using the details you set as the Main Administrator account.","type":"video"},{"title":"Installing the Blog App","permalink":"https://docs.grabaperch.com/video/v/installing-the-blog-app/","id":"video.v.installing-the-blog-app","excerpt":"In a previous video we installed the Forms App, our Swift website also has a blog and for this we will use the official Perch Blog App.","text":"## Video Transcript\n\nIn a previous video we installed the Forms App, our Swift website also has a blog and for this we will use the official Perch Blog App.\n\nDownload the latest version of the Blog add-on, unzip the archive and place the folder perch_blog into perch/addons/apps.\n\nAlso in the archive is a folder named blog – this contains some example pages. Drop this into the root of your site.\n\nOpen perch/config/apps.php and add a line to include the blog runtime. Save this file and log into Perch, blog will automatically install. Add a couple of categories and posts then visit /blog in your browser. You should see your posts displayed. As we haven’t added any style yet they will look very plain but you should be able to confirm that the blog is working.\n\nWatch the next video and start to customize your blog.","type":"video"},{"title":"Installing the Redactor Editor","permalink":"https://docs.grabaperch.com/video/v/installing-the-redactor-editor/","id":"video.v.installing-the-redactor-editor","excerpt":"Perch ships with an editor called MarkItUp. This is a great editor if you like to edit your content with Markdown, Textile or in HTML.","text":"## Installing Editor Plugins\n\nPerch ships with an editor called MarkItUp. This is a great editor if you like to edit your content with Markdown, Textile or in HTML.\n\nIf you would prefer to use a WYSIWYG editor plugin however, you can, and we have even prepackaged some of your favourites for you - Redactor, CKEditor and TinyMCE. In this video I’ll show you how to install and use Redactor to edit content on your site.\n\nDownload the Redactor Editor from the Perch Addons Directory, unzip the download and place the redactor folder into `perch/addons/plugins/editors`.\n\nYou can then use Redactor on any textarea field, in Perch Content or in an App like blog.\n\nIf we take the default text block template in Perch Content you would change this to use Redactor by setting html to true and adding editor=“redactor”. It’s important to remember that these WYSIWYG editors insert HTML, which is why you need html=“true” on the tag.\n\nNow when you go to administer a page that uses this template you will have the Redactor editor in place.\n\nRedactor supports the special image attributes that are specified in the documentation and can also upload files to resource buckets.","type":"video"},{"title":"Introduction to Blocks","permalink":"https://docs.grabaperch.com/video/v/introduction-to-blocks/","id":"video.v.introduction-to-blocks","excerpt":"In this video we will take a look at how to use Perch Blocks. This is a feature of Perch and Perch Runway introduced in version 2.8 so make sure you are running 2.8 or greater before getting started.","text":"## Video Transcript\n\nIn this video we will take a look at how to use Perch Blocks. This is a feature of Perch and Perch Runway introduced in version 2.8 so make sure you are running 2.8 or greater before getting started.\n\nSometimes it is useful to allow content editors to select from a range of templates. Creating a free form content area that can contain text, a media object with image and text alongside, a video, or a three column structure. It is here that Blocks come in useful.\n\nI’ve got a page here based on the Skeleton CSS framework. This is a lightweight framework that has a grid system much like the one in Bootstrap that requires adding divs and classes to your markup.\n\nWithout Blocks I would need to be proscriptive about which layout the editor could use where. With Blocks I can give them the choice. Let’s take a look.\n\nI want my freeform area to be where I have the three rows of placeholder content, so I copy that out and paste it into a Perch template named freeform.html - that’s saved into `perch/templates/content` as usual. I now need to turn each area into an editable template.\n\nI’m just adding a textarea here, if I wanted to be sure they added a heading I could add separate tags for heading and content.\n\nSo this is just creating a template as usual, however if we selected this template the editor would have to fill in all of the fields, in the order they are in the template.\n\nSo we can now make this a Blocks template.\n\nWe wrap the whole template in a `<perch:blocks>` tag pair. \n\nThen each of these rows I will make a Block, by wrapping them in `perch:blocks` tag pairs.\n\nEach perch:block tag pair requires two attributes ‘type’ which is an ID like reference to allow you to refer to the block in templates.\n\nI’m going to add this tp my three blocks now.\n\nI also need to add a label - this should be a short, human readable label for the block. It will show up in admin.\n\nI save my template then go back to the original page and add a Perch Region.\n\nI reload the page in the browser then go into the Perch Admin and choose my new template.\n\nYou can see we now have a region with no available fields to fill in but a selection of the three labels we gave our blocks.\n\nI can now build up the page.\n\nI’m first going to add a 2 column block.\n\nIf I save this and go back to the page you can see how this looks.\n\nYou can drag Blocks to reorder them.\n\nThis is a single item region but you can use Blocks within Multiple Item Regions. You can also use Blocks in Perch Add-ons - such as Blog.","type":"video"},{"title":"Introduction to the Swift Site","permalink":"https://docs.grabaperch.com/video/v/introduction-to-the-swift-site/","id":"video.v.introduction-to-the-swift-site","excerpt":"This set of video tutorials will take you through the process of implementing Perch on a website. The website you will be building is one of our [demo sites](https://grabaperch.com/demo) – Swift Migrations – this fictional company website was designed for us by [Laura Kalbag](http://laurakalbag.com/) and at the beginning of our tutorial is simply a set of HTML pages such as you might have on an existing static website or that you have developed during the design process for a site.","text":"## Video Transcript\n\nThis set of video tutorials will take you through the process of implementing Perch on a website. The website you will be building is one of our [demo sites](https://grabaperch.com/demo) – Swift Migrations – this fictional company website was designed for us by [Laura Kalbag](http://laurakalbag.com/) and at the beginning of our tutorial is simply a set of HTML pages such as you might have on an existing static website or that you have developed during the design process for a site.\n\nYou can [download these files](https://static.grabaperch.com/docs/swiftstartingpoint.zip), just as they are here and follow along with the tutorial. The completed – Perched – pages and templates are also available to download on [GitHub](https://github.com/PerchCMS/perchdemo-swift). Of course you can also sign up for a demo to see it in action.\n\nTo get started place the HTML files into the root of your website – either on a local or live test server. Then move onto the next video where we will install Perch.\n\n[Starting Point Files](https://static.grabaperch.com/docs/swiftstartingpoint.zip)","type":"video"},{"title":"Multiple Item Regions","permalink":"https://docs.grabaperch.com/video/v/multiple-item-regions/","id":"video.v.multiple-item-regions","excerpt":"A Perch Region can be set to allow the template to be repeated multiple times. We do this by going to Region Options and selecting Allow multiple items.","text":"## Multiple Item Regions\n\nA Perch Region can be set to allow the template to be repeated multiple times. We do this by going to Region Options and selecting Allow multiple items.\n\nYou can then go back to your region, and you will be able to add multiple items.\n\nIf you set `title` on an element in the template and then go and edit the Region you’ll find that the content entered into that title will be the text you click on when editing in list detail mode.\n\nIf you do not want to edit in list detail mode go into Region Options and check Edit all on one page. In this case each item in the template will appear one under the other.\n\nIt really depends on the amount of content you are adding which editing method will be most useful. So you can do this on a Region basis to reflect whatever is best for your content.","type":"video"},{"title":"Page Attributes","permalink":"https://docs.grabaperch.com/video/v/page-attributes/","id":"video.v.page-attributes","excerpt":"Introduced in Perch 2.4, Page Attributes are a method of adding to the detail about a Page that can be edited by Content Editors. Typically this includes meta information but this powerful feature can be used for much more.","text":"## Video Transcript\n\nIntroduced in Perch 2.4, Page Attributes are a method of adding to the detail about a Page that can be edited by Content Editors. Typically this includes meta information but this powerful feature can be used for much more.\n\nIncluded with the Perch download are some default templates in perch/templates/pages/attributes. If you don’t have this folder because you upgraded to 2.4, just copy it out of the download.\n\nYou can select which attribute template that a page uses in the Page Options – by default Perch will use default.html if it is present. The default.html template includes seo.html a template for adding SEO meta information.\n\nYou or your content editor can add the meta information to the page by clicking Page Details and completing the form.\n\nTo display the Page Attributes in the head of your site you need to add a new function. Open the page on which the attributes will be displayed and add the perch_pages_attributes() function inside the head HTML tags, specifying the seo.html template.\n\n```php\n    <?php     \n    perch_page_attributes(array(        \n      'template' => 'seo.html'    \n    )); \n    ?> \n```\n\nSave, then reload the page in the browser and View Source to check that the meta information is now in place.\n\nYou’ll notice that we specifically included the seo.html template here rather than default.html which includes it. That’s because you might include multiple templates in default.html to be used in different places.\n\nSometimes you might want to add a class to the body element on your page, in order to then target this in your CSS to make your page look different. This is a great use of Page Attributes.\n\nTo add this to our site I am creating a new template in perch/pages/templates/attributes and naming it body_attributes.html this template includes a select list of classes.\n\n```html\n    <perch:pages id=\"bodyclass\" label=\"Page Theme\" help=\"Select the theme for this page\" type=\"select\" options=\"red,green,blue\" divider-before=\"Design choices\">\n```\n\nYou can see that I’m using a divider-before here to separate the design elements from SEO visually in the admin – you can see this when I reload the page. You can use all of the usual Perch Template tags and attributes in Page Attributes.\n\nI then include this template in default.html so that it can be edited on all pages using this template.\n\n```html\n    <perch:template path=\"pages/attributes/body_attributes.html\"> \n```\n\nOn my page, I’m adding this to the body element using the perch_page_attribute function – this just returns a single attribute from the template. This means that I can add to this template in the future – perhaps to add an image to certain pages – without accidentally pulling out a bunch of HTML into the class attribute on the body!\n\n```php\n    <body class=\"<?php\n      perch_page_attribute('bodyclass', array(\n        'template' => 'body_attributes.html'\n      ));\n    ?>\">\n```\n\nAdding images to Navigation is a common request, and Page Attributes makes this really simple as any Page Attributes are just available to your navigation. Perhaps I have a site map and think it would be nice to include an image and description of each page.\n\nI add to my body_attributes template Perch Template tags for these fields, and then go and complete these for the about page.\n\nMy site map page already includes the navigation, using a template named sitemap.html which I have saved into the perch/templates/navigation folder. I can now just add my image and description that that template, save and refresh the site map page and the about image and description I added now shows up.\n\nThis is a quick rundown of how you can use Page Attributes, a nice way to keep things that relate to a page all in one place for Editors.","type":"video"},{"title":"Order Fields and Using Template Dividers","permalink":"https://docs.grabaperch.com/video/v/order-fields-and-using-template-dividers/","id":"video.v.order-fields-and-using-template-dividers","excerpt":"We think that a little bit of thought when designing editing forms makes a huge difference to the experience of content editors using a CMS. So we try and build in lots of ways for you to customise your forms and make them as easy as possible to use.","text":"## Ordering Fields and Adding Dividers\n\nWe think that a little bit of thought when designing editing forms makes a huge difference to the experience of content editors using a CMS. So we try and build in lots of ways for you to customise your forms and make them as easy as possible to use.\n\nOne way in which we do that is by allowing you to change the order in which fields display. By default they will display as they are ordered in the template source - but that often isn’t the most natural way for the edit form to display them.\n\nAdd an order attribute, with a value that is the order you would like the fields to display and in admin the fields will respect that order. This value makes no difference in terms of how the form is displayed on your site.\n\nAnother nice tip is to use template dividers to break up long forms.\n\nUse `divider-before` with a value of the content to display in the divider bar and the divider will appear before that content.\n\nYou can do the same thing with divider-after and the bar will appear after that field.\n\nOnce again this has no effect on your website, we’re just tailoring the admin experience here.","type":"video"},{"title":"Editing Content","permalink":"https://docs.grabaperch.com/video/v/editing-content/","id":"video.v.editing-content","excerpt":"With Perch installed we can start to edit our first content.","text":"## Video Transcript\n\nWith Perch installed we can start to edit our first content.\n\nI am going to make the introductory paragraph on the homepage editable.\n\nOur site is currently .html pages I’m going to change them to .php as Perch requires pages to parse as PHP. If you want to keep a .html extension then look in the Perch documentation for our information about file extensions as on most servers it is possible to ask the server to parse .html pages as PHP too.\n\nI can now link in the Perch runtime, using a PHP include. If you change the name of the Perch folder make sure this include is correct.\n\nI then delete the homepage content and replace it with a Perch Region.\n\nSave the page and reload it in your browser – the content will disappear.\n\nNow log into the Perch admin.\n\nYou should find that your Home Page is now listed with the Intro Region that we just added flagged as New.\n\nGo through to that Region and select the Text Block template. This is one of the predefined templates that Perch ships with – we’ll take a look at creating our own templates in the next video.\n\nClick Submit and you can now add some content. The default template uses the MarkItUp Editor and Textile for formatting, you can instead choose to use a WYSIWYG editor or Markdown or enter HTML if you like.\n\nSave the region, switch back to your site and reload and your content should be there. That’s all there is to getting started with Perch.","type":"video"},{"title":"Perch 2.3 and Repeaters","permalink":"https://docs.grabaperch.com/video/v/perch-23-repeaters/","id":"video.v.perch-23-repeaters","excerpt":"Repeaters are a new feature in Perch 2.3. Here is a quick overview of how to use them.","text":"## Video Transcript\n\nRepeaters are a new feature in Perch 2.3. Here is a quick overview of how to use them.\n\nMy fictional migrations company have decided to bundle up their services as packages. So they will have essentially a menu of services. I have created a template with a title and description and added a couple of packages.\n\nNow I need to add the individual items within the package. I could ask my client to add the items using Textile or add a WYSWYG editor but it is likely the content would get a bit messy. So I will use the new repeaters feature so they can add a number of items inside each repeated region.\n\nI edit my template. I will put the items in a list so I add my opening and closing list items.\n\nRepeaters are like a mini template inside a multiple item region, so I can wrap these in perch:before and after tags.\n\nI then use the new repeater tag giving it an ID and label.\n\nInside the repeater I add my mark-up for the repeated area.\n\nSaving the template I can go back to edit my packages. Adding the items one at a time. I can reorder them using drag and drop.\n\nGoing back to my page I now have a multiple item region containing repeated content.\n\nThat’s repeaters!","type":"video"},{"title":"Perch Assets","permalink":"https://docs.grabaperch.com/video/v/perch-assets/","id":"video.v.perch-assets","excerpt":"When you use an image template tag type in Perch this allows your content editors to upload an image, or select from an image already uploaded.","text":"## The Assets Panel\n\nWhen you use an image template tag type in Perch this allows your content editors to upload an image, or select from an image already uploaded.\n\nIn the Perch Admin, when an image tag is used you get the option to select or upload an image. Clicking this opens the Assets Panel.\n\nYou can choose an existing image. Or you can click add asset. Choosing to add an assets opens a drop zone where you can drag and drop images. Or click to browse your filesystem to find your images.\n\nYou can search Assets, if I search for balloons I get those images which have titles or tags of balloons.\n\nAll of my images are in the default resource bucket. If you have other resource buckets configured you can use those. If you are using Perch Runway then the bucket the images are stored in could be on your Cloud Storage if you have configured Runway to use that.\n\nOnce you have selected an asset you can add it to your content. Perch will create any required sizes, as specified in the template for you if they do not already exist.\n\nYou can also manage Assets from the main Assets link. This would be a good place to add assets ready for your client to use.\n\nAs with the Assets Panel you have a drop zone here to upload images.\n\nIf we upload some images, I’ll be able to show you a neat feature. I’ve uploaded my images and these images I have tagged with a title and some Tags in the graphics programme - in my case Adobe Lightroom - I edited the originals in. If we go to edit the image you can see that Perch has pulled in the title and tags. This is really helpful if you have a lot of photography to deal with. Remember that the Asset search uses these titles and tags, so your client will be able to find them easily.\n\nA final note on images and resource cleanup. Perch cleans up images that are not used in content (including your revision history). So once an image falls out of that history stack we’ll clean it up.\n\nTo stop that happening check “mark as library asset” then the original asset will never be removed by cleanup and be available for your client to use when they need to. Handy for a library of blog images and so on.","type":"video"},{"title":"Perch Editing Shortcuts","permalink":"https://docs.grabaperch.com/video/v/perch-editing-shortcuts/","id":"video.v.perch-editing-shortcuts","excerpt":"In the Perch Control Panel are a couple of neat editing shortcuts. The first is that if you are editing a content block and use Command-s on a Mac or Ctrl-s on Windows, we will save the content region.","text":"## Editing Shortcuts\n\nIn the Perch Control Panel are a couple of neat editing shortcuts. The first is that if you are editing a content block and use Command-s on a Mac or Ctrl-s on Windows, we will save the content region.\n\nThis makes editing content in the CMS work in the same way as editing content in a text editor.\n\nThe second feature needs to be enabled if you want to use it. It's called Ctrl-E to Edit. Go to settings and check the Enable Ctrl-E to Edit checkbox. Save the Page.\n\nNow add `<?php perch_get_javascript(); ?>` to the bottom of a page that contains Perch Content.\n\nVisit that page in a browser and use the Ctrl-E keyboard shortcut.\n\nA new window will open allowing you to jump straight into the content for that page.","type":"video"},{"title":"Portfolio with Categories","permalink":"https://docs.grabaperch.com/video/v/portfolio-with-categories/","id":"video.v.portfolio-with-categories","excerpt":"Our starting point for this tutorial is a new install of Perch with the default Quill Feather. You could just as easily be starting out with your own design here however.","text":"## Video Transcript\n\nOur starting point for this tutorial is a new install of Perch with the default Quill Feather. You could just as easily be starting out with your own design here however.\n\nOn my homepage I’ve just added a couple of Perch Regions for the heading and welcome text.\nPortfolio List Detail\n\nI’m starting out by creating a list/detail setup in Perch. I’m using the two page setup which is detailed in our Solutions section of the docs if you want a more complete explanation of how this works. I’ll go through it quickly here.\n\nI’ve created two pages in the root of my site: portfolio.php and detail.php. I have also created some templates.\nportfolio_item.html\n\nIn `perch/templates/content` I have a template named `portfolio_item.html`. This template is the detail page for my portfolio items and also acts as the Master Template for this setup. Anything I want to display either on the listing page or detail page needs to be in this template.\n\nYou can see I have a title, description and a repeater containing project images. I also have used the slug field to create a slug out of the title, and an image for the listing thumbnail. These are set to suppress=“true” in order that they don’t display on the detail page but can be used in my listing.\nportfolio_listing.html\n\nThe other template I have will create a listing of portfolio items. This template creates a list and displays the title and listing image along with a link to detail.php with the slug on the query string.\n\n### /portfolio.php\n\nOn portfolio.php we need to do two things. We need to create the portfolio region so that it will appear in admin and you can start to add portfolio items, then we also display the listing.\n\nTo create the region use perch_content_create().\n\n```php\n    <?php\n    perch_content_create('Portfolio', array(\n      'template'   => 'portfolio_item.html',\n      'multiple'    => true,\n      'edit-mode' => 'listdetail',\n    ));\n    ?>\n```\n\nThen to display the listing use perch_content_custom().\n\n```php \n    <?php\n    perch_content_custom('Portfolio', array(\n      'template' => 'portfolio_listing.html',\n    ));\n    ?>\n```\n\nReload your page and go to the Perch Admin. On the Portfolio Page you should find your Portfolio Region all ready and set up with the portfolio_item.html template. Add a couple of test items.\n\n### /detail.php\n\nNow open your detail.php page. All we need to do here is display a single item filtered on the item slug. Again we use perch_content_custom to do this.\n\n```php\n    <?php\n    perch_content_custom('Portfolio', array(\n      'page' => '/portfolio.php',\n      'template' => 'portfolio_item.html',\n      'filter' => 'slug',\n      'match' => 'eq',\n      'value' => perch_get('s'),\n      'count' => 1,\n    ));\n    ?>\n```\n\n**TIP:** I have added a line to my .htaccess file in order that I can have “friendly URLs”. This means that rather than have ?s=slug on the query string I can do /detail/slug.\n\nYou should now see your items listed on portfolio.php and be able to click through to individual items.\n\nFrom this point it is really simple to start filtering your portfolio by category.\n\n### Categories\n\nPerch 2.6 introduces a new centralised categories app as part of Core. Categories belong to a set, and you can have multiple sets. For my portfolio I would like to filter projects by sector – healthcare, retail etc. and also by type of work – design, development and so on.\n\nIn Perch Admin I start by creating a set called Sector, and one called Work.\n\nI can then add some categories to both. These are now available to anything in Perch. When I add categories and sets you can see that I choose a template. The template defines what is displayed if you display the category directly, and also controls the fields available to edit when editing a category. So if you want, for example, categories to have an image you just add it to the template.\nAdding categories to portfolio items\n\nNow that I have categories I can add these to my portfolio_item.html template.\n\nWe use `<perch:categories></perch:categories>` tags to add the set, and inside this tag pair is the markup used to display the categories in this template.\n\n```html\n    <perch:categories id=\"Work\" label=\"Type of work\" set=\"work\" required>\n      <perch:before>\n        <h3>Our work on this project</h3>\n        <ul class=\"tags\">\n      </perch:before>\n          <li><a href=\"/category/<perch:category id=\"catPath\">\"><perch:category id=\"catTitle\"></a></li>\n      <perch:after>\n        </ul>\n      </perch:after>\n    </perch:categories>\n    <perch:categories id=\"Sector\" label=\"Sector\" set=\"sectors\" required>\n      <perch:before>\n        <h3>Sectors</h3>\n        <ul class=\"tags\">\n      </perch:before>\n          <li><a href=\"/category/<perch:category id=\"catPath\">\"><perch:category id=\"catTitle\"></a></li>\n      <perch:after>\n        </ul>\n      </perch:after>\n    </perch:categories>\n```\n\nI’ve added one for set “work” and one for “sector”.\n\nWith this added I can go back into admin and my portfolio items have the ability to select categories. Add some categories and look at the item and these are now displayed.\nFiltering the portfolio by category\n\nAs you can see I have made the categories links, because I’d like to be able to filter the portfolio by category.\n\nThe final element to this tutorial is to create a category page that will either show the full listing of categories or a single category with portfolio items that are part of that category.\ncategory.php\n\nOn category.php we can see our full list of categories by simply adding the function `perch_categories()`.\n\n```php\n    <?php\n    perch_categories();\n    ?>\n```\n\nIf you add this to the page and load the page in your browser you will see your list of categories using the template we assigned when creating them.\n\nTo view a single category based on a category slug passed on the query string we can alter our code to check for a value and retrieve the category based on it:\n\n```php\n    <?php\n    if (perch_get('cat')) {\n      perch_category(perch_get('cat'));\n    } else {\n      perch_categories();\n    }\n    ?>\n```\n\nI’m using the perch_category function here as I am dealing with a single category passing in the category slug. This will display the category using the default template which expects a list of categories. However I can make a new template for displaying a single category with different markup.\n\nIn perch/templates/categories I copy category.html and save it as category_single.html, updating the markup.\n\n```html\n    <h1><perch:category id=\"catTitle\" type=\"smarttext\" label=\"Title\" required></h1>\n    <perch:category id=\"desc\" type=\"textarea\" label=\"Description\" editor=\"markitup\" markdown size=\"s\">\n```\n\nBack on category.php I then pass in the template name as part of an options array.\n\n```php\n<?php\n    if (perch_get('cat')) {\n      perch_category(perch_get('cat'),array(\n        'template'=>'category_single.html'\n      ));\n    } else {\n      perch_categories();\n    }\n    ?>\n```\n\nThe final thing I want to do is, when on a single category page, display the projects within that category. I do this with perch_content_custom() passing in the category name. So my complete PHP block on this page is as follows:\n\n```php\n    <?php    \n    if (perch_get('cat')) {\n      perch_category(perch_get('cat'),array(\n        'template'=>'category_single.html'\n    ));\n    perch_content_custom('Portfolio', array(\n      'template' => 'portfolio_listing.html',\n      'page'=>'/portfolio.php',\n      'category' => perch_get('cat'),\n    ));\n    } else {\n      perch_categories();\n    }\n    ?>\n```\n\nAnd that’s categories. Categories is centralised and available in the API so as we roll out updates to the first party apps you’ll find that you can use the categories functionality to create sets of categories you can use through Perch – in Perch Content but also in the Blog App or Events.","type":"video"},{"title":"Perch Template Tags","permalink":"https://docs.grabaperch.com/video/v/perch-template-tags/","id":"video.v.perch-template-tags","excerpt":"The Perch template engine is a custom engine designed to make writing templates simple and approachable to anyone who already knows HTML.","text":"## Perch Template Tags\n\nThe Perch template engine is a custom engine designed to make writing templates simple and approachable to anyone who already knows HTML.\n\nA template tag is made up of a tag and attributes.\n\nFor example, in the default text.html template we can see a single tag. A `perch:content` tag.\n\nTags are namespaced according to the app they are part of. If you are creating a template in the `perch/templates/content` folder then you would use `perch:content` tags.\n\nIf you are creating a template for the blog app in `perch/templates/blog` you would start your tags `perch:blog`.\n\nThe attributes - whether in content or in an app are the same.\n\nThere are three required attributes. These are:\n\n* id - an identifier for the tag\n* type - what type of field will be shown in admin\n* label - the label shown in admin\n\nThere are other attributes, some of which only apply to certain tags. If you look at the documentation for individual tags you can see which attributes are available to you. \n\nYou most quote the attributes on Perch tags and also self close the tags with a forward slash - as you would do if writing xml or XHTML.","type":"video"},{"title":"Region Options","permalink":"https://docs.grabaperch.com/video/v/region-options/","id":"video.v.region-options","excerpt":"After setting up a Region in Perch there are a number of options that you can configure. To get to these options choose your Region in the Control Panel and click Region Options.","text":"## Region Options\n\nAfter setting up a Region in Perch there are a number of options that you can configure. To get to these options choose your Region in the Control Panel and click Region Options.\n\nThe first option is to Share across all pages, this is the option that makes a region a shared region.\n\nThe second is to Allow Multiple Items. If you check this then the editor can add multiple items into this region and the template will be repeated for each one.\n\nWhen creating a template you can set `title` on any tag. The content of this tag will then be displayed as a title in the Perch Admin. If you want to set multiple titles Perch will show them all, you can put a character here to link the titles - for example a space if you were using first name and last name.\n\nIf you do not want the region to show up in search results uncheck this field. We also have a field you can enter a specific URL for use of this content in search results. We'll cover this in a later video so unless you know you need this option leave it blank.\n\nAny Roles you have set up will appear in the list under Permissions, at installation Perch creates and Admin and Editor group and that is what you can see here.\n\nFinally you have the option to change a template. This should be used with great care as if your new templates does not have the same fields as the old one you will lose that data. However it can be useful - for example if you copied a template and changed the markup, and want some regions to use the new one.","type":"video"},{"title":"Repeaters","permalink":"https://docs.grabaperch.com/video/v/repeaters/","id":"video.v.repeaters","excerpt":"Sometimes you might need a repeating area within your repeating region.","text":"## Video Transcript\n\nSometimes you might need a repeating area within your repeating region.\n\nIn my case I want to make it easy for content editors to add a list of links for each employee – perhaps their personal blog or Twitter account.\n\nI can use a Perch Repeater tag to do this.\n\nA Repeater acts like a mini template, you can use any Perch tags you like inside the Repeater and they will create a way for editors to save an add another item inside a Repeating Region. They work best for small amounts of content – list items, table rows or adding multiple images.\n\nI am using `perch:before` and `perch:after` tags to wrap my links.\n\nA repeater needs an ID and a Label, you can also set how many items may be added.\n\nSave the template and go to the page in admin and you can start adding links to the repeater.","type":"video"},{"title":"Repeating Regions","permalink":"https://docs.grabaperch.com/video/v/repeating-regions/","id":"video.v.repeating-regions","excerpt":"Our team page displays all of the company employees. As the business owner might want to add, remove or reorder the employees at any time we can use a Repeating Region in Perch to give them this flexibility.","text":"## Video Transcript\n\nOur team page displays all of the company employees. As the business owner might want to add, remove or reorder the employees at any time we can use a Repeating Region in Perch to give them this flexibility.\n\nSetting up this page should be a familiar job if you have been following these tutorials. We create a template for an employee with all of the fields required and the mark-up that we need.\n\nWe then add a Perch Region to the page and select our new template.\n\nSelect the Allow Multiple items checkbox when selecting your template. You can also change this setting in Region Options at any time.\n\nI can then start editing.\n\nAdd your first employee. Click Save and Add Another and you can add another one.\n\nIf you have quite a large template this ‘all on one page’ view can get a bit tiresome. If you go into Region Options you can deselect ‘Edit All on One Page’ and instead you can edit in a list detail mode.\n\nWhile we are in Region Options here is a little tip. In your template, if you give more than one item a title attribute, these will get joined together when displayed in admin. It’s particularly useful in the list detail mode and when reordering. If you don’t set a title your items will be named Item 1, Item 2 and so on.\n\nIn my case I have given name and family name, so a space is the best thing to separate them.\n\nSave this and instead of the long page of content you can view, edit and add items individually.\n\nView your site and see the items appearing.\n\nAdd your first employee. Click Save and Add Another and you can add another one. If you look at your page you will see these displayed.\n\nIf you have quite a large template this ‘all on one page’ view can get a bit tiresome. If you go into Region Options you can deselect ‘Edit All on One Page’ and instead you can edit in a list detail mode. Save this and instead of the long page of content you can view, edit and add items individually.","type":"video"},{"title":"Perch Conditionals - Every","permalink":"https://docs.grabaperch.com/video/v/perch-conditionals-every/","id":"video.v.perch-conditionals-every","excerpt":"Sometimes when you are repeating items in a multiple item region you need to insert some markup between every so many items. This pattern happens a lot in the Bootstrap framework, where you need to add row divs around rows of items.","text":"## Perch Conditionals - Every\n\nSometimes when you are repeating items in a multiple item region you need to insert some markup between every so many items. This pattern happens a lot in the Bootstrap framework, where you need to add row divs around rows of items.\n\nPerch makes this easy to do with perch before and after and the perch:every tag.\n\nI am using a Bootstrap template here for a simple Gallery, and if you look at the source you can see the markup for each image is the same but each set of three items is wrapped in a row.\n\nI have already created a Perch template for my Gallery Items. So lets add in the extra markup needed to get the Bootstrap formatting to work for us.\n\nTo start with we need to open up the first row, we can just do this using `perch:before`. This markup will output before all of the items in the multiple item region.\n\n    <perch:before>\n      <div class=“row”>\n    </perch:before>\n\nThen after the image markup use perch:after to close the div. This will output after all of the items have looped through.\n\n    <perch:after>\n      </div>\n    </perch:after>\n\nSo this will wrap our entire region. We now need to get the closing div and opening new row in every third item.\n\nAfter the image markup, but before `perch:after` add `perch:every` tags, with a count of 3, inside the tags add your closing `div` and opening `div` with a class of `row`.\n\n    <perch:every count=\"3\">\n      </div>\n      <div class=“row”>\n    </perch:every>\n\nI can now delete all of the place holding markup up my page and add a Perch Region. Then reload the page.\n\nI go into the perch control panel and find my region, choosing the Gallery image template and allowing multiple items. I add four images.\n\nBack on my page I reload and my images have appeared. If I view source you can se the correct markup around the images.","type":"video"},{"title":"Reuse an ID in a Template","permalink":"https://docs.grabaperch.com/video/v/reuse-an-id-in-a-template/","id":"video.v.reuse-an-id-in-a-template","excerpt":"In HTMl pages it isn’t valid to use an ID more than once. In Perch templates however you can do this. By reusing an ID, you can reuse the content entered for that ID and your content editor won’t have to add it twice.","text":"## Reusing an ID in a Template\n\nIn HTMl pages it isn’t valid to use an ID more than once. In Perch templates however you can do this. By reusing an ID, you can reuse the content entered for that ID and your content editor won’t have to add it twice.\n\nA really simple example of this is where you want to output an email address that is also clickable and opens up the visitor’s email client.\n\nTo do this the HTML you need to have is this.\n\n    <a href=\"mailto:hello@grabaperch.com\">hello@grabaperch.com</a>\n\nIn a Perch template, you would add the first email field.\n\n    <a href=\"mailto:<perch:content type=\"text\" id=\"email\" label=\"Email address\">\">hello@grabaperch.com</a>\n\nThen just copy and paste the Perch template tag into the place where the email address is repeated for display on the page.\n\nNow in the Perch Control Panel we can see that we only have to enter the email address once, on the page however we have our email address displayed but also clickable with the mailto link.\n\nRepeating the ID becomes very useful when dealing with images in Perch. Sometimes you will want to add an image and get Perch to generate multiple sizes. Perhaps to show a thumbnail on the listing and click through to a larger image.\n\nYou can reuse an image ID, and then add different height, width and crop attributes. Perch will then only ask for the image to be selected or uploaded once - but will generate images for each size you need.\n\nRemember to add `suppress` to any image you don’t want to immediately display on that page.","type":"video"},{"title":"Running the Compatibility Test","permalink":"https://docs.grabaperch.com/video/v/running-the-compatibility-test/","id":"video.v.running-the-compatibility-test","excerpt":"If you are thinking of buying Perch for your next project, the first thing you need to do is check that Perch can run on the hosting you are using.","text":"## Video Transcript\n\nIf you are thinking of buying Perch for your next project, the first thing you need to do is check that Perch can run on the hosting you are using.\n\nPerch has very simple requirements of PHP 5.3 or up and MySQL and can run on servers running Unix for example Linux and Mac OSX as well as on Windows. However before purchasing you can check that your server supports it.\n\nVisit the requirements page at [http://grabaperch.com/requirements](http://grabaperch.com/requirements) and download the Server Compatibility Test Suite.\n\nUnzip the download and upload the perchtest folder to your server (or if you are working locally place it into your site as I am doing here.)\n\nThen visit /perchtest in a web browser. So if your domain was www.example.com you would visit http://www.example.com/perchtest\n\nThe script will immediately check that your server can run PHP and that you have PHP version 5.2.\n\nIf the PHP checks go through you will see step 1 of the test which asks you for your database connection details.\n\nServer is prefilled to localhost. All localhost means is that the database is on the same server as your site. If you are working on your own computer as I am this will be correct. For many hosts this will also be correct, but some larger hosts have separate servers they use for databases. If this is the case you will have been given an IP address or URL for the database server by your host. Replace the default localhost with this.\n\nDatabase is the name of the database that you will use to install Perch and store the content for your site. Perch needs this to be created before installation.\n\nYour hosting account may already come with a database, in which case the name of this database should be in your account details. Often you are able to create databases using your control panel – for example in CPanel there is a page to create new databases and assign users. Put the name of your database in here, you will also have a username and password to access the database which you will need to enter.\n\nSubmit this form. Behind the scenes Perch will attempt to connect to your database, create a table, insert, update and delete some data. It will also check that PHP sessions are working correctly. If all these things check out you will get a PASS from the test and you will be able to run Perch on this server. Make a note of the details you used to successfully connect to the database as you will need these when you come to install Perch.\n\nIf you see the screen here it means we have checked your installation environment and you should have a great experience installing and running Perch. You may see one or more of our advisory messages on this screen however and these indicate things you may wish to raise a ticket with your host about.\nNo image resize functionality.\n\nPerch requires PHP modules that enable image resize, these are very common but if you see this message ask your host to enable either GD or ImageMagick.\n\n### No native JSON support.\n\nThis is enabled by default in PHP5.2 so you should have it, without native JSON Perch will work but will be slower so it is worth asking your host to enable it.\n\n### No filter support.\n\nFilter enables better serverside form validation in Perch and you should ask your host to enable it.\n\n### Safe mode may be enabled.\n\nSafe mode is a legacy PHP mode that has been removed from newer PHP versions. You are likely to run into a range of problems using it and we’d recommend turning it off. You sometimes find it is enabled in servers managed via Plesk Control Panel, and you can turn it off in Plesk.\n\nIf the test tells you that your server can’t run Perch or that the test has been unsuccessful, don’t panic. If your server does support PHP5 and MySQL it is most likely that you can run Perch, you may just have to make a support request of your host or check the details you entered.\n\nIf you received a message saying, “Sorry, your server doesn’t run PHP” then you will need to get hosting that does support PHP to run Perch as this is the language it is written in. The good news is that PHP and MySQL hosting is easy to find and inexpensive.\n\nIf you received a message saying, “Perch requires PHP 5.3 or greater.” Your server does have PHP installed but it is probably an old version of PHP5 or even PHP4. Most often hosts are supporting old versions of PHP for customers who have legacy sites and will be able to switch your account to a server running a newer version, if they cannot we’d advise changing hosts as the version of PHP they are running is liable to have security problems being so out of date.\n\nIf you got as far as the database connection page then the errors you see will generally be due to incorrect database details or that the database user does not have enough permissions.\n\n“Please provide a full set of database details” or “Could not connect to the database with the information provided.” means that either your server, database name, username or password was missing or incorrect. Check these with your host.\n\nThe next set of errors are all to do with permissions. The database user that you are using to connect to Perch needs to be able to CREATE, UPDATE and DELETE tables and also INSERT and UPDATE data in the tables. Raise a ticket with your host if you do not know how to give your database user permissions.\n\nErrors we see very rarely are “Perch needs at least MySQL version 4.1 to run.” – Version 4.1 is a very old version at this point, if you see this you will need to speak to your host about upgrading to a newer version of MySQL. Also “PHP Sessions are not functioning as expected.” – on a very few hosts, you need to actively configure PHP sessions. If you see this message ask your host how to configure PHP sessions.\n\nIf you try these steps and are still having problems getting the test to run please raise a support ticket in our support area. We will be happy to help you through the compatibility test even if you have not yet bought Perch. The good news is that once you have this test running successfully you should have no trouble getting Perch installed – just make sure you remember the MySQL connection details that worked!\n\nRemember to re-run the test if you move Perch between servers. If the test runs you should have a straightforward install or migration process.","type":"video"},{"title":"Shared Regions","permalink":"https://docs.grabaperch.com/video/v/shared-regions/","id":"video.v.shared-regions","excerpt":"If you have some content that is repeated across your site then Perch shared content means your editor does not need to enter the same content for every page.","text":"## Video Transcript\n\nIf you have some content that is repeated across your site then Perch shared content means your editor does not need to enter the same content for every page.\n\nThe contact details we created are not only displayed on the contact page, but in the footer of every page. Let’s make these a shared region so that by editing them once they will be displayed everywhere.\nIn the Perch admin select the Contact region from the homepage.\nGo to the options for this region and set share across all pages, then hit save.\n\nThis is now a special shared region within Perch, in the list of content is is displayed separately to indicate to the editor that changing it will change it everywhere it is displayed and not just on the homepage.\n\nLets now add this contact region to another page. In your homepage index.php copy out the Perch tag for the Contact region and paste it into contact/index.php replacing the placeholder contact text in the footer there. Save the page and refresh it and you will see that the shared footer content appears immediately.\n\nA careful use of shared regions can make editing a site far easier for the editors, with less need to duplicate information.","type":"video"},{"title":"Simple URL Rewriting","permalink":"https://docs.grabaperch.com/video/v/simple-url-rewriting/","id":"video.v.simple-url-rewriting","excerpt":"Perch doesn’t assume a lot about your web server, one of the things we don’t do by default is rewrite all of the URLs of your site. This is for a couple of reasons. It means that you can add Perch to an existing site without changing any URLs, it also means that if you are on a server without mod_rewrite Perch will still work.","text":"## Video Transcript\n\nPerch doesn’t assume a lot about your web server, one of the things we don’t do by default is rewrite all of the URLs of your site. This is for a couple of reasons. It means that you can add Perch to an existing site without changing any URLs, it also means that if you are on a server without mod_rewrite Perch will still work.\n\nThat said you can easily rewrite URLs in any way you would like. A common thing people like to do, and something we will do with our Swift website is hide the extension, so instead of visiting contact.php you would visit /contact.\n\nYour server needs to have mod_rewrite enabled to do this.\n\nTo do this create a file called .htaccess in the site root or open one if it is already there.\n\nAdd the following:\n\n```unix\n    # Redirect to PHP if it exists.\n    # e.g. example.com/foo will display the contents of example.com/foo.php\n    RewriteCond %{REQUEST_FILENAME} !-f\n    RewriteCond %{REQUEST_FILENAME} !-d\n    RewriteCond %{REQUEST_FILENAME}.php -f \n    RewriteRule ^(.+)$ $1.php [L,QSA]\n```\n\nYou now need to update any Navigation to output links without the .php on the end, in our case this is the about section navigation which we can find on about/index.php and also the Master Page template perch/templates/pages/about.php\n\nAdd an option of 'hide-extensions' => true to the array.\n\nYou should also update any hardcoded navigation such as the top Nav.\n\nTo rewrite blog URLs to remove the query string we can add the following line to our file:\n\n```unix\n    RewriteRule ^blog/([a-zA-Z0-9-/]+)$ /blog/post.php?s=$1 [L]\n```\n\nSave the file and your post should now be accessible from the new URL. You now need to update your site to make sure that the links point to this new URL.\n\nOn the Settings page in Perch, find ‘Blog post page path’ in the Blog section. Set its value to:\n/blog/{postSlug}\n\nNow, wherever you use `<perch:blog id=\"postURL\">` in your templates, the new URL will be used.\n\nSome additional rules I have added are as follows:\n\n```unix\n    RewriteRule ^blog/([a-zA-Z0-9-/]+)/preview$ /blog/post.php?s=$1&preview=all [L]\n```\n\nThis rewrites the preview URL so that post preview will work once you have rewritten URLs.\n\n```unix\n    RewriteRule ^blog/category/([a-zA-Z0-9-/]+)/page/([0-9]+)/{0,1}$ /blog/archive.php?cat=$1&page=$2 [L]\n    RewriteRule ^blog/category/([a-zA-Z0-9-/]+)$ /blog/archive.php?cat=$1 [L]\n\n    RewriteRule ^blog/date/([a-zA-Z0-9-/]+)/page/([0-9]+)/{0,1}$ /blog/archive.php?year=$1&page=$2 [L]\n    RewriteRule ^blog/date/([a-zA-Z0-9-/]+)$ /blog/archive.php?year=$1 [L]\n\n    RewriteRule ^blog/tag/([a-zA-Z0-9-/]+)/page/([0-9]+)/{0,1}$ /blog/archive.php?tag=$1&page=$2 [L]\n    RewriteRule ^blog/tag/([a-zA-Z0-9-/]+)$ /blog/archive.php?tag=$1 [L]\n```\n\nThese rewrite category, date and tag archives.\n\nIf you rewrite URLs that are used in your templates, for example the category URLs, don’t forget to go and update the links to these.","type":"video"},{"title":"Sorting a Region","permalink":"https://docs.grabaperch.com/video/v/sorting-a-region/","id":"video.v.sorting-a-region","excerpt":"Here we have a multi-item region with people listed by name, gender and age. By default these are listed in the order they are entered. We can, of course, go into the region options and change the sort order to sort by any of the fields in the region. But what if we to set a particular sort order on a particular page?","text":"## Video Transcript\n\nHere we have a multi-item region with people listed by name, gender and age. By default these are listed in the order they are entered. We can, of course, go into the region options and change the sort order to sort by any of the fields in the region. But what if we to set a particular sort order on a particular page?\n\nAt the moment the region is displayed with `perch_content()`. We need to change that to `perch_content_custom()` and set some options.\n\n```php\n    <?php perch_content_custom('People', array(\n    'sort' => 'name',\n    )); ?>\n```\n\nWe need to pick one of the IDs from the template and use that for the sort option. Here, we’re setting name to sort by. Save the change, and you’ll see that the names are now sorted.\n\nWhat if we want to sort by age? That’s easy to. We just set sort to the ID from our template – age.\n\n```php\n    <?php perch_content_custom('People', array(\n    'sort' => 'age',\n    )); ?>\n```\n\nRefresh the page, and you can see that’s not quite what we wanted. It’s sorted by age, but alphabetically rather than numerically. We have another option for that:\n\n```php\n    <?php perch_content_custom('People', array(\n    'sort' => 'age',\n    'sort-type' => 'numeric',\n    )); ?>\n```\n\nRefresh the page, and the names are now sorted by age numerically. What if we want to sort them backwards – oldest to youngest? For that, we need to set sort-order to DESC for ‘descending’.\n\n```php\n    <?php perch_content_custom('People', array(\n    'sort' => 'age',\n    'sort-type' => 'numeric',\n    'sort-order' => 'DESC',\n    )); ?>\n```","type":"video"},{"title":"Pagination","permalink":"https://docs.grabaperch.com/video/v/techniques-pagination/","id":"video.v.techniques-pagination","excerpt":"I have a basic, multiple item region with sixteen items. In the page, it’s just displayed using perch_content(). What I want to do instead of displaying it all as one list is break it down into pages with Previous and Next links. We call this pagination.","text":"## Video Transcript\n\nI have a basic, multiple item region with sixteen items. In the page, it’s just displayed using perch_content(). What I want to do instead of displaying it all as one list is break it down into pages with Previous and Next links. We call this pagination.\n\nIn the documentation there’s a good example of the markup needed to display some simple pagination links. It has tags such as current_page, prev_url, next_url – the sort of things that makes creating pagination links really easy. We can just copy and paste this into our template. I’m going to put it in the `<perch:after>` section of the template.\n\nThen in the page, we need to switch perch_content() to perch_content_custom() and set some options.\n\n```php\n    <?php perch_content_custom('Items', array(\n    'paginate' => true,\n    )); ?>\n```\n\nIf you refresh the page, the list is split by default into 10 item pages, with a Next link to move to the next page.\n\nIf I want to change the number of items that are displayed per page, I can set the count option.\n\n```php\n    <?php perch_content_custom('Items', array(\n    'paginate' => true,\n    'count' => 4,\n    )); ?>\n```","type":"video"},{"title":"Using Layout Variables","permalink":"https://docs.grabaperch.com/video/v/techniques-using-layout-variables/","id":"video.v.techniques-using-layout-variables","excerpt":"Although we think of layouts as keeping things consistent between pages, sharing code across lots of different pages in your site, often pages have small differences between them. Maybe a page needs a particular title, or perhaps some pages need some JavaScript or CSS that other pages don’t use and you want to be able to turn those on and off in the layout, but still share the majority of the code.","text":"## Video Transcript\n\nAlthough we think of layouts as keeping things consistent between pages, sharing code across lots of different pages in your site, often pages have small differences between them. Maybe a page needs a particular title, or perhaps some pages need some JavaScript or CSS that other pages don’t use and you want to be able to turn those on and off in the layout, but still share the majority of the code.\n\nThese little differences can be managed with Layout Variables.\n\nOur page uses a global top and bottom Layout. The top layout currently uses `perch_pages_title()` to output the `<title>` tag with the page title as set within Perch. What if we wanted to be able to set particular values for the page title instead? We could do that with a layout variable.\n\nInstead of `perch_pages_title()` we can replace that with `perch_layout_var('title')`. This will output the value of the title layout variable at this point.\n\nSo how do we set that? When we call our layout, we just need to pass in an array of the variables we want to use in the layout.\n\n```php\n    <?php perch_layout('global.top', array(\n    'title' => 'Hello World',\n    )); ?>\n```\n\nIf you refresh the page, you can see that the title has been set to “Hello World”.","type":"video"},{"title":"Using Layouts","permalink":"https://docs.grabaperch.com/video/v/techniques-using-layouts/","id":"video.v.techniques-using-layouts","excerpt":"Perch is very flexible with how you build your pages. You don’t need to create themes, you can just drop regions into the page to create editable content.","text":"## Video Transcript\n\nPerch is very flexible with how you build your pages. You don’t need to create themes, you can just drop regions into the page to create editable content.\n\nOn many sites it’s useful to have common page elements like headers, footers and sidebars that don’t change between pages. To make them easy to manage, Perch has what we call Layouts.\n\nLayouts live in perch/templates/layouts. By default the folder is empty.\n\nCreate a new file called global.top.php and a second file called global.bottom.php. These can be called anything you like. There’s a guide in the documentation.\n\nIn the top file, I’m going to copy and past the top part of my static page, including all the wrapper DIVs and the start of the HTML page, but not including the Perch runtime. The Perch runtime needs to be in the page, not the layout.\n\nPaste the into the top layout and save, and then do the same for the bottom part of the page into the bottom layout.\n\nThat’s the layout created – now we just need to use it. Create a new page, index.php:\n\n```php\n<?php include('perch/runtime.php');\nperch_layout('global.top');\n\nperch_layout('global.bottom');\n?>\n```\n\nThe page content would go in the middle. Save that and load the page in your browser, and you’ll see that the top and bottom layouts have been added.","type":"video"},{"title":"Template includes and Blocks","permalink":"https://docs.grabaperch.com/video/v/template-includes-and-blocks/","id":"video.v.template-includes-and-blocks","excerpt":"In this video we will take a look at using template includes to tidy up Blocks templates and reuse code.","text":"## Video Transcript\n\nIn this video we will take a look at using template includes to tidy up Blocks templates and reuse code.\n\nIf you are using Blocks you may find that your templates become very large as each perch:block is essentially a sub template.\n\nInstead of having all of the code inside the Blocks template you can use a template include. This means you can reuse the same template inside and outside a Block - really useful if you use the same design patterns around your site.\n\nI have a template here which has three different blocks in it, a two column layout, a media object with image on one side and text on the other, and a call to action.\n\nI can make each of these a template include.\n\nTemplate includes need a path from the root of the templates folder, so if you add your blocks templates to the content folder - in order to be able to use them outside of blocks you’ll seed to start your path with content I’ve then created a blocks folder and then the name of the template.\n\nThat’s all you need to do, you Blocks template will work in the same way but your code is cleaner and those templates are reusable in other blocks templates or just on their own.\n\nYou can also reuse templates in apps. As you probably know - templates for use in content use perch:content template tags and those used in apps use a tag namespace for that app - for example perch:blog.\n\nIf you were creating a blocks template for use in an App but wanted to be able to use your existing content templates then all you ned to is add the rescope attribute to your template include with a value of parent. When used in the Blog App the perch:content tags will be parsed as perch:blog.","type":"video"},{"title":"Template Tag Type Date","permalink":"https://docs.grabaperch.com/video/v/template-tag-type-date/","id":"video.v.template-tag-type-date","excerpt":"In this video we are looking at template tags with a type attribute of date.","text":"## Template Tag Type Date\n\nIn this video we are looking at template tags with a type attribute of date. \n\nUsing a type of date will create a group of select boxes for day, month and year in the admin. This means that the admin can add a date. By default we order the fields day, month, year because Perch is developed by Brits. In the USA it s more natural to order the fields month, day, year and you can do this by using the field order attribute on a date type.\n\nIf you want a field that also allows time to be entered add `time`.\n\nA few browsers now support the native HTML5 controls and will give you a nice date picker. If you know your client uses one of these then add native to your tag.\n\nOnce you have a date you probably don't want to use the default formatting.\n\nPerch supports two methods of formatting dates. The first, uses the PHP date formatting. This works very well across all hosting however it does not support locale settings. So will use English formatting. The [full range of possible values](http://php.net/manual/en/function.date.php) can be found on the PHP.net website.\n\nAdding format=\"D d F y\" will show your date as Sun 04 July 10.\n\nThe second method uses strftime. This does support locales however it does not work reliably across operating systems. In particular some the settings do not work on Windows.\n\nIf you use `format=\"%A, %e %B %Y\"` you get Sunday, 4 July 2010 in English but if your locale on the server is French you would get the date in French.\n\nThe [various values for strftime](http://php.net/manual/en/function.strftime.php) are also on the PHP.net site, along with an explanation of the issues across operating systems.","type":"video"},{"title":"Template Tag Type Image","permalink":"https://docs.grabaperch.com/video/v/template-tag-type-image/","id":"video.v.template-tag-type-image","excerpt":"In this video we will take a look at the Template Tag type of image. Using this type means that your client can upload an image from their own computer and add it to the site.","text":"## Template Tag Type Image\n\n\nIn this video we will take a look at the Template Tag type of image. Using this type means that your client can upload an image from their own computer and add it to the site.\n\nA basic image tag just includes an id, `type=\"image\"` and a label. This will trigger the Assets Pane in Perch and your client will be able to select or upload an image.\n\n    <perch:content id=\"logo\" type=\"image\" label=\"Logo\">\n\nThis would print out the path to the image, not particularly useful! What you are more likely to want to do is to display an image tag, in which case the Perch Template tag that creates the image should be added to the href of your image HTML tag. You can see this in our default image template. We also have an alt attribute with a Perch Text tag, so the content editor can create alt text for the image.\n\nYou probably don’t want editors to upload images at full size, so you can add width and, or height attributes. Perch will then proportionately scale the image if it exceeds those dimensions.\n\nIf you want to force a crop - perhaps to create a thumbnail at a certain size, set crop to true.\n\nYou can use the density attribute to create images for retina displays and also adjust image quality and add sharpening.\n\nAny image manipulation, including resizing, requires that you have either GD or ImageMagick installed on your server. The Diagnostics Report in Perch will warn you if you do not.","type":"video"},{"title":"Template Tag Type Select","permalink":"https://docs.grabaperch.com/video/v/template-tag-type-select/","id":"video.v.template-tag-type-select","excerpt":"Sometimes you might like your client to select from a list of options you have defined. For example, when you have set up a list of available CSS classes that can be applied to an element.","text":"## Template Tag Type Select\n\nSometimes you might like your client to select from a list of options you have defined. For example, when you have set up a list of available CSS classes that can be applied to an element.\n\nIn this case you can use the select template type.\n\nWhen using this type you need to add a list of options using the options attribute on your template tag.\n\n    <perch:content id=\"box_class\" type=\"select\" label=\"Style\" options=\"AM, PM, Full day, Evenings\" allowempty=\"false\" required>\n\nIf you set these up separated with a comma, then the value will be shown in a list in the Control Panel when editing that template. \n\nIf you would like to show something different as the label than for the value separate these with a pipe character. The order is nice label first, then the value written to the template.\n\n    options=\"House|house, Apartment|apartment, Room-share|roomshare\"\n\nBy default one of the options will always be chosen. If you do not want this, wanting to allow the editor to not make a selection, set the allowempty attribute to true.","type":"video"},{"title":"Template Tag Type SmartText","permalink":"https://docs.grabaperch.com/video/v/template-tag-type-smarttext/","id":"video.v.template-tag-type-smarttext","excerpt":"In this video we are looking at template tags with a type attribute of smarttext. This type works in exactly the same way as a regular text field, with one small difference.","text":"## Template Tag Type Smarttext\n\nIn this video we are looking at template tags with a type attribute of smarttext. This type works in exactly the same way as a regular text field, with one small difference.\n\nIf you enter text punctuation characters such as straight double or single quotes, two or three dashes or three consecutive dots these are turned into their typographic equivalents.\n\nI have a template here using smarttext and am going to enter a strange heading using all of these characters. You can see how we end up Unicode characters instead of the text versions.\n\nThis makes the smarttext tag ideal for marking up a heading. Just like text it won't add any additional markup, the only change is to those typographic characters.\n\nIt is worth noting that you need to be serving your pages as UTF-8 to use these characters, [see the documentation](http://docs.grabaperch.com/docs/templates/attributes/smarttext/) for instructions on how to use HTML entities instead.","type":"video"},{"title":"Required Fields and Conditionals","permalink":"https://docs.grabaperch.com/video/v/required-fields-and-conditionals/","id":"video.v.required-fields-and-conditionals","excerpt":"In our home-slide.html I have added the required attribute with a value of true to the heading and body copy. This means the editor must fill these in.","text":"## Video Transcript\n\nIn our home-slide.html I have added the required attribute with a value of true to the heading and body copy. This means the editor must fill these in.\n\nI want to leave it so they can choose to add the subheading, images also cannot be made required as otherwise you would need to upload the image each time. However I don’t want to end up with empty tags if we do not have an image or subheading.\n\nTo solve this issue I use the simple Perch Conditional perch:if, this takes an ID attribute which has the same value of the item you want to check. For the subheading that is an id of subheading and for the image image.\n\nIf I remove the content from my subheading and save the form, then go back to my page and refresh I can see that the subheading is now able to be optional on the page.","type":"video"},{"title":"Template Tag Type Text","permalink":"https://docs.grabaperch.com/video/v/template-tag-type-text/","id":"video.v.template-tag-type-text","excerpt":"In this video we are looking at template tags with a type attribute of text. You can see an example in the default template text.html. While that template just has a single text field in it, more usually fields are grouped along with markup in a larger template, for example as seen in the default article.html template.","text":"## Template Tag Type Text\n\nIn this video we are looking at template tags with a type attribute of text. You can see an example in the default template text.html. While that template just has a single text field in it, more usually fields are grouped along with markup in a larger template, for example as seen in the default article.html template.\n\nText is the simplest content type – it represents a basic line of text, and is edited with a single-line text input.\n\nIf you want to make sure your content editor completes this field set the required attribute to true.\n\nIf you want the value of this field to become the title of the field in the control panel, add `title`.\n\nThe text field is ideal if you are completely controlling the markup around the content, so for example when the editor is adding a heading, a URL, or a line of an address.","type":"video"},{"title":"The Default Templates","permalink":"https://docs.grabaperch.com/video/v/the-default-templates/","id":"video.v.the-default-templates","excerpt":"The default templates in your Perch downloads can be found in `perch/templates/content`. Take a look in this folder and you will see that templates are simply HTML fragments. They include Perch template tags and can also include HTML to markup the content entered in the Perch Admin.","text":"## Perch Default Templates\n\nThe default templates in your Perch downloads can be found in `perch/templates/content`. Take a look in this folder and you will see that templates are simply HTML fragments. They include Perch template tags and can also include HTML to markup the content entered in the Perch Admin.\n\nThe template doesn't just control how the content displays on the page, it also creates the forms used by content editors.\n\nYou can use these templates as is, you can edit them to use the HTML that you need, and you can create your own templates.\n\nSo if we take a look at the `text_block.html` template you can see that we use the textarea Perch template tag, with markdown flagged as true and the MarkItUp editor set as the editor. We've also used a couple of image attributes that will control the size of any image uploaded through MarkItUp.\n\nIf you look at the default template `article.html` you will see a much more complicated template with several Perch Template Tags and HTML markup. We'll cover these different tags in later videos but if you create a Perch Region and select this template you can see how the fields in the template have become the fields available in admin.\n\nIf you wanted to add an additional field to this template, for example the Job Title of the author. You would add it. Then go back to Perch Admin to see it appear.\n\nOne tip for working with templates, changes only happen to the website content if you reserve the content that uses the template. This is because we cache the output at edit time to keep your site nice and fast. So if you change some HTML in a template, go back to admin and hit save on the content before reloading your page to see the change.","type":"video"},{"title":"The Diagnostics Report","permalink":"https://docs.grabaperch.com/video/v/the-diagnostics-report/","id":"video.v.the-diagnostics-report","excerpt":"If you ask for support from us at Perch we'll quite likely ask for your Diagnostics Report. This Report tells you - and us - lots of helpful things about how Perch is running.","text":"## The Diagnostics Report\n\nIf you ask for support from us at Perch we'll quite likely ask for your Diagnostics Report. This Report tells you - and us - lots of helpful things about how Perch is running.\n\nWhen logged into the Control Panel as an admin you will fid the report under Settings.\n\nThe Health Check at the top tells you some important things about your environment. A key thing we flag here is old PHP versions and also if your server has no way to resize and process images.\n\nThen follows the Summary Information. It's a good idea to include this section with any support request to our forum. In most cases it will get you help much faster.\n\nA useful thing to look at here is on the first line - that's the version of Perch you are running.\n\nThe third line tells you the Apps you have installed.\n\nYou can also see here some information about file paths and also resource limits on your server. \n\nThe button at the bottom allows you to view the full extended report. This gives a lot more information and we might ask you for that if we are troubleshooting a difficult problem.","type":"video"},{"title":"Template Tag Type Textarea","permalink":"https://docs.grabaperch.com/video/v/template-tag-type-textarea/","id":"video.v.template-tag-type-textarea","excerpt":"In this video we are looking at template tags with a type attribute of textarea. You can see an example in the default Perch template `text_block.html`. While that template just has a single textarea field in it, more usually fields are grouped along with markup in a larger template, for example as seen in the default article.html template.","text":"## Template Tag Type Textarea\n\nIn this video we are looking at template tags with a type attribute of textarea. You can see an example in the default Perch template `text_block.html`. While that template just has a single textarea field in it, more usually fields are grouped along with markup in a larger template, for example as seen in the default article.html template.\n\nThe texture type will create a textarea field in admin, to allow the editor to input larger amounts of content. This may also include them adding markup directly as HTML, as Markdown or Textile. You can also use a variety of WYSIWYG and other code editors on a textarea.\n\nIf you want to make sure your content editor completes this field set the required attribute to true.\n\nIf you want the value of this field to become the title of the field in the control panel, add `title`.\n\nTo change the size of a textarea in admin use the attribute size. For example if I set this field to have a size of xs, and reload the editor in the admin I get a much smaller content entry field.\n\nThe default Perch Templates use Markdown for formatting and the MarkItUp editor. I can remove the editor by removing the editor attribute.\n\nOr I can put the editor back and switch to editing html with it by removing `markdown` and adding `html`.\n\nThe count attribute, if set to words or chars will show a count in the admin as the editor enters content.\n\nThere are some optional image attributes which only apply if you are using the default MarkItUp editor, Redactor or CKEditor. These editors support uploading images directly from within the editor.\n\nSo you can add `imagewidth=\"400\"` for example and if the editor uploads an image larger than 400 pixels in width it will be scaled down. You can see the possible attributes [in the documentation](http://docs.grabaperch.com/docs/templates/attributes/type/textarea/).","type":"video"},{"title":"Undo and the History Stack","permalink":"https://docs.grabaperch.com/video/v/undo-and-the-history-stack/","id":"video.v.undo-and-the-history-stack","excerpt":"This video explains how Undo works in Perch. If you have made a change to some content in Perch and spot a problem, you can click the Undo button.","text":"## Video Transcript\n\nThis video explains how Undo works in Perch. If you have made a change to some content in Perch and spot a problem, you can click the Undo button. \n\nYou can click this button multiple times, and step back through your old content.\n\nThis works because Perch maintains a history stack. This 'Undo Buffer' is set to 30 items by default. So Perch will store 30 revisions of each region before older ones start to be removed.\n\nYou can control the size of the stack in the Perch config file, by adding a setting `PERCH_UNDO_BUFFER` and choosing a value.\n\nA large Undo Buffer shouldn't cause any problems on most hosting. Where it can confuse people is where Assets are concerned. We have to store any images or files used in your content until they drop out of the history stack. So these files will remain until that happens - otherwise we wouldn't be able to Undo.\n\nIf you want images to disappear more quickly then you can reduce the size of the stack in order that they will drop out sooner.","type":"video"},{"title":"Using perch_content_custom","permalink":"https://docs.grabaperch.com/video/v/using-perchcontentcustom/","id":"video.v.using-perchcontentcustom","excerpt":"On our homepage is space for two testimonials. Something you might like to do is to have a whole list of testimonials and display two at random on the homepage as an easy way to make the site a bit different each time someone visits.","text":"## Video Transcript\n\nOn our homepage is space for two testimonials. Something you might like to do is to have a whole list of testimonials and display two at random on the homepage as an easy way to make the site a bit different each time someone visits.\n\nI’ve decided to create a testimonials page that lists all of my testimonials using similar markup to what was used on the Team page. I have created a testimonial.html template and used that as the template for a testimonials Region added to the testimonials.php page. I have added three testimonials so far.\n\nOn the homepage I want to display two of the testimonials at random. I also need to use different mark-up to the mark-up used on the testimonials page. This is where perch_content_custom() is helpful.\n\nFirst, I am going to create a second template using fields that have the same names as in my existing testimonial.html and saving it as _home_testimonial.html – starting a template with an underscore will hide it from the list when setting up a new region, handy for templates only used with perch_content_custom.\n\nI can now go to the homepage, and replace the testimonials with a region using perch_content_custom. I give the region the same name as the Region on my testimonials page, then pass in an array of options.\n\nI need to tell Perch which page to get the testimonials region from – testimonials.php.\n\nSpecify my new template.\n\nSet a field to sort on and set the short-order to RAND, which will sort randomly.\n\nThen set a count of 2 as I want two items.\n\nSave this and refresh the page, refresh it a few times to see different content load.\n\nYou now know how to use perch_content_custom to pull content from another page and display it with different markup. This can be a very flexible way to add content to your site.","type":"video"},{"title":"Using Blocks to create a photo essay blog post","permalink":"https://docs.grabaperch.com/video/v/using-blocks-to-create-a-photo-essay-blog-post/","id":"video.v.using-blocks-to-create-a-photo-essay-blog-post","excerpt":"One of the things that has been traditionally hard to create is the photo essay type of blog post or content. As Perch Blocks is also part of the API, it’s available to the Blog App. In this video I’m going to show you how to create a beautiful photo essay post like this one.","text":"## Video Transcript\n\nOne of the things that has been traditionally hard to create is the photo essay type of blog post or content. As Perch Blocks is also part of the API, it’s available to the Blog App. In this video I’m going to show you how to create a beautiful photo essay post like this one.\n\nAs I want my images to be the star of this blog, I’m using a very simple CSS framework called Skeleton. It gives me a simple grid but requires that classes are added to my markup to make that grid work - it’s much like the Bootstrap Grid in that regard.\n\nTo make it easy to follow along, I have packaged up all of the files for this example.\n\nYou’ll need to get a copy of the Skeleton framework from get skeleton.com. You should have Perch 2.8 or greater installed plus the Blog App version 2.6 or up.\n\nThen download the zip (if you are watching this embedded somewhere the files are attached to the video in the video section of the Perch documentation).\n\nPop the blog folder into the root of your site, make sure the paths to the Perch runtime and the css files for skeleton are correct. There is an additional stylesheet in the css folder.\n\nI have also included the two blog templates we will be using, add these to perch/templates/blog then open them up in your editor.\n\nOur master template for blog is post.html any fields that you want to edit have to be in this template. As I’m creating a photo essay blog my template looks quite different to a regular blog template.\n\nI’ll explain some of the features I have added.\n\nIf I go to the Perch Admin and create a new blog post you can see our template has some fields available. A title, then there is a cover image. This will be a big image displayed at the top of the post with the title and date on top.\n\nAs we’ll have text on top I have added a selection of dark or light - this enables the user to choose to have dark or light text on their image and also sets an appropriate background color.\n\nThen we have a subtitle and some introductory text. \n\nIf we go back to the code we can see how this works.\n\nOur dark and light selection is a template tag type of select, allowing the user to choose a class.\nWe then apply the cover image as an inline style on that cover div, it then contains the title, author and date information.\n\nIf you look at the bottom of the template I have reused the cover image id to make a smaller version to use in the post listing.\n\nIf we now look at the blog on the site you can see we already have the post in the listing, click through and there is the cover image and information.\n\nNow we build up our essay.\n\nGoing back to the template you can see that we have opened a perch:blocks section.\n\nInside this I have four options.\n\n- a full width image\n- two images side by side\n- image and text side by side \n- just a text area\n\nYou could of course offer as many options as you like. You can even use repeaters.\n\nBack in admin I can just pick the blocks I want to use to build up my photo essay.\n\nI can reorder them too.\n\nThen take a look on the site and see how it looks.\n\nPerch Blocks makes it really straightforward to create this kind of content entry - whether in regular perch content or in an App like Blog.","type":"video"},{"title":"The Perch Control Panel","permalink":"https://docs.grabaperch.com/video/v/the-perch-control-panel/","id":"video.v.the-perch-control-panel","excerpt":"This video is an introduction to the Perch Control Panel. This is where you will set up your Perch Regions and templates and where your client and any content editors will come to edit the content on the website.","text":"## The Perch Control Panel\n\nThis video is an introduction to the Perch Control Panel. This is where you will set up your Perch Regions and templates and where your client and any content editors will come to edit the content on the website.\n\nIn Perch we try and keep everything as simple as possible. This means that Perch functionality not required by every site is usually available as a free add-on, rather than bundled into Perch directly. So the default Control Panel is all about editing regular website content.\n\nI'm logged in here as the main Admin account. So I have access to everything.\n\nThe default view when logging in is your list of pages. Any pages that you have set up Perch Content on will be listed here.\n\nThen there are some default Apps. Included at Install is the Assets App, for managing files and images. Categories, for Categories across the site and in Apps, and Users for Managing your users.\n\nYou can edit your own Account, and View Settings. \n\nWe'll be looking at the different parts of the Control Panel in the other videos in this series.","type":"video"},{"title":"What are Perch Regions?","permalink":"https://docs.grabaperch.com/video/v/what-are-perch-regions/","id":"video.v.what-are-perch-regions","excerpt":"To start editing Perch Content you need to add a Perch Region to your page. This video explains Perch Regions.","text":"## Video Transcript\n\nTo start editing Perch Content you need to add a Perch Region to your page. This video explains Perch Regions.\n\nA Perch Region is created by adding a PHP function called `perch_content` to the page. The function takes one value. That's a string and the name of the Region you want to show up in Admin.\n\nThe `perch_content` function runs when the page is loaded. If Perch doesn't already have a region with that name for the page, it creates a new Region with the name you passed into the function. That new region is flagged up in your Control Panel for that page. You can then choose a template and add content.\n\nWhen the page is loaded and the region already exists, Perch loads any template and content for the Region.\n\nYou can add as many Regions as you like to a page. For example my homepage here has a heading and a strapline. I could make that whole heading area a Perch Template with fields for the heading and strapline. Then just have one Perch Region, selecting that template in admin.\n\nOr, I could add two Regions here. One for the Heading, one for the Strapline.\n\nWhen these show up in admin I could then simply use the single line text field for each one. The decision you make depends on how you want the content to be edited - there is no right or wrong way.","type":"video"},{"title":"Users and Roles","permalink":"https://docs.grabaperch.com/video/v/users-and-roles/","id":"video.v.users-and-roles","excerpt":"In this video we can take a look at how Users and Roles work in Perch.","text":"## Video Transcript\n\nIn this video we can take a look at how Users and Roles work in Perch.\n\nWhen you install Perch we create a Primary Admin user, this is created with the details you enter when filling in the Setup. The Primary Admin can do everything possible in the control panel. If you go to the Users section of the Control Panel, this user will be listed.\n\nWe also create two Roles at setup, the Admin Role and an Editor role. This editor role has limited privileges. Take a look at it by clicking the role name. You can see that by default the user has very limited options.\n\nYou can edit the options for that Role here.\n\nWhen you create new users and give them the Editor role, they will only have the privileges assigned here. If you update any privileges then all users with that role will get them.\n\nYou are not limited to the roles that we set up for you. If you go to Roles you can choose to add a role. You can then set up specific privileges.\n\nIf you install any of our first party apps, you will find that their permissions also show up here. So you can create a Role just for someone with access to the blog for example.\n\nI'm creating a user with an Editor role.\n\nI then log out and log in as that user. You can see how the Control Panel now reflects the simpler set of options they have. This is one way that Perch helps to make life easier for your clients - you can hide away things to do with site setup, just giving access to the editing tools required.\n\nLogging back in as the Admin.\n\nIn addition to setting global privileges on Roles you can set privileges on a Region level, in Region Options. Your preconfigured Roles appear in the list.\n\nAlso in Page Options, you can set whether certain Roles can create new subpages..","type":"video"},{"title":"Blocks","permalink":"https://docs.grabaperch.com/video/v3/blocks/","id":"video.v3.blocks","excerpt":"In our blog template, the body of the post is just one big area to add text. Your editor, however, might want to build up a post with images, or video, or anything else. We can give them the ability to choose between different things to put into their post using **Perch Blocks**. And this works with any Perch Content, not just Blog.","text":"In our blog template, the body of the post is just one big area to add text. Your editor, however, might want to build up a post with images, or video, or anything else. We can give them the ability to choose between different things to put into their post using **Perch Blocks**. And this works with any Perch Content, not just Blog. \n\nTo create a Blocks section in a template, add a `<perch:blocks></perch:blocks>` tag pair. Then inside add your individual Block. Each ones is wrapped in `<perch:block></perch:block>` and is a kind of sub-template. We need to add a couple of attributes to the Perch block to identify it, we give it a `type`, which is anything you like really, just call it something that would identify it to you. So let's call this one just `text` and then give it a label, that's what will show up for the Admin to know what that kind of block is.\n\nInside the block you use your regular Perch template tags, whatever you want. For a text block you might just add a single Perch textarea tag, remember that when working inside Blog you need to use `<perch:blog` tags and not `<perch:content`.\n\nThe completed Blocks section for our post looks like this:\n\n```html\n<perch:blocks> \n  <perch:block type=\"text\" label=\"Text\">\n    <perch:blog type=\"textarea\" markdown editor=\"simplemde\" id=\"text\" label=\"Content\" size=\"m\">\n  </perch:block>\n\n  <perch:block type=\"figure\" label=\"Figure\">\n    <figure>\n      <img src=\"<perch:blog type=\"image\" id=\"image\" label=\"Image\" width=\"800\">\" alt=\"<perch:blog id=\"alt\" type=\"text\" label=\"Alt text\">\">\n      <figcaption><perch:blog type=\"smarttext\" id=\"caption\" label=\"Caption\"></figcaption>\n    </figure>\n  </perch:block>\n</perch:blocks>\n```\n\nBlocks mean you can add all of the markup you need around content. It's quite handy when working with something like Foundation or Bootstrap which require quite a lot of markup and classes added. The content editor can simply add the block they need and complete the content. You have already defined the markup that will enable it to look as they expect.\n\nHaving added blocks to the template, if you go back to the Blog admin you should see the Blocks selection toolbar appearing. Click on the text label to get a text area to fill in; click on the figure label to get a figure with the image, and alt text. You can add as many of these as you want.\n\nOnce Blocks have been added they can be rearranged by drag and drop.\n\nThis is a very nice way to give more flexibility to your content editors while still maintaining good control over the mark up that is output. At the point at which you want to redesign the site - or just add an additional class to some element for styling purposes. You can do that easily, something impossible if everything has been added and formatted as a big block of HTML in a WYSIWYG editor.","type":"video"},{"title":"Create a Blog Archive page","permalink":"https://docs.grabaperch.com/video/v3/blog-archive-page/","id":"video.v3.blog-archive-page","excerpt":"The final page of our blog is an archive page, which serves to display posts by category or by tag. Each post has categories and tags which link to a listing of all the posts in that category or tag. Until you set up this page, if you click on these you will get a 404 error - page not found. If you have a look on the querystring, you will see that it contains a parameter and value that we can use to select the right data for our listing page. Just as we did when selecting a post based on the slug.","text":"The final page of our blog is an archive page, which serves to display posts by category or by tag. Each post has categories and tags which link to a listing of all the posts in that category or tag. Until you set up this page, if you click on these you will get a 404 error - page not found. If you have a look on the querystring, you will see that it contains a parameter and value that we can use to select the right data for our listing page. Just as we did when selecting a post based on the slug.\n\nWe've got our `index.php` page which is the blog homepage listing page. I'm going to save that as `archive.php`, because essentially a archive is just like the blog homepage listing. It's a listing of posts, we're just filtering it in a different way. On that main listing we displayed our posts with `perch_blog_recent_posts()`. That's what we used on the homepage. We're going to need to change this. We're going to use the Perch Blog custom function.\n\nBefore I start to output the posts, I want to set up some variables to use, because we're going to be filtering and displaying the posts in a few different ways, but there are some things that are going to be common to all of them, so let's set those things up first.\n\n```php\n$posts_per_page = 10;\n$template = 'post_in_list.html';\n$sort_order = 'DESC';\n$sort_by = 'postDateTime';\n\n$posts_displayed = false;\n```\n\n### Testing for category\n\nIf the visitor has clicked a link which has a querystring parameter of `cat`, they are looking for a category archive. We can test for this in PHP and if so retrieve the category details and posts in the category.\n\nI use the `perch_get()` function. If it has a parameter `cat`, I use another blog function `perch_blog_category` passing in the value of `perch_get('cat')`. If my querystring included `cat=relocation` then the value passed into `perch_blog_category` will be `relocation`. The function returns the category title, and we use the parameter through in order to use this in our echoed statement.\n\n```php\nif(perch_get('cat')) {\n  echo '<h1>Archive of: ' . perch_blog_category(perch_get('cat'),true) . '</h1>';\n\n}\n```\n\nHere's a quick test. If we save this and if we head back to our page, now if we click on a category, archive of relocation. It's collected the relocation category from that query string. If we click on, say, 'Employees', archive of employees. Great. So far, so good. What we're doing is we're getting the information about that category back from perch. That's great. We can now output the linked posts for that category.\n\nStill staying inside that 'If', use `perch_blog_custom` with those variables created earlier, and once again the value of `perch_get('cat')`.\n\n```php\nif(perch_get('cat')) {\n  echo '<h1>Archive of: ' . perch_blog_category(perch_get('cat'),true) . '</h1>';\n\n  perch_blog_custom([\n    'category'=>perch_get('cat'),\n    'template'=>$template,\n    'count'=>$posts_per_page,\n    'sort'=>$sort_by,\n    'sort-order'=>$sort_order\n  ]);\n\n  $posts_displayed = true;\n}\n```\n\nHaving done that, I'm going to say 'Posts displayed equals true', because we actually got a match. We realize that yes, we are working within category.\n\nIf you go back to the browser, you should now be able to load posts by category. We then do exactly the same with Tags.\n\n```php\nif(perch_get('tag')) {\n  echo '<h1>Archive of: ' . perch_blog_tag(perch_get('tag'),true) . '</h1>';\n  perch_blog_custom([\n    'tag'=>perch_get('tag'),\n    'template'=>$template,\n    'count'=>$posts_per_page,\n    'sort'=>$sort_by,\n    'sort-order'=>$sort_order\n  ]);\n  $posts_displayed = true;\n}\n```\n\nSomeone might, instead of going to archive.php with something on the querystring, they might just visit archive.php. In which case, they're not going to get anything. That's not very friendly, so in that case I'm just going to display the most recent posts. I only do this if `$posts_displayed` still equals `false` as I know that our checked for different types of archives have not matched.\n\n```php\nif($posts_displayed == false) {\n  echo '<h1>Archive</h1>';\n  perch_blog_custom([\n    'template'=>$template,\n    'count'=>$posts_per_page,\n    'sort'=>$sort_by,\n    'sort-order'=>$sort_order\n  ]);\n}\n```\n\nYou can use `perch_blog_custom` to do all kinds of filtering. For example, a date archive displaying things for each month. You can do that in exactly the same way as we created our 'Tags' and 'Category' archive. If you have a look at the _perch_blog_custom_ function in the documentation, you'll see there's an awful lot of different things that you can pass in.","type":"video"},{"title":"Create a Blog Detail page","permalink":"https://docs.grabaperch.com/video/v3/blog-detail-page/","id":"video.v3.blog-detail-page","excerpt":"This time we are creating the blog detail page. As with the listing page, the starting point will be an HTML page already designed and coded. As we already know how we want the blog to look, we need to make the page dynamic using Perch functions.","text":"This time we are creating the blog detail page. As with the listing page, the starting point will be an HTML page already designed and coded. As we already know how we want the blog to look, we need to make the page dynamic using Perch functions.\n\nI save my HTML page as `post.php` into the `blog` folder that is in the root of the site. This page needs the Perch runtime include so we can start to use Perch. If you go back to the listing page in your browser and click on any of the blog posts, they will now load up our `post.php` page in the browser with the hardcoded content in place. The pages load with a querystring on the end. The querystring has a parameter `s` and then a value, which is the slug of our blog post. The slug identifies the actual post. \n\nIn a later video I will explain how to rewrite the querystring to create a 'friendly URL', however whether you've got rewritten URLs or a querystring on the URL, as far as the web server is concerned you're using a querystring. Our querystring has a name of `s` and the value is what comes after the equals sign.\n\nIt is the value after the `=` that we want to use to identify our post. When we load this page for each individual post we need to look and see which post this is, get the content from the database, and then load the content into this page.\n\nFirst thing I'm going to do is get that value off the querystring. I need to do that inside PHP. I'm going to create a php variable called `post_slug` in which to store the value of `s`. Perch has a nice little function that will help you do this called `perch_get`. If you pass the name of the querystring paramter into `perch_get` it will return the value and store it in our variable.\n\n```php\n$post_slug = perch_get('s');\n```\n\nLook in the Perch Documentation and find the Blog function `perch_blog_post`, this will display a single blog post. The function can either look up a post from the `id` or `slug`. We've got the post slug, so can use that. In the example in the documentation you can see that the `perch_get` function is used directly as the value passed into `perch_blog_post`, this is a fine approach too. Because we're going to use it in a few different places I've written it to a variable.\n\nIn the document find where the post is displayed, and take out the hard coded post, replacing it with the function, using our slug variable.\n\n```php\n<?php perch_blog_post($post_slug); ?>\n```\n\nIf you now click through to an individual post you should see the unique content. It doesn't look quite how it did before. Again, we've not changed our templates yet but you can see we've got the post.\n\nSo you only have one actual blog post page and it loads the content of all of the individual posts. We can now use our variable, along with some of the other blog functions to add the other elements of a blog detail page. These are of course all optional.\n\n## The post title\n\nOne thing you might want to do is add the title of your blog post into the title element of the page. That's good for SEO to be able to show what the actual unique title is for the page. We can do that with another function. There's a function called `perch_blog_post_field` which you can use to pick out a field from your template. Find `perch_blog_post_field` in the documentation. The parameters you need to pass in are the slug as before and the name of the field you want to get the content of, in this case `title`\n\nYou need to make sure that this field does exist in your template and is going to contain content, I would make this a required field. Other things you might want to do, we've got some information and that appears about the categories and the tags that our post is in. You can see we've got this here. We've got categories and we've got tags. Once again, we've got some handy functions you can use to get that information.\n\n## Post categories and tags\n\nIn `post.php`, under categories I remove all the information including the heading. We can use `perch_blog_post_categories` to ouput the categories that this post is in. This is different to `perch_blog_categories` which output all the categories used in the blog. This is the one for the specific post which is why it's `perch_blog_post`. Once again we can add our post slug in here to identify which post we arew showing information for. In addition to categories we've got tags which works in exactly the same way except instead of asking for `perch_blog_post_categories` we will use `perch_blog_post_tags`.\n\nOnce you've done that go back to the page, reload and scroll down. You cshould see the categories and the tags showing up for this particular post. We're starting to build up the blog functionality. \n\n## Post comments\n\nThe blog app uses comments. You can have a comment form, and a comment listing. Once again you've got some handy functions just to pull that out onto the page.\n\nIt's probably not surprising to you now that what we need to do is remove the comments that we've got here and add a function that will pull in our comments. This time we're going to use `perch_blog_post_comments` to display the comments for this particular post. Once again we pass in the `post_slug` variable.\n\nYou can also pass in an array as the second argument and that's the same for the majority of Perch functions. You can pass in extra options as an array. To see how that works let's say we only want to show ten of the comments that are available. We add a count to the array, with a value of the number of comments to display. That would give us ten comments. If you go to the documentation you can see all of the different things that you can add there. \n\nNext replace the hardcoded form with `perch_blog_post_comment_form`. Again, we need to pass in the post slug so that any comments that are added will be attached to this particular post. \n\nThat's the basics of creating our page. The complete PHP for this page is below.\n\n```html\n<?php include('../perch/runtime.php'); ?>\n<?php \n$post_slug = perch_get('s');\n?>\n<!DOCTYPE html>\n<html lang=\"en\"> \n<head>\n    <meta charset=\"utf-8\">\n    <meta name=\"viewport\" content=\"width=device-width\">\n    <title><?php perch_blog_post_field($post_slug, 'postTitle'); ?> | Blog | Swift Migrations</title>\n    <!--[if IE]>\n        <script src=\"http://html5shiv.googlecode.com/svn/trunk/html5.js\"></script>\n    <![endif]-->\n    <link rel=\"stylesheet\" href=\"/css/style.css\">\n    <link rel=\"shortcut icon\" href=\"/favicon.ico\">\n</head>\n\n<body class=\"blog\">\n    <nav class=\"site-navigation\" role=\"navigation\">\n        <ul>\n            <li><a href=\"index.html\">Home</a></li>\n            <li><a href=\"about.html\">About</a></li>\n            <li><a href=\"team.html\">Team</a></li>\n            <li class=\"selected\"><a href=\"blog.html\">Blog</a></li>\n            <li><a href=\"contact.html\">Contact</a></li>\n        </ul>\n    </nav>\n    <header class=\"site-header\" role=\"banner\">\n        <h1 class=\"site-title\"><a href=\"index.html\">Swift Migrations</a></h1>\n        <h2 class=\"site-description\">Helping you get your flock from A to B</h2>\n    </header>\n    <div class=\"masthead\">\n        <div class=\"masthead-inner\">\n            <h2>An intro to the blog</h2>\n            <p>Our team are based in locations around the world. Some migrate mid-year to better serve seasonal locations.</p>\n        </div>\n    </div>\n    <div class=\"main\" role=\"main\">\n        <div class=\"primary-content\">\n\t\t\t\n\t\t\t\t<?php perch_blog_post($post_slug); ?>\n\n\t\t\t\t<div class=\"meta\" role=\"complementary\">\n\t\t\t\t\t<div class=\"cats\">\n\t\t\t\t\t\t<?php perch_blog_post_categories($post_slug); ?>\t\t            \n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"tags\">\n\t\t\t\t\t\t<?php perch_blog_post_tags($post_slug); ?>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t\n\t\t\t\t<?php perch_blog_post_comments($post_slug,[\n\t\t\t\t  'count' => 10\n\t\t\t\t]); ?>\n\t\t\t\t\n\t\t\t\t<?php perch_blog_post_comment_form($post_slug); ?>\n\t\t\t\n\t\t</div>\n\t\t<aside class=\"sidebar\" role=\"complementary\">\n            <div class=\"module\">\n                <h2>Archive</h2>\n                <?php perch_blog_categories(); ?>\n            </div>\n        </aside>\n    </div>\n    <footer class=\"site-footer\">\n        <div class=\"footer\">\n            <div class=\"vcard\">\n                <h2>Contact Swift Migrations</h2>\n                <p class=\"fn org\"><a href=\"/\" rel=\"me\">Swift Migrations</a></p>\n                <div class=\"adr\">\n                    <p class=\"street-address\">The Old Church</p>\n                    <p class=\"street-address\">123 Letsbe Avenue</p>\n                    <p class=\"locality\">Smalltown</p>\n                    <p class=\"postal-code\">NE1 4TV</p>\n                    <p class=\"country-name\">United Kingdom</p>\n                    <p class=\"email\"><a href=\"mailto:madeup.email@perchdemo.com\">madeup.email@perchdemo.com</a></p>\n                    <p class=\"tel value\">+44 (0) 1628 633301</p>\n                </div>\n            </div>\n        </div>\n    </footer>\n    <script src=\"/js/modernizr.js\"></script>\n</body>\n</html>\n```","type":"video"},{"title":"Create a Blog RSS feed","permalink":"https://docs.grabaperch.com/video/v3/blog-rss/","id":"video.v3.blog-rss","excerpt":"The blog templates include a template which outputs the post in a format as needed for an RSS feed. To use it, you will need to create a page just like any other. This will be a blank page though without any of your site design involved. Create that in the blog folder and call it `rss.php`.","text":"The blog templates include a template which outputs the post in a format as needed for an RSS feed. To use it, you will need to create a page just like any other. This will be a blank page though without any of your site design involved. Create that in the blog folder and call it `rss.php`.\n\nThe entire code for `rss.php` is below. To see a walkthrough of this code watch the video (which has captions). The code uses a template from the `perch/blog/templates` folder, named `rss_post.html`. The default may well be all you need but you can make changes to it as with any other template.\n\n```php\n<?php include('../perch/runtime.php'); ?>\n<?php \n    $domain = 'http://'. $_SERVER['HTTP_HOST'];\n    PerchSystem::set_var('domain',$domain);\n\n    header('Content-Type: application/rss+xml');\n\n    echo '<?xml version=\"1.0\"?>';\n?>\n\n<rss version=\"2.0\" xmlns:atom=\"http://www.w3.org/2005/Atom\">\n    <channel>\n        <title>Blog | Swift Migrations</title>\n        <link><?php echo PerchUtil::html($domain) ?>/blog/</link>\n        <description>News from Swift Migrations</description>\n        <atom:link href=\"<?php echo PerchUtil::html($domain) ?>/blog/rss.php\" rel=\"self\" type=\"application/rss+xml\">\n\n        <?php \n        perch_blog_custom([\n            'template'=>'blog/rss_post.html',\n            'count'=>10,\n            'sort'=>'postDateTime',\n            'sort-order'=>'DESC'\n        ]);\n        ?>\n    </channel>\n</rss>\n```","type":"video"},{"title":"Create a Blog Listing page","permalink":"https://docs.grabaperch.com/video/v3/blog-listing-page/","id":"video.v3.blog-listing-page","excerpt":"The majority of Perch apps work in the same way. You install the app, then you'll find the page functions to get the data onto your pages and template tags to create templates. This is really the same as regular Perch content. You have page functions that create regions or allow you to do things like filter content and then you have your templates.","text":"The majority of Perch apps work in the same way. You install the app, then you'll find the page functions to get the data onto your pages and template tags to create templates. This is really the same as regular Perch content. You have page functions that create regions or allow you to do things like filter content and then you have your templates.\n\nIn these next few tutorials we'll be working in the [function reference](https://docs.grabaperch.com/functions/) part of the Perch documentation. Inside that function reference we have [a reference for Blog](https://docs.grabaperch.com/functions/blog/). You can see all of the functions listed here that are used in the blog. Some of these are pretty powerful. We'll start building up our blog using some of these functions so you can see how it works.\n\nAs I mentioned in the last video pages aren't automatically created when you install the blog app because Perch assumes that you want to have some control over that. So our starting point is the blog listing HTML page from the starting point files.\n\nSave the blog html page as `index.php` inside a folder in the root of your site called `blog`. Then add the Perch runtime, making sure the path is correct.\n\nIn the page, find where the Blog listing is hardcoded and delete that content. Replace it with a Blog function that will list recent posts, that function is `perch_blog_recent_posts` and we add it inside PHP tags, with a value of the number of posts we want to display.\n\n```php\n<?php perch_blog_recent_posts(10); ?>\n```\n\nIf you visit this page in the web browser you can see that our posts are starting to be output to the page. They don't look quite the same yet and that's because we haven't changed the default template that ships with Perch. We'll have a look at that in a later video. \n\nOur example page also has links to the category archive pages. This information can be retrieved with another function, `perch_blog_categories`. You can replace the content with the code example [from the documentation for that function](https://docs.grabaperch.com/functions/blog/perch-blog-categories/). \n\n```\n<?php perch_blog_categories(); ?>\n```\n\nPretty much all of the Perch Apps are documented like this, there are copy and paste examples which will make a starting point that you can tweak.\n\nThis is a really great start. We've managed to output our posts to the page and we've created a listing of categories. At the moment you're going to get a 404 if you click on any of these posts because we haven't set up the actual post page. We'll that in the next tutorial.","type":"video"},{"title":"A contact details template","permalink":"https://docs.grabaperch.com/video/v3/contact-details/","id":"video.v3.contact-details","excerpt":"We created a simple template already in an earlier tutorial. This time, we're going to create a more complex template for the contact details on the site. The page I'm working on is `contact.php` and I've already added the Perch runtime to this file.","text":"We created a simple template already in an earlier tutorial. This time, we're going to create a more complex template for the contact details on the site. The page I'm working on is `contact.php` and I've already added the Perch runtime to this file. \n\nThen find the contact details section of the file, and copy this out to use as the HTML of our template. Copy this into a new file `perch/templates/contact/contact.php`.\n\nWe need to replace the hard coded content with Perch template tags, just like we did before.\n\nOne thing in this template is we have company name actually repeated twice. We can use a little trick here to save your editors typing the company name twice. If we repeat the tag twice, with the exact same ID, Perch will only show that template tag once. However, the content will display everywhere it is used.\n\nWe will also use conditional tags and the required atribute to make some parts of the address required and others optional. \n\nThe email address can use the same repeating ID trick that we used earlier, in order to add the address to the `mailto` attribute and onto the page. The complete Perch template is below:\n\n```html\n<div class=\"vcard\">\n  <h2>Contact <perch:content id=\"company\" type=\"smarttext\" label=\"Company\" required title></h2>\n  <p class=\"fn org\"><a href=\"/\" rel=\"me\"><perch:content id=\"company\" type=\"smarttext\" label=\"Company\" required title></a></p>\n  <div class=\"adr\">\n   <p class=\"street-address\"><perch:content id=\"address1\" type=\"text\" label=\"Address Line 1\" required></p>\n  <perch:if exists=\"address2\"><p class=\"street-address\"><perch:content id=\"address2\" type=\"text\" label=\"Address Line 2\"></p></perch:if>\n  <p class=\"locality\"><perch:content id=\"locality\" type=\"text\" label=\"Town/City\" required></p>\n  <p class=\"postal-code\"><perch:content id=\"postcode\" type=\"text\" label=\"Postcode\" required></p>\n  <p class=\"country-name\"><perch:content id=\"country\" type=\"text\" label=\"Country\" required></p>\n  <p class=\"email\"><a href=\"mailto:<perch:content id=\"email\" type=\"text\" label=\"Email address\" required>\"><perch:content id=\"email\" type=\"text\" label=\"Email address\" required></a></p>\n<p class=\"tel value\"><perch:content id=\"phone\" type=\"text\" label=\"Phone\" required></p>\n</div>\n</div>\n```\n\nWe can go to the `contact.php` page, delete the content and add our Perch region. Now we need to go into our browser and reload so Perch can pick up the new region. Then go to the Control Panel and select our new contact template. You can now add contact details via Perch.","type":"video"},{"title":"A Contact Form","permalink":"https://docs.grabaperch.com/video/v3/contact-form/","id":"video.v3.contact-form","excerpt":"The final part of our contact page is a form. I'm going to show you how you can use Perch to create this contact form. To process forms in Perch, you need to download the free Perch forms add-on from the Perch website.","text":"The final part of our contact page is a form. I'm going to show you how you can use Perch to create this contact form. To process forms in Perch, you need to download the free Perch forms add-on from the Perch website.\n\nOnce you've downloaded the forms app and opened the zip, you can take the Perch forms folder, which is inside `add-ons/apps`, and place it into  your site, in `perch/addons/apps`.\n\nThen open the file `perch/config/apps.php` and add `perch_forms` to the list so your file should now look like this:\n\n```php\n<?php\n\t$apps_list = ['perch_forms'\n\t];\n```\n\nIn the Control Panel, you can see now that a new menu item has appeared. Visit the app, this will install it behind the scenes. \n\nNow open `contact.php` from your site files and, as we've done before, copy the HTML for the form from here. We can use that as our starting point as we create our template. We're going to need to create a new template under content, and we'll save that as `contactform.html` and copy in our markup.\n\nThe video walks through the creation of this template, you can see the full code below.\n\n```html\n<h2><perch:content id=\"heading\" type=\"text\" label=\"Heading\" required></h2>\n<perch:form id=\"form-contact\" method=\"post\" app=\"perch_forms\" role=\"form\">\n  <div class=\"input<perch:error for=\"name\" type=\"required\"> error</perch:error>\">\n\t<perch:label for=\"name\">Your name:</perch:label>\n\t<perch:input id=\"name\" type=\"text\" required label=\"Name\">\n    <perch:error for=\"name\" type=\"required\"> \n    <p class=\"about-error\">Please enter your name</p>\n    </perch:error>\n</div>\n<div class=\"input<perch:error for=\"email\" type=\"required\"> error</perch:error><perch:error for=\"email\" type=\"format\"> error</perch:error>\">\n\t<perch:label for=\"email\">Your email:</perch:label>\n\t<perch:input id=\"email\" type=\"email\" required label=\"Email\">\n    <perch:error for=\"email\" type=\"required\"> \n    <p class=\"about-error\">Please enter your email address</p>\n    </perch:error>\n    <perch:error for=\"email\" type=\"format\"> \n    <p class=\"about-error\">Please enter a valid email address</p>\n    </perch:error>\n</div>\n<div class=\"input<perch:error for=\"message\" type=\"required\"> error</perch:error>\">\n\t<perch:label for=\"message\">Your message:</perch:label>\n\t<perch:input id=\"message\" type=\"textarea\" required label=\"Message\">\n    <perch:error for=\"message\" type=\"required\"> \n    <p class=\"about-error\">Please enter your message</p>\n    </perch:error>\n</div>\n<perch:input type=\"submit\" id=\"submit\" value=\"Send\">\n\n<perch:success>\n<div class=\"alert success\">\n<perch:content id=\"success\" type=\"textarea\" size=\"m\" label=\"Thank you message\" markdown editor=\"simplemde\" required>\n</div>\n</perch:success>\n\n</perch:form>\n```\n\nThat's all of our form. We can now go back to `contact.php` and delete the markup that's now part of our template. Replace it with a Perch Region . Then reload the page so the form disappears, and reload the Control Panel. We've got our new contact form region showing up, so we can select our template. \n\nIf you go to form options, you'll see you have other options here, you can give the form a different title, you can store the response. You can set a file upload path if people are allowed to upload information, for example if you're creating a form where people can Upload a CV. If you've got a functioning mail server, you can send the response via email. You can change some things about the email template as well.","type":"video"},{"title":"Creating a Template","permalink":"https://docs.grabaperch.com/video/v3/creating-a-template/","id":"video.v3.creating-a-template","excerpt":"In the last video, we saw how easy it was to edit content on a Perch site using the default templates. The power from Perch really comes, though, when you start to create your own templates with the exact markup you need for your site. So to demonstrate this, we can create the slide area at the top of the homepage. This area uses some JavaScript to switch between the different panels.","text":"In the last video, we saw how easy it was to edit content on a Perch site using the default templates. The power from Perch really comes, though, when you start to create your own templates with the exact markup you need for your site. So to demonstrate this, we can create the slide area at the top of the homepage. This area uses some JavaScript to switch between the different panels. \n\nThere are various ways in Perch that you can mark this up. However, because we're just getting started let's keep this simple and make each one a region that uses the same template to display the content. Copy out the markup from one of these slides and save it into a new file named `home-slide.html` into `perch/templates/content`. This is the location for any content templates.\n\nPerch templates are always `.html` files, they essentially are snippets of HTML.\n\nWith your HTML markup in place you now start to replace the content of the HTML tags with Perch Template Tags. This is how your content becomes editable. All of the tags you can use can be found in the Perch Template documentation. The video walks you through editing this template, you can see the full code of the template below.\n\n```html\n<h3><perch:content id=\"heading\" type=\"smarttext\" label=\"Heading\" help=\"This will form the clickable heading on the slide\" required></h3>\n\n<perch:if exists=\"subheading\"><h4><perch:content id=\"subheading\" type=\"smarttext\" label=\"Subheading\"></h4></perch:if>\n\n<img class=\"border\" src=\"<perch:content id=\"image\" type=\"image\" label=\"Image\" width=\"520\" height=\"520\" crop>\" alt=\"<perch:content id=\"alt\" type=\"smarttext\" label=\"Image description\">\">\n\n<perch:content id=\"body\" type=\"textarea\" label=\"Body\" markdown editor=\"simplemde\" size=\"m\" required>\n```\n\nOnce you have created the template, go back to your page and delete the content that you copied out. Replace it with a Perch Region. Do this for each slide so you end up with three Regions all with different names.\n\n```html\n<div class=\"slideshow\">\n\t\t<div class=\"slideshow-inner\">\n\t\t\t<div class=\"slide slide-one\">\n\t\t\t\t<?php perch_content('Slide One'); ?>\n\t\t\t</div>\n\t\t\t<div class=\"slide slide-two\">\n\t\t\t\t<?php perch_content('Slide Two'); ?>\n\t\t\t</div>\n\t\t\t<div class=\"slide slide-three\">\n\t\t\t\t<?php perch_content('Slide Three'); ?>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n```\n\nThen reload the page in your browser, at which point all of the content will disappear. In the Perch Control Panel you will find three new regions for the homepage. Select the same homeslide template for each of them and complete them with your content.\n\nSo that's the start of creating templates with Perch, and if you follow all through these videos you'll find some new tips and tricks in terms of making your templates more useful and coping with different kinds of content.","type":"video"},{"title":"Creating Pages","permalink":"https://docs.grabaperch.com/video/v3/creating-pages/","id":"video.v3.creating-pages","excerpt":"In our simple site, I've decided the editors won't be able to add new pages to the main navigation, but one place they'd like to be able to create new pages as required is inside the \"about\" section. In this video I'm going to create my main \"about page,\" and then create a master page, from which other pages in the \"about\" section can be created.","text":"In our simple site, I've decided the editors won't be able to add new pages to the main navigation, but one place they'd like to be able to create new pages as required is inside the \"about\" section. In this video I'm going to create my main \"about page,\" and then create a master page, from which other pages in the \"about\" section can be created.\n\nI've saved my \"about\" html page into a new folder called, `about` as `index.php`. I've already included perch on the page and I've made sure that the path is correct, because we're now inside a sub folder. I've added two perch regions to this page. One is the masthead area, and another is for some content.\n\nI've created a new template for this masthead area, because I've got some specific mark up I want to use. The content of that template is below and you can save it into `perch/templates/content` as `masthead.html`.\n\n```html\n<h2><perch:content id=\"heading\" title type=\"text\" label=\"Heading\" required></h2>\n<perch:content id=\"body\" required type=\"textarea\" label=\"Masthead content\" help=\"This will appear at the top of the page, so should be a sentence or two.\" markdown editor=\"simplemde\">\n```\n\n## Creating the Master Page\n\nNext, I need to create a master page. This is kind of a special kind of full page template, which new pages are based on. We can use our `about/index.php`, as a starting point for this. I'm going to take this `index.php`, and I'm going to save it into `/perch/templates/pages`, and I'll call it, `about.php`.\n\nIf you look in `/perch/templates/pages`, you'll see that we also have a `default.php`. Open up `default.php` and we'll use this to help us create our master page. The first thing you want is to copy out this link to the runtime. It looks a bit different, because we don't necessarily know the entire path to the runtime, when we're creating a page from our Master Page. Copy this and add it to the `about.php` Master Page.\n\nYou will want the page to have a unique title. This can be created by using another Perch Function - `perch_pages_title()` which will insert the title based on the page title added in the Control Panel.\n\n## Adding Navigation\n\nFinally, I want to navigate to these new pages. We can use the [Perch Navigation functions](https://docs.grabaperch.com/functions/navigation/) in order that when new pages are created from the Master Page, links will be created to them in the Navigation.\n\n```php\n <?php \n   perch_pages_navigation([\n     'from-path' => '/about',\n     'levels' => 1\n   ]);\n?>\n```\n\nAs the main About page is not generated from the Master Page, don't forget to add the navigation there too.\n\n## Creating pages from the Control Panel\n\nWhen you create a new page with Perch, it creates an actual, physical file on disc. That's a difference between Perch and Runway. Runway doesn't create actual files, it creates references to pages in the database. However in the Control Panel the process is very similar.\n\nIn the Control Panel, visit the Master Pages section. Find the About page. You have a few options here. If you choose to \"copy regions from\" and existing page the editor won't need to choose templates for each Region. This is generally what you want. In our case we can copy the Regions from the about page.\n\nThen you can choose to reference the Master Page or Copy it. This is important. If you say reference, it means you can go back, and you can make changes to your master page and they'll be reflected in all of the pages created from it. If you want pages to be completely detached from the master page, you can say, \"copy this master page.\" Generally, I'd say reference, because it's useful to be able to make changes to the html on your master page, and go on to all of the pages that are created from it.\n\nOnce you have set up your Master Page, creating new pages is a case of choosing to add a New Subpage when in the Pages View in Perch, and adding details for the page.","type":"video"},{"title":"Editing Blog Templates","permalink":"https://docs.grabaperch.com/video/v3/editing-blog-templates/","id":"video.v3.editing-blog-templates","excerpt":"To add the finishing touches to our blog, we will edit the default templates that come with Perch, to add in the markup that we want to use to show our posts.","text":"To add the finishing touches to our blog, we will edit the default templates that come with Perch, to add in the markup that we want to use to show our posts. \n\nAs with anything in Perch, the output HTML is completely down to you. Apps will ship with some default templates to get you started, just as Perch itself has default templates. You can use these as-is, edit them or supply your own. We will use the default templates but edit them for our requirements.\n\n## Before changing the default template\n\nThe templates for blog are inside the installed blog app at `perch/addons/apps/perch_blog/templates/blog`. Don't edit these directly, instead copy the entire `blog` folder with the templates inside to `perch/templates`.\n\nNow you have a copy of our default templates. What will happen is that Perch with look in your folder first to find a template, using the default names or a template name passed in. If it finds a template here it will use it. If it doesn't it will use the default templates in the app. Therefore, by copying out your templates you have a safe way to make changes that won't be overwritten when you update the blog app.\n\nSomething else that's worth understanding is that every one of the official apps has the concept of a **Master Template**. This is a template that contains any fields you want to output, either on this template or on another template. The Master Template will typically represent the detail page of any list of items. For blog the master template is `post.html`. Open `perch/templates/blog/post.html` and you can see all of the fields that appear in the Control Panel when editing a post.\n\nWe can now edit the template with the markup and fields for our blog. The completed template markup is shown below, and the video walks through this in detail.\n\n## Fields for use with other templates\n\nYou can use the `suppress` attribute to add fields to the Master Template that are not displayed on the main blog post page but are used on other representations of the content. You can see this with the excerpt field in the default template. It doesn't output on the main blog post page but is used in the listings. \n\nIn our case we want to use the excerpt as an intro to the post so we change it to a field that will output by removing `excerpt=\"true\"`. It now displays on the blog page.\n\nThe categories are also suppressed as we are using the Perch functions to display these.\n\n```html\n<div class=\"post\">\n  <div class=\"hentry\">\n\t  <h1>\n      <a href=\"<perch:blog id=\"postURL\" type=\"hidden\">\" rel=\"bookmark\" class=\"p-name\">\n        <perch:blog id=\"postTitle\" type=\"text\" label=\"Title\" required size=\"xl autowidth\" order=\"1\">\n      </a>\n    </h1>\n    <time class=\"dt-published\" datetime=\"<perch:blog id=\"postDateTime\" type=\"date\" label=\"Date\" time format=\"Y-m-d H:i:s\" divider-before=\"Publishing\">\">\n      <perch:blog id=\"postDateTime\" type=\"date\" time format=\"%d %B %Y\"> \n    </time>\n\t\t<perch:if exists=\"authorGivenName\">\n      <p class=\"byline\">by <perch:blog id=\"authorGivenName\" type=\"hidden\"> <perch:blog id=\"authorFamilyName\" type=\"hidden\"></p>\n    </perch:if>  \n    <div class=\"intro entry-summary\">\n      <perch:blog id=\"excerpt\" type=\"textarea\" label=\"Excerpt\" markdown order=\"3\" size=\"s\">\n    </div>\n    <div class=\"description entry-content\">\n      <perch:blog id=\"postDescHTML\" type=\"textarea\" label=\"Post\" order=\"2\" editor=\"simplemde\" markdown size=\"xxl autowidth\" required>\n    </div>\n   </div>\n</div>\n\n<perch:categories id=\"categories\" set=\"blog\" label=\"Categories\" display-as=\"checkboxes\" suppress>\n  <a href=\"archive.php?cat=<perch:category id=\"catSlug\" type=\"slug\">\" class=\"p-category\">\n    <perch:category id=\"catTitle\" type=\"text\">\n  </a>\n</perch:categories>\n```\n\nThe key thing to remember with all of these app templates is that there will be a Master Template, and it is here that you need to add any fields you want to use in any template for that content. This includes multiple image sizes. If you want to have a thumbnail for your listing page of a larger image in your blog, add the cropped version here and then use it in your listing template.","type":"video"},{"title":"Editing Content","permalink":"https://docs.grabaperch.com/video/v3/editing-content/","id":"video.v3.editing-content","excerpt":"With Perch installed, we can start to edit our first content. In this video we start with the homepage. And the introductory paragraph on the homepage, which I'm going to make editable.","text":"With Perch installed, we can start to edit our first content. In this video we start with the homepage. And the introductory paragraph on the homepage, which I'm going to make editable.\n\nThe first thing I need to do, is change my `.html` pages into `.php` pages. Perch needs PHP in order to run. Now, it is possible to parse an page with a `.html` extension as PHP on most web servers, so you can have a look in our documentation about using other file extensions. But let's keep things simple for now and just turn this to `.php`.\n\nNext, we need to link in the **Perch Runtime**. This is how we include Perch in our page, it is a PHP include that literally _includes_ Perch. The path to the runtime file needs to be correct. If you homepage is in the root of the site and you have not renamed the Perch folder then your runtime include will look like this:\n\n```php\n<?php include('perch/runtime.php'); ?>\n```\n\nIf you have renamed `perch` to `cms` include it like this:\n\n```php\n<?php include('cms/runtime.php'); ?>\n```\n\nNow we've done that, we can scroll down and find the content we want to edit. Take that chunk of content and delete it. Now, add a Perch region. This is a PHP function that creates a region using the name passed into it, the name can be anything you like to identify the Region. It will display in the Control Panel when you edit this page.\n\n```php\n<?php perch_content('Intro'); ?>\n```\n\nHaving added the runtime and the Region, save the page and reload it in your web browser. The original content will disappear and Perch should now know there is a new area of content to be edited.\n\nIn the Perch Control Panel reload the admin, the homepage will appear in the list. Under Regions is our new region, 'Intro'.\n\nClick on the homepage listing to go to that region where you will need to choose a template to edit the content. The list of templates will be filled with the default Perch templates that ship with Perch. I'm going to choose the default text block template. After picking a template hit submit, you will see a textarea with a little toolbar. The default templates use Markdown, with an editor toolbar to make adding the Markdown easier. You can change these templates to use a WYSIWYG editor if you like.\n\nOnce you have added some content, hit submit and the content will now display on the homepage. So the basics of adding content in Perch are:\n\n1. Add the Perch runtime to the page\n2. Add a Perch Region to the page\n3. Reload the page\n4. Visit the Control Panel and select a template for the Region\n5. Edit content","type":"video"},{"title":"Getting Started","permalink":"https://docs.grabaperch.com/video/v3/getting-started/","id":"video.v3.getting-started","excerpt":"This set of video tutorials aims to take you through the process of building the kind of website typically developed using Perch.","text":"This set of video tutorials aims to take you through the process of building the kind of website typically developed using Perch.\n\nYou will be building the site that we use in our Perch Demo. It's a brochure style site that includes a Blog and Forms functionality.\n\nTo follow along, download the starting point files and watch the videos as a sequence - of course you can also dip in and just watch the ones covering a particular technique if you already have the basics of Perch under your belt.\n\nEach video, when viewed in this documentation site, has a set of notes which often include copy and paste code. The videos all have captions too.\n\n\n## To begin\n\n- Make sure you have a webserver running that has PHP and MySQL installed\n- [Download the files](https://static.grabaperch.com/docs/swiftstartingpoint.zip)\n- Head to the next video","type":"video"},{"title":"Contact Form Error Messaging","permalink":"https://docs.grabaperch.com/video/v3/form-error-messaging/","id":"video.v3.form-error-messaging","excerpt":"In the last video in this series, we created a form with a success message. However, if you try and submit the form without completing all the required fields it's going to reload, which isn't very friendly. We can use Perch forms to create clear error states for our forms.","text":"In the last video in this series, we created a form with a success message. However, if you try and submit the form without completing all the required fields it's going to reload, which isn't very friendly. We can use Perch forms to create clear error states for our forms.\n\nNow I want to do two things here; I want to flag up some fields as being required, and show an error message. In addition to showing the message I display a background colour on the div that wraps the label and field, by adding a class to that element. \n\n## Showing an error message\n\nWe can start by using the `<perch:error></perch:error>` tags to display an error message below any incorrectly completed fields.\n\nThe tags are a pair, with opening and closing tags, between the tags you can add your message and any markup needed to display it. We need to say which field the error message relates to, and also which error state. For the `name` field we want to check that the field has been completed, therefor the `type` attribute is set to `required` and the `for` attribute to `name`. In order for the error to be thrown we need to have `required` to the input field.\n\n\n```html\n<div>\n  <perch:label for=\"name\">Your name:</perch:label>\n\t<perch:input id=\"name\" type=\"text\" required label=\"Name\">\n    <perch:error for=\"name\" type=\"required\"> \n    <p class=\"about-error\">Please enter your name</p>\n    </perch:error>\n</div>\n```\n\nFor the email field we would like that field to be both required AND contain a valid looking email address. To do this we use two sets of `perch:error` tags. The first checking for the type of `required` and the second for a type of `format`. \n\n```html\n<div>\n\t<perch:label for=\"email\">Your email:</perch:label>\n\t<perch:input id=\"email\" type=\"email\" required label=\"Email\">\n    <perch:error for=\"email\" type=\"required\"> \n    <p class=\"about-error\">Please enter your email address</p>\n    </perch:error>\n    <perch:error for=\"email\" type=\"format\"> \n    <p class=\"about-error\">Please enter a valid email address</p>\n    </perch:error>\n</div>\n```\n\nI mentioned that I also want to add a class when there has been an error. To do this you reuse the `perch:error` tags - this time to wrap the class. You can see this in the completed contact form template below.\n\n```html\n<h2><perch:content id=\"heading\" type=\"text\" label=\"Heading\" required></h2>\n<perch:form id=\"form-contact\" method=\"post\" app=\"perch_forms\" role=\"form\">\n  <div class=\"input<perch:error for=\"name\" type=\"required\"> error</perch:error>\">\n\t<perch:label for=\"name\">Your name:</perch:label>\n\t<perch:input id=\"name\" type=\"text\" required label=\"Name\">\n    <perch:error for=\"name\" type=\"required\"> \n    <p class=\"about-error\">Please enter your name</p>\n    </perch:error>\n</div>\n<div class=\"input<perch:error for=\"email\" type=\"required\"> error</perch:error><perch:error for=\"email\" type=\"format\"> error</perch:error>\">\n\t<perch:label for=\"email\">Your email:</perch:label>\n\t<perch:input id=\"email\" type=\"email\" required label=\"Email\">\n    <perch:error for=\"email\" type=\"required\"> \n    <p class=\"about-error\">Please enter your email address</p>\n    </perch:error>\n    <perch:error for=\"email\" type=\"format\"> \n    <p class=\"about-error\">Please enter a valid email address</p>\n    </perch:error>\n</div>\n<div class=\"input<perch:error for=\"message\" type=\"required\"> error</perch:error>\">\n\t<perch:label for=\"message\">Your message:</perch:label>\n\t<perch:input id=\"message\" type=\"textarea\" required label=\"Message\">\n    <perch:error for=\"message\" type=\"required\"> \n    <p class=\"about-error\">Please enter your message</p>\n    </perch:error>\n</div>\n<perch:input type=\"submit\" id=\"submit\" value=\"Send\">\n\n<perch:success>\n<div class=\"alert success\">\n<perch:content id=\"success\" type=\"textarea\" size=\"m\" label=\"Thank you message\" markdown editor=\"simplemde\" required>\n</div>\n</perch:success>\n\n</perch:form>\n```","type":"video"},{"title":"A Google Map","permalink":"https://docs.grabaperch.com/video/v3/google-map/","id":"video.v3.google-map","excerpt":"On our contact page we have a Google map. It shows the company location. Perch makes it really easy to add a Google map to your site.","text":"On our contact page we have a Google map. It shows the company location. Perch makes it really easy to add a Google map to your site. \n\nThe contact page in the starting point files has a Google map embedded. Let's take that out, and instead add a new Perch region. We'll call this one `map`. \n\nGo back to our page and reload, the map will disappear. Then in the admin, we get our new region map. When selecting a template you can see there is already a map template there. What I'd like to do is edit that default template a little bit before we use it. We find the template in `perch/templates/content`, and you should find in there a file named `map.html`. Open that up, and edit it to look like the below code snippet:\n\n```html\n<div class=\"frame\">\n    <perch:content id=\"map\" type=\"map\" label=\"Address\" width=\"560\" height=\"300\" zoom=\"15\">\n</div>\n```\n\nSave the template and then go back to the admin, select the Map template and hit submit. \n\nYou need to set up a Google API key in order to use Google maps. To get your Google maps API key, [visit Google here](https://developers.google.com/maps/documentation/javascript/get-api-key). \n\nOnce you've got your key, add it to `perch/config/config.php` replacing `abc123` with your key.\n\n```php\ndefine('PERCH_GMAPS_API_KEY', 'abc123');\n```\n\nThe Perch Config file is often used in this way, you can think of it as a place to add settings that don't need to be changed in the CMS.\n\nWith your key in place, you can then go back to the Perch admin. Reload the page and you should now be able to search for an address and zoom the map to the location you want to show on the page. We also use the static map tile, so if a visitor doesn't have JavaScript, JavaScript doesn't load, they'll get the static map instead.","type":"video"},{"title":"Installing the Blog","permalink":"https://docs.grabaperch.com/video/v3/installing-blog/","id":"video.v3.installing-blog","excerpt":"We're now going to add a simple blog to the Swift Migrations Site using the Perch blog app. In the starting point files there is some example HTML. It's just an HTML page with a design for the blog, then a detail page for the actual post. This is what we're going to work from to build up our blog.","text":"We're now going to add a simple blog to the Swift Migrations Site using the Perch blog app. In the starting point files there is some example HTML. It's just an HTML page with a design for the blog, then a detail page for the actual post. This is what we're going to work from to build up our blog. \n\n## Download and install the Blog App\n\nThe first thing we need to do is actually install the blog app. Download the blog from the Perch addons site. Once you've downloaded the blog app, unzip it. The zip contains a file structure that matches the structure inside your Perch install. So the folder `perch_blog` is inside `addons/apps`. Copy that, and put it into your site `perch/addons/apps`. If you are following these tutorials in order that will be alongside the Forms app that we added earlier.\n\nIn your code editor open `perch/config/apps.php`, this will already have `perch_forms` listed, add `perch_blog`. \n\n```php\n<?php\n\t$apps_list = ['perch_forms','perch_blog'\n\t];\n```\n\nIf you now visit the Perch Admin you will find Blog in the menu. Click that to get the main blog listing page. Once you add posts they will appear here.\n\nBlog integrates with the categories app. If we go to categories, you can see that installing blog has added this category set called `blog`. Add a couple of categories, and return to the blog app. Add a new post. This uses the default Master Template for blog. The categories you added should show up to be selected. In a later video we will look at how to change the fields that appear on this form - as with everything in Perch you have control over the fields used in the blog. For now though, add a couple of test posts to get started.\n\nOnce you've saved a post either in draft or in publish mode, you can add additional detail under Meta and Social. For example, you can add Facebook Open Graph Tags here. This, again, is all configurable. You can change this template, but we have some default things in here which are the sort of things that people tend to want to use. As yet, nothing is displaying on your site. You're adding posts into the back end of Perch, but just like everything else, you need to create some pages to display the posts how you want them in Perch. \n\nIn the next video we'll have a look at how to start outputting posts that you've entered to your blog.","type":"video"},{"title":"Rewriting URLs with htaccess","permalink":"https://docs.grabaperch.com/video/v3/htaccess-rewrites/","id":"video.v3.htaccess-rewrites","excerpt":"Perch doesn't assume a lot about your web server. One of the things we don't do by default is rewrite all of the URLs of your website. This is for a couple of reasons. It means you can easily add Perch to just a few pages of an existing site, or use it to edit bits of some other app. It also means that if you find yourself working on a site with no ability to rewrite URLs, you can still use Perch.","text":"Perch doesn't assume a lot about your web server. One of the things we don't do by default is rewrite all of the URLs of your website. This is for a couple of reasons. It means you can easily add Perch to just a few pages of an existing site, or use it to edit bits of some other app. It also means that if you find yourself working on a site with no ability to rewrite URLs, you can still use Perch.\n\nThat said, you can easily rewrite URLs in any way you'd like. This information is very much for Perch. Perch Runway does rewrite your URLs because it works with a front controller and therefore has its own routing system. So, if you are using Runway, take a look at the routing documentation.\n\n## The .htaccess file\n\nYou add all of these rules into a file named `.htaccess` saved into the root of your site. This file must be named exactly like this, with the `.` making it a hidden file, and with no extension.\n\n## Removing the file extension\n\nOne thing you might want to do is hide the extension. Instead of visiting `about/history.php`, you could visit `about/history` with no `.php` on the end. To do this add the following rules to your `.htaccess` file. These rules will take any incoming URL with no extension and add `.php` when sending the request to the server. Your visitors won't need the file extension but the server will see the file as if it did have an extension.\n\n```php\nRewriteEngine on\n# Redirect to PHP if it exists.\n# e.g. example.com/foo will display the contents of example.com/foo.php\nRewriteCond %{REQUEST_FILENAME} !-f\nRewriteCond %{REQUEST_FILENAME} !-d\nRewriteCond %{REQUEST_FILENAME}.php -f \nRewriteRule ^(.+)$ $1.php [L,QSA]\n```\n\nIn Perch you can then update your navigation to show the links without the `.php`. To do this add the option `'hide-extensions' => true` when outputting your navigation using `perch_pages_navigation()`.\n\n```php\n<?php \n  perch_pages_navigation([\n    'from-path' => '/about',\n    'levels' => 1,\n\t\t'hide-extensions' => true\n  ]);\n?>\n```\n\n## Rewriting Blog URLs\n\nWe can also rewrite blog URLs. When creating the blog we used querystrings to load our pages. For example:\n\n`https://example.com/blog/post.php?s=2017-04-27-my-blog-post`\n\nA rewritten URL might look like this:\n\n`https://example.com/blog/2017-04-27-my-blog-post`\n\nAs with the pages, the server still 'sees' a querystring. Your visitors however use that much nicer looking URL.\n\nOnce again, we add this to our `.htaccess` file after the lines that allow you to link to pages without the file extension.\n\n```php\nRewriteRule ^blog/([a-zA-Z0-9-/]+)$ /blog/post.php?s=$1 [L]\n```\n\nOnce you have done this be sure to go to Settings in the Control Panel and also update the Blog Post path to represent your new URL format.\n\n## More blog URLs\n\nYou can do more than rewrite the basic URLs. The following rules may help with the various pages within the blog.\n\n### Category Archives\n\n```php\nRewriteRule ^blog/category/([a-zA-Z0-9-/]+)/page/([0-9]+)/{0,1}$ /blog/archive.php?cat=$1&page=$2 [L]\nRewriteRule ^blog/category/([a-zA-Z0-9-/]+)$ /blog/archive.php?cat=$1 [L]\n```\n\n### Date archive by year\n\n```php\nRewriteRule ^blog/date/([a-zA-Z0-9-/]+)/page/([0-9]+)/{0,1}$ /blog/archive.php?year=$1&page=$2 [L]\nRewriteRule ^blog/date/([a-zA-Z0-9-/]+)$ /blog/archive.php?year=$1 [L]\n```\n\n### Tag archive\n\n```php\nRewriteRule ^blog/tag/([a-zA-Z0-9-/]+)/page/([0-9]+)/{0,1}$ /blog/archive.php?tag=$1&page=$2 [L]\nRewriteRule ^blog/tag/([a-zA-Z0-9-/]+)$ /blog/archive.php?tag=$1 [L] \n```\n\n### Post preview\n\n```php\nRewriteRule ^blog/([a-zA-Z0-9-/]+)/preview$ /blog/post.php?s=$1&preview=all [L]\n```\n\nIf you're doing a lot of this, for lots of different types of pages then that may well be a good indication that you should consider upgrading the site to Runway. It handles these rewrites in a far simpler way right from within the control panel. However for simple rewriting you should be able to get to where you need to be in your `.htaccess`.","type":"video"},{"title":"Installing Perch","permalink":"https://docs.grabaperch.com/video/v3/installing-perch/","id":"video.v3.installing-perch","excerpt":"If you download Perch from the Perch website, your download is a zip file. Open that zip file, you'll find inside there's a `perch` folder and also a couple of example pages. Take the Perch folder and copy that into the root of your website. If you'd like to rename the folder to something else for instance `cms` or `admin`, you can do that now. If you do so remember that you will need to now use that folder name instead of `perch` in any paths.","text":"If you download Perch from the Perch website, your download is a zip file. Open that zip file, you'll find inside there's a `perch` folder and also a couple of example pages. Take the Perch folder and copy that into the root of your website. If you'd like to rename the folder to something else for instance `cms` or `admin`, you can do that now. If you do so remember that you will need to now use that folder name instead of `perch` in any paths.\n\nOnce you've got Perch copied over, you need to go to your web browser and visit `/perch`, or the name that you named that folder to. If you are using a local server at localhost then you would visit `http://localhost/perch`.\n\nAt this URL you will find a setup form which also tests your environment to make sure it can run Perch. \n\nThe database host name is very often localhost on your live web hosting and also locally. Your web host should be as tell you though if you need to enter an IP address or something else. I'm using Docker so my container is actually called `db` rather than localhost, so I'm putting that in here.\n\nThen add the name of your database. This will be whatever you set up locally, or the name that your hosting company gives you for your database. Next add your database username and password. Again, ask your host for this or this is whatever your local environment uses.\n\nWith everything complete, click test settings. Perch will run a few tests, and all being well, it will all go on and it will actually let you know that you can install Perch. If you've already got a license key, you can just enter that here. If not, check _try out locally_ and hit continue. Now we're setting up some details for the user account in Perch. This is what you will use to log into your CMS, as the admin user. You can set up other users once you've got Perch installed. Remember these details, you will need them to log in. Then hit continue.\n\nThat's it, we're all installed. We've checked the server compatibility, we've configured the database, we've entered the license key with local testing, and we've created a user account which we can now use to log in. Log in and you are ready to start creating content with Perch.","type":"video"},{"title":"Showing blog posts on the homepage","permalink":"https://docs.grabaperch.com/video/v3/blog-homepage/","id":"video.v3.blog-homepage","excerpt":"On our blog homepage, we have the latest blog posts. As a final part of creating all the content management around our blog, let's see how we can output our blog posts on the homepage using a slightly different template to the one they use when they're shown in other lists.","text":"On our blog homepage, we have the latest blog posts. As a final part of creating all the content management around our blog, let's see how we can output our blog posts on the homepage using a slightly different template to the one they use when they're shown in other lists.\n\nFirst save the template in `perch/templates/blog/post_in_list.html` as `perch/templates/blog/homepage_post_in_list.html`. Then edit this so that it contains the markup for the homepage. \n\n```html\n<perch:before>\n    <div class=\"blog-posts\">\n\t\t\t<h2 class=\"section-header\">Latest blog posts</h2>\n</perch:before>\n    <article class=\"post hentry\">\n        <time datetime=\"<perch:blog id=\"postDateTime\" format=\"%Y-%m-%d\">\" pubdate class=\"published\"><perch:blog id=\"postDateTime\" format=\"%d %B %Y\"></time>\n\n        <h3 class=\"entry-title\"><a href=\"<perch:blog id=\"postURL\">\" rel=\"bookmark\" class=\"entry-title\"><perch:blog id=\"postTitle\"></a></h3>\n       \n        \n        <div class=\"entry-summary\">\n        <perch:blog id=\"excerpt\" type=\"textarea\" markdown>\n        \n        </div>\n    </article>\n<perch:after>\n    </div>\n</perch:after>\n```\n\nNow we need to display the posts and to do this we're going to use `perch_blog_custom`, which you've already been introduced to. We pass in our custom template and also the number of posts we wish to display.\n\n```php\n<?php \n  perch_blog_custom([\n\t  'sort'=>'postDateTime',\n\t\t'sort-order'=>'DESC',\n\t\t'template'=>'blog/homepage_post_in_list.html',\n\t\t'count'=>3\n\t]);\n?>\n```\n\nWe've got lots of things going on on this homepage at this point that use different parts of Perch to manage the content.","type":"video"},{"title":"Managing Content","permalink":"https://docs.grabaperch.com/video/v3/managing-content/","id":"video.v3.managing-content","excerpt":"Perch Runway is a website content management system that solves a classic problem many other systems face. Traditionally, there’s a couple of ways different CMSs handle managing content for pages. Let me show you how those work in Perch Runway.","text":"Perch Runway is a website content management system that solves a classic problem many other systems face. Traditionally, there’s a couple of ways different CMSs handle managing content for pages. Let me show you how those work in Perch Runway.\n\nFirstly, there’s the direct manipulation approach, where you find the page within your site structure and click through to add your content to the page. This is very straightforward and great for less technical users, and it’s the perfect way to edit microcopy, marketing text and unique content that isn’t reused in multiple places around your site.\n\nThere’s never the need to ask “how do I edit the copy on the About page” because it’s right there on the About page. Perfectly simple.\n\nWhere this approach isn’t so useful is when you have large volumes of content. No one wants to be adding a page for every news story, as before long _you’re_ doing the work of managing the content rather than the software.\n\nFor those situations, you need a different approach where you add content to a big bucket, and have the system deal with surfacing it at various places in the website. In Perch Runway, we call those big buckets Collections.\n\nCollections are designed to gather and organise large sets of content which the website can then draw on to build up pages. Here we have collections of Books and Authors, with a relationship between the two so that authors can be assigned to the books they’ve written. This dynamic approach enables us to show listings of books, or authors, books by a given author and so on.\n\nThis is useful for sites with high volumes of content, but of course, the abstraction adds complexity when compared to the direct manipulation approach.\n\nMany CMSs force you down one path or the other, which puts you at a disadvantage if, like most sites, you have a mix of the two types of content.\n\nPerch Runway identifies and designs for this problem by offering both styles of content management - direct manipulation where it makes sense for small on-page content, and Collections to manage large sets.\n\nAnd so the user doesn’t need to think too hard about what type of content they’re editing, we provide easy methods for you to customise the interface to make sure the content is right where the they expect to find it.","type":"video"},{"title":"Required Fields and Conditionals","permalink":"https://docs.grabaperch.com/video/v3/required-fields-conditionals/","id":"video.v3.required-fields-conditionals","excerpt":"We use the `required` attribute on any Perch Template Tags that we want to ensure are completed by the content editor, such as the heading and content on our homepage slide.","text":"We use the `required` attribute on any Perch Template Tags that we want to ensure are completed by the content editor, such as the heading and content on our homepage slide.\n\nOn the homepage slide we also have a subheading. We might not need to make editors add a subheading, but the problem is that if they don't we'll get these stray `h4` elements, as these wrap the template tag for the subheading.\n\nTo solve this issue, we use a perch conditional. We use perch if. This conditional takes an ID, which is the same as the ID of the content that you're checking for. We can add `<perch:if exists=\"subheading\"></perch:if>` around our template tag. You can see these fields in the complete template here:\n\n```html\n<h3><perch:content id=\"heading\" type=\"smarttext\" label=\"Heading\" help=\"This will form the clickable heading on the slide\" required></h3>\n\n<perch:if exists=\"subheading\"><h4><perch:content id=\"subheading\" type=\"smarttext\" label=\"Subheading\"></h4></perch:if>\n\n<img class=\"border\" src=\"<perch:content id=\"image\" type=\"image\" label=\"Image\" width=\"520\" height=\"520\" crop>\" alt=\"<perch:content id=\"alt\" type=\"smarttext\" label=\"Image description\">\">\n\n<perch:content id=\"body\" type=\"textarea\" label=\"Body\" markdown editor=\"simplemde\" size=\"m\" required>\n```\n\nThese tags look a bit like HTML or XML tags, and are part of the perch template engine. Having added these required and conditional tags you ca reload the Admin and you will see that you are unable to submit the form for any required fields that are left empty. The subheading can be left empty, in this case if you view source you will see no stray empty heading elements.\n\nThis is a very simple way to make sure you don't end up with stray mark up in your template. A common thing to do would be to use a `perch:if`, around the image element, as if you've got the image `src`, and they don't upload an image, you're going to end up with empty image elements in your page.","type":"video"},{"title":"The perch_content_custom function","permalink":"https://docs.grabaperch.com/video/v3/perch-content-custom/","id":"video.v3.perch-content-custom","excerpt":"On our home page there are a couple of testimonials. Something you might like to do is have a whole list of testimonials, and display two at random on the home page.","text":"On our home page there are a couple of testimonials. Something you might like to do is have a whole list of testimonials, and display two at random on the home page.\n\nI start by creating a Testimonials page which lists testimonials. This is regular Perch Content, set as a Repeating Region and using the below template, saved as `perch/templates/content/testimonial.html`.\n\n```html\n<div class=\"article\">\n\t<h3 class=\"fn n\">\n\t\t<span class=\"given-name\"><perch:content id=\"givenname\" type=\"text\" label=\"Given name\" required title></span>\n\t\t<span class=\"family-name\"><perch:content id=\"familyname\" type=\"text\" label=\"Family name\" required title></span>\n\t</h3>\n\t<p class=\"meta role\"><perch:content id=\"role\" type=\"text\" label=\"Role and Company\" required></p>\n\t\t\t\t\n\t\t\t\t\n\t<blockquote class=\"description\">\n\t\t<perch:content id=\"quote\" type=\"textarea\" label=\"Quote\" textile editor=\"markitup\" required>\n\t</blockquote>\n</div>\n```\n\nHaving added a few testimonials you can then display them on the homepage - two at a time selected at random - using a different template.\n\nThe homepage template is `perch/templates/content/_home_testimonial.html`. You can see the complete template below. It needs to use fields that exist in the main template for this content, so be sure to copy them correctly. By starting the template with an underscore it is hidden from the template list when setting up a new region.\n\n```html\n<div class=\"testimonial\">\n\t<blockquote>\n\t\t<perch:content id=\"quote\" type=\"textarea\" label=\"Quote\" textile editor=\"markitup\" required>\n\t</blockquote>\n\t<p class=\"byline\"><perch:content id=\"givenname\" type=\"text\" label=\"Given name\" required title> <perch:content id=\"familyname\" type=\"text\" label=\"Family name\" required title>, <perch:content id=\"role\" type=\"text\" label=\"Role and Company\" required></p>\n</div>\n```\n\nTo display our content using this template we will use the `perch_content_custom()` function. It allows you to get some Perch Content and do more processing on it.\n\nThe function takes the name of the region we want the content from and also an array. Inside the square brackets which denote an arrat we have a set of options and values. You can see all of the possibilities in the documentation for `perch_content_custom()`. In our case we pass in the page the region is on, the template we want to use, a value from the template to sort on, the `sort-order` which is `RAND` for random, and a count of 2.\n\n```php\n<?php perch_content_custom('Testimonials',[\n  'page' => '/testimonials.php',\n\t'template' => '_home_testimonial.html',\n\t'sort' => 'familyname',\n\t'sort-order' => 'RAND',\n\t'count' => 2\n]); ?>\n```\n\nThis kind of set up and array with options and values is pretty much all of the PHP that you need to do for Perch, you'll see the same kind of syntax for other `_custom` functions such as `perch_blog_custom`.","type":"video"},{"title":"Perch Repeaters","permalink":"https://docs.grabaperch.com/video/v3/perch-repeaters/","id":"video.v3.perch-repeaters","excerpt":"In the last video I showed you how to create repeating content, in a Perch Repeating Region. In this video I'm going to show you another way of repeating content that is more suitable for small amounts of content, Perch Repeater tags.","text":"In the last video I showed you how to create repeating content, in a Perch Repeating Region. In this video I'm going to show you another way of repeating content that is more suitable for small amounts of content, Perch Repeater tags.\n\nThese tags are ideal for things like allowing the editor to add a set of images along with some content, or links to go with a biography as I am going to set up here.\n\nA repeater is a tag pair, inside the `perch:repeater` tags is th econtent you want to repeat, along with content to output before and after the links using `perch:before` and `perch:after` tags. The id should be unique in your template. The label is a label that will display in admin, and the max attribute is optional and enables a limit to be set.\n\n```html\n<perch:repeater id=\"links\" label=\"Links list\" max=\"5\">\n\n</perch:repeater>\n```\n\nIf you have something like an opening `<ul>` to output before the list add it inside `perch:before` tags, likewise with a closing `</ul>`, which can go inside `perch:after tags`. Then add you content between those sections. The complete repeater part of the template looks like this:\n\n```html\n<perch:repeater id=\"links\" label=\"Links list\" max=\"5\">\n  <perch:before>\n    <ul class=\"links\">\n  </perch:before>\n\n  <li><a href=\"<perch:content id=\"url\" type=\"text\" label=\"URL\">\"><perch:content id=\"linktext\" type=\"smarttext\" label=\"Link Text\"></a></li>\n\n  <perch:after>\n    </ul>\n  </perch:after>\n</perch:repeater>\n```","type":"video"},{"title":"Repeating Regions","permalink":"https://docs.grabaperch.com/video/v3/repeating-regions/","id":"video.v3.repeating-regions","excerpt":"Our team page displays all of the company employees. As the business owner, you might want to add, remove or reorder the employees at any time. To enable this, we can use what we call a Repeating Region in Perch. In this video we work on the 'Team' page which should be changed to a `.php` page and have the Perch Runtime added.","text":"Our team page displays all of the company employees. As the business owner, you might want to add, remove or reorder the employees at any time. To enable this, we can use what we call a Repeating Region in Perch. In this video we work on the 'Team' page which should be changed to a `.php` page and have the Perch Runtime added.\n\nI then create a template `employee.html` containing the markup for a single team member as used on our html page.\n\n```html\n<div class=\"article vcard\">\n\t<h3 class=\"fn n\">\n\t\t<span class=\"given-name\"><perch:content id=\"givenname\" type=\"text\" label=\"Given name\" required title></span>\n\t\t<span class=\"family-name\"><perch:content id=\"familyname\" type=\"text\" label=\"Family name\" required title></span>\n\t</h3>\n\t<p class=\"meta role\"><perch:content id=\"role\" type=\"text\" label=\"Role\" required></p>\n\t\t\t\t\n\t<div class=\"img\">\n\t\t<img class=\"border\" src=\"<perch:content id=\"image\" type=\"image\" label=\"Upload image\" width=\"400\" height=\"400\">\" alt=\"<perch:content id=\"givenname\" type=\"text\"> <perch:content id=\"familyname\" type=\"text\">\">\n\t</div>\n\t\t\t\t\n\t<div class=\"description\">\n\t\t<perch:content id=\"bio\" type=\"textarea\" label=\"Biography\" markdown editor=\"simplemde\" required size=\"m\">\n\t</div>\n</div>\n```\n\nThen we add a Perch Region to the Team page, removing all of the hardcoded content.\n\n```php\n<php<?php perch_content('Team'); ?>\n```\n\nReload the page and in the Perch Control Panel set up that region using the `employee.html` template.\n\nThis time, I'm going to set \"allow multiple items\" on this template. This will mean that we can complete an employee and then _Save and add another_.\n\nFor small amounts of content editing all on one page like this might be good. For larger amounts of content go into Region Options and uncheck \"Edit all on one page\". Which will give you list and detail editing. In this case the title that you click on to get to each item is made up of any items in your template that have `title`, in our case `givenname` and `familyname`.\n\nSomething that's worth noting is that if you decided to upgrade a Perch site to Runway, you can turn a region, a repeating region like this into a collection. So that's a very nice upgrade path for sites where you thought there was only going to be a small amount of content, and suddenly, you're finding that these regions are getting very, very large. Perch by design expects a relatively small site, Runway is designed for these larger sites with huge amounts of content.\n\nMoving an overgrown Region of items to Runway would make them perform better because of the architectural changes in Runway, and you can do that very, very simply by importing a region into a collection.","type":"video"},{"title":"Shared Regions","permalink":"https://docs.grabaperch.com/video/v3/shared-regions/","id":"video.v3.shared-regions","excerpt":"If you have some content that is repeated across your site, then Perch shared content means your editor does not need to enter the same content for every page.","text":"If you have some content that is repeated across your site, then Perch shared content means your editor does not need to enter the same content for every page. \n\nThe contact details we created in the contact details tutorial, they are not just shown on the contact page. They are shown on all the pages of the site, in the footer. We can make these a shared region, and then we can just update them in one place and they'll appear wherever they need to.\n\nTo do this, go into region options where you will see a checkbox for _share across all pages_. Select that, and save. And then, in our code editor, we copy out our region from `contact.php` and add it to the footer of any page that needs to show the contact details, in place of the hardcoded details.\n\nIf you reload a page after adding the Perch Shared Region you will find the shared content in place.\n\nThis is a very simple way to share content. You would use this method when you want to show the content using the exact same template that the first region used.","type":"video"},{"title":"Announcements","permalink":"https://docs.grabaperch.com/functions/announcements/","id":"functions.announcements","excerpt":"The Perch Announcements Add-on is a first party app developed for Perch.\nThis section of the function reference details the functions you can use to work with your listings content.","text":"The Perch Announcements Add-on is a first party app developed for Perch.\nThis section of the function reference details the functions you can use to work with your listings content.","type":"functions"},{"title":"Blog","permalink":"https://docs.grabaperch.com/functions/blog/","id":"functions.blog","excerpt":"The Perch Blog Add-on is a first party app developed for Perch. This section of the function reference details the functions you can use to work with your blog content.","text":"The Perch Blog Add-on is a first party app developed for Perch. This section of the function reference details the functions you can use to work with your blog content.","type":"functions"},{"title":"Comments","permalink":"https://docs.grabaperch.com/functions/comments/","id":"functions.comments","excerpt":"The Perch Comments Add-on is a first party app developed for Perch. This section of the function reference details the functions you can use to work with your comments.","text":"The Perch Comments Add-on is a first party app developed for Perch. This section of the function reference details the functions you can use to work with your comments.","type":"functions"},{"title":"Categories Functions","permalink":"https://docs.grabaperch.com/functions/categories/","id":"functions.categories","excerpt":"To display category listing and detail pages use the category page functions.","text":"To display category listing and detail pages use the category page functions.","type":"functions"},{"title":"Collection functions","permalink":"https://docs.grabaperch.com/functions/collections/","id":"functions.collections","excerpt":"Collections are an extension adding in Runway and define the `perch_collection()` function.","text":"Collections are an extension adding in Runway and define the `perch_collection()` function.","type":"functions"},{"title":"Content functions","permalink":"https://docs.grabaperch.com/functions/content/","id":"functions.content","excerpt":"The Content Functions are the first functions you will come across as the `perch_content()` function creates a Perch Region on your page.","text":"The Content Functions are the first functions you will come across as the `perch_content()` function creates a Perch Region on your page.","type":"functions"},{"title":"Events","permalink":"https://docs.grabaperch.com/functions/events/","id":"functions.events","excerpt":"The Perch Events Add-on is a first party app developed for Perch. This section of the function reference details the functions you can use to work with your events.","text":"The Perch Events Add-on is a first party app developed for Perch. This section of the function reference details the functions you can use to work with your events.","type":"functions"},{"title":"Form","permalink":"https://docs.grabaperch.com/functions/form/","id":"functions.form","excerpt":"Forms are a core part of Perch Functionality, however if you wish to add processing of results you will need to install the optional Forms App.","text":"Forms are a core part of Perch Functionality, however if you wish to add processing of results you will need to install the optional Forms App.\n\nThis section of the docs deals with the sole function exposed by the Perch Forms App - `perch_form`.","type":"functions"},{"title":"Listings","permalink":"https://docs.grabaperch.com/functions/listings/","id":"functions.listings","excerpt":"The Perch Listings Add-on is a first party app developed for Perch. This section of the function reference details the functions you can use to work with your listings content.","text":"The Perch Listings Add-on is a first party app developed for Perch. This section of the function reference details the functions you can use to work with your listings content.","type":"functions"},{"title":"Gallery","permalink":"https://docs.grabaperch.com/functions/gallery/","id":"functions.gallery","excerpt":"The Perch Gallery Add-on is a first party app developed for Perch. This section of the function reference details the functions you can use to work with your gallery.","text":"The Perch Gallery Add-on is a first party app developed for Perch. This section of the function reference details the functions you can use to work with your gallery.","type":"functions"},{"title":"Layout Functions","permalink":"https://docs.grabaperch.com/functions/layouts/","id":"functions.layouts","excerpt":"Perch is very flexible in how you build your pages. You don’t need to create themes, you can just drop regions into the page to add editable content.","text":"Perch is very flexible in how you build your pages. You don’t need to create themes, you can just drop regions into the page to add editable content.\n\nOn many sites, it’s useful to have common page elements like headers, footers and sidebars that don’t change between pages. To make those easy to manage, Perch has layouts.\n\n```php\n<?php include('perch/runtime.php'); ?>\n<?php perch_layout('global.header'); ?>\n<h1>Welcome to my website!</h1>\n<p>...</p>\n<?php perch_layout('global.footer'); ?>\n```\n\nIf you’re familiar with PHP includes, layouts do pretty much the same thing but in a more structured way, and with some handy extra features.\n\nLayout files live in `perch/templates/layouts`. They are PHP files, and should end with a `.php` file extension. Think of them like a reusable slice of a page – they can include anything you’d normally have in a page; HTML, PHP and Perch regions and function calls.\n\nLayouts can also be included [from within templates](/templates/includes/layouts/).\n\n## Naming\n\nPlace your layout files in `perch/templates/layouts`. There are two different ways you can choose to name your files. For simple sites without lots of different layouts, we’d recommend `layout.fragment.php`, for example, for a header in your ‘global’ layout:\n\n```php\nglobal.header.php\n```\n\nThe footer would be `global.footer.php` and a sidebar might be\n`global.sidebar.php`.\n\nIf you had a different structure for your homepage, for example, you could name those `home.header.php` and `home.footer.php`. You get the idea.\n\n### Larger sites\n\nFor larger sites with lots of different layouts, you can also use subfolders.\n\n```php\nglobal/header.php\nglobal/footer.php\n```\n\nThese would then be loaded into your page using a slash, like a file path:\n\n```php\n<?php perch_layout('global/header'); ?>\n```\n\nGrouping layouts into subfolders helps keep them organized.","type":"functions"},{"title":"Mailchimp","permalink":"https://docs.grabaperch.com/functions/mailchimp/","id":"functions.mailchimp","excerpt":"The Perch Mailchimp Add-on is a first party app developed for Perch. This section of the function reference details the functions you can use to work with your Mailchimp lists and campaigns.","text":"The Perch Mailchimp Add-on is a first party app developed for Perch. This section of the function reference details the functions you can use to work with your Mailchimp lists and campaigns.","type":"functions"},{"title":"Members","permalink":"https://docs.grabaperch.com/functions/members/","id":"functions.members","excerpt":"The Perch Members Add-on is a first party app developed for Perch. This section of the function reference details the functions you can use to work with your Members.","text":"The Perch Members Add-on is a first party app developed for Perch. This section of the function reference details the functions you can use to work with your Members.","type":"functions"},{"title":"Navigation & Page Functions","permalink":"https://docs.grabaperch.com/functions/navigation/","id":"functions.navigation","excerpt":"The Navigation functions give you tools to create Navigation for your site. Some of these functions can also be used outside of Navigation - for example in order to return the current page title to pass into a layout.","text":"The Navigation functions give you tools to create Navigation for your site. Some of these functions can also be used outside of Navigation - for example in order to return the current page title to pass into a layout.\n\nIn order to create navigation structures Perch needs to know the structure of your site. This is always the case for Perch Runway as the structure is managed through Runway. For Perch this will only the the case if you have Perch Content on the majority of your pages. If you have only made editable a few bits here and there Perch is unlikely to have enough information about your site to do a good job at managing navigation.\n\nThe following pages explain how to use the Perch Navigation Functions. You can also find out how to format [navigation templates](/templates/navigation/) in the template reference.","type":"functions"},{"title":"Search Functions","permalink":"https://docs.grabaperch.com/functions/search/","id":"functions.search","excerpt":"Search is part of Perch Core functionality and enables you to add a simple text search to your site.","text":"Search is part of Perch Core functionality and enables you to add a simple text search to your site.\n\nSearch can only search content that has been added through Perch and not static pages that you have added. Official apps also register themselves with search so their content will be included.\n\nPerch comes complete with an example search page in the root of the download folder called `search.php`.\n\nAlso in the Perch download is a template in `perch/templates/search`. This template has all of the search template fields in it, including paging and can be used as is or you can edit the mark-up as with any Perch template.\n\nTo get search working make sure you have the template in your site in `perch/templates/search` then visit search.php in your browser and search for things that appear in your content.","type":"functions"},{"title":"Page Attributes","permalink":"https://docs.grabaperch.com/functions/page-attributes/","id":"functions.page-attributes","excerpt":"Page attributes are a way of storing editable content at the page level. This could be anything from meta tag descriptions for SEO, through to options to control what class gets added to the body tag for your CSS to use.","text":"Page attributes are a way of storing editable content at the page level. This could be anything from meta tag descriptions for SEO, through to options to control what class gets added to the body tag for your CSS to use.","type":"functions"},{"title":"Podcasts","permalink":"https://docs.grabaperch.com/functions/podcasts/","id":"functions.podcasts","excerpt":"The Perch Podcasts Add-on is a first party app developed for Perch. This section of the function reference details the functions you can use to work with your Podcast Shows and Episodes.","text":"The Perch Podcasts Add-on is a first party app developed for Perch. This section of the function reference details the functions you can use to work with your Podcast Shows and Episodes.","type":"functions"},{"title":"Foxycart (deprecated)","permalink":"https://docs.grabaperch.com/functions/shop-foxycart/","id":"functions.shop-foxycart","excerpt":"**This Add-on has been deprecated. If you want to build a store we would suggest looking at our fully-featured Shop Add-on**","text":"**This Add-on has been deprecated. If you want to build a store we would suggest looking at our fully-featured Shop Add-on**\n\nThe Perch Foxycart Add-on is a first party app developed for Perch. This section of the function reference details the functions you can use to work with a FoxyCart Store.","type":"functions"},{"title":"PayPal Shop (deprecated)","permalink":"https://docs.grabaperch.com/functions/shop-paypal/","id":"functions.shop-paypal","excerpt":"**This Add-on has been deprecated. If you want to build a store we would suggest looking at our fully-featured Shop Add-on**","text":"**This Add-on has been deprecated. If you want to build a store we would suggest looking at our fully-featured Shop Add-on**\n\nThe Perch PayPal Add-on is a first party app developed for Perch. This section of the function reference details the functions you can use to work with a PayPal cart.","type":"functions"},{"title":"Utility Functions","permalink":"https://docs.grabaperch.com/functions/utilities/","id":"functions.utilities","excerpt":"There are a number of functions that do not fit into any particular section of this reference as you may use them in a variety of ways. These utility functions offer you additional ways to work in your pages with Perch functionality.","text":"There are a number of functions that do not fit into any particular section of this reference as you may use them in a variety of ways. These utility functions offer you additional ways to work in your pages with Perch functionality.","type":"functions"},{"title":"Twitter","permalink":"https://docs.grabaperch.com/functions/twitter/","id":"functions.twitter","excerpt":"The Twitter Add-on is a first party app developed for Perch. This section of the function reference details the functions you can use to work with tweets.","text":"The Twitter Add-on is a first party app developed for Perch. This section of the function reference details the functions you can use to work with tweets.","type":"functions"},{"title":"Shop","permalink":"https://docs.grabaperch.com/functions/shop/","id":"functions.shop","excerpt":"The Perch Shop Add-on is a first party app developed for Perch. This section of the function reference details the functions you can use to work with your Shop.","text":"The Perch Shop Add-on is a first party app developed for Perch. This section of the function reference details the functions you can use to work with your Shop.","type":"functions"},{"title":"perch_announcements_custom()","permalink":"https://docs.grabaperch.com/functions/announcements/perch-announcements-custom/","id":"functions.announcements.perch-announcements-custom","excerpt":"The perch_announcements_custom function is very useful for displaying a specific list of announcements on a homepage for example.","text":"The perch_announcements_custom function is very useful for displaying a specific list of announcements on a homepage for example.\n\n\n## Requires\n\n- the Announcements App installed.\n\n## Parameters\n\n| Type | Description |\n|-|-|\n| Array   | Options array, see table below |\n| Boolean | Set to `true` to have the value returned instead of echoed. |\n\n\n\n## Usage examples\n\n I have also passed in a custom template for this listing.\n\n```php\n<?php\nperch_announcements_custom(array(\n \n    'template' => 'special_listing.html',\n));\n?>\n```","type":"functions"},{"title":"perch_by_announcement()","permalink":"https://docs.grabaperch.com/functions/announcements/perch-by-announcement/","id":"functions.announcements.perch-by-announcement","excerpt":"Display a single announcement with `perch_by_announcement()`.","text":"Display a single announcement with `perch_by_announcement()`.\n\nThe first argument must be either the ID of an announcement. \n\n## Requires\n\n- The Announcements App installed\n\n## Parameters\n\n| Type | Description                                                 |\n|-|-------------------------------------------------------------|\n| Integer    | The ID of an announcement                                   |\n| Boolean | Set to `true` to have the value returned instead of echoed. |\n\n## Usage examples\n\nDescribe the example.\n\n```php\n<?php perch_by_announcement(perch_get('s')); ?>\n```\n\nThe above will use the value of `?s=` on the URL to find the announcement. Announcements are shown using the `announcement.html` master template.\n\nTo return the value, pass `true` as the second argument.\n\n```php\n<?php $html = perch_by_announcement(perch_get('s'), true); ?>\n```","type":"functions"},{"title":"perch_categories()","permalink":"https://docs.grabaperch.com/functions/categories/perch-categories/","id":"functions.categories.perch-categories","excerpt":"The `perch_categories()` function displays a listing of your categories.","text":"The `perch_categories()` function displays a listing of your categories.\n\n## Parameters\n\n| Type | Description |\n|-|-|\n| Array   | Options array, see table below |\n| Boolean | Set to `true` to have the value returned instead of echoed. |\n\n\n## Options array\n\n|Name|Value|\n|-|-|\n|set|The slug of a category set to narrow the output to|\n|template|The name of a template to use to display the content.|\n|sort|The ID of the field to sort on.|\n|sort-order|Either `ASC` (ascending), `DESC` (descending) or `RAND` (random).|\n|sort-type|Either `alpha` or `numeric`. Default is `alpha`.|\n|count|The number of items to display.|\n|start|The item number to start displaying from.|\n|filter|The ID of a field to filter the results by.|\n|match|Used with filter, see the below table for values|\n|value|Used with filter and match. The value to match. For `between` and `in`, takes a comma delimited string. For `regex` takes PCRE regular expression.|\n|skip-template|True or false. Bypass template processing and return the content in an associative array.|\n|return-html|True or false. For use with `skip-template`. Adds the HTML onto the end of the returned array with key `html`.|\n|split-items|True or false. Return an array of individually templated items.|\n|raw|True or false. Returns unprocessed content, for use alongside skip-template.|\n\n*Note:* currently categories can only be filtered by standard fields, and not by custom fields.\n\n## Usage examples\n\n```php\nperch_categories([\n\t'set' => 'my-category-set',\n]);\n```","type":"functions"},{"title":"perch_category()","permalink":"https://docs.grabaperch.com/functions/categories/perch-category/","id":"functions.categories.perch-category","excerpt":"The `perch_category()` function displays a single category when passed a category path.","text":"The `perch_category()` function displays a single category when passed a category path.\n\n## Parameters\n\n| Type | Description |\n|-|-|\n| Path    | String, the path to the category you want to display |\n| Array   | Options array, see table below |\n| Boolean | Set to `true` to have the value returned instead of echoed. |\n\n\n## Options array\n\n|Name|Value|\n|-|-|\n|template|The name of a template to use to display the content.|\n|skip-template|True or false. Bypass template processing and return the content in an associative array.|\n|return-html|True or false. For use with `skip-template`. Adds the HTML onto the end of the returned array with key `html`.|\n|split-items|True or false. Return an array of individually templated items.|\n|raw|True or false. Returns unprocessed content, for use alongside skip-template.|\n\n\n## Usage examples\n\nThe below example will output the category identified by the path `colours/blue`.\n\n```php\n<?php perch_category('colours/blue') ?>\n```","type":"functions"},{"title":"perch_collection()","permalink":"https://docs.grabaperch.com/functions/collections/perch-collection/","id":"functions.collections.perch-collection","excerpt":"Displays a collection on the page by name.","text":"Displays a collection on the page by name.\n\n## Requires\n\n- Perch Runway.\n\n## Parameters\n\n| Type | Description |\n|-|-|\n| String  | Name of the collection |\n| Array   | Options array, see table below |\n| Boolean | Set to `true` to have the value returned instead of echoed. |\n\n\n\n### perch_collection options\n\n|Option|Value|\n|-|-|\n|template|The name of a template to use to display the content.|\n|sort|The ID of the field to sort on.|\n|sort-order|Either `ASC` (ascending), `DESC` (descending) or `RAND` (random).|\n|sort-type|Either `alpha` or `numeric`. Default is `alpha`.|\n|count|The number of items to display.|\n|start|The item number to start displaying from.|\n|filter|The ID of a field to filter the results by.|\n|match|Used with filter, see the below table for values|\n|value|Used with filter and match. The value to match. For `between` and `in`, takes a comma delimited string. For `regex` takes PCRE regular expression.|\n|category|Filter by one or more categories. See [Category filtering](/docs/categories/filtering/)|\n|category-match|Either `any` or `all`. See [Category filtering](/docs/categories/filtering/)|\n|skip-template|True or false. Bypass template processing and return the content in an associative array.|\n|return-html|True or false. For use with `skip-template`. Adds the HTML onto the end of the returned array with key `html`.|\n|split-items|True or false. Return an array of individually templated items.|\n|raw|True or false. Returns unprocessed content, for use alongside skip-template.|\n|paginate|True or false. Whether to use pagination.|\n|count|Integer. (When used with `paginate`) The number of items to show per page if pagination is being used.|\n|pagination-var|The URL query string parameter name to use for the page number. Defaults to page.|\n|page-links|True or false. Create numbered page links as well as previous and next links.|\n|page-link-template|The template to use (if not the default) to generate the page links.|\n|page-link-style|shortened or all. By default a shortened set of page links are generated. If you want a link for every page, set to all.|\n### Possible values for match\n\n| Value      | Aliases       | Description                                                         |\n| ---------- | ------------- | ------------------------------------------------------------------- |\n| eq         | `is`, `exact` | equal to                                                            |\n| neq        | `not`, `!eq`  | not equal to                                                        |\n| gt         |               | greater than                                                        |\n| gte        |               | greater than or equal to                                            |\n| lt         |               | less than                                                           |\n| lte        |               | less than or equal to                                               |\n| contains   |               | the value exists within the content (a simple search)               |\n| !contains  |               | opposite of `contains`: the value does not exist within the content |\n| regex      | `regexp`      | using a PCRE regular expression                                     |\n| between    |               | match between two values                                            |\n| !between   |               | opposite of `between`                                               |\n| eqbetween  |               | match between two values inclusively                                |\n| !eqbetween |               | opposite of `eqbetween`                                             |\n| in         | `within`      | match within a comma delimited content list (like a list of tags)   |\n| !in        | `!within`     | opposite of `in`                                                    |\n\n## Example\n\nThe following example would show the most recent news item from the News collection.\n\nThe template is a template (a default template or one you have created) from /templates/content. If the template is directly within that folder just give the template filename, if it is inside a subfolder you should include the subfolder in this path.\n\n```php\n<?php\n    perch_collection('News', [\n        'template'   => 'article.html',\n        'sort'       => 'date',\n        'sort-order' => 'DESC',\n        'count'      => 1,\n    ]);\n?>\n```\n\n## Filtering content\n\nYou can filter a collection to only display a subset of items. This is done with the `filter` option, which is always used with `match` and `value`.\n\nTake the example of a collection containing properties (real estate). We could filter the list to only show properties where the\n`bedrooms` field as a value of `3` or higher.\n\n```php\n<?php\n    perch_collection('Properties', [\n        'filter' => 'bedrooms',\n        'match'  => 'gte',\n        'value'  => 3,\n    ]);\n?>\n```\n\n## Filtering by multiple fields\n\nYou can filter collection by more than one field by setting an array of filters as the `filter` option. This is best shown in an example.\n\nUsing the same property search example, the below will find all properties with 3 or more bedrooms. To also filter by price, the\n`filter` option becomes an array of filters. Each item in the filter array is an array of `filter`, `match`, `value`.\n\n```php\n<?php\nperch_collection('Properties', [\n    'filter' => [\n        [\n            'filter' => 'bedrooms',\n            'match'  => 'gte',\n            'value'  => 3,\n        ],\n        [\n            'filter' => 'price',\n            'match'  => 'lte',\n            'value'  => 500000,\n        ],\n    ]\n]);\n?>\n```\n\nThis would find properties with 3 or more bedrooms, costing 500,000 or less. Filters are `AND` by default. You can make it `OR` like this:\n\n```php\n<?php\nperch_collection('Properties', [\n    'filter' => [\n        [\n            'filter' => 'bedrooms',\n            'match'  => 'gte',\n            'value'  => 3,\n        ],\n        [\n            'filter' => 'price',\n            'match'  => 'lte',\n            'value'  => 500000,\n        ],\n    ],\n    'match' => 'or',\n]);\n?>\n```\n\n## Specifying an item callback function\n\nWhen retrieving multiple items (such as a filtered list) it is possible to specify a PHP callback function for processing each item before it is templated.\n\n```php\n<?php\nperch_collection('Products', [\n    'each' => function($item) {\n        // process as necessary, then return the modified array\n        return $item;\n    },\n]);\n?>\n```\n\nThe `each` option should be specified as a PHP anonymous function or closure. The function will be passed a single argument, which is an associative array representing each item in turn. After processing, the function must return the array.","type":"functions"},{"title":"perch_blog_author_for_post()","permalink":"https://docs.grabaperch.com/functions/blog/perch-blog-author-for-post/","id":"functions.blog.perch-blog-author-for-post","excerpt":"Display the author of a post with `perch_blog_author_for_post`. The first argument must be either the ID of a post, or a unique post slug. Usually this will have been passed on the URL from a blog listing page.","text":"Display the author of a post with `perch_blog_author_for_post`. The first argument must be either the ID of a post, or a unique post slug. Usually this will have been passed on the URL from a blog listing page.\n\n\n## Requires\n\n- The Blog App installed\n\n## Parameters\n\n| Type | Description |\n|-|-|\n| ID or Slug | the ID or slug of your post |\n| Array   | Options array, see table below |\n| Boolean | Set to `true` to have the value returned instead of echoed. |\n\n\n## Options array\n\n|Name|Value|\n|-|-|\n|template|The template to use. |\n|skip-template|true/false. Return an array rather than HTML.|\n|cache|true/false. By default, output is cached for 10 minutes.|\n\n## Usage examples\n\nDescribe the example.\n\n```php\n<?php perch_blog_author_for_post(perch_get('s')); ?>\n```\n\nBy default, this uses the `author.html` template, or you can specify your own in the options array.\n\n```php\n<?php\n    perch_blog_author_for_post(perch_get('s'), array(\n        'template' => 'author.html',\n    ));\n?>\n```\n\nPass `true` as the final argument to return the result rather than echoing it.\n\n```php\n<?php\n    $author = perch_blog_author_for_post(perch_get('s'), array(\n        'template' => 'author.html',\n    ), true);\n?>\n```","type":"functions"},{"title":"perch_blog_author","permalink":"https://docs.grabaperch.com/functions/blog/perch-blog-author/","id":"functions.blog.perch-blog-author","excerpt":"Display a blog post author with `perch_blog_author()`. The first argument must be either the ID of an author, or a unique author slug. Usually this will have been passed on the URL.","text":"Display a blog post author with `perch_blog_author()`. The first argument must be either the ID of an author, or a unique author slug. Usually this will have been passed on the URL.\n\n## Requires\n\n- The Blog App installed\n\n## Parameters\n\n| Type | Description |\n|-|-|\n| ID or Slug | the ID or slug of your author |\n| Array   | Options array, see table below |\n| Boolean | Set to `true` to have the value returned instead of echoed. |\n\n\n## Options array\n\n|Name|Value|\n|template|The template to use. |\n|skip-template|true/false. Return an array rather than HTML.|\n|cache|true/false. By default, output is cached for 10 minutes.|\n\n## Usage examples\n\nDisplay the author using the default template.\n\n```php\n<?php perch_blog_author(perch_get('author')); ?>\n```\n\nBy default, this uses the `author.html` template, or you can specify your own in the options array.\n\n```php\n<?php\n    perch_blog_author(perch_get('author'), array(\n        'template' => 'author_name.html',\n    ));\n?>\n```\n\nPass `true` as the final argument to return the result rather than echoing it.\n\n```php\n<?php\n    $author = perch_blog_author(perch_get('author'), array(\n        'template' => 'author_name.html',\n    ), true);\n?>\n```","type":"functions"},{"title":"perch_blog_authors()","permalink":"https://docs.grabaperch.com/functions/blog/perch-blog-authors/","id":"functions.blog.perch-blog-authors","excerpt":"Display a list of blog post authors with `perch_blog_authors()`.","text":"Display a list of blog post authors with `perch_blog_authors()`.\n\n## Requires\n\n- The Blog App installed\n\n## Parameters\n\n| Type | Description |\n|-|-|\n| Array   | Options array, see table below |\n| Boolean | Set to `true` to have the value returned instead of echoed. |\n\n\n## Options array\n\n|Name|Value|\n|-|-|\n|template|The template to use. |\n|skip-template|true/false. Return an array rather than HTML.|\n|cache|true/false. By default, output is cached for 10 minutes.|\n|include-empty|true/false. Include authors that have no posts.|\n|filter|Results can be filtered using the same filter options as perch_content_custom(). Includes support for multiple filters.|\n|sort|The ID of a field to sort by.|\n|sort-order|ASC/DESC|\n|start|Int. The start position. Defaults to 1. Not compatible with pagination.|\n|return-html|true/false. For use with skip-template. Adds the HTML onto the end of the returned array|\n|paginate|True or false. Whether to use pagination.|\n|count|Integer. (When used with `paginate`) The number of items to show per page if pagination is being used.|\n|pagination-var|The URL query string parameter name to use for the page number. Defaults to page.|\n|page-links|True or false. Create numbered page links as well as previous and next links.|\n|page-link-template|The template to use (if not the default) to generate the page links.|\n|page-link-style|shortened or all. By default a shortened set of page links are generated. If you want a link for every page, set to all.|\n## Usage examples\n\nSimple display using the default template.\n\n```php\n<?php perch_blog_authors(); ?>\n```\n\nBy default, this uses the `author_list.html` template, but you can specify your own in the options array.\n\n```php\n<?php\n    perch_blog_authors(array(\n        'template' => 'author_list.html',\n    ));\n?>\n```","type":"functions"},{"title":"perch_blog_categories()","permalink":"https://docs.grabaperch.com/functions/blog/perch-blog-categories/","id":"functions.blog.perch-blog-categories","excerpt":"Output a list of the categories set up for the blog with `perch_blog_categories()`.","text":"Output a list of the categories set up for the blog with `perch_blog_categories()`.\n\n## Requires\n\n- The Blog App installed\n\n## Parameters\n\n| Type | Description |\n|-|-|\n| Array   | Options array, see table below |\n| Boolean | Set to `true` to have the value returned instead of echoed. |\n\n\n## Options array\n\n|Name|Value|\n|-|-|\n|template|The template to use. |\n|skip-template|true/false. Return an array rather than HTML.|\n|cache|true/false. By default, output is cached for 10 minutes.|\n|include-empty|true/false. Include sections that have no posts.|\n|filter|Results can be filtered using the same filter options as perch_content_custom(). Includes support for multiple filters.|\n|sort|The ID of a field to sort by.|\n|sort-order|ASC/DESC|\n|start|Int. The start position. Defaults to 1. Not compatible with pagination.|\n|return-html|true/false. For use with skip-template. Adds the HTML onto the end of the returned array|\n|section|A single section slug to filter the results by.|\n|blog|The slug of the blog to pull content from. See [Multiple Blogs](/addons/blog/multiple-blogs/).|\n|paginate|True or false. Whether to use pagination.|\n|count|Integer. (When used with `paginate`) The number of items to show per page if pagination is being used.|\n|pagination-var|The URL query string parameter name to use for the page number. Defaults to page.|\n|page-links|True or false. Create numbered page links as well as previous and next links.|\n|page-link-template|The template to use (if not the default) to generate the page links.|\n|page-link-style|shortened or all. By default a shortened set of page links are generated. If you want a link for every page, set to all.|\n## Usage examples\n\nUsing the default template.\n\n```php\n<?php perch_blog_categories(); ?>\n```\n\nUse an options array to change the template being used.\n\n```php\n<?php\n    perch_blog_categories(array(\n        'template' => 'category_link.html',\n    ));\n?>\n```\n\nPass `true` as the second argument to return the value rather than echo it.\n\n```php\n<?php\n    $categories = perch_blog_categories(array(\n        'template' => 'category_link.html',\n    ), true);\n?>\n```\n\n### Adding fields to categories\n\nThe master template for categories is `category.html`. You can add editable fields to a category by adding them to this template.\n\n```html\n<perch:blog id=\"desc\" type=\"text\" label=\"Description\">\n```\n\nThose fields can then be displayed with the category, and can be used to filter the list. For example, you could add a checkbox to toggle the visibility of a category.\n\n```html\n<perch:blog id=\"visible\" type=\"checkbox\" value=\"1\" label=\"Show on site\">\n```\n\nAnd then filter the list by that field.\n\n```php\n<?php\n    perch_blog_categories(array(\n        'template' => 'category_link.html',\n        'filter' => 'visible',\n        'match' => 'eq',\n        'value' => '1',\n    ));\n?>\n```","type":"functions"},{"title":"perch_blog_category()","permalink":"https://docs.grabaperch.com/functions/blog/perch-blog-category/","id":"functions.blog.perch-blog-category","excerpt":"Output the title of a category with `perch_blog_category()`.","text":"Output the title of a category with `perch_blog_category()`.\n\n## Requires\n\n- The Blog App installed\n\n## Parameters\n\n| Type | Description |\n|-|-|\n| Slug   | Slug of the category you want to show the title for |\n| Boolean | Set to `true` to have the value returned instead of echoed. |\n\n\n## Usage examples\n\nThis will display the title of the category that has the slug passed in as a query string parameter value of `cat`.\n\n```php\n<?php perch_blog_category(perch_get('cat')); ?>\n```\n\nPass `true` as the second argument to return rather than echo the value.\n\n```php\n<?php $cat-title = perch_blog_category(perch_get('cat'), true); ?>\n```","type":"functions"},{"title":"perch_blog_custom()","permalink":"https://docs.grabaperch.com/functions/blog/perch-blog-custom/","id":"functions.blog.perch-blog-custom","excerpt":"Much like the default `perch_content_custom()` function, Blog has `perch_blog_custom()`. This function enables you to get a blog listing customized by any of the available parameters.","text":"Much like the default `perch_content_custom()` function, Blog has `perch_blog_custom()`. This function enables you to get a blog listing customized by any of the available parameters.\n\nThe perch_blog_custom function is very useful for displaying a specific list of posts on a homepage for example.\n\nThe options for filter, match and value work just like\n[perch_content_custom](/docs/content/perch-content-custom/). Category and tag can be either a single item or an array. To *exclude* a category or tag from the results, prefix its name with an exclamation point, e.g. `!news`.\n\n## Requires\n\n- the Blog App installed.\n\n## Parameters\n\n| Type | Description |\n|-|-|\n| Array   | Options array, see table below |\n| Boolean | Set to `true` to have the value returned instead of echoed. |\n\n\n## Options array\n\n|Name|Value|\n|-|-|\n|tag|A single tag or array of tags to return content for. To exclude a tag, prefix its name with an exclamation point.|\n|category|A single category slug or array of category slugs to return content for. To exclude a category, prefix its name with an exclamation point.|\n|author|A single author slug or ID to filter the results by.|\n|section|A single section slug to filter the results by.|\n|blog|The slug of the blog to pull content from. See [Multiple Blogs](/addons/blog/multiple-blogs/).|\n|template|The name of a template to use to display the content.|\n|sort|The ID of the field to sort on.|\n|sort-order|Either `ASC` (ascending), `DESC` (descending) or `RAND` (random).|\n|sort-type|Either `alpha` or `numeric`. Default is `alpha`.|\n|count|The number of items to display.|\n|start|The item number to start displaying from.|\n|filter|The ID of a field to filter the results by.|\n|match|Used with filter, see the below table for values|\n|value|Used with filter and match. The value to match. For `between` and `in`, takes a comma delimited string. For `regex` takes PCRE regular expression.|\n|category|Filter by one or more categories. See [Category filtering](/docs/categories/filtering/)|\n|category-match|Either `any` or `all`. See [Category filtering](/docs/categories/filtering/)|\n|skip-template|True or false. Bypass template processing and return the content in an associative array.|\n|return-html|True or false. For use with `skip-template`. Adds the HTML onto the end of the returned array with key `html`.|\n|split-items|True or false. Return an array of individually templated items.|\n|raw|True or false. Returns unprocessed content, for use alongside skip-template.|\n\n## Possible values for match\n\n| Value      | Aliases       | Description                                                         |\n| ---------- | ------------- | ------------------------------------------------------------------- |\n| eq         | `is`, `exact` | equal to                                                            |\n| neq        | `not`, `!eq`  | not equal to                                                        |\n| gt         |               | greater than                                                        |\n| gte        |               | greater than or equal to                                            |\n| lt         |               | less than                                                           |\n| lte        |               | less than or equal to                                               |\n| contains   |               | the value exists within the content (a simple search)               |\n| !contains  |               | opposite of `contains`: the value does not exist within the content |\n| regex      | `regexp`      | using a PCRE regular expression                                     |\n| between    |               | match between two values                                            |\n| !between   |               | opposite of `between`                                               |\n| eqbetween  |               | match between two values inclusively                                |\n| !eqbetween |               | opposite of `eqbetween`                                             |\n| in         | `within`      | match within a comma delimited content list (like a list of tags)   |\n| !in        | `!within`     | opposite of `in`                                                    |\n\n## Usage examples\n\nThe below example filters on postDateTime, returning entries equal to or between the 1st January 2009 and 1st March 2009 which are in the category news or announcements. I have also passed in a custom template for this listing.\n\n```php\n<?php\nperch_blog_custom(array(\n    'filter' => 'postDateTime',\n    'match' => 'eqbetween',\n    'value' => '2009-01-01, 2009-03-01',\n    'category' => array('news', 'announcements'),\n    'template' => 'special_listing.html',\n));\n?>\n```","type":"functions"},{"title":"perch_blog_date_archive_months()","permalink":"https://docs.grabaperch.com/functions/blog/perch-blog-date-archive-months/","id":"functions.blog.perch-blog-date-archive-months","excerpt":"Display a list of years, and then months nested within those years, along with post counts with `perch_blog_date_archive_months()`.","text":"Display a list of years, and then months nested within those years, along with post counts with `perch_blog_date_archive_months()`.\n\n## Requires\n\n- The Blog App installed\n\n## Parameters\n\n| Type | Description |\n|-|-|\n| String   | A custom template for years  |\n| String   | A custom template for months |\n| Boolean | Set to `true` to have the value returned instead of echoed. |\n\n\n## Options array\n\n|Name|Value|\n|-|-|\n|hide-extensions|true/false. Strips the file extension from any links generated.|\n\n## Usage examples\n\nThis uses two templates. One for the years, and one for the months. By default these are `months_year_link.html` and `months_month_link.html`.\n\n```php\n<?php perch_blog_date_archive_months(); ?>\n```\nYou can specify your own templates:\n\n```php\n<?php perch_blog_date_archive_months('my_years.html', 'my_months.html'); ?>\n```\n\nPass `true` as the final argument to return the result.\n\n```php\n<?php perch_blog_date_archive_months('my_years.html', 'my_months.html', true); ?>\n```","type":"functions"},{"title":"perch_blog_date_archive_years()","permalink":"https://docs.grabaperch.com/functions/blog/perch-blog-date-archive-years/","id":"functions.blog.perch-blog-date-archive-years","excerpt":"Display a list of years and the count of the number of posts in each year with `perch_blog_date_archive_years()`.","text":"Display a list of years and the count of the number of posts in each year with `perch_blog_date_archive_years()`.\n\n## Requires\n\n- The Blog App installed\n\n## Parameters\n\n| Type | Description |\n|-|-|\n| String   | A custom template  |\n| Boolean | Set to `true` to have the value returned instead of echoed. |\n\n\n## Usage examples\n\nUses the `year_link.html` template by default.\n\n```php\n<?php perch_blog_date_archive_years(); ?>\n```\n\nSet your own template.\n\n```php\n<?php perch_blog_date_archive_years('my_awesome_template.html'); ?>\n```\n\nPass `true` as the second argument to return the result.\n\n```php\n<?php $archive = perch_blog_date_archive_years('my_awesome_template.html', true); ?>\n```","type":"functions"},{"title":"perch_blog_post_categories()","permalink":"https://docs.grabaperch.com/functions/blog/perch-blog-post-categories/","id":"functions.blog.perch-blog-post-categories","excerpt":"Display the categories for a given blog post with `perch_blog_post_categories()`.","text":"Display the categories for a given blog post with `perch_blog_post_categories()`.\n\nNot to be confused with `perch_blog_categories()` which is used for outputting all categories used by the blog, not those for a specific post. This is for a specific post\n\n## Requires\n\n- The Blog App installed\n\n## Parameters\n\n| Type | Description |\n|-|-|\n| ID or Slug | the ID or slug of your post |\n| Array   | Options array, see table below |\n| Boolean | Set to `true` to have the value returned instead of echoed. |\n\n\n## Options array\n\n|Name|Value|\n|-|-|\n|hide-extensions|true/false. Strips the file extension from any links generated.|\n\n## Usage examples\n\nThe first argument is a post ID or unique slug to identify the post. By default, this uses the `post_category_link.html` template.\n\n```php\n<?php perch_blog_post_categories(perch_get('s')); ?>\n```\n\nYou can specify a different template as part of the options array:\n\n```php\n<?php perch_blog_post_categories(perch_get('s'), array(\n    'template' => 'my_template.html',\n)); ?>\n```\n\nThe value can be returned by passing true as the last argument.\n\n```php\n<?php perch_blog_post_categories(perch_get('s'), array(\n    'template' => 'my_template.html',\n), true); ?>\n```","type":"functions"},{"title":"perch_blog_post_comment_form()","permalink":"https://docs.grabaperch.com/functions/blog/perch-blog-post-comment-form/","id":"functions.blog.perch-blog-post-comment-form","excerpt":"Display a comment form for the given post.","text":"Display a comment form for the given post.\n\n## Requires\n\n- The Blog App installed\n\n## Parameters\n\n| Type | Description |\n|-|-|\n| ID or Slug | the ID or slug of your post |\n| Array   | Options array, see table below |\n| Boolean | Set to `true` to have the value returned instead of echoed. |\n\n\n## Options array\n\n|Name|Value|\n|-|-|\n|template|The form template to use.|\n\n## Usage examples\n\nThe first argument must be either the ID of a post, or a unique post slug. Usually this will have been passed on the URL from a blog listing page.\n\n```php\n<?php perch_blog_post_comment_form(perch_get('s')); ?>\n```\n\nAn options array can be used. In this case we are passing in an alternate template.\n\n```php\n<?php\nperch_blog_post_comment_form(perch_get('s'), array(\n    'template' => 'comment_form.html',\n));\n?>\n```\n\nPass `true` as the last argument to return the value rather than echoing it.\n\n```php\n<?php\n$comment = perch_blog_post_comment_form(perch_get('s'), array(\n    'template' => 'comment_form.html',\n), true);\n?>\n```\n\n### Note: The form template\n\nThe comment form template must include a Perch form with `id=\"comment\"` for the app to pick it up and process it as a comment.\n\n```html\n<perch:form id=\"comment\" method=\"post\" app=\"perch_blog\" class=\"comment-form\" action=\"<perch:blog id=\"postURL\">\">\n    <fieldset>\n       <legend>Leave a comment</legend>\n        <div>\n            <perch:label for=\"commentName\">Name</perch:label>\n            <perch:input type=\"text\" id=\"commentName\" required label=\"Name\" antispam=\"name\">\n            <perch:error for=\"commentName\" type=\"required\">Required</perch:error>\n        </div>\n        <div>\n            <perch:label for=\"commentEmail\">Email</perch:label>\n            <perch:input type=\"email\" id=\"commentEmail\" required label=\"Email\" antispam=\"email\">\n            <perch:error for=\"commentEmail\" type=\"required\">Required</perch:error>\n            <perch:error for=\"commentEmail\" type=\"format\">Check format of address</perch:error>\n        </div>\n        <div>\n            <perch:label for=\"commentURL\">Website</perch:label>\n            <perch:input type=\"url\" id=\"commentURL\" placeholder=\"http://\" label=\"URL\" antispam=\"url\">\n        </div>\n        <div>\n            <perch:label for=\"commentHTML\">Comment</perch:label>\n            <perch:input type=\"textarea\" id=\"commentHTML\" required label=\"Message\" antispam=\"body\">\n            <perch:error for=\"commentHTML\" type=\"required\">Required</perch:error>\n        </div>\n        <div>\n            <perch:input type=\"hidden\" id=\"postID\" value=\"<perch:blog id=\"postID\">\">\n            <perch:input type=\"submit\" id=\"submitComment\" value=\"Submit\">\n        </div>\n    </fieldset>\n    <perch:success>\n        <p>Thank you. Your comment has been submitted and will appear on the site once approved.</p>\n    </perch:success>\n</perch:form>\n```","type":"functions"},{"title":"perch_blog_post_comments()","permalink":"https://docs.grabaperch.com/functions/blog/perch-blog-post-comments/","id":"functions.blog.perch-blog-post-comments","excerpt":"Displays comments for a given post.","text":"Displays comments for a given post.\n\n## Requires\n\n- The Blog App installed\n\n## Parameters\n\n| Type | Description |\n|-|-|\n| ID or Slug | the ID or slug of your post |\n| Array   | Options array, see table below |\n| Boolean | Set to `true` to have the value returned instead of echoed. |\n\n\n## Options array\n\n|Name|Value|\n|-|-|\n|template|The template to use.|\n|sort| \tThe ID of the field to sort by (detault: commentDateTime)|\n|sort-order|ASC/DESC|\n|paginate|True or false. Whether to use pagination.|\n|count|Integer. (When used with `paginate`) The number of items to show per page if pagination is being used.|\n|pagination-var|The URL query string parameter name to use for the page number. Defaults to page.|\n|page-links|True or false. Create numbered page links as well as previous and next links.|\n|page-link-template|The template to use (if not the default) to generate the page links.|\n|page-link-style|shortened or all. By default a shortened set of page links are generated. If you want a link for every page, set to all.|\n## Usage examples\n\nThe first argument must be either the ID of a post, or a unique post slug. Usually this will have been passed on the URL from a blog listing page.\n\n```php\n<?php perch_blog_post_comments(perch_get('s')); ?>\n```\n\nAn options array can be used to pass in an alternate template.\n\n```php\n<?php\nperch_blog_post_comments(perch_get('s'), array(\n     'template' => 'comment.html',\n));\n?>\n```","type":"functions"},{"title":"perch_blog_post_field()","permalink":"https://docs.grabaperch.com/functions/blog/perch-blog-post-field/","id":"functions.blog.perch-blog-post-field","excerpt":"Output a single field (such as the title) from a blog post using `perch_blog_post_field()`. Normally this would be done using a template, but sometimes is useful to quickly grab a field and output it. A good example is for the page title.","text":"Output a single field (such as the title) from a blog post using `perch_blog_post_field()`. Normally this would be done using a template, but sometimes is useful to quickly grab a field and output it. A good example is for the page title.\n\n## Requires\n\n- The Blog App installed\n\n## Parameters\n\n| Type | Description |\n|-|-|\n| ID or Slug | the ID or slug of your post |\n| String | The ID from your template of the field to return. |\n| Boolean | Set to `true` to have the value returned instead of echoed. |\n\n\n## Usage examples\n\nReturn the value of `postTitle`. The first argument is a post ID or unique slug to identify the post. The second is the ID of the field you want to output.\n\n```php\n<title><?php perch_blog_post_field(perch_get('s'), 'postTitle'); ?></title>\n```\n\nThe value can be returned by passing `true` as the last argument.\n\n```php\n<?php $title = perch_blog_post_field(perch_get('s'), 'postTitle', true); ?>\n```","type":"functions"},{"title":"perch_blog_post_meta()","permalink":"https://docs.grabaperch.com/functions/blog/perch-blog-post-meta/","id":"functions.blog.perch-blog-post-meta","excerpt":"Output a post title and meta tags for the `<head>` of your post detail page using `perch_blog_post_meta()`.","text":"Output a post title and meta tags for the `<head>` of your post detail page using `perch_blog_post_meta()`.\n\nBy default, this uses the `blog/meta_head.html` template. It will output your Facebook Open Graph and Twitter Card meta tags for when a link to your blog post is posted to Facebook or Twitter.\n\n## Requires\n\n- The Blog App installed\n\n## Parameters\n\n| Type | Description |\n|-|-|\n| ID or Slug | the ID or slug of your post |\n| Array   | Options array, see table below |\n| Boolean | Set to `true` to have the value returned instead of echoed. |\n\n\n## Options array\n\n|Name|Value|\n|-|-|\n|template|The template to use. |\n|skip-template|true/false. Return an array rather than HTML.|\n|cache|true/false. By default, output is cached for 10 minutes.|\n\n## Usage examples\n\nThe first argument to the function is the ID or slug of your post. In a typical set-up this might be `perch_get('s')` to get the value of `s` from the URL.\n\n```php\n<head>\n<?php perch_blog_post_meta(perch_get('s')); ?>\n</head>\n```\n\n### Using as part of a layout\n\nOften, you'll want to use one layout file to output the head of your pages for both blog pages and for normal pages too. Your layout file might include somthing like this:\n\n```php\n<head>\n<title><?php perch_pages_title(); ?></title>\n</head>\n```\n\nBut when you're on a blog post detail page, you might want this instead:\n\n```php\n<head>\n<?php perch_blog_post_meta(perch_get('s')); ?>\n</head>\n```\n\nThe way to set this up is to use a layout variable to switch between the two modes. Change your layout to do this:\n\n```php\n<head>\n<?php\n\tif (perch_layout_has('blog-post')) {\n\t\tperch_blog_post_meta(perch_get('s'));\n\t}else{\n\t\techo '<title>' . perch_pages_title(true) . '</title>';\n\t}\n?>\n</head>\n```\n\nSo the layout will now do one thing if `blog-post` is set, and another if not. The final piece of the jigsaw is to set the `blog-post` layout variable when we include the layout from the blog post detail page only.\n\n```php\n<?php\n\tperch_layout('global.header', array(\n\t    'blog-post' => true\n\t));\n?>\n```","type":"functions"},{"title":"perch_blog_post_tags()","permalink":"https://docs.grabaperch.com/functions/blog/perch-blog-post-tags/","id":"functions.blog.perch-blog-post-tags","excerpt":"Display the tags for a given blog post with `perch_blog_post_tags()`.","text":"Display the tags for a given blog post with `perch_blog_post_tags()`.\n\nNot to be confused with `perch_blog_tags()` which is used for outputting all tags used by the blog, not those for a specific post. This is for a specific post.\n\n## Requires\n\n- The Blog App installed\n\n## Parameters\n\n| Type | Description |\n|-|-|\n| String   | Unique slug for a post |\n| Array   | Options array, see table below |\n| Boolean | Set to `true` to have the value returned instead of echoed. |\n\n## Options array\n\n|Name|Value|\n|-|-|\n|template|The template to use. |\n|skip-template|true/false. Return an array rather than HTML.|\n|cache|true/false. By default, output is cached for 10 minutes.|\n\n## Usage examples\n\nThe first argument is a post ID or unique slug to identify the post. In this example we are retrieving the value of `s` from the query string.\n\nBy default, this uses the `post_tag_link.html` template.\n\n```php\n<?php perch_blog_post_tags(perch_get('s')); ?>\n```\n\nYou can specify a different template as part of the options array:\n\n```php\n<?php perch_blog_post_tags(perch_get('s'), array(\n    'template' => 'my_tags_template.html',\n)); ?>\n```\n\nThe value can be returned by passing true as the last argument.\n\n```php\n<?php perch_blog_post_tags(perch_get('s'), array(\n    'template' => 'my_tags_template.html',\n), true); ?>\n```","type":"functions"},{"title":"perch_blog_post()","permalink":"https://docs.grabaperch.com/functions/blog/perch-blog-post/","id":"functions.blog.perch-blog-post","excerpt":"Display a single post with `perch_blog_post()`.","text":"Display a single post with `perch_blog_post()`.\n\nThe first argument must be either the ID of a post, or a unique post slug. Usually this will have been passed on the URL from a blog listing page.\n\n## Requires\n\n- The Blog App installed\n\n## Parameters\n\n| Type | Description |\n|-|-|\n| Integer or Slug   | The ID of a post or a unique post slug |\n| Boolean | Set to `true` to have the value returned instead of echoed. |\n\n## Usage examples\n\nDescribe the example.\n\n```php\n<?php perch_blog_post(perch_get('s')); ?>\n```\n\nThe above will use the value of `?s=` on the URL to find the blog post. Posts are shown using the `post.html` master template.\n\nTo return the value, pass `true` as the second argument.\n\n```php\n<?php $html = perch_blog_post(perch_get('s'), true); ?>\n```","type":"functions"},{"title":"perch_blog_recent_posts()","permalink":"https://docs.grabaperch.com/functions/blog/perch-blog-recent-posts/","id":"functions.blog.perch-blog-recent-posts","excerpt":"Get a list of the most recent blog posts with `perch_blog_recent_posts()`.","text":"Get a list of the most recent blog posts with `perch_blog_recent_posts()`.\n\n## Requires\n\n- The Blog App installed\n\n## Parameters\n\n| Type | Description |\n|-|-|\n| Integer   | Number of posts to return  |\n| Boolean | Set to `true` to have the value returned instead of echoed. |\n\n## Usage examples\n\nDisplay the 10 most recent posts with the default `post_in_list.html` template.\n\n```php\n<?php perch_blog_recent_posts(10); ?>\n```\n\nThe first argument is the number of posts to show. The second argument can be set to `true`\nto return the HTML.\n\n```php\n<?php $html = perch_blog_recent_posts(10, true); ?>\n```\n\nThis is mainly a convenience function. It’s the same as doing the following with `perch_blog_custom()`\n\n```php\n<?php  \nperch_blog_custom(array(\n  'count'      => 10,\n  'template'   => 'post_in_list.html',\n  'sort'       => 'postDateTime',\n  'sort-order' => 'DESC',\n));\n?>\n```\n\nIf you need to filter or make more changes then use `perch_content_custom()`.","type":"functions"},{"title":"perch_blog_section()","permalink":"https://docs.grabaperch.com/functions/blog/perch-blog-section/","id":"functions.blog.perch-blog-section","excerpt":"Output the section with the `perch_blog_section()` function. The first argument should be the slug of the section you want to display.","text":"Output the section with the `perch_blog_section()` function. The first argument should be the slug of the section you want to display.\n\n## Requires\n\n- The Blog App installed\n\n## Parameters\n\n| Type | Description |\n|-|-|\n| String   | Unique slug identifying this section |\n| Array   | Options array, see table below |\n| Boolean | Set to `true` to have the value returned instead of echoed. |\n\n\n## Options array\n\n|Name|Value|\n|-|-|\n|template|The name of the template to use.|\n|skip-template|True or false. If true, returns the data as an array.|\n|split-items|True or false. If true, uses the template but returns an array of templates HTML items.|\n|cache|True or false. Whether the result should be cached or rendered live.|\n\n## Usage examples\n\nDisplay the section using the default section template. \n\n```php\n<?php perch_blog_section(perch_get('section')); ?>\n```\n\nThe second argument is an optional options array:\n\n```php\n<?php perch_blog_section(perch_get('section'), array(\n  'template' => 'my-section-template.html'\n)); ?>\n```\n\nPass true as the third argument to return rather than echo the value.\n\n```php\n<?php perch_blog_section(perch_get('section'), array(\n  'template' => 'my-section-template.html'\n), true ); ?>\n```","type":"functions"},{"title":"perch_blog_sections()","permalink":"https://docs.grabaperch.com/functions/blog/perch-blog-sections/","id":"functions.blog.perch-blog-sections","excerpt":"Output a list of the sections set up for the blog with `perch_blog_sections()`.","text":"Output a list of the sections set up for the blog with `perch_blog_sections()`.\n\nCreating two Blog Sections can be useful if you want to have two distinct blog or news-like sections of your site. For example a traditional Blog and a company news page.\n\n## Requires\n\n- The Blog App installed\n\n## Parameters\n\n| Type | Description |\n|-|-|\n| Array   | Options array, see table below |\n| Boolean | Set to `true` to have the value returned instead of echoed. |\n\n\n## Options array\n\n|Name|Value|\n|-|-|\n|template|The template to use. |\n|skip-template|true/false. Return an array rather than HTML.|\n|cache|true/false. By default, output is cached for 10 minutes.|\n|include-empty|true/false. Include sections that have no posts.|\n|filter|Results can be filtered using the same filter options as perch_content_custom(). Includes support for multiple filters.|\n|blog|The slug of the blog to pull content from. See [Multiple Blogs](/addons/blog/multiple-blogs/).|\n|sort|The ID of a field to sort by.|\n|sort-order|ASC/DESC|\n|start|Int. The start position. Defaults to 1. Not compatible with pagination.|\n|return-html|true/false. For use with skip-template. Adds the HTML onto the end of the returned array|\n|paginate|True or false. Whether to use pagination.|\n|count|Integer. (When used with `paginate`) The number of items to show per page if pagination is being used.|\n|pagination-var|The URL query string parameter name to use for the page number. Defaults to page.|\n|page-links|True or false. Create numbered page links as well as previous and next links.|\n|page-link-template|The template to use (if not the default) to generate the page links.|\n|page-link-style|shortened or all. By default a shortened set of page links are generated. If you want a link for every page, set to all.|\n## Usage examples\n\nA list of all sections using the default template.\n\n```php\n<?php perch_blog_sections(); ?>\n```\n\nAn options array can be passed as the first argument.\n\n```php\n<?php\n    perch_blog_sections(array(\n        'template' => 'my_section_template.html',\n    ));\n?>\n```","type":"functions"},{"title":"perch_blog_tag()","permalink":"https://docs.grabaperch.com/functions/blog/perch-blog-tag/","id":"functions.blog.perch-blog-tag","excerpt":"Output the title of a tag with `perch_blog_tag`.","text":"Output the title of a tag with `perch_blog_tag`.\n\n## Requires\n\n- The Blog App installed\n\n## Parameters\n\n| Type | Description |\n|-|-|\n| String   | Slug of the tag you want to show the title for. |\n| Boolean | Set to `true` to have the value returned instead of echoed. |\n\n\n## Usage examples\n\nOutput the title to the page.\n\n```php\n<?php perch_blog_tag(perch_get('tag')); ?>\n```\n\nPass `true` as the second argument to return rather than echo the value.\n\n```php\n<?php $tag = perch_blog_tag(perch_get('tag'), true); ?>\n```","type":"functions"},{"title":"perch_blog_tags()","permalink":"https://docs.grabaperch.com/functions/blog/perch-blog-tags/","id":"functions.blog.perch-blog-tags","excerpt":"Display a list of tags used across all blog posts with `perch_blog_tags()`.","text":"Display a list of tags used across all blog posts with `perch_blog_tags()`.\n\n## Requires\n\n- The Blog App installed\n\n## Parameters\n\n| Type | Description |\n|-|-|\n| String   | Path of your template relative to `perch/templates/blog` |\n| Boolean | Set to `true` to have the value returned instead of echoed. |\n\n## Usage examples\n\nDisplay tags with the default template `tag_link.html`.\n\n```php\n<?php perch_blog_tags(); ?>\n```\n\nSpecify your own template - this template should be saved into `perch/templates/blog`.\n\n```php\n<?php perch_blog_tags('my_awesome_template.html'); ?>\n```\n\nSet the second argument to `true` to return the result.\n\n```php\n<?php $tags = perch_blog_tags('my_awesome_template.html', true); ?>\n```","type":"functions"},{"title":"perch_blogs()","permalink":"https://docs.grabaperch.com/functions/blog/perch-blogs/","id":"functions.blog.perch-blogs","excerpt":"Output a list of blogs with the `perch_blogs()` function. In Perch Runway you can set up multiple blogs. Use this function to output a list of the configured blogs.","text":"Output a list of blogs with the `perch_blogs()` function. In Perch Runway you can set up multiple blogs. Use this function to output a list of the configured blogs.\n\n## Requires\n\n- The Blog App installed\n- Perch Runway\n\n## Parameters\n\n| Type | Description |\n|-|-|\n| Array   | Options array, see table below |\n| Boolean | Set to `true` to have the value returned instead of echoed. |\n\n\n## Options array\n\n|Name|Value|\n|-|-|\n|template|The template to use. |\n|skip-template|true/false. Return an array rather than HTML.|\n|cache|true/false. By default, output is cached for 10 minutes.|\n|filter|Results can be filtered using the same filter options as perch_content_custom(). Includes support for multiple filters.|\n|sort|The ID of a field to sort by.|\n|sort-order|ASC/DESC|\n|start|Int. The start position. Defaults to 1. Not compatible with pagination.|\n|return-html|true/false. For use with skip-template. Adds the HTML onto the end of the returned array|\n|paginate|True or false. Whether to use pagination.|\n|count|Integer. (When used with `paginate`) The number of items to show per page if pagination is being used.|\n|pagination-var|The URL query string parameter name to use for the page number. Defaults to page.|\n|page-links|True or false. Create numbered page links as well as previous and next links.|\n|page-link-template|The template to use (if not the default) to generate the page links.|\n|page-link-style|shortened or all. By default a shortened set of page links are generated. If you want a link for every page, set to all.|\n## Usage examples\n\nOutput a list of blogs using the default template `blog/blog.html`.\n\n```php\n<?php perch_blogs(); ?>\n```\n\nAn options array can be passed as the first argument.\n\n```php\n<?php\n    perch_blogs(array(\n        'template' => 'my_blog_template.html',\n    ));\n?>\n```","type":"functions"},{"title":"perch_content_create()","permalink":"https://docs.grabaperch.com/functions/content/perch-content-create/","id":"functions.content.perch-content-create","excerpt":"By default, Perch creates a region automatically when it is first used. It can then be configured from within the web interface to pick a template and set its options. This is the primary way to work with Perch regions.","text":"By default, Perch creates a region automatically when it is first used. It can then be configured from within the web interface to pick a template and set its options. This is the primary way to work with Perch regions.\n\nIn some circumstances, it’s also useful to be able to programmatically create a region. An example would be if you intend to always display the region using `perch_content_custom()`, which itself will not create regions. For this, we have `perch_content_create()`.\n\n```php\n<?php perch_content_create('News', array(\n    'template' => 'article.html',\n    'multiple' => true,\n    'edit-mode' => 'listdetail',\n    'sort' => 'date',\n    'sort-order' => 'DESC',\n));\n?>\n```\n\nIf a region doesn’t yet exist, `perch_content_create()` will create it, and configure it with the options provided. If it does exist, it does nothing.\n\nFor this reason, you must **create the region before it is used on the page**. Practically, that means putting your `perch_content_create()`\nstatements at the top of the page. Directly after the Perch runtime include would be a good place.\n\n### perch_content_create options\n\n|Name|Value|\n|-|-|\n|page|The path of the page to create the region on. Leave unset for the current page (most likely case).|\n|template|The name of content template file, e.g. article.html|\n|multiple|true or false. Whether the region takes multiple items.|\n|sort|The ID of a template field to sort the region on.|\n|sort-order|ASC or DESC - the direction of the sort.|\n|edit-mode|singlepage or listdetail. The edit mode to use for the region.|\n|searchable|true or false. Whether the region appears in search results.|\n|search-url|The URL to use when linking to the item from a search result page.|\n|add-to-top|true or false. Whether new items should be added to the top of the region (defaults to false - new items are added to the bottom).|\n|limit|Integer. The number of items to display when the region is output.|\n|shared|true or false. Whether the region is shared across all pages.|\n|title-delimiter|String use to delimit multiple content items when concatenating the default title for an item.|\n|columns|Comma separated list of template field IDs to use for the columns on the listing page when editing in listdetail mode.|\n|roles|Comma separated IDs of user roles with permission to edit the region. (Advanced use.)|","type":"functions"},{"title":"perch_content_custom()","permalink":"https://docs.grabaperch.com/functions/content/perch-content-custom/","id":"functions.content.perch-content-custom","excerpt":"To define editable regions you need to use `perch_content()` however there is a second page function for content that can give you more control over the output of your content.","text":"To define editable regions you need to use `perch_content()` however there is a second page function for content that can give you more control over the output of your content.\n\nThe `perch_content_custom()` function takes the region name and an array of options to enable you to manipulate the content.\n\n```php\n<?php\n  perch_content_custom('News', []);\n?>\n```\n\n## When to use perch_content_custom\n\nIt is important to note that `perch_content_custom()` should not be used to replace all of your perch_content tags.\n\nThe `perch_content_custom()` tag cannot be used to define a new region, that has to be done using `perch_content()` or `perch_content_create()`. In addition `perch_content_custom()` is not cached at edit time, the processing has to happen at run time so loses the performance advantage that `perch_content()` has.\n\nThe most common use of this functionality is to reuse some content used elsewhere on the page or site. For example when creating a list of FAQ questions at the top of a FAQ page so the visitor can jump down from question to answer.\n\n### perch_content_custom options\n\n|Option|Value|\n|-|-|\n|page|The path or array of paths of the page from which to select the region. Should be root-relative. Can end in a * wildcard.|\n|template|The name of a template to use to display the content.|\n|sort|The ID of the field to sort on.|\n|sort-order|Either `ASC` (ascending), `DESC` (descending) or `RAND` (random).|\n|sort-type|Either `alpha` or `numeric`. Default is `alpha`.|\n|count|The number of items to display.|\n|start|The item number to start displaying from.|\n|filter|The ID of a field to filter the results by.|\n|match|Used with filter, see the below table for values|\n|value|Used with filter and match. The value to match. For `between` and `in`, takes a comma delimited string. For `regex` takes PCRE regular expression.|\n|category|Filter by one or more categories. See [Category filtering](/docs/categories/filtering/)|\n|category-match|Either `any` or `all`. See [Category filtering](/docs/categories/filtering/)|\n|skip-template|True or false. Bypass template processing and return the content in an associative array.|\n|return-html|True or false. For use with `skip-template`. Adds the HTML onto the end of the returned array with key `html`.|\n|split-items|True or false. Return an array of individually templated items.|\n|raw|True or false. Returns unprocessed content, for use alongside skip-template.|\n|paginate|True or false. Whether to use pagination.|\n|count|Integer. (When used with `paginate`) The number of items to show per page if pagination is being used.|\n|pagination-var|The URL query string parameter name to use for the page number. Defaults to page.|\n|page-links|True or false. Create numbered page links as well as previous and next links.|\n|page-link-template|The template to use (if not the default) to generate the page links.|\n|page-link-style|shortened or all. By default a shortened set of page links are generated. If you want a link for every page, set to all.|\n### Possible values for match\n\n| Value      | Aliases       | Description                                                         |\n| ---------- | ------------- | ------------------------------------------------------------------- |\n| eq         | `is`, `exact` | equal to                                                            |\n| neq        | `not`, `!eq`  | not equal to                                                        |\n| gt         |               | greater than                                                        |\n| gte        |               | greater than or equal to                                            |\n| lt         |               | less than                                                           |\n| lte        |               | less than or equal to                                               |\n| contains   |               | the value exists within the content (a simple search)               |\n| !contains  |               | opposite of `contains`: the value does not exist within the content |\n| regex      | `regexp`      | using a PCRE regular expression                                     |\n| between    |               | match between two values                                            |\n| !between   |               | opposite of `between`                                               |\n| eqbetween  |               | match between two values inclusively                                |\n| !eqbetween |               | opposite of `eqbetween`                                             |\n| in         | `within`      | match within a comma delimited content list (like a list of tags)   |\n| !in        | `!within`     | opposite of `in`                                                    |\n\n## Example\n\nThe following example would show the most recent news item from the News page. It assumes that you have a page at `/news/index.php` that has an editable region on it (added using `perch_content`) called News.\n\nThe template is a template (a default template or one you have created) from /templates/content. If the template is directly within that folder just give the template filename, if it is inside a subfolder you should include the subfolder in this path.\n\n```php\n<?php\n  perch_content_custom('News', [\n    'page'=>'/news/index.php',\n    'template'=>'article.html',\n    'sort'=>'date',\n    'sort-order'=>'DESC',\n    'count'=>1\n  ]);\n?>\n```\n\n## Filtering content\n\nYou can filter a region to only display a subset of items. This is done with the `filter` option, which is always used with `match` and `value`.\n\nTake the example of a multiple-item region containing properties (real estate). We could filter the list to only show properties where the\n`bedrooms` field as a value of `3` or higher.\n\n```php\n<?php\nperch_content_custom('Properties', [\n    'filter'=>'bedrooms',\n    'match'=>'gte',\n    'value'=>3\n]);\n?>\n```\n\n## Filtering by multiple fields\n\nYou can filter content regions by more than one field by setting an array of filters as the `filter` option. This is best shown in an example.\n\nUsing the same property search example, the below will find all properties with 3 or more bedrooms. To also filter by price, the\n`filter` option becomes an array of filters. Each item in the filter array is an array of `filter`, `match`, `value`.\n\n```php\n<?php\nperch_content_custom('Properties', [\n    'filter'=> [\n        [\n            'filter'=>'bedrooms',\n            'match'=>'gte',\n            'value'=>3\n        ],\n        [\n            'filter'=>'price',\n            'match'=>'lte',\n            'value'=>500000\n        ],\n    )\n]);\n?>\n```\n\nThis would find properties with 3 or more bedrooms, costing 500,000 or less. Filters are `AND` by default. You can make it `OR` like this:\n\n```php\n<?php\nperch_content_custom('Properties', [\n    'filter'=>[\n        [\n            'filter'=>'bedrooms',\n            'match'=>'gte',\n            'value'=>3\n        ],\n        [\n            'filter'=>'price',\n            'match'=>'lte',\n            'value'=>500000\n        ],\n    ],\n    'match'=>'or'\n]);\n?>\n```\n\n## Using content from different pages\n\nThe `page` option can be used to pull content in from another page.\n\nThis will return the content for the region ‘Properties’ on the page\n`/properties.php`:\n\n```php\n<?php\nperch_content_custom('Properties', [\n    'page'=>'/properties.php'\n]);\n?>\n```\n\nYou can collect content from multiple pages by using an array:\n\n```php\n<?php\nperch_content_custom('Properties',  [\n    'page' => ['/properties.php', '/properties-archive.php'],\n]);\n?>\n```\n\nSometimes, you may need to pull content from a lot of pages, or you may not know the page name. This happens if your client is created pages once the site is live. You can use a wildcard at the end of the path to find any page that matches.\n\nFor example, this would find the ‘Product’ region on any page with a path that starts `/products/`:\n\n```php\n<?php\nperch_content_custom('Products', [\n    'page' => '/products/*'\n]);\n?>\n```\n\nWhen doing this, you sometimes need to know where the content has come from. For example, you might have a list of items that has been pulled from multiple pages, and want to link to each item’s page. To help with this the special ID value `_page` is available within your template:\n\n```html\n<a href=\"<perch:content id=\"_page\">\">Read more</a>\n```\n\n## Specifying an item callback function\n\nWhen retrieving multiple items (such as a filtered list from a multiple item region) it is possible to specify a PHP callback function for processing each item before it is templated.\n\n```php\n<?php\nperch_content_custom('Products', [\n    'each' => function($item) {\n        // process as necessary, then return the modified array\n        return $item;\n    },\n]);\n?>\n```\n\nThe `each` option should be specified as a PHP anonymous function or closure. The function will be passed a single argument, which is an associative array representing each item in turn. After processing, the function must return the array.\n\n## Retrieving content from multiple regions\n\nThe first argument to `perch_content_custom()` is the key (or name) of the region you want to fetch the content from.\n\nThis can also be an array of keys.\n\n```php\nperch_content_custom(['News', 'Updates'], [...]);\n```\n\nOf course, this can lead to data of different ‘shapes’ being processed as one collection, so you’ll need to make sure your template or code can deal with that.","type":"functions"},{"title":"perch_content()","permalink":"https://docs.grabaperch.com/functions/content/perch-content/","id":"functions.content.perch-content","excerpt":"Displays a content region on the page. If a region with the specified key doesn't exist, one is created.","text":"Displays a content region on the page. If a region with the specified key doesn't exist, one is created.\n\nCreating an editable region with `perch_content` is the basis of editing content with Perch.\n\nTo cause Perch to recognize a new editable region you must use a `perch_content` function as in the below example:\n\n```php\n<?php\n  perch_content('Intro');\n?>\n```\n\nAdding the above tag to any page that has Perch included and then refreshing the page will cause a new Region to show up in the Perch Control Panel with the name “Intro”. You can then add a template to the region in the Perch admin UI.\n\n## Parameters\n\n### Region key\n\nA name (string) to identify the region. This can include mixed case, spaces etc and is displayed as the title of the region within the control panel. Make it readable, but concise.\n\n### Return\n\nOptional, `true` or `false`. To return the HTML output of the region, rather than output it directly to the page, pass a second argument of `true`.\n\n```php\n<?php\n\t$my_var = perch_content('Intro',true);\n?>\n```\n\n## Troubleshooting perch_content\n\nIf you create a new editable region using `perch_content` and the region does not show up in admin then check that PHP is not throwing an error. Errors on a live site may be suppressed and written to an error log.\n\nA common cause of problems is having the path to the Perch runtime incorrect, so check that you have included Perch at the right location.","type":"functions"},{"title":"perch_comment()","permalink":"https://docs.grabaperch.com/functions/comments/perch-comment/","id":"functions.comments.perch-comment","excerpt":"A single comment can be displayed using `perch_comment()`.","text":"A single comment can be displayed using `perch_comment()`.\n\n# Requires\n\n- Comments App installed\n\n## Parameters\n\n| Type | Description |\n|-|-|\n| Integer | ID, the id of the comment to display\n| Array   | Options array, see table below |\n| Boolean | Set to `true` to have the value returned instead of echoed. |\n\n\n## Options array\n\n|Name|Value|\n|-|-|\n|template|The name of an HTML template file in the templates/comments folder.|\n\n## Usage examples\n\nA single comment can be displayed using `perch_comment()`\n\n```php\n<?php perch_comment(4); ?>\n```\n\nPass in a custom template using an options array.\n\n```php\n<?php perch_comment(4, array(\n  template => 'my_template.html'\n)); ?>\n```\n\nReturn the value by setting the third parameter to true.\n\n```php\n<?php\n  $comment = perch_comment(4, array(\n  template => 'my_template.html'\n),true);\n?>\n```","type":"functions"},{"title":"perch_comments_count","permalink":"https://docs.grabaperch.com/functions/comments/perch-comments-count/","id":"functions.comments.perch-comments-count","excerpt":"A count of ‘live’ comments can be output using `perch_comments_count()`","text":"A count of ‘live’ comments can be output using `perch_comments_count()`\n\n# Requires\n\n- Comments App installed\n\n## Parameters\n\n| Type | Description |\n|-|-|\n| String   | A slug or other identifier for the thing being commented on |\n| Boolean | Set to `true` to have the value returned instead of echoed. |\n\n\n## Usage examples\n\nDisplays a count of the comments added to the item identified by `product123`.\n\n```php\n<?php perch_comments_count('product123'); ?>\n```\n\nReturn the value by passing in true.\n\n```php\n<?php $count = perch_comments_count('product123', true); ?>\n```","type":"functions"},{"title":"perch_comments_form","permalink":"https://docs.grabaperch.com/functions/comments/perch-comments-form/","id":"functions.comments.perch-comments-form","excerpt":"A comment form can be output using `perch_comments_form()`","text":"A comment form can be output using `perch_comments_form()`\n\n# Requires\n\n- Comments App installed\n\n## Parameters\n\n| Type | Description |\n|-|-|\n| String | a slug or  string that uniquely identifies the item being commented on|\n| String | a string to describe the item being commented on, such as an article title or product name. If not provided, the page title is used.|\n| Array   | Options array, see table below |\n| Boolean | Set to `true` to have the value returned instead of echoed. |\n\n\n## Options array\n\n|Name|Value|\n|-|-|\n|template|The name of an HTML template file in the templates/comments folder.|\n\n## Usage examples\n\nOutputs a comment form for the item identified as `product123` with a title of `Elasticated garden yoga pants`.\n\n```php\n<?php perch_comments_form('product123', 'Elasticated garden yoga pants'); ?>\n```\n\nPass in an alternate template.\n\n```php\n<?php perch_comments_form('product123', 'Elasticated garden yoga pants', array(\n  template => 'my_template.html'\n)); ?>\n```\n\nReturn the form rather than displaying it.\n\n\n```php\n<?php $form = perch_comments_form('product123', 'Elasticated garden yoga pants', array(\n  template => 'my_template.html'\n),true); ?>\n```","type":"functions"},{"title":"perch_comments()","permalink":"https://docs.grabaperch.com/functions/comments/perch-comments/","id":"functions.comments.perch-comments","excerpt":"Comments are listed using the `perch_comments()` function.","text":"Comments are listed using the `perch_comments()` function.\n\n# Requires\n\n- Comments App installed\n\n## Parameters\n\n| Type | Description |\n|-|-|\n| String | a slug or  string that uniquely identifies the item being commented on|\n| Array   | Options array, see table below |\n| Boolean | Set to `true` to have the value returned instead of echoed. |\n\n\n## Options array\n\n|Name|Value|\n|-|-|\n|template|The name of an HTML template file in the templates/comments folder.|\n|sort|The field to sort by|\n|sort-order|ASC or DESC - the direction to sort in|\n|paginate|True or false. Whether to use pagination.|\n|count|Integer. (When used with `paginate`) The number of items to show per page if pagination is being used.|\n|pagination-var|The URL query string parameter name to use for the page number. Defaults to page.|\n|page-links|True or false. Create numbered page links as well as previous and next links.|\n|page-link-template|The template to use (if not the default) to generate the page links.|\n|page-link-style|shortened or all. By default a shortened set of page links are generated. If you want a link for every page, set to all.|\n## Usage examples\n\nOutputs the comments for the item identified as `product123`\n\n```php\n<?php perch_comments('product123'); ?>\n```\n\nPass in an alternate template.\n\n```php\n<?php perch_comments_form('product123', array(\n  template => 'my_template.html'\n)); ?>\n```\n\nReturn the comments rather than displaying them.\n\n\n```php\n<?php $comments = perch_comments_form('product123', array(\n  template => 'my_template.html'\n),true); ?>\n```","type":"functions"},{"title":"perch_form_reponses()","permalink":"https://docs.grabaperch.com/functions/form/perch-form-responses/","id":"functions.form.perch-form-responses","excerpt":"The `perch_form_reponses()` function is a method of showing responses of a form basedon specific form field value.","text":"The `perch_form_reponses()` function is a method of showing responses of a form basedon specific form field value.\n\nIf you have the Forms App installed then you can directly get the form responses using this function.\n\n## Requires\n\nThe Forms App installed.\n\n## Parameters\n\n| Type | Description |\n|-|-|\n| formID | form id that uniquely identifies the form|\n| by_field | a form field id |\n| value | the value that your responses will be filtered  |\n| Array   | Options array, see table below |\n| Boolean | Set to `true` to have the value returned instead of echoed. |\n\n\n## Options array\n\n|Name|Value|\n|-|-|\n|template|The name of an HTML template file in the templates/comments folder.|\n\n\n## Usage examples\n\nOutputs the responses for the form with ID identified as `4`  which have the name field equal with value Tom\n\n```php\n\n   perch_form_reponses(4,array(\n                      'by_field'=>'name',\n                       'value'=>'Tom'\n                       ));\n\n```\n\nPass in an alternate template.\n\n```php\n\n   perch_form_reponses(4,array(\n                    template => 'my_template.html',\n                      'by_field'=>'name',\n                       'value'=>'Tom'\n                       ));\n\n \n```","type":"functions"},{"title":"perch_form()","permalink":"https://docs.grabaperch.com/functions/form/perch-form/","id":"functions.form.perch-form","excerpt":"The `perch_form()` function is a method of adding a form directly to a PHP page. In most cases you will add a form just like any Perch Content, by selecting the Form template when creating the Region in the Perch Control Panel.","text":"The `perch_form()` function is a method of adding a form directly to a PHP page. In most cases you will add a form just like any Perch Content, by selecting the Form template when creating the Region in the Perch Control Panel.\n\nIf you have the Forms App installed then you can directly add the form using this function.\n\n## Requires\n\nThe Forms App installed.\n\n## Parameters\n\n| Type | Description |\n|-|-|\n| String  | The template to use for this form. Must be inside `perch/templates/forms` |\n\n\n## Usage examples\n\nTo include a form directly on a page.\n\n```php\n<?php perch_form('contact.html'); ?>\n```","type":"functions"},{"title":"perch_events_bookings()","permalink":"https://docs.grabaperch.com/functions/events/perch-events-bookings/","id":"functions.events.perch-events-bookings","excerpt":"Display a list of bookings for the logged in customer using `perch_events_bookings()`.","text":"Display a list of bookings for the logged in customer using `perch_events_bookings()`.\n\n## Requires\n\n- Perch Events installed\n\n## Parameters\n\n| Type | Description |\n|-|-|\n| Array   | Options array, see table below |\n| Boolean | Set to `true` to have the value returned instead of echoed. |\n\n\n## Options array\n\n|Name|Value|\n|-|-|\n|template|The name of a template to use to display the content.|\n|sort|The ID of the field to sort on.|\n|sort-order|Either `ASC` (ascending), `DESC` (descending) or `RAND` (random).|\n|sort-type|Either `alpha` or `numeric`. Default is `alpha`.|\n|count|The number of items to display.|\n|start|The item number to start displaying from.|\n|filter|The ID of a field to filter the results by.|\n|match|Used with filter, see the below table for values|\n|value|Used with filter and match. The value to match. For `between` and `in`, takes a comma delimited string. For `regex` takes PCRE regular expression.|\n|category|Filter by one or more categories. See [Category filtering](/docs/categories/filtering/)|\n|category-match|Either `any` or `all`. See [Category filtering](/docs/categories/filtering/)|\n|skip-template|True or false. Bypass template processing and return the content in an associative array.|\n|return-html|True or false. For use with `skip-template`. Adds the HTML onto the end of the returned array with key `html`.|\n|split-items|True or false. Return an array of individually templated items.|\n|raw|True or false. Returns unprocessed content, for use alongside skip-template.|\n|paginate|True or false. Whether to use pagination.|\n|count|Integer. (When used with `paginate`) The number of items to show per page if pagination is being used.|\n|pagination-var|The URL query string parameter name to use for the page number. Defaults to page.|\n|page-links|True or false. Create numbered page links as well as previous and next links.|\n|page-link-template|The template to use (if not the default) to generate the page links.|\n|page-link-style|shortened or all. By default a shortened set of page links are generated. If you want a link for every page, set to all.|\n## Usage examples\n\nDisplay bookings with the default template. The default template is `events/booking/list.html`.\n\n```php\nperch_events_bookings();\n```\n\nThis function accepts an array of options to control what is returned. It can be used as follows.\n\n```php\nperch_events_bookings([\n    'template' => 'booking_list.html',\n    'count' => 10,\n]);\n```","type":"functions"},{"title":"perch_events_calendar()","permalink":"https://docs.grabaperch.com/functions/events/perch-events-calendar/","id":"functions.events.perch-events-calendar","excerpt":"The `perch_events_calendar()` function displays a simple events calendar using your events data.","text":"The `perch_events_calendar()` function displays a simple events calendar using your events data.\n\n## Requires\n\n- the Events App installed.\n\n## Parameters\n\n| Type | Description |\n|-|-|\n| Array   | Options array, see table below |\n| Boolean | Set to `true` to have the value returned instead of echoed. |\n\n\n## Options array\n\n|Name|Value|\n|-|-|\n|past-events| Set to true or false, whether to show past events.|\n|category|A single category slug or array of category slugs to return content for. To exclude a category, prefix its name with an exclamation point.|\n|calendar-template| Template for the calendar |\n|blank-day-template| Template for blank days with no events|\n|event-day-template| Template for days with events |\n\n\n## Usage examples\n\nDisplays a calendar using the default templates found in `perch_events/templates`. Shows future events, from all categories\n\n```php\n<?php perch_events_calendar(); ?>\n```\n\nYou can pass in different templates and options using an options array.\n\n```php\n<?php\nperch_events_calendar(array(\n\t'past-events'        => true,\n\t'category'           => array('picnics', 'concerts'),\n\t'calendar-template'  => 'events/calendar/calendar.html',\n\t'blank-day-template' => 'events/calendar/blank.html',\n\t'event-day-template' => 'events/calendar/event.html'\n));\n?>\n```","type":"functions"},{"title":"perch_events_listing()","permalink":"https://docs.grabaperch.com/functions/events/perch-events-listing/","id":"functions.events.perch-events-listing","excerpt":"The `perch_events_listing()` function displays a simple events listing using your events data.","text":"The `perch_events_listing()` function displays a simple events listing using your events data.\n\n## Requires\n\n- the Events App installed.\n\n## Parameters\n\n| Type | Description |\n|-|-|\n| Array   | Options array, see table below |\n| Boolean | Set to `true` to have the value returned instead of echoed. |\n\n\n## Options array\n\n|Name|Value|\n|-|-|\n|past-events| Set to true or false, whether to show past events.|\n|category|A single category slug or array of category slugs to return content for. To exclude a category, prefix its name with an exclamation point.|\n|calendar-template| Template for the calendar |\n|blank-day-template| Template for blank days with no events|\n|event-day-template| Template for days with events |\n\n\n## Usage examples\n\nDisplays a listing using the default templates found in `perch_events/templates`. Shows future events, from all categories\n\n```php\n<?php perch_events_listing(); ?>\n```\n\nYou can pass in different templates and options using an options array.\n\n```php\n<?php\nperch_events_listing(array(\n\t'past-events'        => true,\n\t'category'           => array('picnics', 'concerts'),\n\t'calendar-template'  => 'events/listing/calendar.html',\n\t'blank-day-template' => 'events/listing/blank.html',\n\t'event-day-template' => 'events/listing/event.html'\n));\n?>\n```","type":"functions"},{"title":"perch_events_custom()","permalink":"https://docs.grabaperch.com/functions/events/perch-events-custom/","id":"functions.events.perch-events-custom","excerpt":"Much like the default `perch_content_custom()` function, Events has `perch_events_custom()`. This function enables you to get an events listing customized by any of the available parameters.","text":"Much like the default `perch_content_custom()` function, Events has `perch_events_custom()`. This function enables you to get an events listing customized by any of the available parameters.\n\n## Requires\n\n- Events App installed\n\n## Parameters\n\n| Type | Description |\n|-|-|\n| Array   | Options array, see table below |\n| Boolean | Set to `true` to have the value returned instead of echoed. |\n\n\n## Options array\n\n|Name|Value|\n|-|-|\n|category|A single category slug or array of category slugs to return content for. To exclude a category, prefix its name with an exclamation point.|\n|template|The name of a template to use to display the content.|\n|sort|The ID of the field to sort on.|\n|sort-order|Either `ASC` (ascending), `DESC` (descending) or `RAND` (random).|\n|sort-type|Either `alpha` or `numeric`. Default is `alpha`.|\n|count|The number of items to display.|\n|start|The item number to start displaying from.|\n|filter|The ID of a field to filter the results by.|\n|match|Used with filter, see the below table for values|\n|value|Used with filter and match. The value to match. For `between` and `in`, takes a comma delimited string. For `regex` takes PCRE regular expression.|\n|category|Filter by one or more categories. See [Category filtering](/docs/categories/filtering/)|\n|category-match|Either `any` or `all`. See [Category filtering](/docs/categories/filtering/)|\n|skip-template|True or false. Bypass template processing and return the content in an associative array.|\n|return-html|True or false. For use with `skip-template`. Adds the HTML onto the end of the returned array with key `html`.|\n|split-items|True or false. Return an array of individually templated items.|\n|raw|True or false. Returns unprocessed content, for use alongside skip-template.|\n\n### Possible values for match\n\n| Value      | Aliases       | Description                                                         |\n| ---------- | ------------- | ------------------------------------------------------------------- |\n| eq         | `is`, `exact` | equal to                                                            |\n| neq        | `not`, `!eq`  | not equal to                                                        |\n| gt         |               | greater than                                                        |\n| gte        |               | greater than or equal to                                            |\n| lt         |               | less than                                                           |\n| lte        |               | less than or equal to                                               |\n| contains   |               | the value exists within the content (a simple search)               |\n| !contains  |               | opposite of `contains`: the value does not exist within the content |\n| regex      | `regexp`      | using a PCRE regular expression                                     |\n| between    |               | match between two values                                            |\n| !between   |               | opposite of `between`                                               |\n| eqbetween  |               | match between two values inclusively                                |\n| !eqbetween |               | opposite of `eqbetween`                                             |\n| in         | `within`      | match within a comma delimited content list (like a list of tags)   |\n| !in        | `!within`     | opposite of `in`                                                    |\n\n## Usage examples\n\nThe following example would select all dates equal to or between the 3rd August 2010 and the 14th August 2010, in the categories of picnics or concerts. We also pass in a template.\n\n```php\n<?php\nperch_events_custom(array(\n\t'filter'   => 'eventDateTime',\n\t'match'    => 'eqbetween',\n\t'value'    => '2010-08-03, 2010-08-14',\n\t'category' => array('picnics', 'concerts'),\n\t'template' => 'events/listing/event-day.html'\n));\n?>\n```\n\nReturn the array to a variable for further processing.\n\n\n```php\n<?php\n$events = perch_events_custom(array(\n\t'filter'   => 'eventDateTime',\n\t'match'    => 'eqbetween',\n\t'value'    => '2010-08-03, 2010-08-14',\n\t'category' => array('picnics', 'concerts'),\n\t'template' => 'events/listing/event-day.html'\n),true);\n?>\n```","type":"functions"},{"title":"perch_layout_has()","permalink":"https://docs.grabaperch.com/functions/layouts/perch-layout-has/","id":"functions.layouts.perch-layout-has","excerpt":"You can test to see if a layout variable has been set using `perch_layout_has()`.","text":"You can test to see if a layout variable has been set using `perch_layout_has()`.\n\nThe following code checks to see if the Layout Variable \"title\" has been set. If it has then the contents of that variable is output, if not a predefined string is output. You can use this to create a fallback state if a page does not populate the title variable.\n\n```php\n<?php\n    if (perch_layout_has('title')) {\n    \tperch_layout_var('title');\n    }else{\n    \techo \"Welcome to my site!\";\n    }\n?>\n```","type":"functions"},{"title":"perch_layout_var()","permalink":"https://docs.grabaperch.com/functions/layouts/perch-layout-var/","id":"functions.layouts.perch-layout-var","excerpt":"You can pass any value into the layout using an array.","text":"You can pass any value into the layout using an array.\n\n```php\nperch_layout('global.header', array(\n    'title'=>'Welcome to my site!',\n    'class'=>'home',\n));\n```\n\nHaving done so you can use these variables in the layout by passing the name to the `perch_layout_var` function. To output the \"title\" from the above `perch_layout` example we would use:\n\n```php\n<title><?php perch_layout_var('title'); ?></title>\n```\n\nValues are automatically HTML-encoded so they’re safe for output. To return the value, or get it before it’s encoded (essential if the variable isn’t a string):\n\n```php\n<?php $title = perch_layout_var('title', true); ?>\n```","type":"functions"},{"title":"perch_layout()","permalink":"https://docs.grabaperch.com/functions/layouts/perch-layout/","id":"functions.layouts.perch-layout","excerpt":"To use a layout in your page use the `perch_layout()` function.","text":"To use a layout in your page use the `perch_layout()` function.\n\n```php\n<?php perch_layout('home.header'); ?>\n```\n\nThis would output the `perch/templates/layouts/home.header.php` file to the page.\n\n## Passing in Layout Variables\n\nAlthough we think of layouts being the same across multiple pages, there are usually small things that change from page to page. That might be the title in the HTML `<title>` tags, a class on the `<body>`, or whether to include a JavaScript file or not.\n\nTo help with this, we have layout variables.\n\n```php\n<?php\nperch_layout('global.header', array(\n    'title'=>'Welcome to my site!',\n    'class'=>'home',\n));\n?>\n```\n\nIn the above example I pass in an array as the second argument for `perch_layout` this array has key value pairs which set Layout Variables. The key is the name you will refer to this variable by, the value is the contents.\n\n## Returning the contents\n\nIf you want to return the contents of the layout fragment (perhaps for further processing) you can pass in true as the final argument of `perch_layout`:\n\n```php\n<?php\n$header = perch_layout('home.header', array(\n    'title'=>'Welcome to my site!',\n    'class'=>'home',\n), true);\n?>\n```\n\nThe third argument (`true`) causes the value to be returned. (In PHP terms, this uses output buffering). If you do not need to set any Layout Variables use an empty array as the second argument.\n\n```php\n<?php\n$header = perch_layout('home.header', array(), true); \n?>\n```","type":"functions"},{"title":"perch_gallery_adjacent_images()","permalink":"https://docs.grabaperch.com/functions/gallery/perch-gallery-adjacent-images/","id":"functions.gallery.perch-gallery-adjacent-images","excerpt":"Get the previous and next images adjacent to the given image within the image’s album with `perch_gallery_adjacent_images()`.","text":"Get the previous and next images adjacent to the given image within the image’s album with `perch_gallery_adjacent_images()`.\n\n## Requires\n\n- Perch Gallery App installed\n\n## Parameters\n\n| Type | Description |\n|-|-|\n| Integer | The ID of the current image |\n| Array   | Options array, see table below |\n| Boolean | Set to `true` to have the value returned instead of echoed. |\n\n\n## Options array\n\n|Name|Value|\n|-|-|\n|template|The name of a template to use from the templates/gallery folder|\n|skip-template|true or false. Return a PHP array instead of using the template|\n\n## Usage examples\n\nDisplay the adjacent images using the default template `b_adjacent_images.html`.\n\n```php\n<?php perch_gallery_adjacent_images('1234'); ?>\n```\n\nSpecify you own template.\n\n```php\n<?php perch_gallery_adjacent_images('1234', array(\n    'template' => 'prev_next_images.html',\n)); ?>\n```\n\nPass a third argument of `true` to return the result rather than echoing it.\n\n```php\n<?php $images = perch_gallery_adjacent_images('1234', array(\n    'template' => 'prev_next_images.html',\n),true); ?>\n```\n\n### Example template\n\nThis function returns at most two images. It’s like a single image template, but the IDs have been prefixed with `prev-` or `next-` to make them easy to work with.\n\nSo where you’d normally use `id=\"main\"` to get the ‘main’ size of an image, in this template you’d use `id=\"next-main\"` to get the ‘main’ size of the *next* image.\n\nOf course, there may not be a previous or next image, depending on the current position in the set, so it’s always best to check.\n\n```html\n<perch:if exists=\"prev-id\">\n<li>\n    <h3>Previous</h3>\n    <a href=\"image.php?id=<perch:gallery id=\"prev-id\">\">\n        <img src=\"<perch:gallery id=\"prev-small\">\" alt=\"<perch:gallery id=\"prev-imageAlt\">\"\n            height=\"<perch:gallery id=\"prev-small-h\">\" width=\"<perch:gallery id=\"prev-small-w\"> \">\n    </a>\n</li>\n</perch:if>\n<perch:if exists=\"next-id\">\n<li>\n    <h3>Next</h3>\n    <a href=\"image.php?id=<perch:gallery id=\"next-id\">\">\n        <img src=\"<perch:gallery id=\"next-small\">\" alt=\"<perch:gallery id=\"next-imageAlt\">\"\n            height=\"<perch:gallery id=\"next-small-h\">\" width=\"<perch:gallery id=\"next-small-w\"> \">\n        </a>\n</li>\n</perch:if>\n```","type":"functions"},{"title":"perch_gallery_album_details()","permalink":"https://docs.grabaperch.com/functions/gallery/perch-gallery-album-details/","id":"functions.gallery.perch-gallery-album-details","excerpt":"Get the details (title, number of images, description etc) of a given album, specified by its slug with the `perch_gallery_album_details()` function.","text":"Get the details (title, number of images, description etc) of a given album, specified by its slug with the `perch_gallery_album_details()` function.\n\n## Requires\n\n- Perch Gallery App installed\n\n## Parameters\n\n| Type | Description |\n|-|-|\n| String  | A slug to identify the album |\n| Array   | Options array, see table below |\n| Boolean | Set to `true` to have the value returned instead of echoed. |\n\n\n## Options array\n\n|Name|Value|\n|-|-|\n|template|The name of a template to use from the templates/gallery folder|\n|skip-template|true or false. Return a PHP array instead of using the template|\n\n## Usage examples\n\nDisplay images from the album with the slug `my-holiday-photos`, uses the `album.html` template.\n\n```php\n<?php perch_gallery_album_details('my-holiday-photos'); ?>\n```\n\nSpecify your own template.\n\n```php\n<?php perch_gallery_album_details('my-holiday-photos', array(\n    'template' => 'album.html',\n)); ?>\n```\n\nYou can pass `true` as the third argument to return the result rather\nthan echo it.\n\n```php\n<?php\n$images = perch_gallery_album_details('my-holiday-photos', array(\n    'template' => 'album.html',\n),true);\n?>\n```","type":"functions"},{"title":"perch_gallery_album_images()","permalink":"https://docs.grabaperch.com/functions/gallery/perch-gallery-album-images/","id":"functions.gallery.perch-gallery-album-images","excerpt":"Display the images for an album with `perch_gallery_album_images()`. The album to show is identified by its slug. You can find the album slug in album listing within Perch.","text":"Display the images for an album with `perch_gallery_album_images()`. The album to show is identified by its slug. You can find the album slug in album listing within Perch.\n\n## Requires\n\n- Perch Gallery App installed\n\n## Parameters\n\n| Type | Description |\n|-|-|\n| String  | Slug to identify the album |\n| Array   | Options array, see table below |\n| Boolean | Set to `true` to have the value returned instead of echoed. |\n\n\n## Options array\n\n|Name|Value|\n|-|-|\n|template|The name of a template to use from the templates/gallery folder|\n|skip-template|true or false. Return a PHP array instead of using the template|\n\n## Usage examples\n\nDisplay the images for the album with the slug `my-holiday-photos`. By default, this uses the example `a_list_image.html` template.\n\n```php\n<?php perch_gallery_album_images('my-holiday-photos'); ?>\n```\n\nUsually, you’ll build a page to list the contents of *any* album, so this portion needs to be dynamic. That’s normally done by passing the album slug to the page as part of the URL.\n\nIf your album listing page is:\n\n`album.php`\n\nyou might link to it with the album slug to show as part of the *query string* portion of the URL:\n\n`album.php?s=my-holiday-photos`\n\nWe can get that `s=something` from the query string using `perch_get('s')` like this:\n\n```php\n<?php perch_gallery_album_images(perch_get('s')); ?>\n```\n\nThis means that to get an image listing for any album, we just need to build a link to `album.php` with the `albumSlug` as part of the URL:\n\n```php\n<a href=\"album.php?s=<perch:gallery id=\"albumSlug\">\">View <perch:gallery id=\"albumTitle\"></a>\n```\n\nPass in an alternate template using an options array.\n\n```php\n<?php perch_gallery_album_images('my-holiday-photos', array(\n    'template' => 'list_image.html',\n)); ?>\n```\n\nPass a third argument of `true` to return the result rather than echo\nit.\n\n\n```php\n<?php\n$images = perch_gallery_album_images('my-holiday-photos', array(\n    'template' => 'list_image.html',\n),true);\n?>\n```\n\n## Example template\n\nThis function returns a list of images. You can use those as thumbnails\nto link through to large versions, or maybe you want to return large\nimages for building a slideshow or carousel. Either way, the template is\nfor a list of images.\n\nThis example returns the ‘small’ image, with a link to the ‘main’ image.\n\n```html\n<perch:before><ul></perch:before>\n<li class=\"boxer\">\n    <a href=\"<perch:gallery id=\"main\">\">\n        <img src=\"<perch:gallery id=\"small\">\" alt=\"<perch:gallery id=\"imageAlt\">\">\n    </a>\n</li>\n<perch:after></ul></perch:after>\n```","type":"functions"},{"title":"perch_gallery_albums()","permalink":"https://docs.grabaperch.com/functions/gallery/perch-gallery-albums/","id":"functions.gallery.perch-gallery-albums","excerpt":"Get a list of albums, optionally with an image to represent each with the `perch_gallery_albums()` function.","text":"Get a list of albums, optionally with an image to represent each with the `perch_gallery_albums()` function.\n\n## Requires\n\n- Perch Gallery App installed\n\n## Parameters\n\n| Type | Description |\n|-|-|\n| Array   | Options array, see table below |\n| Boolean | Set to `true` to have the value returned instead of echoed. |\n\n\n## Options array\n\n|Name|Value|\n|-|-|\n|template|The name of a template to use from the templates/gallery folder|\n|skip-template|true or false. Return a PHP array instead of using the template|\n\n## Usage examples\n\nGet a listing of albums. This uses the example `a_album.html` template by default.\n\n```php\n<?php perch_gallery_albums(); ?>\n```\n\nYou’ll probably want to specify your own template, which you can do by setting options.\n\n```php\n<?php perch_gallery_albums(array(\n    'template' => 'album.html',\n    'image' => true,\n)); ?>\n```\n\nPass a second argument of `true` to return, rather than echo the result.\n\n\n```php\n<?php\n$albums = perch_gallery_albums(array(\n    'template' => 'album.html',\n    'image' => true,\n), true);\n?>\n```\n\nTo show a list of albums with an image for each, you could use the code:\n\n```php\n<?php perch_gallery_albums(array(\n    'template' => 'my-album.html',\n    'image' => true,\n)); ?>\n```\n\nThe template `perch/templates/gallery/my-album.html` might look like this:\n\n```html\n<perch:before><ul></perch:before>\n<li>\n    <a href=\"album.php?album=<perch:gallery id=\"albumSlug\">\">\n        <img src=\"<perch:gallery id=\"small\">\">\n        <perch:gallery id=\"albumTitle\">\n    </a>\n</li>\n<perch:after></ul></perch:after>\n```\n\nThis would output a list of albums, along with the album title and the ‘small’ image from the first image in each album.","type":"functions"},{"title":"perch_gallery_album_field()","permalink":"https://docs.grabaperch.com/functions/gallery/perch-gallery-album-field/","id":"functions.gallery.perch-gallery-album-field","excerpt":"- Perch Gallery App installed","text":"## Requires\n\n- Perch Gallery App installed\n\n## Parameters\n\n| Type | Description |\n|-|-|\n| String  | Slug to identify the album |\n| String  | The field to return the value of |\n| Boolean | Set to `true` to have the value returned instead of echoed. |\n\n\n## Usage examples\n\n\nOutput a single field (such as the title) from an album. Normally this would be done using a template, but sometimes is useful to quickly grab a field and output it. A good example is for the page title.\n\nThe first argument is the album slug to identify the album. The second is the ID of the field you want to output.\n\n```php\n<title><?php perch_gallery_album_field(perch_get('s'), 'albumTitle'); ?></title>\n```\n\nThe value can be returned by passing `true` as the last argument.\n\n```php\n<?php $title = perch_gallery_album_field(perch_get('s'), 'albumTitle', true); ?>\n```","type":"functions"},{"title":"perch-gallery-build()","permalink":"https://docs.grabaperch.com/functions/gallery/perch-gallery-build/","id":"functions.gallery.perch-gallery-build","excerpt":"To get a quick, simple gallery page listing albums and thumbnails use `perch-gallery-build()`.","text":"To get a quick, simple gallery page listing albums and thumbnails use `perch-gallery-build()`.\n\n## Requires\n\n- Perch Gallery App installed\n\n## Parameters\n\n| Type | Description |\n|-|-|\n| Array   | Options array, see table below |\n| Boolean | Set to `true` to have the value returned instead of echoed. |\n\n\n## Options array\n\n|Name|Value|\n|-|-|\n|template| A custom template to use for display |\n\n## Usage examples\n\nBuild a simple gallery using default templates.\n\n```php\n<?php perch_gallery_build(); ?>\n```\n\nPass in an alternate template.\n\n```php\n<?php\nperch_gallery_build(array(\n   'template'=>'my_image.html'\n));\n?>\n```\n\n\nThe `perch_gallery_album_listing()`, `perch_gallery_album()` and `perch_gallery_images()` functions all accept a wider range of options. Unless you are happy with the defaults, use these functions rather than this simple output.","type":"functions"},{"title":"perch_gallery_image()","permalink":"https://docs.grabaperch.com/functions/gallery/perch-gallery-image/","id":"functions.gallery.perch-gallery-image","excerpt":"Output a specific image, using its ID with `perch_gallery_image()`.","text":"Output a specific image, using its ID with `perch_gallery_image()`.\n\n## Requires\n\n- Perch Gallery App installed\n\n## Parameters\n\n| Type | Description |\n|-|-|\n| Integer | ID of the image |\n| Array   | Options array, see table below |\n| Boolean | Set to `true` to have the value returned instead of echoed. |\n\n\n## Options array\n\n|Name|Value|\n|-|-|\n|template|The name of a template to use from the templates/gallery folder|\n|skip-template|true or false. Return a PHP array instead of using the template|\n\n## Usage examples\n\nDisplay an image, this uses the example `b_static_image.html` template.\n\n```php\n<?php perch_gallery_image('123'); ?>\n```\n\nBy default, this uses the example `b_static_image.html` template, but you can specify your own using options.\n\n```php\n<?php perch_gallery_image('123', array(\n    'template' => 'image.html'\n)); ?>\n```\n\nPass a third argument of `true` to return the result rather than echoing it.\n\n```php\n<?php\n$image = perch_gallery_image('123', array(\n    'template' => 'image.html'\n),true);\n?>\n```\n\nNormally, rather than hard-code the ID of an image, you’d pass it along as part of the *query string* on the URL. e.g.\n\n    `image.php?id=1234`\n\nYou can read in the `id=1234` part of the URL using `perch_get('id')`\n\n```php\n<?php perch_gallery_image(perch_get('id')); ?>\n```","type":"functions"},{"title":"perch_gallery_images()","permalink":"https://docs.grabaperch.com/functions/gallery/perch-gallery-images/","id":"functions.gallery.perch-gallery-images","excerpt":"Get images, regardless of album with `perch_gallery_images()`.","text":"Get images, regardless of album with `perch_gallery_images()`.\n\n## Requires\n\n- Perch Gallery App installed\n\n## Parameters\n\n| Type | Description |\n|-|-|\n| Array   | Options array, see table below |\n| Boolean | Set to `true` to have the value returned instead of echoed. |\n\n## Options array\n\n|Name|Value|\n|-|-|\n|template|The name of a template to use from the templates/gallery folder|\n|skip-template|true or false. Return a PHP array instead of using the template|\n\n## Usage examples\n\nDisplay a list of images, this uses the example `e_list_image.html` template.\n\n```php\n<?php perch_gallery_images(); ?>\n```\n\nPass in a custom template using an options array.\n\n```php\n<?php perch_gallery_images(array(\n    'template' => 'list_image.html',\n)); ?>\n```\n\nReturn the result to a variable.\n\n```php\n<?php\n$gallery = perch_gallery_images(array(\n    'template' => 'list_image.html',\n),true); \n?>\n```","type":"functions"},{"title":"perch_mailchimp_campaign_content()","permalink":"https://docs.grabaperch.com/functions/mailchimp/perch-mailchimp-campaign-content/","id":"functions.mailchimp.perch-mailchimp-campaign-content","excerpt":"One line description mentioning `your_function()`.","text":"One line description mentioning `your_function()`.\n\n## Requires\n\n- The Perch Mailchimp App installed\n- A Mailchimp account\n\n## Parameters\n\n| Type | Description |\n|-|-|\n| String   | A slug to identify the campaign |\n| Boolean | Set to `true` to have the value returned instead of echoed. |\n\n\n## Usage examples\n\nThis campaign page will be a complete document, so should not contain any other HTML, therefore all you need in the file is the following code, your campaign listing page would pass the slug value on the query string to this page.\n\n```php\n<?php\n    include('../perch/runtime.php');\n    perch_mailchimp_campaign_content(perch_get('s'));\n?>\n```","type":"functions"},{"title":"perch_mailchimp_campaigns()","permalink":"https://docs.grabaperch.com/functions/mailchimp/perch-mailchimp-campaigns/","id":"functions.mailchimp.perch-mailchimp-campaigns","excerpt":"The `perch_mailchimp_campaigns()` function shows a listing of your campaigns. This enables you to display an archive of previous emails on your site.","text":"The `perch_mailchimp_campaigns()` function shows a listing of your campaigns. This enables you to display an archive of previous emails on your site.\n\n## Requires\n\n- The Perch Mailchimp App installed\n- A Mailchimp account\n\n## Parameters\n\n| Type | Description |\n|-|-|\n| Array   | Options array, see table below |\n| Boolean | Set to `true` to have the value returned instead of echoed. |\n\n\n## Options array\n\n|Name|Value|\n|-|-|\n|list|a listID if you only want to display the campaigns from one list|\n\n## Usage examples\n\nTo show an archive listing of your campaigns on a page use the following code. This will show all lists unless they've been hidden using the option in the Lists section of the MailChimp app within the control panel.\n\n```php\n<?php\n\tperch_mailchimp_campaigns();\n?>\n```\n\nSet the list ID as the `list` option to show just one list:\n\n```php\n<?php\n\tperch_mailchimp_campaigns([\n        'list' => 'abc123',\n\t]);\n?>\n```","type":"functions"},{"title":"perch_mailchimp_form()","permalink":"https://docs.grabaperch.com/functions/mailchimp/perch-mailchimp-form/","id":"functions.mailchimp.perch-mailchimp-form","excerpt":"Display the subscription form to capture email details with `perch_mailchimp_form()`.","text":"Display the subscription form to capture email details with `perch_mailchimp_form()`.\n\n## Requires\n\n- The Perch Mailchimp App installed\n- A Mailchimp account\n\n## Parameters\n\n| Type | Description |\n|-|-|\n| String   | Path to your form template |\n\n## Usage examples\n\nDescribe the example.\n\n```php\n<?php perch_mailchimp_form('forms/subscribe'); ?>\n```","type":"functions"},{"title":"perch_member_add_tag()","permalink":"https://docs.grabaperch.com/functions/members/perch-member-add-tag/","id":"functions.members.perch-member-add-tag","excerpt":"Adds a tag from to currently logged-in member, with an optional expiry date.","text":"Adds a tag from to currently logged-in member, with an optional expiry date.\n\n## Requires\n\n- Perch Members App installed\n\n## Parameters\n\n| Type | Description |\n|-|-|\n| String  | tag to apply |\n| Date | Optional expiry date |\n\n\n## Usage examples\n\nAdd the `subscriber` tag.\n\n```php\n<?php perch_member_add_tag('subscriber'); ?>\n```\n\nWith an absolute expiry date:\n\n```php\n<?php perch_member_add_tag('subscriber', '2016-01-23'); ?>\n```\n\nOr a relative expiry date:\n\n```php\n<?php perch_member_add_tag('subscriber', '+3 months'); ?>\n```\n\nRelative dates can take any valid value for the PHP [`strtotime` function](http://php.net/manual/en/function.strtotime.php).\n\n## Updating a tag\n\nAdding a tag to a member will replace any existing instance of that tag for that member. This enables tags to be updated.","type":"functions"},{"title":"perch_member_form()","permalink":"https://docs.grabaperch.com/functions/members/perch-member-form/","id":"functions.members.perch-member-form","excerpt":"Display a member-related form, like a registration form:","text":"Display a member-related form, like a registration form:\n\n## Requires\n\n- Perch Members App installed\n\n## Parameters\n\n| Type | Description |\n|-|-|\n| String   | Path to the form, relative to `perch/templates/members/forms` |\n\n\n## Usage examples\n\nShow the form `registration.html`.\n\n```php\nperch_member_form('registration.html');\n```\n\nThe forms come from the `perch/templates/members/forms` folder. The defaults are in `perch/addons/apps/perch_members/templates/forms` which you can copy to your local templates folder and modify.","type":"functions"},{"title":"perch_member_has_tag()","permalink":"https://docs.grabaperch.com/functions/members/perch-member-has-tag/","id":"functions.members.perch-member-has-tag","excerpt":"Check if a member has a specific tag with the `perch_member_has_tag()` function.","text":"Check if a member has a specific tag with the `perch_member_has_tag()` function.\n\n## Requires\n\n- Perch Members App installed\n\n\n## Parameters\n\n| Type | Description |\n|-|-|\n| String   | Tag to check |\n\n## Usage examples\n\nCheck to see if the logged in member has the tab `subscriber`.\n\n```php\nif (perch_member_has_tag('subscriber')) {\n     ...\n}\n```","type":"functions"},{"title":"perch_member_get()","permalink":"https://docs.grabaperch.com/functions/members/perch-member-get/","id":"functions.members.perch-member-get","excerpt":"Get a property of the member, such as their name or email address with the `perch_member_get()` function.","text":"Get a property of the member, such as their name or email address with the `perch_member_get()` function.\n\n\n## Requires\n\n- Perch Members App installed\n\n\n## Parameters\n\n| Type | Description |\n|-|-|\n| String   | ID from the template to check against |\n\n## Usage examples\n\nGet the email address of the logged in member.\n\n```php\necho perch_member_get('email');\n```","type":"functions"},{"title":"perch_member_log_out()","permalink":"https://docs.grabaperch.com/functions/members/perch-member-log-out/","id":"functions.members.perch-member-log-out","excerpt":"Log the member out with immediate effect using `perch_member_log_out()`.","text":"Log the member out with immediate effect using `perch_member_log_out()`.\n\n## Requires\n\n- Perch Members App installed\n\n## Usage examples\n\nAdd this function to your page and the logged in member will immediately be logged out.\n\n```php\nperch_member_log_out();\n```","type":"functions"},{"title":"perch_member_logged_in()","permalink":"https://docs.grabaperch.com/functions/members/perch-member-logged-in/","id":"functions.members.perch-member-logged-in","excerpt":"Check if a member is logged in with the `perch_member_logged_in()` function.","text":"Check if a member is logged in with the `perch_member_logged_in()` function.\n\n## Requires\n\n- Perch Members App installed\n\n## Usage examples\n\nOnly print the string 'Hello!', if the member is logged in.\n\n```php\nif (perch_member_logged_in()) {\n     echo 'Hello!';\n}\n```","type":"functions"},{"title":"perch_member_login_form()","permalink":"https://docs.grabaperch.com/functions/members/perch-members-login-form/","id":"functions.members.perch-members-login-form","excerpt":"The `perch_member_login_form()` function will display the login form. If you do not set a template this will use the standard `login_form.html` template either from inside the add-on or from your `perch/templates` folder if you have modified it. You can also pass in your own template as an option.","text":"The `perch_member_login_form()` function will display the login form. If you do not set a template this will use the standard `login_form.html` template either from inside the add-on or from your `perch/templates` folder if you have modified it. You can also pass in your own template as an option.\n\n## Requires\n\n- Perch Members App installed\n\n## Parameters\n\n| Type | Description |\n|-|-|\n| Array   | Options array, see table below |\n| Boolean | Set to `true` to have the value returned instead of echoed. |\n\n\n## Options array\n\n|Name|Value|\n|-|-|\n|template|A custom template to use for display |\n\n## Usage examples\n\nDisplay the form with the default template.\n\n```php\nperch_members_login_form();\n```\n\nPass in a template:\n\n```php\nperch_members_login_form(array(\n  template => 'my-custom-login-form.html'  \n));\n```\n\nIn my page I want to check if the member is already logged in, if not I show the login form. Otherwise I redirect to the account.\n\n```php \n<?php\nif (!perch_member_logged_in()) {\n\n  // Include the header.\n\tperch_layout('global/header', [\n\t\t'body-class' => 'account',\n\t]);\n\n\t// An editable content region\n\tperch_content('Login content');\n\n  perch_members_login_form();\n\n  perch_layout('global/footer');\n\n} else {\n  // redirect\n\tPerchSystem::redirect('/account');\n}\n```","type":"functions"},{"title":"perch_member_remove_tag()","permalink":"https://docs.grabaperch.com/functions/members/perch-member-remove-tag/","id":"functions.members.perch-member-remove-tag","excerpt":"Remove a tag from the currently logged-in member with the `perch_member_remove_tag()` function.","text":"Remove a tag from the currently logged-in member with the `perch_member_remove_tag()` function.\n\n## Requires\n\n- Perch Members App installed\n\n## Parameters\n\n| Type | Description |\n|-|-|\n| String   | Tag to remove |\n\n## Usage examples\n\nRemove the tag `subscriber` from the logged in member.\n\n```php\n<?php perch_member_remove_tag('subscriber'); ?>\n```","type":"functions"},{"title":"perch_member_secure_download()","permalink":"https://docs.grabaperch.com/functions/members/perch-members-secure-download/","id":"functions.members.perch-members-secure-download","excerpt":"Access a file in a secured resource bucket with `perch_member_secure_download()`. See [Secure Downloads](/addons/members/downloads/).","text":"Access a file in a secured resource bucket with `perch_member_secure_download()`. See [Secure Downloads](/addons/members/downloads/).\n\n## Requires\n\n- Perch Members App installed\n\n## Parameters\n\n| Type | Description |\n|-|-|\n| String   | Name of the file |\n| String   | Name of the bucket the file is in |\n| Boolean | Set to true just to link to the file rather than force a download |\n\n## Usage examples\n\nDownload `report.pdf` from the bucket `my-bucket`. By default, this forces the download of the file (or prompts a Save As box, depending on the browser's configuration). \n\n```php\nperch_members_secure_download('report.pdf', 'my-bucket');\n```\n\nIf you wish to just link to the file (e.g for a PDF you'd like to give the browser the opportunity to display if possible) you can set the third argument to `false`:\n\n```php\nperch_members_secure_download('report.pdf', 'my-bucket', false);\n```","type":"functions"},{"title":"perch_page_url()","permalink":"https://docs.grabaperch.com/functions/navigation/perch-page-url/","id":"functions.navigation.perch-page-url","excerpt":"Output the full URL of the current page with the `perch_page_url()` function.","text":"Output the full URL of the current page with the `perch_page_url()` function.\n\n## Parameters\n\n| Type | Description |\n|-|-|\n| Array   | Options array, see table below |\n| Boolean | Set to `true` to have the value returned instead of echoed. |\n\n\n## Options array\n\n|Name|Value|\n|-|-|\n|hide-extensions|true/false. Strips the file extension from any links generated.|\n|hide-default-doc|true/false. Strips the default document (normally index.php) from the end of the links.|\n|add_trailing_slash|true/false. Adds a trailing slash to the end of the link.|\n|include_domain|true/false. Include the domain name, vs. just the path from root.|\n\n\n## Usage examples\n\nSimplest example, output the full URL of the current page.\n\n```php\n<?php perch_page_url(); ?>\n```\n\nPass an array of options to set how the URL should be treated\n\n```php\n<?php perch_page_url(array(\n    'hide-extensions'    => false,\n    'hide-default-doc'   => true,\n    'add-trailing-slash' => false,\n    'include-domain'     => true,\n)); ?>\n```\n\nPass a second parameter of `true` to have the value returned instead of echoed. Remember to escape the value before outputting it to the page.\n\n```php\n<?php $url =  perch_page_url(array(\n    'hide-extensions'    => true,\n    'hide-default-doc'   => true,\n    'add-trailing-slash' => false,\n    'include-domain'     => true,\n), true); ?>\n```","type":"functions"},{"title":"perch_page_modified()","permalink":"https://docs.grabaperch.com/functions/navigation/perch-page-modified/","id":"functions.navigation.perch-page-modified","excerpt":"Output the date the page was last updated with the `perch_page_modified()` function.","text":"Output the date the page was last updated with the `perch_page_modified()` function.\n\n## Parameters\n\n| Type | Description |\n|-|-|\n| Array | Options array to include a `format` key.|\n\n```php\nperch_page_modified();\n```\n\nTakes an options array with a `format` option, using [strftime](http://php.net/strftime) formatting codes.\n\n```php\nperch_page_modified(array(\n    'format' => '%d %B %Y, %H:%M',\n));\n```","type":"functions"},{"title":"perch_pages_breadcrumbs()","permalink":"https://docs.grabaperch.com/functions/navigation/perch-pages-breadcrumbs/","id":"functions.navigation.perch-pages-breadcrumbs","excerpt":"Perch can output a breadcrumb trail for the current page using the `perch_pages_breadcrumbs()` function.","text":"Perch can output a breadcrumb trail for the current page using the `perch_pages_breadcrumbs()` function.\n\n## Parameters\n\n| Type | Description |\n|-|-|\n| Array   | Options array, see table below |\n| Boolean | Set to `true` to have the value returned instead of echoed. |\n\n\n## Options array\n\n|Name|Value|\n|-|-|\n|hide-extensions|true/false. Strips the file extension from any links generated.|\n|hide-default-doc|true/false. Strips the default document (normally index.php) from the end of the links.|\n|template|The name of the template file to be used.|\n|skip-template|true/false. Returns a PHP associative array rather than the templated HTML.|\n|add_trailing_slash|true/false. Adds a trailing slash to the end of the link.|\n|navgroup|The slug of the navigation group to use.|\n|include-hidden|true/false. Include pages that have been marked as hidden within the control panel.|\n|use-attributes|True/false, defaults to true. Specifies whether page attributes are loading into the navigation. Setting to false will give you a minor performance boost.|\n\n## Usage examples\n\nSimplest example, using the function with no parameters will output breadcrumbs as an HTML list. As with anything else in Perch the markup is editable. The templates live in `perch/templates/navigation` and the default template is called `breadcrumbs.html`.\n\n```php\n<?php perch_pages_breadcrumbs(); ?>\n```\n\nThe following can be used to output breadcrumbs using a custom template `perch/templates/navigation/custom.html`.\n\n```php\n<?php\n    perch_pages_breadcrumbs(array(\n        'template'=>'custom.html'\n    ));\n?>\n```\n\nA full example with all options would be\n\n```php\n<?php\n    perch_pages_breadcrumbs(array(\n        'hide-extensions'  => false,\n        'hide-default-doc' => true,\n        'template'         => 'breadcrumbs.html',\n        'skip-template'    => false\n    ));\n?>\n```\n\nThe `skip-template` option returns a PHP associative array of the raw data for generating your own sort of breadcrumbs. When `skip-template`\nis set, the function returns its value rather than outputting it to the page.\n\n```php\n<?php\n    $crumbs = perch_pages_breadcrumbs(array(\n        'skip-template'=>true\n    ));\n?>\n```\n\nTo return the templated HTML for other purposes, pass a second argument of `true`.\n\n```php\n<?php\n    $crumbs = perch_pages_breadcrumbs(array(), true);\n?>\n```","type":"functions"},{"title":"perch_pages_navigation()","permalink":"https://docs.grabaperch.com/functions/navigation/perch-pages-navigation/","id":"functions.navigation.perch-pages-navigation","excerpt":"To output Navigation to the page use the `perch_pages_navigation` function.","text":"To output Navigation to the page use the `perch_pages_navigation` function.\n\n## Parameters\n\n\n| Type | Description |\n|-|-|\n| Array   | Options array, see table below |\n| Boolean | Set to `true` to have the value returned instead of echoed. |\n\n\n## Options array\n\n|Name|Value|\n|-|-|\n|hide-extensions|true/false. Strips the file extension from any links generated.|\n|hide-default-doc|true/false. Strips the default document (normally index.php) from the end of the links.|\n|template|The name of the template file to be used.|\n|skip-template|true/false. Returns a PHP associative array rather than the templated HTML.|\n|from-path|The path to the file in the site where the navigation should start. Defaults to /. To use the current page, set to *|\n|levels|Integer. The number of levels of navigation to output from the starting point. Omit or use 0 for all.|\n|flat|True/false. Outputs a list with all items at the same level - no nesting|\n|include-parent|True/false. When outputting a list, include the immediate parent item first.|\n|siblings|True/false. Start the navigation with the 'sibling' pages of the page specified by 'from-path'. i.e. 'Show navigation from this level' rather than 'show navigation below this page'.|\n|only-expand-selected|True/false. If true, sub-pages are only displayed for currently select pages.|\n|add-trailing-slash|True/false. If true, adds a trailing forward slash to the end of the URL. Useful in combination with URL rewriting and the hide-extensions option.|\n|navgroup|The slug of a navigation group to use.|\n|include-hidden|Include pages that have been set has hidden.|\n|from-level|Integer. For use with from-path. Roots the navigation at the given level, regardless of current page depth.|\n|use-attributes|True/false, defaults to true. Specifies whether page attributes are loading into the navigation. Setting to false will give you a minor performance boost.|\n\n## Usage examples\n\nWithout any options, this will output the entire tree, like a sitemap. That’s useful, but usually not what you’re looking for. The options in the table below can be used to control which parts of the tree are used.\n\n```php\n<?php perch_pages_navigation(); ?>\n```\n\nThe following example display would one level of navigation for the About section of the site. In essence, this is the About section subnav.\n\nIt’s created by using the `from-path` option to start the navigation from the About page.\n\n```php\n<?php\n    perch_pages_navigation(array(\n        'from-path' => '/about',\n        'levels'    => 1\n    ));\n?>\n```\n\nThe full set of options looks like this.\n\n```php\n<?php\n    perch_pages_navigation(array(\n        'from-path'            => '/',\n        'levels'               => 0,\n        'hide-extensions'      => false,\n        'hide-default-doc'     => true,\n        'flat'                 => false,\n        'template'             => 'item.html',\n        'include-parent'       => false,\n        'skip-template'        => false,\n        'siblings'             => false,\n        'only-expand-selected' => false,\n        'add-trailing-slash'   => false,\n        'navgroup'             => false,\n        'include-hidden'       => false,\n    ));\n?>\n```\n\n## Template option\n\nThe `template` option takes the name of a template file in the\n`perch/templates/navigation` folder. A basic template might look like this.\n\n```html\n<perch:before><ul></perch:before>\n    <li>\n        <a href=\"<perch:pages id=\"pagePath\">\">\n            <perch:pages id=\"pageNavText\">\n        </a>\n        <perch:pages id=\"subitems\" encode=\"false\">\n    </li>\n<perch:after></ul></perch:after>\n```\n\n## Styling navigation\n\nBy default, Perch outputs navigation as a series of nested unordered lists. Navigation templates should be kept in the\n`perch/templates/navigation` folder. The basic default template is called `item.html`.\n\nWhen a page in the navigation tree is the current page the\n`current_page` variable gets set in the templates. If it’s a page leading to the current page in the site hierarchy, the `ancestor_page`\nvariable gets set.\n\nFor the default template, these are used to set a class of `selected` or\n`ancestor` on the `li`.\n\nWhen viewing `/about/people` the HTML would look like this.\n\n```html\n<ul>\n<li><a href=\"/\">Home</a></li>\n<li><a href=\"/blog/\">Blog</a></li>\n<li class=\"selected\">\n    <a href=\"/about/\">About</a>\n    <ul>\n    <li><a href=\"/about/history/\">History</a></li>\n    <li class=\"selected\"><a href=\"/about/people/\">People</a></li>\n    <li><a href=\"/about/organisation/\">Organisation</a></li>\n    </ul>\n</li>\n<li><a href=\"/contact/\">Contact</a></li>\n</ul>\n```\n\nThe special value `subitems` is used for where the subnavigation for the current item should be inserted. The template is called recursively for each level of navigation required.\n\nIt is not necessary to use the same template for each level of navigation, however. You can pass an array of template file names to the template option.\n\nWhen this is done, the first file is used for the first level of navigation, the second for the second level and so on. If there are more levels than templates, the last template is reused as many times as necessary.\n\n```php\n<?php\n    perch_pages_navigation(array(\n        'template' => array('level1.html', 'level2.html'),\n    ));\n?>\n```\n\n## Advanced use\n\nThe `skip-template` option returns a PHP associative array of the raw data for generating your own sort of navigation. When `skip-template` is set, the `perch_pages_navigation` function returns its value rather than outputting it to the page.\n\n```php\n<?php\n    $navigation = perch_pages_navigation(array(\n        'skip-template' => true,\n    ));\n?>\n```\n\nTo return the templated HTML for other purposes, pass a second argument of `true`.\n\n```php\n<?php\n    $navigation = perch_pages_navigation(array(), true);\n?>\n```\n\n## Hiding extensions\n\nIf you use the `hide-extensions` option, you’ll need to configure your server to still find the pages. If you’re using Apache and have mod\\_rewrite available, you can often do this in your `.htaccess` file.\n\nThe below is an example of how this might be done.\n\n```php\n# Redirect to PHP if it exists.\n# e.g. example.com/foo will display the contents of example.com/foo.php\nRewriteCond %{REQUEST_FILENAME} !-f\nRewriteCond %{REQUEST_FILENAME} !-d\nRewriteCond %{REQUEST_FILENAME}.php -f\nRewriteRule ^(.+)$ $1.php [L,QSA]\n```\n\n**Note:** you may need to disable `MultiViews` if you have it enabled.\n\n## Creating ‘section’ navigation\n\nOften, it’s required to have the same navigation on all pages within a website section, regardless of the level at which those pages sit.\n\nFor example, within the ‘About’ section, you may want to show the same subnav, no matter if you’re on the About page, or About/Company, or About/Company/Locations.\n\nYou can do this use the `from-level` option, which starts the navigation at the given site level.\n\n```php\n<?php perch_pages_navigation(array(\n    'from-path'  => '*',\n    'from-level' => 1,\n)); ?>\n```\n\nUse with `'from-path'=>'*'` to put the navigation in the context of the current page, and then `'from-level'` moves up and down the tree to find the starting point.\n\nThe `include-parent` option is sometimes useful here, too.","type":"functions"},{"title":"perch_pages_navigation_text()","permalink":"https://docs.grabaperch.com/functions/navigation/perch-pages-navigation-text/","id":"functions.navigation.perch-pages-navigation-text","excerpt":"The navigation text of the current page (as set in the page options) can be output using `perch_pages_navigation_text()`","text":"The navigation text of the current page (as set in the page options) can be output using `perch_pages_navigation_text()`\n\n## Parameters\n\n| Type | Description |\n|-|-|\n| Boolean | Set to `true` to have the value returned instead of echoed. |\n\n## Usage examples\n\nOutput the navigation text.\n\n```php\n<?php perch_pages_navigation_text(); ?>\n```\n\nTo return the text, rather than output it directly to the page, pass an argument of `true`.\n\n```php\n<?php $my_var = perch_pages_navigation_text(true); ?>\n```","type":"functions"},{"title":"perch_pages_next_page()","permalink":"https://docs.grabaperch.com/functions/navigation/perch-pages-next-page/","id":"functions.navigation.perch-pages-next-page","excerpt":"Output details of the next page, based on the navigational hierarchy using `perch_pages_next_page()`. The primary purpose of this function is for navigation, but can be used in other ways too.","text":"Output details of the next page, based on the navigational hierarchy using `perch_pages_next_page()`. The primary purpose of this function is for navigation, but can be used in other ways too.\n\n## Parameters\n\n| Type | Description |\n|-|-|\n| Array   | Options array, see table below |\n| Boolean | Set to `true` to have the value returned instead of echoed. |\n\n\n## Options array\n\n|Name|Value|\n|-|-|\n|hide-extensions|true/false. Strips the file extension from any links generated.|\n|hide-default-doc|true/false. Strips the default document (normally index.php) from the end of the links.|\n|template|The name of the template file to be used.|\n|skip-template|true/false. Returns a PHP associative array rather than the templated HTML.|\n\n## Usage examples\n\nBy default, this uses the navigation item template, so would output a list item with the next page as a link. The templates live in `perch/templates/navigation` and the default template is called `item.html`.\n\n```php\n<?php perch_pages_next_page(); ?>\n```\n\nThe following can be used to output details of the next page using a custom template `perch/templates/navigation/custom.html`.\n\n```php\n<?php\n    perch_pages_next_page(array(\n        'template'=>'custom.html'\n    ));\n?>\n```\n\nA full example with all options would be:\n\n```php\n<?php\n    perch_pages_next_page(array(\n        'hide-extensions'  => false,\n        'hide-default-doc' => true,\n        'template'         => 'custom.html',\n        'skip-template'    => false\n    ));\n?>\n```\n\nThe `skip-template` option returns a PHP associative array of the raw data for generating your own sort of breadcrumbs. When `skip-template`\nis set, the function returns its value rather than outputting it to the page.\n\n```php\n<?php\n    $crumbs = perch_pages_next_page(array(\n        'skip-template'=>true\n    ));\n?>\n```\n\nTo return the templated HTML for other purposes, pass a second argument of `true`.\n\n```php\n<?php\n    $crumbs = perch_pages_next_page(array(), true);\n?>\n```","type":"functions"},{"title":"perch_pages_previous_page()","permalink":"https://docs.grabaperch.com/functions/navigation/perch-pages-previous-page/","id":"functions.navigation.perch-pages-previous-page","excerpt":"Outputs details of the previous page, based on the navigational hierarchy using the `perch_pages_previous_page()` function. Its primary purpose is for navigation, but can be used in other ways too.","text":"Outputs details of the previous page, based on the navigational hierarchy using the `perch_pages_previous_page()` function. Its primary purpose is for navigation, but can be used in other ways too.\n\n## Parameters\n\n| Type | Description |\n|-|-|\n| Array   | Options array, see table below |\n| Boolean | Set to `true` to have the value returned instead of echoed. |\n\n\n## Options array\n\n|Name|Value|\n|-|-|\n|hide-extensions|true/false. Strips the file extension from any links generated.|\n|hide-default-doc|true/false. Strips the default document (normally index.php) from the end of the links.|\n|template|The name of the template file to be used.|\n|skip-template|true/false. Returns a PHP associative array rather than the templated HTML.|\n\n## Usage examples\n\nBy default, this uses the navigation item template, so would output a list item with the previous page as a link. The templates live in `perch/templates/navigation` and the default template is called `item.html`.\n\n```php\n<?php perch_pages_previous_page(); ?>\n```\n\nThe following can be used to output details of the previous page using a custom template `perch/templates/navigation/custom.html`.\n\n```php\n<?php\n    perch_pages_previous_page(array(\n        'template'=>'custom.html'\n    ));\n?>\n```\n\nA full example with all options would be\n\n```php\n<?php\n    perch_pages_previous_page(array(\n        'hide-extensions'  => false,\n        'hide-default-doc' => true,\n        'template'         => 'custom.html',\n        'skip-template'    => false\n    ));\n?>\n```\n\nThe `skip-template` option returns a PHP associative array of the raw data for generating your own sort of breadcrumbs. When `skip-template`\nis set, the function returns its value rather than outputting it to the page.\n\n```php\n<?php\n    $crumbs = perch_pages_previous_page(array(\n        'skip-template'=>true\n    ));\n?>\n```\n\nTo return the templated HTML for other purposes, pass a second argument of `true`.\n\n```php\n<?php\n    $crumbs = perch_pages_previous_page(array(), true);\n?>\n```","type":"functions"},{"title":"perch_pages_parent_page()","permalink":"https://docs.grabaperch.com/functions/navigation/perch-pages-parent-page/","id":"functions.navigation.perch-pages-parent-page","excerpt":"Outputs details of the current page’s parent page, based on the navigational hierarchy with the `perch_pages_parent_page()` function. Its primary purpose is for navigation, but can be used in other ways too.","text":"Outputs details of the current page’s parent page, based on the navigational hierarchy with the `perch_pages_parent_page()` function. Its primary purpose is for navigation, but can be used in other ways too.\n\n## Parameters\n\n| Type | Description |\n|-|-|\n| Array   | Options array, see table below |\n| Boolean | Set to `true` to have the value returned instead of echoed. |\n\n## Options array\n\n|Name|Value|\n|-|-|\n|hide-extensions|true/false. Strips the file extension from any links generated.|\n|hide-default-doc|true/false. Strips the default document (normally index.php) from the end of the links.|\n|template|The name of the template file to be used.|\n|skip-template|true/false. Returns a PHP associative array rather than the templated HTML.|\n\n## Usage examples\n\nBy default, this uses the navigation item template, so would output a list item with the parent page as a link. The templates live in `perch/templates/navigation` and the default template is called `item.html`.\n\n```php\n<?php perch_pages_parent_page(); ?>\n```\n\nThe following can be used to output details of the parent page using a custom template `perch/templates/navigation/custom.html`.\n\n```php\n<?php\n    perch_pages_parent_page(array(\n        'template'=>'custom.html'\n    ));\n?>\n```\n\nA full example with all options would be\n\n```php\n<?php\n    perch_pages_parent_page(array(\n        'hide-extensions'  => false,\n        'hide-default-doc' => true,\n        'template'         => 'custom.html',\n        'skip-template'    => false\n    ));\n?>\n```\n\nThe `skip-template` option returns a PHP associative array of the raw data for generating your own sort of breadcrumbs. When `skip-template`\nis set, the function returns its value rather than outputting it to the page.\n\n```php\n<?php\n    $crumbs = perch_pages_parent_page(array(\n        'skip-template'=>true\n    ));\n?>\n```\n\nTo return the templated HTML for other purposes, pass a second argument of `true`.\n\n```php\n<?php\n    $crumbs = perch_pages_parent_page(array(), true);\n?>\n```","type":"functions"},{"title":"perch_pages_title()","permalink":"https://docs.grabaperch.com/functions/navigation/perch-pages-title/","id":"functions.navigation.perch-pages-title","excerpt":"The title of the current page can be output using `perch_pages_title()`","text":"The title of the current page can be output using `perch_pages_title()`\n\n## Parameters\n\n| Type | Description |\n|-|-|\n| Boolean | Set to `true` to have the value returned instead of echoed. |\n\n## Usage examples\n\nOutput the title.\n\n```php\n<?php perch_pages_title(); ?>\n```\n\nTo return the title, rather than output it directly to the page, pass an argument of `true`.\n\n```php\n<?php $my_var = perch_pages_title(true); ?>\n```","type":"functions"},{"title":"perch_content_search()","permalink":"https://docs.grabaperch.com/functions/search/perch-content-search/","id":"functions.search.perch-content-search","excerpt":"The `perch_content_search()` function performs a search of your site content when passed keywords to search for.","text":"The `perch_content_search()` function performs a search of your site content when passed keywords to search for.\n\n## Parameters\n\n| Type | Description |\n|-|-|\n| String  | Keywords to search for |\n| Array   | Options array, see table below |\n| Boolean | Set to `true` to have the value returned instead of echoed. |\n\n\n## Options array\n\n|Name|Value|\n|-|-|\n|count|default 10 - number of items to show per page|\n|from-path|search only part of a site. For example /en/ to just search your English pages|\n|excerpt-chars|default 250 - number of characters for the excerpt on the result page|\n|template|a filename within templates/search|\n|hide-default-doc|True or false. Hide the default document (e.g. index.php) on links.|\n|add-trailing-slash|True or false. Add a trailing slash to links.|\n|no-conflict|True or false. If true, omits the old non-prefixed IDs from the search templates so as not to conflict with IDs from your content. (e.g. excerpt is omitted but result_excerpt remains)|\n|apps|To restrict search to certain apps, pass an array of app names (e.g. PerchBlog, PerchEvents), otherwise search is unrestricted.|\n\n## Usage examples\n\nIn the below example we return 5 results per page, only showing things from the `/articles` section of the site with excerpts of 300 chars and a custom template `my_template.html`. The keywords are on the query string as `/search.php?q=keywords` so we use `perch_get` to access these and pass them in as the first parameter.\n\n```php\n<?php\n  $query = perch_get('q');\n  perch_content_search($query, array(\n    'count'=>5,\n    'from-path'=>'/articles',\n    'excerpt-chars'=>300,\n    'template'=>'my_template.html'\n  ));\n?>\n```","type":"functions"},{"title":"perch_search_form()","permalink":"https://docs.grabaperch.com/functions/search/perch-search-form/","id":"functions.search.perch-search-form","excerpt":"Display a templated search form using the `perch_search_form()` function.","text":"Display a templated search form using the `perch_search_form()` function.\n\nBy default this uses the template `perch/templates/search/search-form.html`. You can edit this template or pass in your own.\n\n## Parameters\n\n| Type | Description |\n|-|-|\n| Array   | Options array, see table below |\n| Boolean | Set to `true` to have the value returned instead of echoed. |\n\n\n## Options array\n\n| Option | Value |\n|-|-|\n|template|The name of an HTML template file in the perch/templates/search folder.|\n\n## Usage examples\n\nUsing the default template:\n\n```php\n<?php perch_search_form(); ?>\n```\n\nPassing in a custom template. The template needs to be saved into `perch/templates/search`.\n\n```php\n<?php perch_search_form(array(\n    'template'=>'my_template.html'\n  )); ?>\n```","type":"functions"},{"title":"perch_page_attributes_extend()","permalink":"https://docs.grabaperch.com/functions/page-attributes/perch-page-attributes-extend/","id":"functions.page-attributes.perch-page-attributes-extend","excerpt":"Use the `perch_page_attributes_extend()` function to override or add to Page Attributes at runtime.","text":"Use the `perch_page_attributes_extend()` function to override or add to Page Attributes at runtime.\n\nThis can be useful when a page displays in different modes. For example, the same news article page might be used every time an article is displayed, but the page attributes like title, description and open graph tags might need to change.\n\n## Parameters\n\n| Type | Description |\n|-|-|\n| Array   | An array where the keys are the attribute names, values the value set. |\n\n\n\n## Usage examples\n\nUse `perch_page_attributes_extend()` to replace the values set for the page with the real values needed.\n\n```php\n<?php perch_page_attributes_extend(array(\n    'pageTitle' => 'Why Michael Jackson was not an owl'\n)); ?>\n```\n\nSee how this can be used when adding [Facebook Open Graph tags and Twitter Cards](http://solutions.grabaperch.com/integrations/facebook-and-twitter-sharing) to a page.","type":"functions"},{"title":"perch_page_attribute()","permalink":"https://docs.grabaperch.com/functions/page-attributes/perch-page-attribute/","id":"functions.page-attributes.perch-page-attribute","excerpt":"The `perch_page_attribute()` function displays a single attribute from the page.","text":"The `perch_page_attribute()` function displays a single attribute from the page.\n\n## Parameters\n\n| Type | Description |\n|-|-|\n| String   | Name of the attribute to display |\n| Array |  |\n| Boolean | Set to `true` to have the value returned instead of echoed. |\n\n## Usage examples\n\nThis would output the value of the `id=\"description\"` item in the attribute template, with the options set on the first instance of that tag within the template.\n\n```php\n<?php perch_page_attribute('description'); ?>\n```\n\nYou can switch templates by passing an array with a `template` option.\n\n```php\n<?php\n    perch_page_attribute('description', array(\n        'template' => 'my_template.html'\n    ));\n?>\n```","type":"functions"},{"title":"perch_page_attributes()","permalink":"https://docs.grabaperch.com/functions/page-attributes/perch-page-attributes/","id":"functions.page-attributes.perch-page-attributes","excerpt":"The `perch_page_attributes()` function displays the attribute content set for the page.","text":"The `perch_page_attributes()` function displays the attribute content set for the page.\n\n## Parameters\n\n| Type | Description |\n|-|-|\n| Array   | Options array, see table below |\n| Boolean | Set to `true` to have the value returned instead of echoed. |\n\n\n## Options array\n\nTO DO\n\n## Usage examples\n\nThe most simple use case will use the page's attribute template as defined in the Control Panel.\n\n```php\n<?php perch_page_attributes(); ?>\n```\nYou can switch templates by passing an array with a `template` option.\n\n```php\n<?php\n    perch_page_attributes(array(\n        'template' => 'seo.html'\n    ));\n?>\n```","type":"functions"},{"title":"perch_listing_listing()","permalink":"https://docs.grabaperch.com/functions/listings/perch_listing_listing/","id":"functions.listings.perch_listing_listing","excerpt":"Display a single listing with `perch_listing_listing()`.","text":"Display a single listing with `perch_listing_listing()`.\n\nThe first argument must be either the ID of a listing, or a unique listing slug. Usually this will have been passed on the URL from a  listing page.\n\n## Requires\n\n- The Listings App installed\n\n## Parameters\n\n| Type | Description                                                 |\n|-|-------------------------------------------------------------|\n| Integer or Slug   | The ID of a listing or a unique listing slug                   |\n| Boolean | Set to `true` to have the value returned instead of echoed. |\n\n## Usage examples\n\nDescribe the example.\n\n```php\n<?php perch_listing_listing(perch_get('s')); ?>\n```\n\nThe above will use the value of `?s=` on the URL to find the listing. Listings are shown using the `listing.html` master template.\n\nTo return the value, pass `true` as the second argument.\n\n```php\n<?php $html = perch_listing_listing(perch_get('s'), true); ?>\n```","type":"functions"},{"title":"perch_listings_custom()","permalink":"https://docs.grabaperch.com/functions/listings/perch_listings_custom/","id":"functions.listings.perch_listings_custom","excerpt":"The `perch_listings_custom()` function displays filtered listings.","text":"The `perch_listings_custom()` function displays filtered listings.\n\n## Requires\n\n- the Listings App installed.\n\n## Parameters\n\n| Type | Description |\n|-|-|\n| Array   | Options array, see table below |\n| Boolean | Set to `true` to have the value returned instead of echoed. |\n\n\n## Options array\n\n|Name|Value|\n|-|-|\n|category|A single category slug or array of category slugs to return content for. To exclude a category, prefix its name with an exclamation point.|\n\n\n\n## Usage examples\n\nDisplays a listing using the default templates found in `perch_listings/templates`. \n\n\n```php\n<?php perch_listings(); ?>\n```\n\nYou can pass in different filters and options using an options array.\n\n## Usage examples\n\nThe below example filters on location, price,size\n```php\n<?php\nperch_listings_custom(array(\n    'filter' =>array( 'listingLocation' => $location,'listingPrice'=>array( $minPrice,$maxPrice),'listingSize'=>array( $minSize,$maxSize)),\n    'category' => array('apartment','plot'),\n    'template' => 'listings_in_list.html'\n));\n?>\n```","type":"functions"},{"title":"perch_listings_recent_created()","permalink":"https://docs.grabaperch.com/functions/listings/perch_listings_recent_created/","id":"functions.listings.perch_listings_recent_created","excerpt":"Get a list of the most recent listings with `perch_listings_recent_created()`.","text":"Get a list of the most recent listings with `perch_listings_recent_created()`.\n\n## Requires\n\n- The Listings App installed\n\n## Parameters\n\n| Type | Description |\n|-|-|\n| Integer   | Number of posts to return  |\n| Boolean | Set to `true` to have the value returned instead of echoed. |\n\n## Usage examples\n\nDisplay the 10 most recent posts with the default `listings_in_list.html` template.\n\n```php\n<?php perch_listings_recent_created(10); ?>\n```\n\nThe first argument is the number of listings to show. The second argument can be set to `true`\nto return the HTML.\n\n```php\n<?php $html = perch_listings_recent_created(10, true); ?>\n```","type":"functions"},{"title":"perch_shop_categories()","permalink":"https://docs.grabaperch.com/functions/shop-foxycart/perch-shop-categories/","id":"functions.shop-foxycart.perch-shop-categories","excerpt":"**This add-on is deprecated. Please use the Perch Shop app.**","text":"**This add-on is deprecated. Please use the Perch Shop app.**\n\nGet a list of the categories using the `perch_shop_categories()` function.\n\n## Requires\n\n- Perch Shop FoxyCart installed\n\n## Usage examples\n\nDisplay a list of categories using the default template.\n\n```php\n<?php perch_shop_categories(); ?>\n```","type":"functions"},{"title":"perch_shop_product_field()","permalink":"https://docs.grabaperch.com/functions/shop-foxycart/perch-shop-product-field/","id":"functions.shop-foxycart.perch-shop-product-field","excerpt":"**This add-on is deprecated. Please use the Perch Shop app.**","text":"**This add-on is deprecated. Please use the Perch Shop app.**\n\nRetrieve a specific field from a product using the `perch_shop_product_field()` function.\n\n## Requires\n\n- Perch Shop FoxyCart installed\n\n## Parameters\n\n| Type | Description |\n|-|-|\n| String   | Slug to identify the product |\n| String | Template tag ID to return the value of for this product |\n\n\n\n## Usage examples\n\nIn this example we pass in a product slug to identify the product then the `productTitle` field. The function will return the value of `productTitle` for this product.\n\n```php\n<?php perch_shop_product_field('my-product', 'productTitle'); ?>\n```","type":"functions"},{"title":"perch_shop_custom()","permalink":"https://docs.grabaperch.com/functions/shop-foxycart/perch-shop-custom/","id":"functions.shop-foxycart.perch-shop-custom","excerpt":"**This add-on is deprecated. Please use the Perch Shop app.**","text":"**This add-on is deprecated. Please use the Perch Shop app.**\n\nMuch like the default `perch_content_custom(`) function, Shop has `perch_shop_custom()`. This function enables you to get a product listing customized by any of the available parameters.\n\n## Requires\n\n- Perch Shop FoxyCart installed\n\n## Parameters\n\n| Type | Description |\n|-|-|\n| Array   | Options array, see table below |\n| Boolean | Set to `true` to have the value returned instead of echoed. |\n\n\n## Options array\n\n|Name|Value|\n|-|-|\n|category|A single category slug or array of category slugs to return content for. To exclude a category, prefix its name with an exclamation point.|\n|template|The name of a template to use to display the content.|\n|sort|The ID of the field to sort on.|\n|sort-order|Either `ASC` (ascending), `DESC` (descending) or `RAND` (random).|\n|sort-type|Either `alpha` or `numeric`. Default is `alpha`.|\n|count|The number of items to display.|\n|start|The item number to start displaying from.|\n|filter|The ID of a field to filter the results by.|\n|match|Used with filter, see the below table for values|\n|value|Used with filter and match. The value to match. For `between` and `in`, takes a comma delimited string. For `regex` takes PCRE regular expression.|\n|category|Filter by one or more categories. See [Category filtering](/docs/categories/filtering/)|\n|category-match|Either `any` or `all`. See [Category filtering](/docs/categories/filtering/)|\n|skip-template|True or false. Bypass template processing and return the content in an associative array.|\n|return-html|True or false. For use with `skip-template`. Adds the HTML onto the end of the returned array with key `html`.|\n|split-items|True or false. Return an array of individually templated items.|\n|raw|True or false. Returns unprocessed content, for use alongside skip-template.|\n\n### Possible values for match\n\n| Value      | Aliases       | Description                                                         |\n| ---------- | ------------- | ------------------------------------------------------------------- |\n| eq         | `is`, `exact` | equal to                                                            |\n| neq        | `not`, `!eq`  | not equal to                                                        |\n| gt         |               | greater than                                                        |\n| gte        |               | greater than or equal to                                            |\n| lt         |               | less than                                                           |\n| lte        |               | less than or equal to                                               |\n| contains   |               | the value exists within the content (a simple search)               |\n| !contains  |               | opposite of `contains`: the value does not exist within the content |\n| regex      | `regexp`      | using a PCRE regular expression                                     |\n| between    |               | match between two values                                            |\n| !between   |               | opposite of `between`                                               |\n| eqbetween  |               | match between two values inclusively                                |\n| !eqbetween |               | opposite of `eqbetween`                                             |\n| in         | `within`      | match within a comma delimited content list (like a list of tags)   |\n| !in        | `!within`     | opposite of `in`                                                    |\n\n## Usage examples\n\nThe below example filters on price, returning products equal to or between 10 and 20 units of currency, which are in the category ‘widgets’. I have also passed in a custom template for this listing.\n\n```php\n<?php\n\tperch_shop_custom(array(\n\t    'filter'=>'productPrice',\n\t    'match'=>'eqbetween',\n\t    'value'=>'10, 20',\n\t    'category'=>'widgets',\n\t    'template'=>'shop/special_listing.html'\n\t));\n?>\n```\n\nThe `perch_shop_custom` function is very useful for displaying a customised list of products to given parameters.\n\nThe options for `filter`, `match` and `value` work just like `perch_content_custom`. Category can be either a single item or an array.","type":"functions"},{"title":"perch_shop_products_by_category()","permalink":"https://docs.grabaperch.com/functions/shop-foxycart/perch-shop-products-by-category/","id":"functions.shop-foxycart.perch-shop-products-by-category","excerpt":"**This add-on is deprecated. Please use the Perch Shop app.**","text":"**This add-on is deprecated. Please use the Perch Shop app.**\n\nGet a list of products by category using the `perch_shop_products_by_category()` function.\n\n## Requires\n\n- Perch Shop FoxyCart installed\n\n## Parameters\n\n| Type | Description |\n|-|-|\n| String   | Category slug |\n| Integer | Number of items to return |\n\n\n## Usage examples\n\nRetrieve 10 products from the category with a slug of 'accessories'.\n\n```php\n<?php perch_shop_products_by_category('accessories', 10); ?>\n```","type":"functions"},{"title":"perch_shop_product()","permalink":"https://docs.grabaperch.com/functions/shop-foxycart/perch-shop-product/","id":"functions.shop-foxycart.perch-shop-product","excerpt":"**This add-on is deprecated. Please use the Perch Shop app.**","text":"**This add-on is deprecated. Please use the Perch Shop app.**\n\nGet a product by slug using the `perch_shop_product()` function.\n\n## Requires\n\n- Perch Shop FoxyCart installed\n\n## Parameters\n\n| Type | Description |\n|-|-|\n| String  | Product slug to identify the product  |\n\n\n## Usage examples\n\nDisplay the product identified by slug 'my-product' using the default template.\n\n```php\n<?php perch_shop_product($productSlug); ?>\n```","type":"functions"},{"title":"perch_shop_categories()","permalink":"https://docs.grabaperch.com/functions/shop-paypal/perch-shop-categories/","id":"functions.shop-paypal.perch-shop-categories","excerpt":"**This add-on is deprecated. Please use the Perch Shop app.**","text":"**This add-on is deprecated. Please use the Perch Shop app.**\n\nGet a list of the categories using the `perch_shop_categories()` function.\n\n## Requires\n\n- Perch Shop PayPal installed\n\n## Usage examples\n\nDisplay a list of categories using the default template.\n\n```php\n<?php perch_shop_categories(); ?>\n```","type":"functions"},{"title":"perch_shop_custom()","permalink":"https://docs.grabaperch.com/functions/shop-paypal/perch-shop-custom/","id":"functions.shop-paypal.perch-shop-custom","excerpt":"**This add-on is deprecated. Please use the Perch Shop app.**","text":"**This add-on is deprecated. Please use the Perch Shop app.**\n\nMuch like the default `perch_content_custom()` function, Shop has `perch_shop_custom()`. This function enables you to get a product\nlisting customized by any of the available parameters.\n\n## Requires\n\n- Perch Shop PayPal installed.\n\n## Parameters\n\n| Type | Description |\n|-|-|\n| Array   | Options array, see table below |\n| Boolean | Set to `true` to have the value returned instead of echoed. |\n\n\n## Options array\n\n|Name|Value|\n|-|-|\n|category|A single category slug or array of category slugs to return content for. To exclude a category, prefix its name with an exclamation point.|\n|template|The name of a template to use to display the content.|\n|sort|The ID of the field to sort on.|\n|sort-order|Either `ASC` (ascending), `DESC` (descending) or `RAND` (random).|\n|sort-type|Either `alpha` or `numeric`. Default is `alpha`.|\n|count|The number of items to display.|\n|start|The item number to start displaying from.|\n|filter|The ID of a field to filter the results by.|\n|match|Used with filter, see the below table for values|\n|value|Used with filter and match. The value to match. For `between` and `in`, takes a comma delimited string. For `regex` takes PCRE regular expression.|\n|category|Filter by one or more categories. See [Category filtering](/docs/categories/filtering/)|\n|category-match|Either `any` or `all`. See [Category filtering](/docs/categories/filtering/)|\n|skip-template|True or false. Bypass template processing and return the content in an associative array.|\n|return-html|True or false. For use with `skip-template`. Adds the HTML onto the end of the returned array with key `html`.|\n|split-items|True or false. Return an array of individually templated items.|\n|raw|True or false. Returns unprocessed content, for use alongside skip-template.|\n\n### Possible values for match\n\n| Value      | Aliases       | Description                                                         |\n| ---------- | ------------- | ------------------------------------------------------------------- |\n| eq         | `is`, `exact` | equal to                                                            |\n| neq        | `not`, `!eq`  | not equal to                                                        |\n| gt         |               | greater than                                                        |\n| gte        |               | greater than or equal to                                            |\n| lt         |               | less than                                                           |\n| lte        |               | less than or equal to                                               |\n| contains   |               | the value exists within the content (a simple search)               |\n| !contains  |               | opposite of `contains`: the value does not exist within the content |\n| regex      | `regexp`      | using a PCRE regular expression                                     |\n| between    |               | match between two values                                            |\n| !between   |               | opposite of `between`                                               |\n| eqbetween  |               | match between two values inclusively                                |\n| !eqbetween |               | opposite of `eqbetween`                                             |\n| in         | `within`      | match within a comma delimited content list (like a list of tags)   |\n| !in        | `!within`     | opposite of `in`                                                    |\n\n## Usage examples\n\nThe below example filters on price, returning products equal to or between 10 and 20 units of currency, which are in the category ‘widgets’. I have also passed in a custom template for this listing.\n\n```php\n<?php\n\tperch_shop_custom(array(\n\t    'filter'=>'productPrice',\n\t    'match'=>'eqbetween',\n\t    'value'=>'10, 20',\n\t    'category'=>'widgets',\n\t    'template'=>'shop/special_listing.html'\n\t));\n?>\n```\n\nThe `perch_shop_custom` function is very useful for displaying a customised list of products to given parameters.\n\nThe options for `filter`, `match` and `value` work just like `perch_content_custom`. Category can be either a single item or an array.","type":"functions"},{"title":"perch_shop_product_field()","permalink":"https://docs.grabaperch.com/functions/shop-paypal/perch-shop-product-field/","id":"functions.shop-paypal.perch-shop-product-field","excerpt":"**This add-on is deprecated. Please use the Perch Shop app.**","text":"**This add-on is deprecated. Please use the Perch Shop app.**\n\nRetrieve a specific field from a product using the `perch_shop_product_field()` function.\n\n## Requires\n\n- Perch Shop PayPal installed\n\n## Parameters\n\n| Type | Description |\n|-|-|\n| String   | Slug to identify the product |\n| String | Template tag ID to return the value of for this product |\n\n\n\n## Usage examples\n\nIn this example we pass in a product slug to identify the product then the `productTitle` field. The function will return the value of `productTitle` for this product.\n\n```php\n<?php perch_shop_product_field('my-product', 'productTitle'); ?>\n```","type":"functions"},{"title":"perch_shop_products_by_category()","permalink":"https://docs.grabaperch.com/functions/shop-paypal/perch-shop-products-by-category/","id":"functions.shop-paypal.perch-shop-products-by-category","excerpt":"**This add-on is deprecated. Please use the Perch Shop app.**","text":"**This add-on is deprecated. Please use the Perch Shop app.**\n\nGet a list of products by category using the `perch_shop_products_by_category()` function.\n\n## Requires\n\n- Perch Shop PayPal installed\n\n## Parameters\n\n| Type | Description |\n|-|-|\n| String   | Category slug |\n| Integer | Number of items to return |\n\n\n## Usage examples\n\nRetrieve 10 products from the category with a slug of 'accessories'.\n\n```php\n<?php perch_shop_products_by_category('accessories', 10); ?>\n```","type":"functions"},{"title":"perch_shop_product()","permalink":"https://docs.grabaperch.com/functions/shop-paypal/perch-shop-product/","id":"functions.shop-paypal.perch-shop-product","excerpt":"**This add-on is deprecated. Please use the Perch Shop app.**","text":"**This add-on is deprecated. Please use the Perch Shop app.**\n\nGet a product by slug using the `perch_shop_product()` function.\n\n## Requires\n\n- Perch Shop PayPal installed\n\n## Parameters\n\n| Type | Description |\n|-|-|\n| String  | Product slug to identify the product  |\n\n\n## Usage examples\n\nDisplay the product identified by slug 'my-product' using the default template.\n\n```php\n<?php perch_shop_product($productSlug); ?>\n```","type":"functions"},{"title":"perch_podcasts_episodes()","permalink":"https://docs.grabaperch.com/functions/podcasts/perch-podcasts-episodes/","id":"functions.podcasts.perch-podcasts-episodes","excerpt":"Output a list of the episodes for a given show with `perch_podcasts_episodes()`.","text":"Output a list of the episodes for a given show with `perch_podcasts_episodes()`.\n\n## Requires\n\n- The Perch Podcasts App installed\n\n## Parameters\n\n| Type | Description |\n|-|-|\n| String | A unique show slug |\n| Array   | Options array, see table below |\n| Boolean | Set to `true` to have the value returned instead of echoed. |\n\n\n## Options array\n\n|Name|Value|\n|-|-|\n|template|String with the template filename from the `perch/templates/podcasts` folder.|\n\n## Usage examples\n\nRetrieve all episodes for a show.\n\n```php\n<?php perch_podcasts_episodes(perch_get('s')); ?>\n```\n\nAn options array can be passed as the second argument.\n\n```php\n<?php perch_podcasts_episodes(perch_get('s'), array(\n  'template' => 'my-template.html'\n)); ?>\n```\n\nPass `true` as the third argument to return the result.\n\n```php\n<?php\n$episodes = perch_podcasts_episodes(perch_get('s'), array(\n  'template' => 'my-template.html'\n)); ?>\n```","type":"functions"},{"title":"perch_podcasts_show()","permalink":"https://docs.grabaperch.com/functions/podcasts/perch-podcasts-show/","id":"functions.podcasts.perch-podcasts-show","excerpt":"Display a single show with `perch_podcasts_show()`.","text":"Display a single show with `perch_podcasts_show()`.\n\n## Requires\n\n- The Perch Podcasts App installed\n\n## Parameters\n\n| Type | Description |\n|-|-|\n| String | A unique show slug |\n| Array   | Options array, see table below |\n| Boolean | Set to `true` to have the value returned instead of echoed. |\n\n\n## Options array\n\n|Name|Value|\n|-|-|\n|template|String with the template filename from the `perch/templates/podcasts` folder.|\n\n## Usage examples\n\n\nThe first argument must be a unique show slug. Usually this will have been passed on the URL from a show listing page. This example will use the value of `?s=` on the URL to find the show.\n\n```php\n<?php perch_podcasts_show(perch_get('s')); ?>\n```\n\nThe function takes a standard options array as the second argument.\n\n```php\n<?php perch_podcasts_show(perch_get('s'), array(\n  'template' => 'my-template.html'\n)); ?>\n```\n\nTo return the value, pass true as the third argument.\n\n```php\n<?php $html = perch_podcasts_show(perch_get('s'), array(), true); ?>\n```","type":"functions"},{"title":"perch_podcasts_shows()","permalink":"https://docs.grabaperch.com/functions/podcasts/perch-podcasts-shows/","id":"functions.podcasts.perch-podcasts-shows","excerpt":"Output a list of the shows with `perch_podcasts_shows()`.","text":"Output a list of the shows with `perch_podcasts_shows()`.\n\n## Requires\n\n- The Perch Podcasts App installed\n\n## Parameters\n\n| Type | Description |\n|-|-|\n| Array   | Options array, see table below |\n| Boolean | Set to `true` to have the value returned instead of echoed. |\n\n\n## Options array\n\n|Name|Value|\n|-|-|\n|template|String with the template filename from the `perch/templates/podcasts` folder.|\n\n## Usage examples\n\nList all shows with the default template.\n\n```php\n<?php perch_podcasts_shows(); ?>\n```\n\nAn options array can be passed as the first argument.\n\n```php\n<?php perch_podcasts_shows(array(\n  'template' => 'my-template.html'\n)); ?>\n```\n\nTo return the value, pass true as the second argument.\n\n```php\n<?php $html = perch_podcasts_shows(array(), true); ?>\n```","type":"functions"},{"title":"perch_podcasts_episode()","permalink":"https://docs.grabaperch.com/functions/podcasts/perch-podcasts-episode/","id":"functions.podcasts.perch-podcasts-episode","excerpt":"Display a single episode with function `perch_podcasts_episode()`.","text":"Display a single episode with function `perch_podcasts_episode()`.\n\n## Requires\n\n- The Perch Podcasts App installed\n\n## Parameters\n\n| Type | Description |\n|-|-|\n| String | A unique show slug |\n| Slug or Integer | Either an episode number or an episode slug |\n| Array   | Options array, see table below |\n| Boolean | Set to `true` to have the value returned instead of echoed. |\n\n\n## Options array\n\n|Name|Value|\n|-|-|\n|template|String with the template filename from the `perch/templates/podcasts` folder.|\n\n## Usage examples\n\nGet a show identified by the QueyString parameter 's' and an episode by 'ep'. These usually will have been passed on the URL from a listing page. This will use the value of `?s=` on the URL to find the show, and `ep=` to find the episode of that show.\n\n```php\n<?php perch_podcasts_episode(perch_get('s'), perch_get('ep')); ?>\n```\n\nThe function takes a standard options array as the third argument.\n\n```php\n<?php perch_podcasts_episode(perch_get('s'), perch_get('ep'), array(\n  'template' => 'my-template.html'\n)); ?>\n```\n\nTo return the value, pass true as the fourth argument.\n\n```php\n<?php $html = perch_podcasts_episode(perch_get('s'), perch_get('ep'), array(), true); ?>\n```","type":"functions"},{"title":"perch_podcasts_track_play()","permalink":"https://docs.grabaperch.com/functions/podcasts/perch-podcasts-track-play/","id":"functions.podcasts.perch-podcasts-track-play","excerpt":"Log an episode as being played, and optionally redirect to the true URL of the media file with `perch_podcasts_track_play()`.","text":"Log an episode as being played, and optionally redirect to the true URL of the media file with `perch_podcasts_track_play()`.\n\n## Requires\n\n- The Perch Podcasts App installed\n\n## Parameters\n\n| Type | Description |\n|-|-|\n| String | A unique show slug |\n| Slug or Integer | Either an episode number or an episode slug |\n| Array   | Options array, see table below |\n| Boolean | Set to `true` to have the value returned instead of echoed. |\n\n\n## Options array\n\n|Name|Value|\n|-|-|\n|template|String with the template filename from the `perch/templates/podcasts` folder.|\n\n## Usage examples\n\n\nThe first argument must be a unique show slug. The second argument must be either an episode number, or the episode slug. These usually will have been passed on the URL from a listing page.\n\nThis example will use the value of `?s=` on the URL to find the show, and `ep=` to find the episode of that show.\n\n```php\n<?php perch_podcasts_track_play(perch_get('s'), perch_get('ep')); ?>\n```\n\nThe function takes a standard options array as the third argument.","type":"functions"},{"title":"perch_post()","permalink":"https://docs.grabaperch.com/functions/utilities/perch-post/","id":"functions.utilities.perch-post","excerpt":"The `perch_post()` function does the same job as `$_POST` in PHP, but has some convenient safeguards and options built in.","text":"The `perch_post()` function does the same job as `$_POST` in PHP, but has some convenient safeguards and options built in.\n\nPHP has a standard way to read values from POST requests. If you’ve done any PHP development, you’ll be familiar with using something like `$_POST['message']` to read a value from a POST request.\n\nYou can do that in Perch, too. However, `$_POST` can be hard to use, because if you try to read in a value that hasn’t been set, PHP will throw an error. This means you need to test for it being set, and decide whether to read it or not. To make life easier, Perch has `perch_post()`.\n\n## Parameters\n\n| Type | Description |\n|-|-|\n| String   | The array element index to look for in `$_POST`  |\n| String | A default value to use if the array element in `$_POST` is empty or not set |\n\n\n## Usage examples\n\nIf we have a HTML form with `method=\"post\"`:\n\n```html\n<form action=\"contact.php\" method=\"post\">\n    <label for=\"visitor_name\">Name</label>\n    <input type=\"text\" name=\"visitor_name\" id=\"visitor_name\">\n    <input type=\"submit\">\n</form>\n```\n\nWe can get the value of the submitted field `visitor_name` using `perch_post()`:\n\n```php\n$name = perch_post('visitor_name');\n```\nIf we want to set the name to \"Anonymous\" if there is no `visitor_name` value, we can use:\n\n```php\n$name = perch_post('visitor_name', 'Anonymous');\n```\n\nBy default, the function returns `false` if it cannot find the submitted value. This means we can use it in conditional statements:\n\n```php\nif(perch_post('agree_terms')) {\n    // only process data if user agrees to terms\n}\n```","type":"functions"},{"title":"perch_get()","permalink":"https://docs.grabaperch.com/functions/utilities/perch-get/","id":"functions.utilities.perch-get","excerpt":"The `perch_get()` function does the same job as `$_GET` in PHP, but has some convenient safeguards and options built in.","text":"The `perch_get()` function does the same job as `$_GET` in PHP, but has some convenient safeguards and options built in.\n\nWhen building dynamic pages, it’s quite common to use the URL to pass options from one page to the next. For example, when building list and detail pages, the list page will link to the detail page with the item to be viewed as an argument on the URL.\n\n/article.php?s=2015-11-01-latest-news\nThese are called GET arguments, as they are passed on the query string as part of the HTTP GET request.\n\nPHP has a standard way to read these values into the page. If you’ve done any PHP development at all, you’ll be familiar with using something like `$_GET['s']` to read a value from the GET request.\n\nYou can do that in Perch, too. However, `$_GET` can be hard to use, because if you try to read in a value that hasn’t been set, PHP will throw an error. This means you need to test for it being set, and decide whether to read it or not. To make life easier, Perch has perch_get().\n\n## Parameters\n\n| Type | Description |\n|-|-|\n| String   | The value to look for on the query string |\n| String | A default to use if the query string is empty |\n\n\n## Usage examples\n\nIf we have a query string that looks like:\n\n```html\n/posts.php?count=10\n```\n\nThen to get the value of `count` we can use `perch_get()`.\n\n```php\nperch_get('count');\n```\n\nIf we want to set the count to 10 if there is no `count` value passed in we can use:\n\n```php\nperch_get('count', 10);\n```\n\nThis helps us ensure we always get a valid and usable result, we can then use the value in `perch_content_custom` for example:\n\n```php\n<?php\nperch_content_custom('Posts', [\n  'count' => perch_get('count', 10);\n]);\n?>\n```","type":"functions"},{"title":"Rendering Templates","permalink":"https://docs.grabaperch.com/functions/utilities/perch-template/","id":"functions.utilities.perch-template","excerpt":"Sometimes it’s useful to be able to render a set of data using a Perch template on the fly. Perhaps you’ve used `skip-template` to fetch an array, have done some work on that array, and then want to show it using the templating engine.","text":"Sometimes it’s useful to be able to render a set of data using a Perch template on the fly. Perhaps you’ve used `skip-template` to fetch an array, have done some work on that array, and then want to show it using the templating engine.\n\nThe `perch_template()` function enables you to do that.\n\n```php\nperch_template('content/article.html', array(\n    'heading'=>'Hello world',\n    'date'=>'2013-05-09 12:30:00',\n));\n```\n\nThe function renders the template specified by the first argument using the data array specified in the second.\n\nThe third argument, if given as `true`, will return the rendered HTML rather than echoing it.\n\nThe template file name must a path within the `templates` folder, not just the bare file name. This function is part of the Content app, so presumes a `perch:content` tag namespace.\n\n## Parameters\n\n| Type    | Description                                                                              |\n| ------- | ---------------------------------------------------------------------------------------- |\n| String  | Template path                                                                            |\n| Array   | Data array                                                                               |\n| Boolean | Set to `true` to have the rendered template returned instead of echoed. Default `false`. |\n\n## Using repeaters\n\nPass data in an array to render using [repeater tags](/templates/repeaters/):\n\n```php\nperch_template('content/product.html', [\n    'title' => 'Perch CMS',\n    'desc' => 'Perch is a PHP content management system.',\n\n    // render founders using repeater tags\n    'founders' => [\n      [\n        'name' => 'Drew McLellan',\n        'image' => '/images/drew.jpg',\n        'twitter' => 'drewm',\n      ],\n      [\n        'name' => 'Rachel Andrew',\n        'image' => '/images/rachel.jpg',\n        'twitter' => 'rachelandrew',\n      ]\n    ],\n]);\n```\n\n```html\n<h1><perch:content id=\"title\"></h1>\n<p><perch:content id=\"desc\"></p>\n\n<perch:repeater id=\"founders\">\n  <perch:before>\n    <h2>Founders</h2>\n    <ul>\n  </perch:before>\n\n    <li>\n      <perch:content id=\"name\">\n\n      <a href=\"https://twitter.com/<perch:content id=\"twitter\">\">\n        @<perch:content id=\"twitter\">\n      </a>\n\n      <figure>\n          <img src=\"<perch:content id=\"image\">\" alt=\"<perch:content id=\"name\">\">\n      </figure>\n    </li>\n\n  <perch:after>\n    </ul>\n  </perch:after>\n</perch:repeater>\n```\n\n## Rendering a list\n\n`perch_template()` can also render multiple items in one go:\n\n```php\nperch_template('content/episodes', [\n  [\n    'title' => \"How Can I Run Online Workshops?\",\n    'length' => '35 minutes',\n    'guests' => [\n      [\n        'name' => 'Rachel Andrew',\n      ],\n    ]\n  ],\n\n  [\n    'title' => \"What's new in Microsoft Edge?\",\n    'length' => '39 minutes',\n    'guests' => [\n      [\n        'name' => 'Stephanie Stimac',\n      ],\n      [\n        'name' => 'Aaron Gustafson',\n      ]\n    ]\n  ],\n\n  [\n    'title' => \"What Is Ethical Design?\",\n    'length' => '44 minutes',\n    'guests' => [\n      [\n        'name' => 'Trine Falbe',\n      ],\n      [\n        'name' => 'Martin Michael Frederiksen',\n      ]\n    ]\n  ],\n]);\n```\n\n```html\n<perch:before>\n    <h1>Podcast episodes</h1>\n    <ul>\n</perch:before>\n\n    <li>\n        <h2><perch:content id=\"title\"></h2>\n        <p>\n            Episode length: <perch:content id=\"length\">\n        </p>\n\n        <perch:repeater id=\"guests\">\n            <perch:before>\n                <h3>Guests</h3>\n                <ul>\n            </perch:before>\n\n                <li><perch:content id=\"name\"></li>\n\n            <perch:after>\n                </ul>\n            </perch:after>\n        </perch:repeater>\n    </li>\n\n<perch:after>\n    </ul>\n</perch:after>\n```\n\n## Rendering common HTML\n\nIn some projects you may find yourself reusing the same HTML in different parts of your PHP pages, but with different content:\n\n```php\n<?php if( !perch_member_has_tag('email-verified') ): ?>\n  <div class=\"notification warning\">\n    <p>Your email address <?= perch_member_get('email') ?> is not verified.</p>\n  </div>\n<?php endif; ?>\n\n\n\n<?php if( !perch_member_has_tag('premium') ): ?>\n  <div class=\"notification info\">\n    <p>Upgrade to Premium to see a real unicorn.</p>\n  </div>\n<?php endif; ?>\n```\n\nInstead of writing and managing the same HTML markup in multiple files, you can render it with a single Perch template:\n\n```php\nif( !perch_member_has_tag('email-verified') ) {\n  perch_template('util/notification.html', [\n    'type' => 'warning',\n    'message' => 'Your email address ' . perch_member_get('email') . ' is not verified.',\n  ]);\n}\n\n\n\nif( !perch_member_has_tag('premium') ) {\n  perch_template('util/notification.html', [\n    'type' => 'info',\n    'message' => 'Upgrade to Premium to see a real unicorn.',\n  ]);\n}\n```\n\n```html\n<div class=\"notification <perch:content id=\"type\">\">\n  <p><perch:content id=\"message\"></p>\n</div>\n```","type":"functions"},{"title":"PerchSystem","permalink":"https://docs.grabaperch.com/functions/utilities/perchsystem/","id":"functions.utilities.perchsystem","excerpt":"The `PerchSystem` class holds a number of utility methods that enables access to more advanced system functions. All methods are called statically, e.g.","text":"The `PerchSystem` class holds a number of utility methods that enables access to more advanced system functions. All methods are called statically, e.g.\n\n```php\nPerchSystem::redirect('http://example.com/');\n```\n\n|Method|Purpose|\n|-|-|\n|set_page|Set the URL Perch should use for the current page. See [Working with Front Controllers](/perch/building/working-with-front-controllers/)|\n|get_page|Get the URL of the page as Perch currently sees it.|\n|register_search_handler|Register a new search handler. See [Search handlers](/api/search/)|\n|register_admin_search_handler|Register a new admin search handler. See [Search handlers](/api/search/)|\n|get_registered_search_handlers|Get a list of the currently registered search handlers|\n|get_registered_bucket_handlers|Get a list of the currently registered bucket handlers. See [Bucket handlers](/api/buckets/)|\n|register_template_handler|Register a new template handler. See [Template handlers](/api/templates/)|\n|get_registered_template_handlers|Get a list of the currently registered template handlers.|\n|register_feather|Register a new feather. See [Feathers](/api/feathers)|\n|set_var|Pass a variable into the template engine. See [Passing variables into templates](/templates/passing-variables-into-templates/)|\n|unset_var|Remove a previously set template variable|\n|set_vars|Pass an array of variables into the template engine|\n|get_var|Get the value of a template engine variable|\n|get_vars|Get all the variables set for the template enigne|\n|redirect|Perform an HTTP 30x redirect to the given URL|\n|force_ssl|Force a page to switch to use the HTTPS protocol. See [SSL configuration](/perch/configuration/ssl/)|\n|force_non_ssl|Force a page to switch away from using the HTTPS protocol|","type":"functions"},{"title":"PerchUtil","permalink":"https://docs.grabaperch.com/functions/utilities/perchutil/","id":"functions.utilities.perchutil","excerpt":"The `PerchSystem` class holds a number of utility methods that enables access to utility functions. All methods are called statically, e.g.","text":"The `PerchSystem` class holds a number of utility methods that enables access to utility functions. All methods are called statically, e.g.\n\n```php\nPerchUtil::urlify('Some String');\n```\n\n## Debugging\n\nEnable [debug mode](/perch/configuration/debug/) to use the below debugging methods.\n\n|Method|Purpose|\n|-|-|\n|debug|Add a message (string, array or object) to the debug output.|\n|mark|Add a highlighted message to the debug output.|\n|output_debug|Output the debug messages.|\n\n\n## Redirects\n\n|Method|Purpose|\n|-|-|\n|redirect|Perform an HTTP 30x redirect to the given URL|\n|hold_redirects|Hold redirects. Useful for troubleshooting.|\n\n\n## HTTP\n\n|Method|Purpose|\n|-|-|\n|http_get_request|Make a HTTP get request.|\n|http_post_request|Make a HTTP post request.|\n\n## Files\n\n|Method|Purpose|\n|-|-|\n|file_extension|Get the file extension|\n|file_path|Make a file path OS-safe by swapping out the correct `DIRECTORY_SEPARATOR`|\n|get_mime_type|Get the file MIME type|\n\n\n\n## Other\n\n|Method|Purpose|\n|-|-|\n|urlify|Convert a string to a basic URL-safe version.|\n|html|Convert special characters in a string to HTML entities.|\n|is_valid_email|Check whether a given string is a valid email address.|\n|is_assoc|Check whether an array is associative.|\n|get_client_ip|Get the client IP address|","type":"functions"},{"title":"perch_twitter_get_latest()","permalink":"https://docs.grabaperch.com/functions/twitter/perch-twitter-get-latest/","id":"functions.twitter.perch-twitter-get-latest","excerpt":"Return latest tweets from a Twitter account or multiple accounts with `perch_twitter_get_latest()`.","text":"Return latest tweets from a Twitter account or multiple accounts with `perch_twitter_get_latest()`.\n\n## Requires\n\n- Perch Twitter App installed\n- PHP cURL libraries\n\n## Parameters\n\n| Type | Description |\n|-|-|\n| Array   | Options array, see table below |\n| Boolean | Set to `true` to have the value returned instead of echoed. |\n\n\n## Options array\n\n|Name|Value|\n|-|-|\n|twitter_id|The Twitter account username|\n|type|Set to either 'favorites' or 'mine' default is 'mine'|\n|count|The number of Tweets to return|\n|exclude_replies|Setting this to 1 will exclude any @replies from the returned tweets, default 0|\n|template|A template to overwrite the default. This should be stored in perch/templates/twitter. |\n\n## Usage examples\n\nGet tweets from all accounts using the default templates.\n\n```php\n<?php perch_twitter_get_latest(); ?>\n```\n\nGet 1 tweet from the account `grabaperch`, of type `favorites` excluding replies.\n\n```php\n<?php\n    perch_twitter_get_latest(array(\n        'twitter_id'=>'grabaperch',\n        'type'=>'favorites',\n        'count'=>1,\n        'exclude_replies'=>1\n    ));\n?>\n```\n\nGet 3 tweets from the account `grabaperch`, of type `favorites` excluding replies, assign the result to a variable `$tweets`.\n\n```php\n<?php $tweets = perch_twitter_get_latest(array(\n  'twitter_id'=>'grabaperch',\n  'type'=>'favorites',\n  'count'=>3,\n  'exclude_replies'=>1\n),true); ?>\n```","type":"functions"},{"title":"perch_twitter_get_random()","permalink":"https://docs.grabaperch.com/functions/twitter/perch-twitter-get-random/","id":"functions.twitter.perch-twitter-get-random","excerpt":"Return randomized tweets from a Twitter account or multiple accounts with `perch_twitter_get_random()`.","text":"Return randomized tweets from a Twitter account or multiple accounts with `perch_twitter_get_random()`.\n\n## Requires\n\n- Perch Twitter App installed\n- PHP cURL libraries\n\n## Parameters\n\n| Type | Description |\n|-|-|\n| Array   | Options array, see table below |\n| Boolean | Set to `true` to have the value returned instead of echoed. |\n\n\n## Options array\n\n|Name|Value|\n|-|-|\n|twitter_id|The Twitter account username|\n|type|Set to either 'favorites' or 'mine' default is 'mine'|\n|count|The number of Tweets to return|\n|exclude_replies|Setting this to 1 will exclude any @replies from the returned tweets, default 0|\n|template|A template to overwrite the default. This should be stored in perch/templates/twitter. |\n\n## Usage examples\n\nGet tweets from all accounts using the default templates.\n\n```php\n<?php perch_twitter_get_random(); ?>\n```\n\nGet 1 tweet from the account `grabaperch`, of type `favorites` excluding replies.\n\n```php\n<?php\n    perch_twitter_get_random(array(\n        'twitter_id'=>'grabaperch',\n        'type'=>'favorites',\n        'count'=>1,\n        'exclude_replies'=>1\n    ));\n?>\n```\n\nGet 3 tweets from the account `grabaperch`, of type `favorites` excluding replies, assign the result to a variable `$tweets`.\n\n```php\n<?php $tweets = perch_twitter_get_random(array(\n  'twitter_id'=>'grabaperch',\n  'type'=>'favorites',\n  'count'=>3,\n  'exclude_replies'=>1\n),true); ?>\n```","type":"functions"},{"title":"perch_twitter_widget_js()","permalink":"https://docs.grabaperch.com/functions/twitter/perch-twitter-widget-js/","id":"functions.twitter.perch-twitter-widget-js","excerpt":"Outputs a `<script>` tag linking to the Twitter widget JavaScript.","text":"Outputs a `<script>` tag linking to the Twitter widget JavaScript.\n\nBy default, tweets are output as a basic semantic HTML resprentation. To turn them into a rich embedded tweet with media and actions, you need to include Twitter's widget JavaScript once per page. This can be done in the `<head>` of the page, before the closing `</body>` tag, or just inline as needed.\n\n```php\n<?php \n  perch_twitter_get_latest(); \n  perch_twitter_widget_js();\n?>\n```","type":"functions"},{"title":"perch_shop_checkout()","permalink":"https://docs.grabaperch.com/functions/shop/checkout/perch-shop-checkout/","id":"functions.shop.checkout.perch-shop-checkout","excerpt":"Initiate the payment process with the payment gateway using `perch_shop_checkout()`.","text":"Initiate the payment process with the payment gateway using `perch_shop_checkout()`.\n\n## Requires\n\n- Perch Shop installed\n\n## Parameters\n\n| Type | Description |\n|-|-|\n| String | Slug of the gateway to checkout with |\n| Array   | Options array, see table below |\n\n\n## Options array\n\n|Name|Value|\n|-|-|\n|`return_url`|The URL to send the customer back to after a successful transaction.|\n|`cancel_url`|The URL to send the customer to if something goes wrong, such as their card being declined.|\n\nCheck the individual gateway documentation for additional options.\n\n## Usage examples\n\nBasic example.\n\n```php\nperch_shop_checkout('gateway-slug', [\n    'return_url' => '/payment/success',\n    'cancel_url' => '/payment/failure',\n]);\n```","type":"functions"},{"title":"perch_shop_cart_item_count()","permalink":"https://docs.grabaperch.com/functions/shop/cart/perch-shop-cart-item-count/","id":"functions.shop.cart.perch-shop-cart-item-count","excerpt":"Get a count of the number of items currently in the cart with `perch_shop_cart_item_count()`.","text":"Get a count of the number of items currently in the cart with `perch_shop_cart_item_count()`.\n\n## Requires\n\n- Perch Shop installed\n\n\n\n## Usage examples\n\nGet a count of the number of items currently in the cart.\n\n```php\nperch_shop_cart_item_count();\n```","type":"functions"},{"title":"perch_shop_cart_total()","permalink":"https://docs.grabaperch.com/functions/shop/cart/perch-shop-cart-total/","id":"functions.shop.cart.perch-shop-cart-total","excerpt":"Get the total value of the cart with the `perch_shop_cart_total()` function.","text":"Get the total value of the cart with the `perch_shop_cart_total()` function.\n\n## Requires\n\n- Perch Shop installed\n\n## Usage examples\n\nGet the total.\n\n```php\nperch_shop_cart_total();\n```","type":"functions"},{"title":"perch_shop_currency_form()","permalink":"https://docs.grabaperch.com/functions/shop/cart/perch-shop-currency-form/","id":"functions.shop.cart.perch-shop-currency-form","excerpt":"Display a form for the customer to switch the cart into a different currency with `perch_shop_currency_form()`","text":"Display a form for the customer to switch the cart into a different currency with `perch_shop_currency_form()`\n\n## Requires\n\n- Perch Shop installed\n\n## Parameters\n\n| Type | Description |\n|-|-|\n| Array   | Options array, see table below |\n| Boolean | Set to `true` to have the value returned instead of echoed. |\n\n\n## Options array\n\n|Name|Value|\n|-|-|\n|template|A custom template for the form|\n\n## Usage examples\n\nDisplay the form.\n\n```php\nperch_shop_currency_form();\n```\n\nPass in an array containing a template.\n\n```php\nperch_shop_currency_form(array(\n  'template' => 'my-template.html'\n));\n```","type":"functions"},{"title":"perch_shop_location_selected()","permalink":"https://docs.grabaperch.com/functions/shop/cart/perch-shop-location-selected/","id":"functions.shop.cart.perch-shop-location-selected","excerpt":"Test to see if the tax location has been selected with the function `perch_shop_location_selected()`.","text":"Test to see if the tax location has been selected with the function `perch_shop_location_selected()`.\n\n## Requires\n\n- Perch Shop installed\n\n\n## Usage examples\n\nBefore running other code test to see if the tax location is selected.\n\n```php\nif (perch_shop_location_selected()) {\n\t...\n}\n```","type":"functions"},{"title":"perch_shop_location_form()","permalink":"https://docs.grabaperch.com/functions/shop/cart/perch-shop-location-form/","id":"functions.shop.cart.perch-shop-location-form","excerpt":"Display a form for the customer to choose their tax location with the function `perch_shop_location_form()`.","text":"Display a form for the customer to choose their tax location with the function `perch_shop_location_form()`.\n\n## Requires\n\n- Perch Shop installed\n\n## Parameters\n\n| Type | Description |\n|-|-|\n| Array   | Options array, see table below |\n| Boolean | Set to `true` to have the value returned instead of echoed. |\n\n\n## Options array\n\n|Name|Value|\n|-|-|\n|template|A custom template for the form|\n\n## Usage examples\n\nDisplay the tax location form.\n\n```php\nperch_shop_location_form();\n```\n\nPass in an array containing a template.\n\n```php\nperch_shop_location_form(array(\n  'template' => 'my-template.html'\n));\n```","type":"functions"},{"title":"perch_shop_empty_cart()","permalink":"https://docs.grabaperch.com/functions/shop/cart/perch-shop-empty-cart/","id":"functions.shop.cart.perch-shop-empty-cart","excerpt":"Empty and destroy the cart and its contents. This will reset the cart completely, removing all items, promotions, currency and location settings and so on.","text":"Empty and destroy the cart and its contents. This will reset the cart completely, removing all items, promotions, currency and location settings and so on.\n\nIt would normally be called after a successful checkout, or when the customer asks to empty their cart.\n\n## Requires\n\n- Perch Shop installed\n\n## Usage examples\n\nEmpty the cart.\n\n```php\nperch_shop_empty_cart();\n```","type":"functions"},{"title":"perch_shop_set_discount_code()","permalink":"https://docs.grabaperch.com/functions/shop/cart/perch-shop-set-discount-code/","id":"functions.shop.cart.perch-shop-set-discount-code","excerpt":"Programmatically apply a discount code to the cart with `perch_shop_set_discount_code()`.","text":"Programmatically apply a discount code to the cart with `perch_shop_set_discount_code()`.\n\n## Requires\n\n- Perch Shop installed\n\n## Parameters\n\n| Type | Description |\n|-|-|\n| String   | The discount code to apply |\n\n## Usage examples\n\nSet the discount code `FREESHIPPING`.\n\n```php\nperch_shop_set_discount_code('FREESHIPPING');\n```","type":"functions"},{"title":"perch_shop_cart()","permalink":"https://docs.grabaperch.com/functions/shop/cart/perch-shop-cart/","id":"functions.shop.cart.perch-shop-cart","excerpt":"Display the shopping cart with the `perch_shop_cart()` function.","text":"Display the shopping cart with the `perch_shop_cart()` function.\n\n## Requires\n\n- Perch Shop installed\n\n## Parameters\n\n| Type | Description |\n|-|-|\n| Array   | Options array, see table below |\n| Boolean | Set to `true` to have the value returned instead of echoed. |\n\n\n## Options array\n\n|Name|Value|\n|-|-|\n|template|The name of a template to use to display the content.|\n|skip-template|True or false. Bypass template processing and return the content in an associative array.|\n|return-html|True or false. For use with `skip-template`. Adds the HTML onto the end of the returned array with key `html`.|\n|raw|True or false. Returns unprocessed content, for use alongside skip-template.|\n## Usage examples\n\n\nDisplay the cart with the default template `shop/cart/cart.html`.\n\n```php\nperch_shop_cart();\n```\n\nThis function accepts an array of options to control what is returned. It can be used as follows.\n\n```php\nperch_shop_cart([\n    'template' => 'my-template.html'\n]);\n```","type":"functions"},{"title":"perch_shop_order()","permalink":"https://docs.grabaperch.com/functions/shop/orders/perch-shop-order/","id":"functions.shop.orders.perch-shop-order","excerpt":"Display the details of a single order, for the logged in customer with `perch_shop_order()`.","text":"Display the details of a single order, for the logged in customer with `perch_shop_order()`.\n\n## Requires\n\n- Perch Shop installed\n\n## Parameters\n\n| Type | Description |\n|-|-|\n| Integer | ID of the item to show |\n| Array   | Options array, see table below |\n| Boolean | Set to `true` to have the value returned instead of echoed. |\n\n\n## Options array\n\n|Name|Value|\n|-|-|\n|template|The name of a template to use to display the content.|\n|skip-template|True or false. Bypass template processing and return the content in an associative array.|\n|return-html|True or false. For use with `skip-template`. Adds the HTML onto the end of the returned array with key `html`.|\n|raw|True or false. Returns unprocessed content, for use alongside skip-template.|\n## Usage examples\n\nDisplay the order with the default template. The default template is `shop/orders/order.html`.\n\n```php\nperch_shop_order($order_id);\n```\n\nThis function accepts an array of options to control what is returned. It can be used as follows.\n\n```php\nperch_shop_order($order_id, [\n    'template' => 'my-template.html'\n]);\n```\n\nAfter payment I want to get the ID of the order just made and show the details.\n\n```php\n$order_id = perch_shop_successful_order_id();\nperch_shop_order($order_id, [\n  'template' => 'successful-payment-template.html'\n]);\n```","type":"functions"},{"title":"perch_shop_orders()","permalink":"https://docs.grabaperch.com/functions/shop/orders/perch-shop-orders/","id":"functions.shop.orders.perch-shop-orders","excerpt":"Display a list of orders for the logged in customer using `perch_shop_orders()`.","text":"Display a list of orders for the logged in customer using `perch_shop_orders()`.\n\n## Requires\n\n- Perch Shop installed\n\n## Parameters\n\n| Type | Description |\n|-|-|\n| Array   | Options array, see table below |\n| Boolean | Set to `true` to have the value returned instead of echoed. |\n\n\n## Options array\n\n|Name|Value|\n|-|-|\n|template|The name of a template to use to display the content.|\n|sort|The ID of the field to sort on.|\n|sort-order|Either `ASC` (ascending), `DESC` (descending) or `RAND` (random).|\n|sort-type|Either `alpha` or `numeric`. Default is `alpha`.|\n|count|The number of items to display.|\n|start|The item number to start displaying from.|\n|filter|The ID of a field to filter the results by.|\n|match|Used with filter, see the below table for values|\n|value|Used with filter and match. The value to match. For `between` and `in`, takes a comma delimited string. For `regex` takes PCRE regular expression.|\n|category|Filter by one or more categories. See [Category filtering](/docs/categories/filtering/)|\n|category-match|Either `any` or `all`. See [Category filtering](/docs/categories/filtering/)|\n|skip-template|True or false. Bypass template processing and return the content in an associative array.|\n|return-html|True or false. For use with `skip-template`. Adds the HTML onto the end of the returned array with key `html`.|\n|split-items|True or false. Return an array of individually templated items.|\n|raw|True or false. Returns unprocessed content, for use alongside skip-template.|\n|paginate|True or false. Whether to use pagination.|\n|count|Integer. (When used with `paginate`) The number of items to show per page if pagination is being used.|\n|pagination-var|The URL query string parameter name to use for the page number. Defaults to page.|\n|page-links|True or false. Create numbered page links as well as previous and next links.|\n|page-link-template|The template to use (if not the default) to generate the page links.|\n|page-link-style|shortened or all. By default a shortened set of page links are generated. If you want a link for every page, set to all.|\n## Usage examples\n\nDisplay orders with the default template. The default template is `shop/orders/list.html`.\n\n```php\nperch_shop_orders();\n```\n\nThis function accepts an array of options to control what is returned. It can be used as follows.\n\n```php\nperch_shop_orders([\n    'template' => 'order_list.html',\n    'count' => 10,\n]);\n```","type":"functions"},{"title":"perch_shop_brand()","permalink":"https://docs.grabaperch.com/functions/shop/products/perch-shop-brand/","id":"functions.shop.products.perch-shop-brand","excerpt":"Display a brand with the function `perch_shop_brand()`.","text":"Display a brand with the function `perch_shop_brand()`.\n\n## Requires\n\n- Perch Shop installed\n\n## Parameters\n\n| Type | Description |\n|-|-|\n| String | Slug of the item to show |\n| Array   | Options array, see table below |\n| Boolean | Set to `true` to have the value returned instead of echoed. |\n\n\n## Options array\n\n|Name|Value|\n|-|-|\n|template|The name of a template to use to display the content.|\n|skip-template|True or false. Bypass template processing and return the content in an associative array.|\n|return-html|True or false. For use with `skip-template`. Adds the HTML onto the end of the returned array with key `html`.|\n|raw|True or false. Returns unprocessed content, for use alongside skip-template.|\n## Usage examples\n\nDisplay the brand identified with the slug `my-brand` using the default template. The default template is `shop/brands/brand.html`.\n\n```php\nperch_shop_brand('my-brand');\n```\n\n## Options\n\nThis function accepts an array of options to control what is returned. It can be used as follows.\n\n```php\nperch_shop_brand('my-brand', [\n    'template' => 'my-template.html'\n]);\n```","type":"functions"},{"title":"perch_shop_brands()","permalink":"https://docs.grabaperch.com/functions/shop/products/perch-shop-brands/","id":"functions.shop.products.perch-shop-brands","excerpt":"Display a list of brands used in your store with `perch_shop_brands()`.","text":"Display a list of brands used in your store with `perch_shop_brands()`.\n\n## Requires\n\n- Perch Shop installed\n\n## Parameters\n\n| Type | Description |\n|-|-|\n| Array   | Options array, see table below |\n| Boolean | Set to `true` to have the value returned instead of echoed. |\n\n\n## Options array\n\n|Name|Value|\n|-|-|\n|template|The name of a template to use to display the content.|\n|sort|The ID of the field to sort on.|\n|sort-order|Either `ASC` (ascending), `DESC` (descending) or `RAND` (random).|\n|sort-type|Either `alpha` or `numeric`. Default is `alpha`.|\n|count|The number of items to display.|\n|start|The item number to start displaying from.|\n|filter|The ID of a field to filter the results by.|\n|match|Used with filter, see the below table for values|\n|value|Used with filter and match. The value to match. For `between` and `in`, takes a comma delimited string. For `regex` takes PCRE regular expression.|\n|category|Filter by one or more categories. See [Category filtering](/docs/categories/filtering/)|\n|category-match|Either `any` or `all`. See [Category filtering](/docs/categories/filtering/)|\n|skip-template|True or false. Bypass template processing and return the content in an associative array.|\n|return-html|True or false. For use with `skip-template`. Adds the HTML onto the end of the returned array with key `html`.|\n|split-items|True or false. Return an array of individually templated items.|\n|raw|True or false. Returns unprocessed content, for use alongside skip-template.|\n|paginate|True or false. Whether to use pagination.|\n|count|Integer. (When used with `paginate`) The number of items to show per page if pagination is being used.|\n|pagination-var|The URL query string parameter name to use for the page number. Defaults to page.|\n|page-links|True or false. Create numbered page links as well as previous and next links.|\n|page-link-template|The template to use (if not the default) to generate the page links.|\n|page-link-style|shortened or all. By default a shortened set of page links are generated. If you want a link for every page, set to all.|\n## Usage examples\n\nBasic use, display a list of brands with the default template. The default template is `shop/brands/list.html`.\n\n```php\nperch_shop_brands();\n```\n\n## Options\n\nThis function accepts an array of options to control what is returned. It can be used as follows.\n\n```php\nperch_shop_brands([\n    'template' => 'brand_list.html',\n    'count' => 10,\n]);\n```","type":"functions"},{"title":"perch_shop_download_file()","permalink":"https://docs.grabaperch.com/functions/shop/products/perch-shop-download-file/","id":"functions.shop.products.perch-shop-download-file","excerpt":"Deliver a secured product file using `perch_shop_download_file()`.","text":"Deliver a secured product file using `perch_shop_download_file()`.\n\n## Requires\n\n- Perch Shop installed\n\n## Parameters\n\n| Type | Description |\n|-|-|\n| Integer | ID of the file to download*. |\n\n* The file ID can be found with a call to the listing function, [perch_shop_purchased_files()](/functions/shop/products/perch-shop-purchased-files/).\n\n\n## Usage examples\n\nDownload the file with ID `123`.\n\n```php\nperch_shop_download_file(123);\n```","type":"functions"},{"title":"perch_shop_customer_has_purchased_file()","permalink":"https://docs.grabaperch.com/functions/shop/products/perch-shop-customer-has-purchased-file/","id":"functions.shop.products.perch-shop-customer-has-purchased-file","excerpt":"Checks if the currently authenticated customer has purchased the nominated file with `perch_shop_customer_has_purchased_file()`.","text":"Checks if the currently authenticated customer has purchased the nominated file with `perch_shop_customer_has_purchased_file()`.\n\n## Requires\n\n- Perch Shop installed\n\n## Parameters\n\n| Type | Description |\n|-|-|\n| Integer | ID of the file to download*. |\n\n* The file ID can be found with a call to the listing function, [perch_shop_purchased_files()](/functions/shop/products/perch-shop-purchased-files/).\n\n## Usage examples\n\nHas the customer purchased the file with ID `123`.\n\n```php\nif(perch_shop_customer_has_purchased_file(123)) {\n  ...\n}\n```","type":"functions"},{"title":"perch_shop_product_variants()","permalink":"https://docs.grabaperch.com/functions/shop/products/perch-shop-product-variants/","id":"functions.shop.products.perch-shop-product-variants","excerpt":"Display a list of product variants for a given product with `perch_shop_product_variants()`.","text":"Display a list of product variants for a given product with `perch_shop_product_variants()`.\n\n## Requires\n\n- Perch Shop installed\n\n## Parameters\n\n| Type | Description |\n|-|-|\n| String  | Slug of the product to show variants for |\n| Array   | Options array, see table below |\n| Boolean | Set to `true` to have the value returned instead of echoed. |\n\n\n## Options array\n\n|Name|Value|\n|-|-|\n|template|The name of a template to use to display the content.|\n|sort|The ID of the field to sort on.|\n|sort-order|Either `ASC` (ascending), `DESC` (descending) or `RAND` (random).|\n|sort-type|Either `alpha` or `numeric`. Default is `alpha`.|\n|count|The number of items to display.|\n|start|The item number to start displaying from.|\n|filter|The ID of a field to filter the results by.|\n|match|Used with filter, see the below table for values|\n|value|Used with filter and match. The value to match. For `between` and `in`, takes a comma delimited string. For `regex` takes PCRE regular expression.|\n|category|Filter by one or more categories. See [Category filtering](/docs/categories/filtering/)|\n|category-match|Either `any` or `all`. See [Category filtering](/docs/categories/filtering/)|\n|skip-template|True or false. Bypass template processing and return the content in an associative array.|\n|return-html|True or false. For use with `skip-template`. Adds the HTML onto the end of the returned array with key `html`.|\n|split-items|True or false. Return an array of individually templated items.|\n|raw|True or false. Returns unprocessed content, for use alongside skip-template.|\n|paginate|True or false. Whether to use pagination.|\n|count|Integer. (When used with `paginate`) The number of items to show per page if pagination is being used.|\n|pagination-var|The URL query string parameter name to use for the page number. Defaults to page.|\n|page-links|True or false. Create numbered page links as well as previous and next links.|\n|page-link-template|The template to use (if not the default) to generate the page links.|\n|page-link-style|shortened or all. By default a shortened set of page links are generated. If you want a link for every page, set to all.|\n## Usage examples\n\nDisplay the products using the default template which is `shop/products/list.html`.\n\n```php\nperch_shop_product_variants('my-product');\n```\n\n\nThis function accepts an array of options to control what is returned. It can be used as follows.\n\n```php\nperch_shop_product_variants('my-product', [\n    'template' => 'products/custom-listing.html',\n]);\n```","type":"functions"},{"title":"perch_shop_products()","permalink":"https://docs.grabaperch.com/functions/shop/products/perch-shop-products/","id":"functions.shop.products.perch-shop-products","excerpt":"Display a list of products with `perch_shop_products()`.","text":"Display a list of products with `perch_shop_products()`.\n\n## Requires\n\n- Perch Shop installed\n\n## Parameters\n\n| Type | Description |\n|-|-|\n| Array   | Options array, see table below |\n| Boolean | Set to `true` to have the value returned instead of echoed. |\n\n\n## Options array\n\n|Name|Value|\n|-|-|\n|template|The name of a template to use to display the content.|\n|sort|The ID of the field to sort on.|\n|sort-order|Either `ASC` (ascending), `DESC` (descending) or `RAND` (random).|\n|sort-type|Either `alpha` or `numeric`. Default is `alpha`.|\n|count|The number of items to display.|\n|start|The item number to start displaying from.|\n|filter|The ID of a field to filter the results by.|\n|match|Used with filter, see the below table for values|\n|value|Used with filter and match. The value to match. For `between` and `in`, takes a comma delimited string. For `regex` takes PCRE regular expression.|\n|category|Filter by one or more categories. See [Category filtering](/docs/categories/filtering/)|\n|category-match|Either `any` or `all`. See [Category filtering](/docs/categories/filtering/)|\n|skip-template|True or false. Bypass template processing and return the content in an associative array.|\n|return-html|True or false. For use with `skip-template`. Adds the HTML onto the end of the returned array with key `html`.|\n|split-items|True or false. Return an array of individually templated items.|\n|raw|True or false. Returns unprocessed content, for use alongside skip-template.|\n|paginate|True or false. Whether to use pagination.|\n|count|Integer. (When used with `paginate`) The number of items to show per page if pagination is being used.|\n|pagination-var|The URL query string parameter name to use for the page number. Defaults to page.|\n|page-links|True or false. Create numbered page links as well as previous and next links.|\n|page-link-template|The template to use (if not the default) to generate the page links.|\n|page-link-style|shortened or all. By default a shortened set of page links are generated. If you want a link for every page, set to all.|\n## Usage examples\n\nDisplay the products using the default template which is `shop/products/list.html`.\n\n```php\nperch_shop_products();\n```\n\n\nThis function accepts an array of options to control what is returned. It can be used as follows.\n\n```php\nperch_shop_products([\n    'template' => 'order_list.html',\n    'count' => 10,\n]);\n```","type":"functions"},{"title":"perch_shop_product()","permalink":"https://docs.grabaperch.com/functions/shop/products/perch-shop-product/","id":"functions.shop.products.perch-shop-product","excerpt":"Return a single product with the function `perch_shop_product()`.","text":"Return a single product with the function `perch_shop_product()`.\n\n## Requires\n\n- Perch Shop installed\n\n## Parameters\n\n| Type | Description |\n|-|-|\n| String | Slug of the item to show |\n| Array   | Options array, see table below |\n| Boolean | Set to `true` to have the value returned instead of echoed. |\n\n\n## Options array\n\n|Name|Value|\n|-|-|\n|variants| True or false. Set to `true` to enable the `perch:variants` tags in the template. Default is `false`. |\n|template|The name of a template to use to display the content.|\n|skip-template|True or false. Bypass template processing and return the content in an associative array.|\n|return-html|True or false. For use with `skip-template`. Adds the HTML onto the end of the returned array with key `html`.|\n|raw|True or false. Returns unprocessed content, for use alongside skip-template.|\n## Usage examples\n\nSimple example displaying the product with a slug of `my-product` and the default template `shop/products/product.html`.\n\n```php\nperch_shop_product('my-product');\n```\n\nThis function accepts an array of options to control what is returned. It can be used as follows.\n\n```php\nperch_shop_product('my-product', [\n    'template' => 'my-template.html'\n]);\n```","type":"functions"},{"title":"perch_shop_purchased_files()","permalink":"https://docs.grabaperch.com/functions/shop/products/perch-shop-purchased-files/","id":"functions.shop.products.perch-shop-purchased-files","excerpt":"Display a list of files that have been purchased with an associated product with `perch_shop_purchased_files()`.","text":"Display a list of files that have been purchased with an associated product with `perch_shop_purchased_files()`.\n\n## Requires\n\n- Perch Shop installed\n\n## Parameters\n\n| Type | Description |\n|-|-|\n| Array   | Options array, see table below |\n| Boolean | Set to `true` to have the value returned instead of echoed. |\n\n\n## Options array\n\n|Name|Value|\n|-|-|\n\n\n## Usage examples\n\nDisplay the list of files using the default template `shop/products/files_list.html`.\n\n```php\nperch_shop_purchased_files();\n```\n\n\nThis function accepts an array of options to control what is returned. It can be used as follows.\n\n```php\nperch_shop_purchased_files([\n    'template' => 'order_list.html',\n    'count' => 10,\n]);\n```","type":"functions"},{"title":"perch_shop_shipping_options()","permalink":"https://docs.grabaperch.com/functions/shop/shipping/perch-shop-shipping-options/","id":"functions.shop.shipping.perch-shop-shipping-options","excerpt":"List the available shipping options with the function `perch_shop_shipping_options()`.","text":"List the available shipping options with the function `perch_shop_shipping_options()`.\n\n## Requires\n\n- Perch Shop installed\n\n## Parameters\n\n| Type | Description |\n|-|-|\n| Array   | Options array, see table below |\n| Boolean | Set to `true` to have the value returned instead of echoed. |\n\n\n## Options array\n\n|Name|Value|\n|-|-|\n|template|A custom template for the form|\n\n## Usage examples\n\nSimple example using the default template.\n\n```php\nperch_shop_shipping_options();\n```","type":"functions"},{"title":"perch_shop_shipping_method_form()","permalink":"https://docs.grabaperch.com/functions/shop/shipping/perch-shop-shipping-method-form/","id":"functions.shop.shipping.perch-shop-shipping-method-form","excerpt":"Display a form for the customer to choose a shipping method with `perch_shop_shipping_method_form()`.","text":"Display a form for the customer to choose a shipping method with `perch_shop_shipping_method_form()`.\n\n## Requires\n\n- Perch Shop installed\n\n## Parameters\n\n| Type | Description |\n|-|-|\n| Array   | Options array, see table below |\n| Boolean | Set to `true` to have the value returned instead of echoed. |\n\n\n## Options array\n\n|Name|Value|\n|-|-|\n|template|A custom template for the form|\n\n## Usage examples\n\nSimple example.\n\n```php\nperch_shop_shipping_method_form();\n```","type":"functions"},{"title":"perch_shop_customer_address","permalink":"https://docs.grabaperch.com/functions/shop/customers/perch-shop-customer-address/","id":"functions.shop.customers.perch-shop-customer-address","excerpt":"Display an address for the logged in customer with `perch_shop_customer_address()`","text":"Display an address for the logged in customer with `perch_shop_customer_address()`\n\n## Requires\n\n- Perch Shop installed\n\n## Parameters\n\n| Type | Description |\n|-|-|\n| Integer | ID of the address to show |\n| Array   | Options array, see table below |\n| Boolean | Set to `true` to have the value returned instead of echoed. |\n\n\n## Options array\n\n|Name|Value|\n|-|-|\n|template|The name of a template to use to display the content.|\n|skip-template|True or false. Bypass template processing and return the content in an associative array.|\n|return-html|True or false. For use with `skip-template`. Adds the HTML onto the end of the returned array with key `html`.|\n|raw|True or false. Returns unprocessed content, for use alongside skip-template.|\n## Usage examples\n\nDisplay the list using the default template. The default template is `shop/addresses/address.html`.\n\n```php\nperch_shop_customer_address()\n```\n\n\nThis function accepts an array of options to control what is returned. It can be used as follows.\n\n```php\nperch_shop_customer_address(1234, [\n    'template' => 'my-template.html'\n]);\n```","type":"functions"},{"title":"perch_shop_customer_addresses()","permalink":"https://docs.grabaperch.com/functions/shop/customers/perch-shop-customer-addresses/","id":"functions.shop.customers.perch-shop-customer-addresses","excerpt":"Display a list the logged in customer's addresses with `perch_shop_customer_addresses()`.","text":"Display a list the logged in customer's addresses with `perch_shop_customer_addresses()`.\n\n## Requires\n\n- Perch Shop installed\n\n## Parameters\n\n| Type | Description |\n|-|-|\n| Array   | Options array, see table below |\n| Boolean | Set to `true` to have the value returned instead of echoed. |\n\n\n## Options array\n\n||Name|Value|\n|-|-|\n|template|The name of a template to use to display the content.|\n|sort|The ID of the field to sort on.|\n|sort-order|Either `ASC` (ascending), `DESC` (descending) or `RAND` (random).|\n|sort-type|Either `alpha` or `numeric`. Default is `alpha`.|\n|count|The number of items to display.|\n|start|The item number to start displaying from.|\n|filter|The ID of a field to filter the results by.|\n|match|Used with filter, see the below table for values|\n|value|Used with filter and match. The value to match. For `between` and `in`, takes a comma delimited string. For `regex` takes PCRE regular expression.|\n|category|Filter by one or more categories. See [Category filtering](/docs/categories/filtering/)|\n|category-match|Either `any` or `all`. See [Category filtering](/docs/categories/filtering/)|\n|skip-template|True or false. Bypass template processing and return the content in an associative array.|\n|return-html|True or false. For use with `skip-template`. Adds the HTML onto the end of the returned array with key `html`.|\n|split-items|True or false. Return an array of individually templated items.|\n|raw|True or false. Returns unprocessed content, for use alongside skip-template.|\n\n## Usage examples\n\nDisplay the list using the default template. The default template is `shop/addresses/list.html`.\n\n```php\nperch_shop_customer_addresses();\n```\n\nThis function accepts an array of options to control what is returned. It can be used as follows.\n\n```php\nperch_shop_customer_addresses([\n    'template' => 'brand_list.html',\n    'count' => 10,\n]);\n```\n\nAvailable options include:\n\n|-|-|\n|Option|Value|\n|-|-|","type":"functions"},{"title":"perch_shop_edit_address_form()","permalink":"https://docs.grabaperch.com/functions/shop/customers/perch-shop-edit-address-form/","id":"functions.shop.customers.perch-shop-edit-address-form","excerpt":"Display an edit form for one of the customer's addresses with `perch_shop_edit_address_form()`.","text":"Display an edit form for one of the customer's addresses with `perch_shop_edit_address_form()`.\n\n## Requires\n\n- Perch Shop installed\n\n## Parameters\n\n| Type | Description |\n|-|-|\n| Integer | The ID of the address to edit (or `false`). Must belong to the logged in customer. |\n| Array   | Options array, see table below |\n| Boolean | Set to `true` to have the value returned instead of echoed. |\n\n\n## Options array\n\n|Name|Value|\n|-|-|\n|template|A custom template for the form|\n\n## Usage examples\n\nTo display a form for capturing a new address. The default template is `shop/addresses/edit.html`.\n\n```php\nperch_shop_edit_address_form();\n```\n\nTo edit an existing address, pass in the address ID (which you can get from the listing)\n\n```php\nperch_shop_edit_address_form(1234);\n```\n\nThis function accepts an array of options to control what is returned. It can be used as follows.\n\n```php\nperch_shop_edit_address_form(1234, [\n    'template' => 'edit.html',\n]);\n```","type":"functions"},{"title":"perch_shop_order_address_form()","permalink":"https://docs.grabaperch.com/functions/shop/customers/perch-shop-order-address-form/","id":"functions.shop.customers.perch-shop-order-address-form","excerpt":"Display a form for the customer to choose shipping and billing addresses at checkout using `perch_shop_order_address_form()`.","text":"Display a form for the customer to choose shipping and billing addresses at checkout using `perch_shop_order_address_form()`.\n\n## Requires\n\n- Perch Shop installed\n\n## Parameters\n\n| Type | Description |\n|-|-|\n| Array   | Options array, see table below |\n| Boolean | Set to `true` to have the value returned instead of echoed. |\n\n\n## Options array\n\n|Name|Value|\n|-|-|\n|template|A custom template for the form|\n\n## Usage examples\n\nDisplay the form using the default template. The default template is `shop/checkout/order_address_form.html`.\n\n```php\nperch_shop_order_address_form();\n```\n\nThis function accepts an array of options to control what is returned. It can be used as follows.\n\n```php\nperch_shop_order_address_form([\n    'template' => 'choose_address.html',\n]);\n```","type":"functions"},{"title":"perch_shop_addresses_set()","permalink":"https://docs.grabaperch.com/functions/shop/customers/perch-shop-addresses-set/","id":"functions.shop.customers.perch-shop-addresses-set","excerpt":"Check to see if billing and shipping addresses have been chosen by the customer before proceeding to payment with `perch_shop_addresses_set()`.","text":"Check to see if billing and shipping addresses have been chosen by the customer before proceeding to payment with `perch_shop_addresses_set()`.\n\n## Requires\n\n- Perch Shop installed\n\n## Parameters\n\n| Type | Description |\n|-|-|\n| Array   | Options array, see table below |\n| Boolean | Set to `true` to have the value returned instead of echoed. |\n\n\n## Options array\n\n|Name|Value|\n|-|-|\n|template|A custom template for the form|\n\n## Usage examples\n\nCheck to see if the addresses are set.\n\n```php\nif (perch_shop_addresses_set()) {\n\t// ... proceed to checkout ...\n}\n```","type":"functions"},{"title":"Building Sites with Perch","permalink":"https://docs.grabaperch.com/perch/building/","id":"perch.building","excerpt":"There are some things it is useful to know when you develop your sites using Perch, and especially if you have never used a PHP and MySQL CMS before or are coming from a solution like WordPress.","text":"There are some things it is useful to know when you develop your sites using Perch, and especially if you have never used a PHP and MySQL CMS before or are coming from a solution like WordPress.\n\nIn this part of the documentation we share some suggestions for structuring your Perch site, using PHP and working with your hosting company and local dev environment.","type":"perch"},{"title":"Categories","permalink":"https://docs.grabaperch.com/perch/categories/","id":"perch.categories","excerpt":"The Categories App is a core Perch App. It gives you a method of adding categories to any type of content across your site.","text":"The Categories App is a core Perch App. It gives you a method of adding categories to any type of content across your site.\n\n## Category Concepts\n\nCategories live in a *Set*. If you want to categorize things by colour, you would create a set named “Colour” and then add categories (red, green, blue etc) to that set. You can have as many sets and categories as you like and these are added and managed from within Perch Admin.\n\n## Category Templates\n\nAs with everything in Perch the information that is displayed on a category or set page is defined by a template. Templates live in `perch/templates/categories`. If you don’t have that folder, because you upgraded from a version of Perch older than 2.6, copy it from the latest download.\n\nYou can edit the default templates, or you can create your own. Find out more about the category template tags in the [Category Template documentation](/templates/categories).\n\n## Page Functions\n\nThe Categories App includes functions to output lists of categories and individual categories.\n\nSee examples in the [Page Functions documentation](/functions/categories).\n\n## More examples\n\nSome example code to demonstrate how categories are used.\n\n### Filtering perch_content by category\n\nYou can pass in a category or multiple categories when displaying content using perch_content_custom().\n\nFind out more in the [filtering documentation](/perch/categories/filtering/).","type":"perch"},{"title":"Configuration","permalink":"https://docs.grabaperch.com/perch/configuration/","id":"perch.configuration","excerpt":"For many installs the values created during setup are all you need for\nyour Perch Config file. However there are some additional settings that\ncan be changed here and this section details them.","text":"For many installs the values created during setup are all you need for\nyour Perch Config file. However there are some additional settings that\ncan be changed here and this section details them.\n\nThe values can be set in the `perch/config/config.php` file. They should\nappear, within PHP blocks, as follows.\n\n```php\n<?php\n    define('SETTING_NAME', 'setting value');\n?>\n```\n\nFor example, your configuration might look like this:\n\n```php\n<?php\n    define('PERCH_LICENSE_KEY', 'PXXXXX-XXXXXX-XXXXXX-XXXXXX-XXXXXX');\n    define(\"PERCH_DB_USERNAME\", 'my_database_user');\n    define(\"PERCH_DB_PASSWORD\", 'secret');\n    define(\"PERCH_DB_SERVER\", \"localhost\");\n    define(\"PERCH_DB_DATABASE\", \"perch2\");\n    define(\"PERCH_DB_PREFIX\", \"perch2_\");\n    define('PERCH_EMAIL_FROM', 'hello@grabaperch.com');\n    define('PERCH_EMAIL_FROM_NAME', 'Perch');    \n    define('PERCH_EMAIL_METHOD', 'smtp');\n    define('PERCH_LOGINPATH', '/perch');\n    define('PERCH_PATH', str_replace(DIRECTORY_SEPARATOR.'config', '', dirname(__FILE__)));\n    define('PERCH_CORE', PERCH_PATH.DIRECTORY_SEPARATOR.'core');\n    define('PERCH_RESFILEPATH', PERCH_PATH . DIRECTORY_SEPARATOR . 'resources');\n    define('PERCH_RESPATH', PERCH_LOGINPATH . '/resources');\n    define('PERCH_HTML5', true);\n?>\n```\n\nThe following pages contain information about the specific areas you\nmight need to change configuration settings for.","type":"perch"},{"title":"Working with Content","permalink":"https://docs.grabaperch.com/perch/content/","id":"perch.content","excerpt":"Content Management Systems are for managing content, so this section of the documentation contains information about how Perch manages content and provides example code for some common scenarios.","text":"Content Management Systems are for managing content, so this section of the documentation contains information about how Perch manages content and provides example code for some common scenarios.\n\n## Templates\n\nIf you have followed the Getting Started Guide, you will know that making an area on your page editable happens by putting a PHP function `perch_content()` onto your page, then selecting a template for that Region in admin. The template you chose defined the fields that display in the Control Panel for that Region, as well as the output.\n\nOur default templates are just a starting point, you can edit them and create your own. [Find out more about templates here](/perch/content/templates).\n\n## Page Functions\n\nThe `perch_content()` function is the function you will use most often if you are making a simple site editable, however if you need to reuse content or want to filter and sort content there are other functions hat you can use. Our official addons also define their own functions. [Find out more about functions](/perch/content/functions).","type":"perch"},{"title":"Getting Started With Perch","permalink":"https://docs.grabaperch.com/perch/getting-started/","id":"perch.getting-started","excerpt":"This section of the documentation is for you if you are new to Perch or haven't used Perch for a while. It explains the basics of installing and using Perch for managing content on your website with pointers to the rest of the documentation to help you with your next steps.","text":"This section of the documentation is for you if you are new to Perch or haven't used Perch for a while. It explains the basics of installing and using Perch for managing content on your website with pointers to the rest of the documentation to help you with your next steps.\n\nIf you are having any trouble then post to our forum at [community.perchcms.com](https://community.perchcms.com/forum/) and we will be happy to help you out.","type":"perch"},{"title":"The Perch Control Panel","permalink":"https://docs.grabaperch.com/perch/control-panel/","id":"perch.control-panel","excerpt":"We aim to make the Perch Control Panel as easy to use and also as configurable as possible. We’ve all had to deal with CMS Administration Panels cluttered with tools that we never use.","text":"We aim to make the Perch Control Panel as easy to use and also as configurable as possible. We’ve all had to deal with CMS Administration Panels cluttered with tools that we never use.\n\nThis section of the documentation introduces various features of the Control Panel.\n\nHere we also demonstrate some of the ways you can tailor the Control Panel for your content editors so they can get the work they need to do there done quickly.","type":"perch"},{"title":"Pages and Navigation","permalink":"https://docs.grabaperch.com/perch/pages-and-nav/","id":"perch.pages-and-nav","excerpt":"A CMS doesn't only deal with the content you create, it typically manages the structure of your site as well. Perch was designed as a 'drop in' CMS for static sites and so our page management functionality reflects this goal. We aim to make it easy to give management abilities to editors for sections of your site and content.","text":"A CMS doesn't only deal with the content you create, it typically manages the structure of your site as well. Perch was designed as a 'drop in' CMS for static sites and so our page management functionality reflects this goal. We aim to make it easy to give management abilities to editors for sections of your site and content.\n\nIf you would prefer the CMS took over all management of the site architecture Perch Runway would be a much better fit for that project - you'll get all the excellent structured content creation of Perch plus full page creation and management across your site.","type":"perch"},{"title":"Managing Resources","permalink":"https://docs.grabaperch.com/perch/resources/","id":"perch.resources","excerpt":"Files and images that are uploaded by content editors into Perch are known as *resources*. They are stored on the server (not in the database) until no longer needed.","text":"Files and images that are uploaded by content editors into Perch are known as *resources*. They are stored on the server (not in the database) until no longer needed.\n\nBy default, resources are stored in the `perch/resources` folder. You can change for new installations in the `perch/config/config.php` file.\n\nThe two configuration options are `PERCH_RESFILEPATH` (the file system path to your folder) and `PERCH_RESPATH` (the web path to the folder from the root of your site). The standard Perch setup creates the following configuration:\n\n```php\ndefine('PERCH_RESFILEPATH', PERCH_PATH . DIRECTORY_SEPARATOR . 'resources');\ndefine('PERCH_RESPATH', PERCH_LOGINPATH . '/resources');\n```\n\nIt uses a bunch of other configuration constants to figure out the paths for your site, but this could be updated using basic paths:\n\n```php\ndefine('PERCH_RESFILEPATH', '/var/www/mysite/public_html/files');\ndefine('PERCH_RESPATH', '/files');\n```\n\nThe default resource folder must part of your website, so its files can be directly accessed by a URL.\n\n## Resource clean-up\n\nWhen resources are no longer needed, they are deleted from the server. This happens when an item is deleted, or one resource is replaced with another.\n\nHowever, Perch maintains an undo history, and so resource clean-up isn’t immediate. This means that you can delete an item that uses an image, for example, and still undo that change. A resource is only deleted once the action that removed it is no longer undoable. By default, the undo history saves 30 steps, so a file will only be deleted after 30 edits.\n\n(A bug with Perch 2.0.x meant that resource use wasn’t correctly logged. This means Perch was unable to clean up those resources. Any resources left around from that time period will need to be cleared up manually – we couldn’t find a safe way to go back without risking data loss. This was fixed in Perch 2.1.)","type":"perch"},{"title":"Upgrading to Perch 3","permalink":"https://docs.grabaperch.com/perch/upgrading/","id":"perch.upgrading","excerpt":"Perch 3 is a new major version of Perch with some big interface changes. A lot of the underlying structure is backwards compatible, so upgrading to Perch 3 is not complex.","text":"Perch 3 is a new major version of Perch with some big interface changes. A lot of the underlying structure is backwards compatible, so upgrading to Perch 3 is not complex. \n\n## Before you start\n\nFollow these instructions to help make your upgrade as smooth as possible.\n\n### 1. Check the requirements\n\nPerch 3 requires a newer version of PHP. We recommend PHP 7, but the very minimum is PHP 5.4. The [download page](https://grabaperch.com/download) has the current requirements listed.\n\n### 2. Make a backup\n\nBefore making any changes, make a backup of your files and your database. This means that come what may, you can always revert to your current position without doing any damage.\n\n### 3. Work on your dev or staging site\n\nWe don't recommend upgrading a live site in-place. Not because the upgrade process is risky, but because that's not the most sensible way to work for any website updates. Get your staging or dev site up to date (perhaps using the backup of the live site you've just made) and try the upgrade there first. If all is well, you can deploy those changes to the live site without worrying and with minimal disruption.\n\n## Upgrading\n\nWith that done, we should be ready to begin.\n\n### 1. Replace Perch core\n\n[Download](https://grabaperch.com/download) the latest version of Perch and copy the new `perch/core` folder over your old `perch/core` folder.\n\n### 2. Check your apps file\n\nIf you have a very old install to upgrade, your `perch/config/config.apps` file might contain lots of `include()` statements. You need to update it or you'll get errors. A basic starting point `apps.php` file looks like this:\n\n```php\n<?php\n\t$apps_list = [ \n\t];\n```\n\nYou don't need the Content or Categories apps listed like in the past. Just add an entry to the list for any add-ons you need installed. For example, an install with Blog and Twitter apps would have:\n\n```php\n<?php\n\t$apps_list = [ \n\t\t'perch_blog',\n\t\t'perch_twitter',\n\t];\n```\n\n### 3. Remove unnecessary add-ons\n\nPerch 3 contains the MarkItUp and Redactor edits as part of core, so you can remove:\n\n- `perch/addons/plugins/editors/markitup`\n- `perch/addons/plugins/editors/redactor`\n\n### 4. Update your apps\n\nChanges in Perch 3 mean that your Perch 2 apps won't work without being updated. Therefore you need to download the latest versions of your apps from the new [add-ons site](https://addons.perchcms.com/).\n\n### 5. Log in\n\nWhen you log in to the control panel, the updater will run as usual and you should be all set to go.","type":"perch"},{"title":"Troubleshooting Tips","permalink":"https://docs.grabaperch.com/perch/help/","id":"perch.help","excerpt":"Perch Support happens in our [forum](https://community.perchcms.com/forum/). Before posting check the following common issues that people encounter, and details of how you can get help quickly.","text":"Perch Support happens in our [forum](https://community.perchcms.com/forum/). Before posting check the following common issues that people encounter, and details of how you can get help quickly.\n\n- [Is Perch and all Add-ons up to date?](#is-perch-and-all-add-ons-up-to-date)\n- [Try Perch Debug Mode](#try-perch-debug-mode)\n- [Will x Work?](#will-x-work)\n- [Try a documentation search](#have-you-searched-the-documentation)\n- [Try a forum search](#have-you-searched-the-forum)\n- [I have a blank page / white screen / 500 error / cut off HTML output](#i-have-a)\n- [I can't login](#i-can-t-login)\n- [I have a PHP error](#i-have-a-php-error)\n- [My assets are not uploading](#my-assets-are-not-uploading)\n- [My images and not resizing / cropping](#my-images-are-not-resizing-cropping)\n- [My blog categories are not updating](#my-blog-categories-are-not-updating)\n- [I have changed my template but the website isn’t showing the change](#i-have-changed-my-template-but-the-website-isn-t-showing-the-change)\n- [Perch isn't using the right template](#perch-is-not-using-the-right-template)\n- [None of these helped!](#nothing-here-helped-)\n\n## First things first\n\n### Is Perch and all Add-ons up to date?\n\nIf you post to the forum and your software is out of date, the first thing we will do is ask you to update.\n\nTo see which version of Perch you are using look at your Diagnostics Report in Perch (under Settings). The versions of Add-ons are also listed there.\n\nIf you are not running the latest version, update and see if you still have the problem.\n\n### Try Perch Debug Mode\n\nPerch has a debug mode. It can show you things like which template your content is using. The messages there may well help you solve your problem. If they don’t they will at least help us to help you.\n\n[This article explains how to enable debug](https://solutions.grabaperch.com/development/how-do-i-debug-problems).\n\n### Will x work?\n\nWe get a lot of posts that just ask us if doing something in a template is going to work. The best way to find out is to try it for yourself - rather than wait potentially a few hours for us to try it for you.\n\nYou won’t break anything, try it and see what happens. It’s the best way to learn.\n\n### Have you searched the documentation?\n\nEvery day we reply to queries by going to the Perch documentation, searching for the question that was posted to the forum and then replying with the link.\n\nWe are always trying to improve the search of the docs so try searching for phrases that might describe your problem - you might just find the answer.\n\n### Have you searched the forum?\n\nThe forum can also be searched. Someone else may have asked the same question and you can use our answer to them.\n\n## I have a:\n\n- Blank page / white screen\n- A 500 error\n- HTML output that seems to “cut off”\n\nAny of the above indicate that you have a PHP error. If you post to the forum which any of the above we will ask you to take a look in your error log and find the error.\n\nThe error log you need is the PHP Error Log - this is not likely to be the same as the web server access log (the one where you see 404 errors etc.).\n\n[This article explains more able how to find your error log](https://www.smashingmagazine.com/2011/11/a-guide-to-php-error-messages-for-designers/).\n\nIf you cannot access the log then you need to ask your host, we are going to find it hard to help you if we can’t see the actual error. So do this first before posting and it will save you time.\n\n## I can’t login\n\nYou try to log into Perch and are immediately bounced back to the login page with a query string that looks like `?r=%2Fperch%2Fcore%2Fapps%2Fcontent%2F`.\n\nThis usually means a problem with Sessions on your server. Either you need to enable PHP Sessions in some way, or if this was previously working it may be that your Sessions folder is full. Either way this is something you will need to speak to you host about.\n\n## I have a PHP error!\n\nPHP errors may be printed directly to the page, or they may be in the error log mentioned in the last step.\n\n### Look at the first error\n\nYou often get a whole chain of errors, the first one is the most important (the others may be caused by that first error).\n\nThere are some errors that you are likely to see, which fall into a few classes of issues.\n\n### Mismatched Perch and Apps\n\n`PHP Catchable fatal error:  Argument 2 passed to PerchFieldType::__construct() must be an instance of PerchXMLTag`\n\nIf you see something like this and recently updated Perch it is likely the App you are using needs updating to match.\n\n### Permissions\n\n`Warning: move_uploaded_file(/home/mysite/public_html/upload/my_cat.jpg) [function.move-uploaded-file]: failed to open stream: Permission denied in /path/to/script.php on line 49`\n\nFor some functionality - such as uploading a file or image - Perch will need PHP to be able to write files. If your error says **Permission denied** then you need to find out how to set permissions for PHP to be able to create files.\n\nIf you don’t know how to do this for your hosting then your host would be the place to raise a support ticket.\n\n### Headers\n\n`Warning: Cannot modify header information - headers already sent by (output started at /path/to/file.php:12) in /this/file.php on line 28`\n\nTypically you will see this when doing a redirect of some sort. So when logging in a Member with the Members App or redirecting a user to checkout in Shop.\n\nAn HTTP response includes headers and a body. In those headers, you can set things like a Location header (a redirect), cookies, all sorts.\n\nThe body is typically the content of the file you're sending - so in our case an HTML document.\n\nThe trick is, once you stop sending the headers and start sending the body, you can't go back and set new headers. Therefore if you want to do anything that involves setting a header, you need to do it before the page content is output.\n\nYou will usually see this error if:\n\n1. You have white space above the Perch runtime include\n2. You have white space in your config file\n3. Your editor is saving files with a BOM (Byte Order Mark)\n4. You're using a page function that redirects the user, but have including HTML output above it\n\n## Database connection errors\n\nPerch needs to connect to your database and needs to have permissions to insert, edit and delete data and also to create and update tables.\n\n### Installing Perch\n\nYou can’t install Perch without being able to connect to the database so if you are seeing database connection problems in a new install try the [Perch Compatibility Test](https://grabaperch.com/compat/perch_compatibility_test.zip) or [Runway Compatibility Test](https://grabaperch.com/compat/runway_compatibility_test.zip) first and get that working. Then, use the same details when installing Perch.\n\nPerch needs either PDO or MySQLi installed in order to connect to your database.\n\n### Database problems with an existing site\n\nIf a live site suddenly stops connecting to the database and you haven’t changed anything this will *not have anything to do with Perch*. You should contact your host in this instance.\n\n### Allowed Memory Size Exhausted\n\n`Fatal error: Allowed memory size of 67108864 bytes exhausted (tried to allocate 17472 bytes) in /home/mysite/public_html/lib/Image.class.php on line 198`\n\nPHP has run out of available memory.\n\nYou might see this if you are trying to upload and process large images - see the details about Assets in this document for more help.\n\n### Old PHP\n\nYou will see errors if you try to run Perch or Runway on hosting  with very out of date PHP. Check the [requirements](https://grabaperch.com/requirements) here and use the Compatibility Test to make sure your hosting is capable.\n\n## Any error not mentioned here\n\nIf you have some unusual error that we don’t often see then all we will do is stick it into Google to see what it is. You can do that too!\n\nIt doesn’t matter if the advice refers to another PHP CMS, they all use the same types of hosting and so the errors are likely to be due to common reasons. Most PHP errors are not going to be something in Perch code as otherwise we would be seeing 100s of the same thing in the forum and would have fixed it. So most likely you will find something you need to raise with your host. If you aren’t sure we are happy to advise in the forums but there isn’t a lot we can do about server related issues outside of Perch.\n\n## My assets are not uploading\n\nWe see a range of issues with assets. The vast majority are due to hosting problems.\n\nThe first thing to check is whether anything can be uploaded via assets. Use a very small image with a tiny file size, if uploaded from a Perch template tag with a type of image remove anything that might resize the image (such as width and height attributes) we are just testing if we can upload an image at this point.\n\nIf you small image uploads fine, but your large image does not then the likely problem is that the PHP max_upload _ size is lower than the size of your image. You can see the limit in your Diagnostics report and will need to ask your host how to increase that limit.\n\nIf even a very small image does not upload then it is likely that PHP does not have permission to write to the resources folder or bucket you are trying to upload to. It may be that you need to speak to your host.\n\nIf images upload fine of the size required but the failure happens when trying to resize the image see the next step.\n\n## My images are not resizing/cropping\n\nTo process images we need either GD or ImageMagick on the server. You can see if you have one or the other in your Diagnostics Report. If you do not have either ask your host to enable one of them.\n\nIf you have one of these and are still having a problem try to resize a very small and simple image. If that works but larger and more complex images do not then the issue is that PHP is running out of available memory. This is something that can be increased in theory in your PHP configuration but you may gif that PHP is configured with plenty of memory and this issue still happens. This is due to the fact on shared hosting other sites may well be using up the memory, leaving not enough to do memory heavy operations. This isn’t something we can fix in Perch - if you need to process large images you will need to use hosting with better resources to do so.\n\n## My blog categories are not updating\n\nPerch caches some more expensive operations such as generating blog category lists. This can be a nuisance during development. If you set PERCH_PRODUCTION_MODE to `PERCH_PRODUCTION` in your config then they will not cache and you should see changes immediately.\n\n\n## I have changed my template but the website isn’t showing the change\n\nTo keep your site nice and fast we cache the output of your template plus the content you enter when the content is saved. If you change your template you need to go hit save on that region in admin.\n\nWe also have a Republish All button you can click to republish all regions after making a change.\n\n## Perch is not using the right template\n\nFirst enable Perch Debug and see which template Perch is using for your content.\n\nIf this is in an App make sure that you have copied the App templates from the add-on install into perch/templates/app_name_ as described in the docs.\n\n## Nothing here helped!\n\nThis is a great time to [post to support](https://community.perchcms.com/forum/) as you have checked some of the common issues people have.\n\nBefore posting to support make sure that you can demonstrate your problem in the simplest possible way. For template issues you should remove as much code as possible to still demonstrate the issue. This process of creating a *reduced test case* is important for any debugging. Whether you have a Perch problem or something in your CSS, by removing anything that doesn’t change the problem you make it much easier for someone to help you. In many cases during the process of creating a reduced test case you will find the problem yourself.\n\nPosting hundreds of lines of code to the forum means that you are asking the person helping you to do the work of creating a test case for you. Read [more about reduced test cases on CSS Tricks](https://css-tricks.com/reduced-test-cases/) - getting good at creating these will speed up all of your work, it's the best debugging skill you will learn!\n\nWhen you post to the forum make sure your post includes:\n\n1. Your Short Diagnostics Report\n2. An explanation of what you are trying to do\n3. If an error is occurring include the error\n4. If something other than what you expected has happened explain what you expected **as well as** what actually happens.\n5. Any code - as a reduced test case - to help us reproduce the problem\n6. If you have already ruled out any of the things mentioned here or performed any debugging steps - tell us! That will save us asking again.\n\nPosts that include all of the above are very likely to get an answer right away - getting you back to work. If we have to ask repeated questions to get the information, then it will take a lot longer as you won’t be the only person we are helping. So help us to help you and we can get you back to your project quickly.","type":"perch"},{"title":"Category Filtering","permalink":"https://docs.grabaperch.com/perch/categories/filtering/","id":"perch.categories.filtering","excerpt":"Once you have created categories and assigned them to Perch Content you can filter content by category or multiple categories.","text":"Once you have created categories and assigned them to Perch Content you can filter content by category or multiple categories.\n\nCategories are filtered using their _category path_, which is made up using the set slug and the category slug. For example, if you wanted to filter by the category `red` in the set called `colours`, the path would be:\n\n    colours/red\n\nIf there was a subcategory of `red` called `scarlet`, you would filter for that using:\n\n    colours/red/scarlet\n\n## Example – filtering by a single category\n\n```php\n    perch_content_custom('Portfolio', array(\n      'template' => 'portfolio_listing.html',\n      'page' => '/portfolio.php',\n      'category' => perch_get('cat'),\n    ));\n```\n\n## Example – filtering by multiple categories\n\nThe below example uses not syntax. We want all T-shirts that are size XL, male but not black.\n\n```php\n    perch_content_custom('T-shirts', array(\n       'category' => array('size/xl', '!colour/black', 'gender/male')\n    ));\n```\n\n## Matching multiple categories\n\nYou can change the way Perch matches when filtering on multiple categories by setting the `category-match` option.\n\n\n|Value|Description|\n|-|-|\n|`all`|Match items with _all_ of the listed categories applied.|\n|`any`|Match items with _any_ of the listed categories applied.|","type":"perch"},{"title":"Time and Date Configuration","permalink":"https://docs.grabaperch.com/perch/configuration/dates/","id":"perch.configuration.dates","excerpt":"There are a number of options that can be set to configure how Perch displays times within the administration control panel.","text":"There are a number of options that can be set to configure how Perch displays times within the administration control panel.\n\nThese settings are [PHP strftime formatting codes](http://php.net/strftime), and can be changed to fit your preference, or if your server doesn’t adequately support the defaults.\n\n## Date and time formats\n\n|Setting|Value|\n|-|-|\n|PERCH_DATE_LONG|Longer format date, month and year|\n|PERCH_DATE_SHORT|Shorter format date, month and year|\n|PERCH_TIME_LONG|Longer format hours and minutes|\n|PERCH_TIME_SHORT|Shorter format hours and minutes|\n\n## Time zone settings\n\nBy default, Perch will use the time zone of your server. You can change that to a standard [PHP time zone](http://php.net/manual/en/timezones.php) if needed.\n\n## Time zone\n\n|Setting|Value|\n|-|-|\n|PERCH_TZ|Sets the timezone. A value PHP timezone string, like 'UTC' or 'Europe/London'|","type":"perch"},{"title":"Email Configuration","permalink":"https://docs.grabaperch.com/perch/configuration/email/","id":"perch.configuration.email","excerpt":"To send emails – for example password reset emails – Perch needs to be able to send mail via PHP. Your host may have specific settings you need to use to allow this to happen, or you can send mail via a third party.","text":"To send emails – for example password reset emails – Perch needs to be able to send mail via PHP. Your host may have specific settings you need to use to allow this to happen, or you can send mail via a third party.\n\nThe following settings allow you to configure this. If you want to test that your mail configuration is working then log into Perch admin and visit Settings > Email. Here you can send a test email, if you receive the mail then your email is correctly configured. It is a good idea to test this before you need to do a password reset!\n\nIf you are not receiving mail then ask your host what you need to do to send mail from PHP, then use the below settings to configure Perch to meet their advice.\n\n## Email Settings\n\n|Setting|Value|\n|-|-|\n|PERCH_EMAIL_FROM|Default email address to send mail from|\n|PERCH_EMAIL_FROM_NAME|Default name to send email from|\n|PERCH_EMAIL_METHOD|mail, smtp, sendmail, api|\n|PERCH_EMAIL_HOST|Host for SMTP mail|\n|PERCH_EMAIL_AUTH|True or false. Use authenticated SMTP|\n|PERCH_EMAIL_PORT|SMTP port. Defaults to 25|\n|PERCH_EMAIL_USERNAME|Username for authenticated SMTP|\n|PERCH_EMAIL_PASSWORD|Password for authenticated SMTP|\n|PERCH_EMAIL_SECURE|SMTP connection method. ssl, tls or an empty string|\n\nAn example of configuration required to send email via Google’s Gmail SMTP would be as follows:\n\n```php\ndefine('PERCH_EMAIL_METHOD', 'smtp');\ndefine('PERCH_EMAIL_HOST', 'smtp.gmail.com');\ndefine('PERCH_EMAIL_AUTH', true);\ndefine('PERCH_EMAIL_SECURE', 'ssl');\ndefine('PERCH_EMAIL_PORT', 465);\ndefine('PERCH_EMAIL_USERNAME', 'your.name@gmail.com');\ndefine('PERCH_EMAIL_PASSWORD', 'your gmail password');\n```\n\n## Gmail\nIf sending through Gmail, you now need to enable [less secure apps settings](https://www.google.com/settings/security/lesssecureapps) otherwise you'll receive a Could Not Authenticate message in Perch.\n\n## Microsoft Office 365\nIf sending through Office 365, the `PERCH_EMAIL_FROM` value must match the value of `PERCH_EMAIL_USERNAME` (your Office 365 email address).\n\nMicrosoft may reject sending emails if the `PERCH_EMAIL_FROM_NAME` is set to an email address.\n\n## Api Method\nIf using the API method, Perch will fire the `email.send` event hook.   You can configure a custom app to listen to the `email.send` event using the [Perch Event Hook](/api/events/) system to handle the email as required.","type":"perch"},{"title":"Enabling Debug","permalink":"https://docs.grabaperch.com/perch/configuration/debug/","id":"perch.configuration.debug","excerpt":"When developing your site locally it can be helpful to turn on the Perch debug mode.","text":"When developing your site locally it can be helpful to turn on the Perch debug mode.\n\nAdd the following line to your `perch/config/config.php` file.\n\n```php\n    define('PERCH_DEBUG', true);\n```\n\nThis will output debug underneath your admin area. If you also want to show debug at the bottom of pages on your site, add the line above and then add the following to any page where you want to see debug (or into a global footer layout or include).\n\n```php\n    <?php PerchUtil::output_debug(); ?>\n```\n\nThis will only output if you have turned on PERCH_DEBUG in your configuration file.\n\nThe debug output gives you information about SQL queries run, templates used and the last PHP error output so can be very helpful in spotting problems.","type":"perch"},{"title":"File Configuration","permalink":"https://docs.grabaperch.com/perch/configuration/file/","id":"perch.configuration.file","excerpt":"These settings allow you to configure default documents and file extensions as well as control file permissions, in most cases the defaults will apply.","text":"These settings allow you to configure default documents and file extensions as well as control file permissions, in most cases the defaults will apply.\n\n## Files\n\n|Setting|Value|\n|-|-|\n|PERCH_DEFAULT_DOC|The web server directory default document. Defaults to index.php|\n|PERCH_DEFAULT_EXT|The default file extension. Defaults to .php|\n|PERCH_CLEAN_RESOURCES|True or false. Whether to run clean-up routines to remove unused files from the resources folder|\n|PERCH_CHMOD_FILES|A value to CHMOD files to after upload|\n|PERCH_DONT_DELETE_FILES|True or false. Do not delete the page file when deleting a page.|","type":"perch"},{"title":"Image Configuration","permalink":"https://docs.grabaperch.com/perch/configuration/images/","id":"perch.configuration.images","excerpt":"These settings control how Perch processes uploaded images.","text":"These settings control how Perch processes uploaded images.\n\n##Images\n\n|Setting|Value|\n|-|-|\n|PERCH_IMAGE_LIB|Either gd or imagick. If both are available, Perch defaults to using GD.|\n|PERCH_PROGRESSIVE_JPEG|Defaults to true. Set to false if you don't want JPEG files to be progressive.|","type":"perch"},{"title":"Path Configuration","permalink":"https://docs.grabaperch.com/perch/configuration/path/","id":"perch.configuration.path","excerpt":"If you have renamed the Perch folder or would like your resources folder to be stored in a different place in your site, you can change these values in your Config File with the below settings.","text":"If you have renamed the Perch folder or would like your resources folder to be stored in a different place in your site, you can change these values in your Config File with the below settings.\n\n## Paths\n\n|Setting|Value|\n|-|-|\n|PERCH_LOGINPATH|The web path from the root of the site to the Perch folder|\n|PERCH_PATH|The file system path to the Perch folder|\n|PERCH_CORE|The file system path to the Perch Core folder|\n|PERCH_RESPATH|The web path from the site root to the resources folder|\n|PERCH_RESFILEPATH|The file system path to the resources folder|\n|PERCH_TEMPLATE_PATH|The file system path to the templates folder|\n|PERCH_SITEPATH|The file system path to the site root|","type":"perch"},{"title":"Markup Configuration","permalink":"https://docs.grabaperch.com/perch/configuration/markup/","id":"perch.configuration.markup","excerpt":"Most of your markup is under your control in your templates. However in a couple of places Perch helps out by creating tags for you (form elements and images). In both cases we need to know if you are using HTML or XHTML syntax, and for forms we need to know if you want to use HTML5.","text":"Most of your markup is under your control in your templates. However in a couple of places Perch helps out by creating tags for you (form elements and images). In both cases we need to know if you are using HTML or XHTML syntax, and for forms we need to know if you want to use HTML5.\n\nFor images if we know you are using a Responsive Web Design (RWD) approach, we can omit height and width when creating an image tag.\n\n## Markup\n\n|Setting|Value|\n|-|-|\n|PERCH_HTML5|True or false. Defaults to HTML5 markup|\n|PERCH_XHTML_MARKUP|True or false. Use XHTML-style markup syntax, specifically self-closing tags|\n|PERCH_RWD|True or false. Presume a Responsive Web Design layout and omit e.g. width and height attributes on images.|\n|PERCH_HTML_ENTITIES|True or false. If set to true, characters like smart quotes will be converted to HTML entities rather than unicode characters. Defaults to false, as UTF8 is presumed.|\n|PERCH_STRIPSLASHES|True or false, default is false. If the inbuilt detection for when to strip added slashes is failing and you end up with backslashes escaping quotes in your content, this option will force them to be removed. Shouldn't ever be necessary, but included as a failsafe.|","type":"perch"},{"title":"Perch Configuration","permalink":"https://docs.grabaperch.com/perch/configuration/perch/","id":"perch.configuration.perch","excerpt":"There are a number of other settings that control various aspects of how Perch works.","text":"There are a number of other settings that control various aspects of how Perch works.\n\n## Perch Config\n\n|Setting|Value|\n|-|-|\n|PERCH_LICENSE_KEY|Your license key for this site|\n|PERCH_DEBUG|True or false. Enables the collection of debug information.|\n|PERCH_PRODUCTION_MODE|The production mode to use; PERCH_PRODUCTION, PERCH_STAGING or PERCH_DEVELOPMENT|\n|PERCH_SCHEDULE_SECRET|Lowercase letters and numbers secret used for running the scheduled task script.|\n|PERCH_UNDO_BUFFER|The number of revisions of a region kept in the history stack so the user can 'undo' a change. Default 30.|\n|PERCH_AUTH_PLUGIN|The name of an authentication plugin to use|\n|PERCH_SESSION_TIMEOUT_MINS|The control panel session cookie timeout in minutes. Defaults to 20, 1440 would be one day.|\n|PERCH_NONPORTABLE_HASHES|True or false. Whether to use more secure non-portable password hashes. Defaults to false so that users can be moved from server to server.|\n|PERCH_MAP_JS|A web path to a JavaScript file for overriding the JavaScript used by the Map field type.|\n|PERCH_PREVIEW_ARG|The query string parameter used for previewing drafts. Defaults to 'preview'.|\n|PERCH_PROGRESSIVE_FLUSH|True or false, true by default. Enables chunked transfer encoding, which is generally beneficial for performance.|\n\n## PERCH_DEBUG\n\nFor more information about how to run Perch in debug mode see the support note on [enabling debug](/docs/installing-perch/configuration/debug/).","type":"perch"},{"title":"Database Configuration","permalink":"https://docs.grabaperch.com/perch/configuration/database/","id":"perch.configuration.database","excerpt":"The following values relate to how Perch connects to your database. If you are having trouble connecting to the database then run the Perch Compatibility Test. Then use the values that give you a pass for that test in Perch Setup or copied directly into your Config File.","text":"The following values relate to how Perch connects to your database. If you are having trouble connecting to the database then run the Perch Compatibility Test. Then use the values that give you a pass for that test in Perch Setup or copied directly into your Config File.\n\nThe defaults created at setup will work for most people. There are some additional settings listed below that will help if your host gives you specific instructions.\n\n## Database Values\n\n|Setting|Value|\n|-|-|\n|PERCH_DB_USERNAME|The database user account username|\n|PERCH_DB_PASSWORD|The database user account password|\n|PERCH_DB_SERVER|The database server host name or IP address. Often localhost.|\n|PERCH_DB_DATABASE|The name of the database|\n|PERCH_DB_PREFIX|The database table name prefix. Defaults to perch_ or perch2_. Can be changed to host multiple installs in one database|\n|PERCH_DB_CHARSET|The character set to use for the database connection. Defaults to utf8.|\n|PERCH_DB_PORT|The port on which to connect to the database server.|\n|PERCH_DB_SOCKET|The unix socket path to use.|\n|PERCH_ERROR_MODE|Can be set to ECHO to help diagnose database connection problems. Defaults to SILENT so that errors are not displayed on your site (e.g. if the DB server goes down).|","type":"perch"},{"title":"SSL Configuration","permalink":"https://docs.grabaperch.com/perch/configuration/ssl/","id":"perch.configuration.ssl","excerpt":"If your site uses SSL for some or all of the pages, you can use the below setting to make Perch aware of this. When `PerchSystem::force_ssl()` is called, Perch will only force the switch to HTTPS if `PERCH_SSL` is set to true.","text":"If your site uses SSL for some or all of the pages, you can use the below setting to make Perch aware of this. When `PerchSystem::force_ssl()` is called, Perch will only force the switch to HTTPS if `PERCH_SSL` is set to true.\n\nThis is useful for development or staging environments where SSL isn’t available, but you want to set everything up ready to use SSL when the site is live.\n\nWhen PERCH_SSL is set to true the Perch control panel will switch to HTTPS automatically.\n\n## SSL\n\n|Setting|Value|\n|-|-|\n|PERCH_SSL|True or false. Enable the use of SSL.|\n\n## Forcing SSL from the page\n\nTo force a page to switch to SSL, add the following before any HTML is output to the browser. (The best place is right after the runtime include.)\n\n```php\n<?php PerchSystem::force_ssl(); ?>\n```\n\nPerch will redirect from `http://` to `https://`.\n\n## Doing the reverse\n\nIf you want to make sure a page *isn’t* loaded using SSL you can do that too.\n\n```php\n<?php PerchSystem::force_non_ssl(); ?>\n```\n\nDon’t try and do both at once, as the universe may implode.","type":"perch"},{"title":"Security Configuration","permalink":"https://docs.grabaperch.com/perch/configuration/security/","id":"perch.configuration.security","excerpt":"If running Perch or Perch Runway in particularly sensitive environments, you can switch the system into Paranoid Security Mode in the `perch/config/config.php` file.","text":"If running Perch or Perch Runway in particularly sensitive environments, you can switch the system into Paranoid Security Mode in the `perch/config/config.php` file.\n\n```php\ndefine('PERCH_PARANOID', true);\n```\n\nThis mode enables a set of smaller security hardening features in one easy step. If you want to change the defaults or disable certain subfeatures, you can do that with the individual configuration options detailed below.\n\n## Users and passwords\n\nParanoid security mode affects user accounts in the following ways:\n\n- Requires a password to be entered before editing any user accounts\n- Requires an existing password to be entered before updating your own password\n- Enforces password length and complexity rules\n- Prevents password re-use within a configured time frame\n- Enforces case-sensitive usernames\n- Implements timed account lock-out for multiple login failures\n- Sends new user accounts a tokenised link to create a new password, rather than send their password in the clear\n- Enforces secure cookies for user sessions\n\nThese subfeatures can be individual controlled with the following settings:\n\n|Setting|Value|Default|\n|-|-|-|\n|`PERCH_MAX_FAILED_LOGINS`|The number of failed logins before account lockout|`10`|\n|`PERCH_AUTH_LOCKOUT_DURATION`|The amount of time to lock the user account for after failed logins|`1 HOUR`|\n|`PERCH_STRONG_PASSWORDS`|Enable the 'strong' password rule set|`true`|\n|`PERCH_PASSWORD_MIN_LENGTH`|The minimum length for a password|`6`|\n|`PERCH_FORCE_SECURE_COOKIES`|Enforce the use of secure cookies (requires SSL/TLS)|`true`|\n\nWhen `PERCH_MAX_FAILED_LOGINS` is set, the account is locked for `PERCH_AUTH_LOCKOUT_DURATION` when that limit is hit. At that point, the user is sent an email telling them their account has been locked. Nothing changes on the login form when this happens (we want an attacker to waste their effort, not learn that the account has been locked and improve their strategy).\n\nThe user can unlock their own account with a password reset - they’re sent a token to do so in the email. This means there’s never a requirement for a higher-level user to unlock a locked account. It’s also impossible for an attacker to completely disable the system by locking everyone out at once. It’s safe to unlock using a password reset, as if the attacker has access to the email account there’s no need to be brute forcing the login in the first place, they could just reset the password over email.\n\n## Files and uploads\n\nParanoid security mode affects file handling in the following ways:\n\n- Implements the `accepts` attribute on `file` and `image` field types to restrict file uploads to whitelisted mime types\n- Filters uploaded files for unsafe file names\n\nThese subfeatures can be individual controlled with the following settings:\n\n|Setting|Value|Default|\n|-|-|-|\n|`PERCH_VERIFY_UPLOADS`|Force uploaded files to be verified for type|`true`|\n\nFile uploads are checked for the following, based on [OWASP recommendations](https://www.owasp.org/index.php/Unrestricted_File_Upload)\n\n* File name: must be letters, numbers, dashes, underscores and spaces only, with a single dot and extension.\n* File size: must be >0 bytes\n* Mime type: must match a whitelist of mime types (see below)\n* File extension: must map to a mime type which matches the whitelist\n\nThe whitelist of mime types is held within in the `perch/config/filetypes.ini` file. This has been updated for Perch 2.8.26, so if you're updating an older version you’ll need to copy it over.\n\nWith `PERCH_VERIFY_UPLOADS` enabled, no file uploads are accepted unless they match all of the above rules. This depends on having the [PHP FileInfo](http://php.net/manual/en/book.fileinfo.php) extension configured and working to be able to detect file mime types.\n\nImage field types (`type=\"image\"`) default to only accepting the mime types from the `webimage` group specified in the `filetypes.ini` file. These are images that you’d normally embed on web pages (`jpg`, `png`, `gif`, `svg`, `webp`).\n\nFile field types (`type=\"file\"`) defaults to these groups: `pdf`, `text`, `richtext`, `xml`, `zip`, `audio`, `video`, `office`.\n\nYou can override these defaults on a field level by specifying the accept attribute with a comma-delimited list of group names from the `filetypes.ini` file.\n\n    <perch:content id=\"file\" type=\"file\" accept=\"pdf,zip\">\n\nYou can also limit the acceptable file size in bytes:\n\n    <perch:content id=\"file\" type=\"file\" accept=\"pdf,zip\" max-file-size=\"2000000\">","type":"perch"},{"title":"Resource Buckets","permalink":"https://docs.grabaperch.com/perch/resources/buckets/","id":"perch.resources.buckets","excerpt":"Perch 2.1 introduced the ability to have multiple places in which to store resources. We call these resource buckets – you can think of them as multiple resource folders.","text":"Perch 2.1 introduced the ability to have multiple places in which to store resources. We call these resource buckets – you can think of them as multiple resource folders.\n\n## Basic buckets\n\nThe resource bucket to use can be set on any individual template tag using the `bucket` attribute.\n\n```html\n    <perch:content id=\"report\" type=\"file\" label=\"Annual report PDF\" bucket=\"reports\">\n```\n\nWithout any configuration, you can use a bucket name as above. If that bucket doesn’t exist, it will be created as a subfolder of the default resources folder. In this case, `/perch/resources/reports/`. You can create that folder yourself, or Perch will do it for you.\n\n## Setting a default bucket\n\nYou can declare any of your buckets as the default from your `config/config.php` file.\n\n```php\ndefine('PERCH_DEFAULT_BUCKET','images');\n```\n\n## Bucket list\n\nFor more advanced use, you can define a bucket using the bucket list. This is a PHP configuration file which you need to create as `perch/config/buckets.php`\n\nA bucket list item has a name (max 16 characters) and defines the following:\n\n|Key|Value|\n|--|--|\n|type|The type of bucket. Defaults to `file` for basic buckets, and uses values like `amazon_s3`, `dropbox` etc for cloud storage.|\n|web_path|The path (either absolute or from your website root) to use when creating links to images and files in the website.|\n|file_path|The file system path to the folder where the files are saved.|\n|role|If set, can have the value of `backup` to indicate that the bucket is used for backups only.|\n\nSpecific bucket types may also define additional properties as per their own documentation. For example, Amazon S3 buckets need a `region` option setting.\n\nAn example bucket list takes this format. It defines three buckets, `images`, `whitepapers` and `backup`.\n\n```php\n<?php\n    return [\n        'images' => [\n            'type'      => 'file',\n            'web_path'  => '/images',\n            'file_path' => '/var/www/mysite/public_html/images',\n        ],\n        'whitepapers' => [\n            'type'      => 'file',\n            'web_path'  => '/whitepapers',\n            'file_path' => '/var/www/mysite/public_html/whitepapers',\n        ],\n        'backup' => [\n            'type'      => 'dropbox',\n            'web_path'  => '',\n            'file_path' => 'backups',\n            'role'      => 'backup',\n        ],\n    ];\n?>\n```\n\nUsing the bucket list, you could define a bucket which stored files outside of the web root, and then delivered them using a script. This can be used to, for example, only give access to a file to someone who is authorised to view it. You would set the `web_path` to be a path to your script. The file name will be appended to it, so it could be e.g. `/secure-download.php?file=`","type":"perch"},{"title":"Create a multilingual site","permalink":"https://docs.grabaperch.com/perch/building/how-do-i-create-a-multilingual-site/","id":"perch.building.how-do-i-create-a-multilingual-site","excerpt":"**How do I Create a Multi-lingual Website?**","text":"**How do I Create a Multi-lingual Website?**\n\nThis solution outlines your options for creating a site in more than one language using Perch.\n\nAlthough Perch is a deliberately simple CMS and as such doesn’t have native multilingual website functionality, it is flexible enough to enable you to implement a basic multilingual site yourself.\n\nThere are two common strategies to approaching this, and we’ll look at both below.\n\n## Strategy one: a branched site\n\nProbably the most common approach to creating a multilingual site is to branch your site at the top level and have different folders for each language option.\n\n* http://mysite.com/ would be a simple splash screen asking visitors to choose a language (which would simply be links to…)\n* http://mysite.com/en would be the home page for the English version of the site\n* http://mysite.com/fr would be the home page for the French version of the site, and so on.\n\nYou would then build out your pages as normal. This offers a lot of flexibility to present your content differently for different audiences, and enables you to localize your site, not just translate it.\n\n## Strategy two: a region for each language\n\nIf you don’t wish to maintain separate pages for each language choice, another option is to duplicate each region, once for each language.\n\nSuppose we have a PHP variable called $lang which contains a language choice. This would be something like en for English or de for German. If we create our regions with the language choice added onto the region name, we can get a copy of each region for each language option:\n\n    <?php perch_content('Main heading - '.$lang); ?>\n\nWhen the language is set to en for English, this would create a region called Main heading – en and for German it would be Main heading – de. When editing the content in Perch, you then just pick the region for the language you want to work on.\n\nSo how do we set $lang to be our language choice? Add this snippet to the top of each page (or better still, put it in an include and add that to the top of each page).\n\n```php\n    <?php\n    session_start();\n    $lang = 'en'; // default lang\n    switch(perch_get('lang')) {\n        case 'en':\n            $lang = 'en';\n            break;\n        case 'de':\n            $lang = 'de';\n            break;\n        // add more cases for language options here...\n\n        default:\n            if (isset($_SESSION['lang'])) {\n                $lang = $_SESSION['lang'];\n            }\n            break;\n    }\n    $_SESSION['lang'] = $lang;\n    ?>\n```\n\nThe first thing to know is that we’re setting the default language to en – so if no other choice is made, the site will be in English. You can change that where commented at the top of the snippet.\n\nThe logic of the code goes like this:\n\n* Is there a lang option set on the URL? If so, use that.\n* If not, is there a lang option stored in the user’s session? If so, use that.\n* Store the choice in the session for next time.\n\nTo switch language, you just need to make a link on your page such as:\n\n    /index.php?lang=de\n\nThis will cause the page to load the German regions, and store that choice for future pages. So unless you’re actually switching language, you don’t need to add anything special to your links.","type":"perch"},{"title":"Integrations","permalink":"https://docs.grabaperch.com/perch/building/integrations/","id":"perch.building.integrations","excerpt":"Integrating Perch with other products and services.","text":"Integrating Perch with other products and services.","type":"perch"},{"title":"Troubleshooting","permalink":"https://docs.grabaperch.com/perch/building/troubleshooting/","id":"perch.building.troubleshooting","excerpt":"In this section we look at how you can learn to debug common problems when developing in Perch and for the web in general.","text":"In this section we look at how you can learn to debug common problems when developing in Perch and for the web in general.","type":"perch"},{"title":"Updating Perch","permalink":"https://docs.grabaperch.com/perch/building/updating/","id":"perch.building.updating","excerpt":"You can see which version of Perch you are running by looking at your Diagnostics Report. The report also lists the versions of any Apps you have installed.","text":"You can see which version of Perch you are running by looking at your Diagnostics Report. The report also lists the versions of any Apps you have installed.\n\nSpecific upgrade instructions for each dot release upgrade can be found on the page detailing that release. [View the latest release notes](https://grabaperch.com/update/).\n\nMost updates simply require you to replace the core folder, found within the `perch` folder (or whatever you have renamed it to). However do check the update notes first.\n\nWe work very hard to ensure that updates do not cause any problems, but as a matter of good practice we would always suggest that you **take a backup** of files and database before updating – just in case something goes wrong.\n\n## Upgrading from Perch 1 to Perch 2\n\nWe no longer support upgrades from Perch 1 to Perch 2. Perch 1 reached end-of-life in May 2015. In many cases you can still upgrade a version 1 site to Perch 2, [read the full instructions](/perch/building/updating/from-perch1/).","type":"perch"},{"title":"Servers","permalink":"https://docs.grabaperch.com/perch/building/servers/","id":"perch.building.servers","excerpt":"Perch has very simple requirements for hosting, however there are plenty of differences between hosts and PHP configurations.","text":"Perch has very simple requirements for hosting, however there are plenty of differences between hosts and PHP configurations.\n\nIn this section we have some help for those of you who haven't used PHP before, from basics of the language to setting up a local environment. We also have some help on things such as moving a Perch site and some host specific tips.","type":"perch"},{"title":"Working with Front Controllers","permalink":"https://docs.grabaperch.com/perch/building/working-with-front-controllers/","id":"perch.building.working-with-front-controllers","excerpt":"Perch is reasonably well namespaced and so can be integrated with most PHP frameworks without too much trouble. When using Perch with a Front Controller pattern (as utilised by most MVC frameworks), a downside is that Perch sees every page as the same script. Knowledge of its environment is lost.","text":"Perch is reasonably well namespaced and so can be integrated with most PHP frameworks without too much trouble. When using Perch with a Front Controller pattern (as utilised by most MVC frameworks), a downside is that Perch sees every page as the same script. Knowledge of its environment is lost.\n\nTo help address this, we’ve provided a mechanism for telling Perch which page it is on. The `set_page()` method of the static `PerchSystem` class can be called as below, after the Perch runtime has been included and before any content is requested.\n\n```php\nPerchSystem::set_page('/products/fish-cakes/index.php');\n```\n\nAs Perch is used to receiving full paths (including a filename and extension) from the web server, be sure to set a filename for the best results.\n\nSome examples:\n\n```php\nPerchSystem::set_page('/index.php');\n\nPerchSystem::set_page('/products/index.php');\n\nPerchSystem::set_page('/products/widgets.php');\n\nPerchSystem::set_page('/about/founders/dave.php');\n```\n\n## Getting the page path\n\nIf you need to see what path Perch thinks the page is, you can use\n`get_page()`\n\n```\n$page = PerchSystem::get_page();\n```","type":"perch"},{"title":"A2Hosting Tips","permalink":"https://docs.grabaperch.com/perch/building/hosts/a2hosting/","id":"perch.building.hosts.a2hosting","excerpt":"**A2 Hosting and Perch**","text":"**A2 Hosting and Perch**\n\nSupport material for setting up your A2 Hosting account to work with Perch.\n\n## Buying your new hosting\n\nWe would recommend that you take the Prime + SSD package because an SSD disk in the server your account is on will make a huge difference in the speed of your site.\n\nWhen registering you’ll be asked if you have an existing domain or want to register a new one. If you want to build a new site and then point the domain later choose a free A2 Hosting subdomain - you can use this as a preview of the site then move the real domain when you are ready.\n\nYou can choose to have your site hosted on a server in the USA or Europe (actually Iceland). Choose the location nearest to where the majority of your traffic will come from for the best speeds.\n\n[Sign up with A2 Hosting](https://partners.a2hosting.com/solutions.php?id=5615&url=602)\n\n### Hosting Options\n\n* I would like to register a domain\n* I already have a domain\n* Use a free subdomain from A2 Hosting\n\nUnless you are going to move your domain immediately or want to buy a new domain, choose the third option. This will give you a subdomain to preview your site. You can move your domain later.\n\nUnder configurable options on the next page you can choose whether to have a server in the USA or Europe, SSD or standard storage.\n\nPick the location nearest to you. We would advise paying the little extra for an SSD as it will improve the speed of your website.\n\nYou do not want any applications auto-installed if you are intending to use Perch!\n\n## Setting up your new hosting account\n\nOnce you have your new hosting account there are a few things we would advise that you do.\n\nA2 Hosting accounts come with cPanel and give a large number of options. What we advise you do before installing Perch is make sure you are running the latest version of PHP, and configuring your server to allow reasonably large files to be uploaded via Perch admin.\n\nTo get started log into cPanel. You can access cPanel via your account on A2 Hosting, find your list of servers and click Manage then Log into cPanel.\n\n### Selecting a PHP version\n\nIn cPanel scroll down to Software/Services and click PHP Version.\n\nChange this to the newest version in the list. At the time of writing that was PHP 5.5.13.\n\nDue to the way cPanel is set up you need to do a couple of things now to configure your server to get the best out of it.\n\nLog into your server with your FTP client (we would suggest using sFTP not regular FTP) and edit the .htaccess file to add the line:\n\n    SuPHP_ConfigPath /home/MYHOME/public_html/\n\nReplace MYHOME with your home directory name - you can see this path in the sidebar under Stats in cPanel.\n\nYou then need to create a custom `php.ini` file. You can [download an up to date php.ini from GitHub](https://github.com/php/php-src/blob/master/php.ini-production) or if you know how to do this yourself use your own. [The documentation for A2 Hosting is here](https://www.a2hosting.com/kb/developer-corner/php/custom-php.ini-files).\n\nIn the php.ini search for `upload_max_filesize` and set it to something larger enough for the files you might upload. For example 20M. Then search for `post_max_size` and adjust this to a size slightly larger than the one for max_uploads - perhaps 21M.\n\nPut this file inside public_html named php.ini.\n\nThis upside of this process is that you have a lot of ability to tweak the PHP configuration by using a PHP.ini file which you may find useful in the future. One of the reasons we are happy to recommend A2 Hosting is that they give you the ability to customise these settings.\n\n## Creating a database\n\nWith pre-flight checks done you should now create a database via cPanel. To do this find the Databases section in cPanel and click MySQL Databases.\n\nUnder ‘Create New Database’ enter the name of your database. It will automatically be prefixed with your account name. If your account name is ‘birdy’ and you create a database called ‘perch’ then the actual database name is ‘birdy_perch’.\n\nTo connect to the database you also need a user. Add your first user under MySQL Users.\n\nOnce again usernames will be prefixed with your account name. If you create a user called ‘web’ for your ‘birdy’ account, the actual username is ‘birdy_web’.\n\nThe final step is to add this user to the database. Under ‘Add User to Database select your new user and your new database, and click Add. On the next screen give the user All Privileges and click Make Changes.\n\n## Installing Perch\n\nYou can now run the Perch Compatibility Test or install Perch using your new hosting. When completing the database details section of the form you enter the database name, the user you just created and their password. Don’t forget the prefixes on the database name and username!\n\nIn our tests Perch installed perfectly on A2 Hosting. Once installed take a look at your Diagnostics Report under Settings and you should be able to see that Perch is reporting the correct PHP version and upload size.\n\n## Setting up Perch Scheduled Tasks\n\nAfter installing Perch you might want to set up [Scheduled Tasks](http://docs.grabaperch.com/docs/scheduled-tasks/), that way any Perch functionality that uses Scheduled Tasks can run.\n\nOn Unix hosting this is described as a “cron job” and A2 Hosting have information in the docs about Using [cPanel for cron Jobs](http://www.a2hosting.com/kb/cpanel/advanced-features/cron-jobs).\n\nIn your Perch Config you need to define a secret as explained in our [documentation](http://docs.grabaperch.com/docs/scheduled-tasks/). Make sure you reupload your config to the server after adding this.\n\nIn the Perch Admin go to Settings > Scheduled Tasks and there should be a line starting with php then the path to the script on your server, ending with the secret you just set. Copy this line.\n\nIn cPanel scroll down to the bottom of the page and click Cron Jobs, under Advanced.\n\nSelect how often you want the script to run. Once an hour is probably fine unless you need something on your site to update more frequently - you can always update this later.\n\nThen paste the line from Perch into the box labelled Command and click ‘Add New Cron Job’. If you would like to get an email every time it runs you can add your email address in the first box - you might want to do this just to confirm it works then you can remove it.\n\n## Finding Your PHP Error Log\n\nIf you are experiencing a “white screen of death” or your page seems to be terminating in a strange way then PHP is probably throwing an error.\n\nYou can use the PHP.ini file to choose a location for your PHP error log. I would suggest that you set this up so that it logs into your home directory (not the site root) as then you can view and download it via FTP but it isn’t accessible from a web browser.\n\nThe support information from A2 Hosting is [here](http://www.a2hosting.com/kb/developer-corner/php/using-php.ini-directives/php-error-log), but if you search in the php.ini you used earlier for `error_log` you can set it to `/home/YOURACCOUNTNAME/php_errors.log` and you should find that any errors now appear here.","type":"perch"},{"title":"Specific hosting company tips","permalink":"https://docs.grabaperch.com/perch/building/hosts/hosting-tips/","id":"perch.building.hosts.hosting-tips","excerpt":"We sometimes get tips specific to one hosting company or another. To help you find these we are adding them here. If you have anything to add about a particular hosting configuration - let us know.","text":"We sometimes get tips specific to one hosting company or another. To help you find these we are adding them here. If you have anything to add about a particular hosting configuration - let us know.\n\n## Heart Internet\n\nIf you are adding a Scheduled Task (Cron Job) on Heart Internet you need to use the following syntax:\n\n```php\n/usr/bin/php55 /home/sites/my_site.co.uk/public_html/perch/core/scheduled/run.php secret=mysecret\n```","type":"perch"},{"title":"Add Facebook like buttons to a page","permalink":"https://docs.grabaperch.com/perch/building/integrations/adding-facebook-like-buttons/","id":"perch.building.integrations.adding-facebook-like-buttons","excerpt":"How can I add Facebook Like buttons to a page?","text":"# How can I add Facebook Like buttons to a page?\n\n## Integration with social media sites is an increasingly important tool for driving traffic to your site. This solution explains how to add Facebook 'Like' buttons to a page.\n\nAdding a Facebook ‘Like’ button to a page is fairly straightforward. The first point of reference is Facebook’s own [developer documentation](https://developers.facebook.com/docs/reference/plugins/like/) which contains sample code for adding a like button.\n\nThe HTML5 version of the code includes two parts. The first part is the Facebook *JavaScript SDK* which needs to be included once on the page.\n\n```html\n\t<div id=\"fb-root\"></div>\n\t<script>(function(d, s, id) {\n\t  var js, fjs = d.getElementsByTagName(s)[0];\n\t  if (d.getElementById(id)) return;\n\t  js = d.createElement(s); js.id = id;\n\t  js.src = \"//connect.facebook.net/en_US/all.js#xfbml=1\";\n\t  fjs.parentNode.insertBefore(js, fjs);\n\t}(document, 'script', 'facebook-jssdk'));</script>\n```\n\nThen, at the point you want to insert a Like button, you need the following snippet.\n\n\t<div class=\"fb-like\" data-send=\"true\" data-width=\"450\" data-show-faces=\"true\"></div>\n\nThis could be added to your blog’s `post.html` template, for example.\n\nBy default, the button with ‘like’ the current page. If you want to like a different page, you can set that with the data-href attribute\n\n\t<div class=\"fb-like\" data-href=\"http://grabaperch.com\" data-send=\"true\" data-width=\"450\" data-show-faces=\"true\"></div>\n\nThere are various options, listed in the [Facebook documentation](https://developers.facebook.com/docs/reference/plugins/like/).\n\nThere’s no reason this couldn’t be used in a Perch template, to set the options dynamically.\n\n\t<div class=\"fb-like\" data-href=\"<perch:content id=\"url\" type=\"url\" label=\"URL to like\">\" data-send=\"true\" data-width=\"450\" data-show-faces=\"true\"></div>","type":"perch"},{"title":"Using Google Analytics","permalink":"https://docs.grabaperch.com/perch/building/integrations/google-analytics/","id":"perch.building.integrations.google-analytics","excerpt":"**How can I keep track of traffic with Google Analytics?**","text":"**How can I keep track of traffic with Google Analytics?**\n\nGoogle Analytics is a useful and powerful tool to help you keep track of activity on your website. Here's how you integrate the tracking code into Perch.\n\nAdding Google Analytics code to your a site is straightforward.\n\n## Creating a region\n\nFirst, add a new region to one of your pages (perhaps the home page) right before the closing `</body>` tag.\n\n\t<?php perch_content('Analytics'); ?>\n\nReload the page in your browser, and the Analytics region should show up as new inside Perch. Click through on the new region and pick the Google Analytics template.\n\n## Add your web property ID\n\nIn the edit form, and the “web property ID” that Google gives you to use with your site. It should be in the format `UA-XXXXX-X`.\n\nSave the changes.\n\n## Sharing the region\n\nIn the Region Options, check “Share across all pages”, and save.\n\n## Adding the region to other pages\n\nNow copy the Analytics region to the bottom of any existing pages, and add it to any Master Pages you’re using.\n\n\t<?php perch_content('Analytics'); ?>\n\nYour Google Analytics code should now show up at the bottom of all your pages, and any new pages you create.","type":"perch"},{"title":"RSS to MailChimp","permalink":"https://docs.grabaperch.com/perch/building/integrations/rss-to-email-mailchimp/","id":"perch.building.integrations.rss-to-email-mailchimp","excerpt":"**How can I send an email to users when a new blog post is published?**","text":"**How can I send an email to users when a new blog post is published?**\n\nSometimes you might want to allow visitors to sign up to a list and get an email when a new post is made on the blog. A simple way to do this is to combine Perch with MailChimp.\n\nYou can create an RSS feed for your blog using the included example feed. Our [video](http://docs.grabaperch.com/video/tutorials/swift/blog-rss-feed/) shows you how to customize this for your blog.\n\nOnce your feed is working and your site is available on the live server you can then follow the instructions on MailChimp to create an [RSS to Email Campaign](http://mailchimp.com/features/rss-to-email/).\n\nTo make it easy for visitors to sign up on your site, and in order that you can see how many signups you have had without leaving the Perch admin you can use our [MailChimp Add-on](https://grabaperch.com/add-ons/apps/mailchimp).","type":"perch"},{"title":"Using CDNify with Perch","permalink":"https://docs.grabaperch.com/perch/building/integrations/using-cdnify/","id":"perch.building.integrations.using-cdnify","excerpt":"**Can I use CDNify with Perch?**","text":"**Can I use CDNify with Perch?**\n\n---\n\n**In Feb 2017, CDNify announced the end of the service.** Sites using CDNify need to transition away by the end of March 2017.\n\n---\n\nSites with international audiences can see performance benefits from moving images and static assets to a content delivery network (CDN). CDNify is one such service which is very easy to add to a Perch site.\n\nThe purpose of a content delivery network (CDN) is to make your site load faster by serving images and static assets from data centres that are physically closer to the site visitor. A CDN will automatically copy your assets to their data centres around the globe. When a visitor loads your site, they'll be sent assets from the closest data centre to their current location.\n\nThat all sounds pretty complicated to set up, right? Well yes, it can be, but it doesn't have to be. [CDNify](https://cdnify.com/) is a CDN service that does 80% of what you'd ever need, with only about 1% of the hassle. It's a bit like Perch (and that's why we like it).\n\nCDNify works like this:\n\n1. You create an account, and set your website up as a _resource_.\n2. CDNify gives you a URL to put in front of any static asset paths on your site\n3. The first time that asset is loaded, CDNify fetches it from your site, then serves its copy from that point on\n\nOne of the classic problems with using a CDN is making sure that updated assets get updated on the CDN too. That's not so much a problem with Perch, because everything is versioned, every updated image etc has a new file name.\n\n## Getting started\n\nOnce you've signed up for CDNify and have set your site up as a resource, you'll be given a URL like this:\n\n    mysite.a.cdnify.io\n\nOpen up your `perch/config/config.php` file and find this line:\n\n    define('PERCH_RESPATH', PERCH_LOGINPATH . '/resources');\n\nand update it to this:\n\n    define('PERCH_RESPATH', 'http://mysite.a.cdnify.io' . PERCH_LOGINPATH . '/resources');\n\nThat's it. The explanation was longer than the instructions!\n\n## Using with buckets\n\nIf you have a custom bucket list, you just need to prefix the `web_path` for any buckets you want to serve from the CDN. Open up `perch/config/buckets.php` and change your lines like this:\n\n    'web_path'  => '/my/bucket/path',\n\nto include the CDNify URL like this:\n\n    'web_path'  => 'http://mysite.a.cdnify.io/my/bucket/path',\n\nAnd you're done.","type":"perch"},{"title":"Local testing of email with Mailtrap","permalink":"https://docs.grabaperch.com/perch/building/servers/email-testing-with-mailtrap/","id":"perch.building.servers.email-testing-with-mailtrap","excerpt":"**Using Perch with Mailtrap for local email testing**","text":"**Using Perch with Mailtrap for local email testing**\n\nDuring development on a local server testing forms and email can be tricky. This solution explains how to integrate the service Mailtrap with Perch.\n\n[Mailtrap](https://mailtrap.io) is a service that can capture all emails send from your application, allowing you to test form to email scripts and other integrations without needing to set up and configure a local mail server. It’s really easy to use Mailtrap with Perch.\n\nCreate your [mailtrap](https://mailtrap.io) account. You can sign up for a free single user account using your GitHub or Google credentials or create an account with an email address and password.\n\nOnce you have created your account click on the Inbox that has been created. To integrate Mailtrap with Perch you’ll need the Host, Username and Password listed under SMTP.\n\nOpen your Perch `config/config.php` in a text editor and add the following details, replacing `mailtrap_host`, `mailtrap_username` and `mailtrap_password` with your settings.\n\n```php\n    define('PERCH_EMAIL_METHOD', 'smtp');\n    define('PERCH_EMAIL_HOST', 'mailtrap_host');\n    define('PERCH_EMAIL_SECURE', 'tls');\n    define('PERCH_EMAIL_AUTH', true);\n    define('PERCH_EMAIL_PORT', 2525);\n    define('PERCH_EMAIL_USERNAME', 'mailtrap_username');\n    define('PERCH_EMAIL_PASSWORD', 'mailtrap_password');\n```\n\nYou can test to see if your integration is working by going to - Settings > Email in Perch and sending the test email. It should be caught by Mailtrap and show up in your inbox.\n\nNow any email that Perch sends will show up in Mailtrap making it easier to test your forms.\n\nMailtrap is also a good way to test that email is leaving your server, and to check for other deliverability issues. If you think Perch is not sending emails, switching to using Mailtrap’s SMTP server will ensure that all mail is delivered directly to Mailtrap. If Mailtrap gets the email then you should be able to set up another SMTP server - using the Google SMTP settings for example - in its place.\n\nOnce you have received an email in Mailtrap you can click on it, see the contents and also check it for common deliverability issues by clicking the Analysis tab. Most reported email issues in Perch support are nothing to do with Perch or PHP sending email - the email is being sent but is getting caught by filters after leaving your server,\n\nWhen you go live, you will need to remember to change those details for your live mail server details, or just remove them if PHP can send mail from your server without additional configuration. You could also add the details to a block in your config file following this solution for [creating Config Files that work on multiple servers](/perch/building/servers/multiple-server-config).","type":"perch"},{"title":"Getting Started with PHP","permalink":"https://docs.grabaperch.com/perch/building/servers/how-do-i-get-started-with-php/","id":"perch.building.servers.how-do-i-get-started-with-php","excerpt":"**How do I get started with PHP?**","text":"**How do I get started with PHP?**\n\nPerch doesn't require that you know PHP, but with just a little bit of knowledge you will find you can do far more advanced things. This solution gets you started.\n\nYou don’t need to know any PHP to use Perch, for basic content all of your customizations happen in your templates which are just HTML snippets.\n\nHowever, if you want to work with `perch_content_custom()` or do more complex things with apps knowing a little PHP will make your job much easier. If you have learned HTML and CSS then you will not find basic PHP hard at all.\n\n## Important concepts\n\nUnlike HTML and CSS PHP is parsed by the server before it gets to your web browser. This is why – if PHP is running on your server – when you View Source you will not see any of the PHP tags that you entered. There is also no concept of browser compatibility when it comes to serverside scripting like PHP. The browser gets HTML as it would if you had hand-coded the site, it doesn’t know or care that the HTML has been generated using PHP.\n\nIn the case of Perch we use PHP to compile together your templates, and the content added to the database by an editor to produce the final page.\n\nIn general a server will be configured to parse PHP on any page that has a `.php` extension. Most hosts will allow you to also parse pages with a `.html` extension but you may have to configure this using a `.htaccess` file as we explain in the documentation. If a page is not being parsed as PHP you will see the PHP tags when you View Source.\n\n## How does the server know something is PHP?\n\nWhen using Perch you add PHP to your page to include Perch and also when creating a Perch Editable Region. In each case you use PHP tags to demonstrate to the server that this is PHP, parse it.\n\n`<?php include('perch/runtime.php'); ?>`\n\nThe above line includes the Perch runtime. The PHP tags are the `<?php ?>` everything inside is an instruction for PHP. In this case we are telling PHP to include a file at that location.\n\nTherefore if any documentation tells you to add some PHP to your page, you know it needs to be inside `<?php ?>` otherwise the server doesn’t know to parse it and it will be output as text on your page.\n\n## Variables in PHP\n\nA variable is a value that might change. In PHP variables begin with a dollar sign `$` – a simple use of variables might be to get the value from the query string in order to pass it into a function. For example:\n\n```php\n    <?php\n    //get the value of id from the query string\n    $id = $_GET['id'];\n    //pass it into the perch_blog_post function\n    perch_blog_post($id);\n    ?>\n```\n\nIn Perch we have a helper function to make getting that data from the query string even easier, `perch_get()` performs the above task but also checks to see if the value is present. Read more about `perch_get()` in the function reference.\n\n## Arrays in PHP\n\nMost of our Perch functions take a special kind of variable called an array. An array is simply a list of things stored in a manner that PHP can look through and use.\n\nA simple array looks like this:\n\n```php\n    <?php\n    $my_shopping = array('eggs','apples','a nice cup of tea');\n    ?>\n```\n\nIf a variable is an array you can have a look at it by using the PHP `print_r` function. This is very useful if you need to know what an array contains. If I print_r the above array like so:\n\n```php\n    <?php\n    print_r($my_shopping);\n    ?>\n```\n\nIn the browser I will see:\n\n```php\n    Array ( [0] => eggs [1] => apples [2] => a nice cup of tea )\n```\n\nIn Perch we most often use a named array, in the simple array above to use any value you have to know the index of that value – this means you have to create your array in a fixed order to be able to use certain values.\n\nWith a named array we essentially have a set of variables contained in a variable, which is very useful and so is how we tend to do things with Perch.\n\nThe below array is the options array that you might pass into `perch_content_custom()`.\n\n```php\n    <?php\n    $opts = array(\n        'page'=>'/news/index.php',\n        'template'=>'article.html',\n        'sort'=>'date',\n        'sort-order'=>'DESC',\n        'count'=>1\n    );\n    ?>\n```\n\nThe variable that contains the array is called `$opts` we then create an array, but instead of having a comma separated list of things, we have `name => value` pairs.\n\nEach pair has the name first, then the `=>`, then the value. Each line except the last has a comma. It’s just a comma separated list except containing names and values.\n\nAll this array says is that:\n\n* the variable ‘page’ has the value ‘/news/index.php’\n* the variable ‘template’ has the value ‘article.html’\n* we want to ‘sort’ by ‘date’\n* we want our ‘sort-order’ to be ‘DESC’ (descending)\n* we want the ‘count’ to be ‘1’ – retrieve one item only.\n\nYou don’t need to call the array `$opts` – it can be anything you like, it is just a reference, as the next thing you would do is pass this array into the `perch_content_custom()` function.\n\n```php\n    <?php\n    $opts = array(\n        'page'=>'/news/index.php',\n        'template'=>'article.html',\n        'sort'=>'date',\n        'sort-order'=>'DESC',\n        'count'=>1\n    );\n    perch_content_custom('News', $opts);\n    ?>\n```\n\nIn fact you could do this without creating the array as a variable first at all, you can just create the array inside the `perch_content_custom()` function, which may look more of a familiar syntax if you are used to using jQuery for example. We tend to use this syntax in the documentation.\n\n```php\n    <?php\n    perch_content_custom('News',  array(\n        'page'=>'/news/index.php',\n        'template'=>'article.html',\n        'sort'=>'date',\n        'sort-order'=>'DESC',\n        'count'=>1\n    ));\n    ?>\n```\n\nIn PHP 5.4 and above you can actually simplify this further and write:\n\n```php\n    <?php\n    perch_content_custom('News',  [\n        'page'=>'/news/index.php',\n        'template'=>'article.html',\n        'sort'=>'date',\n        'sort-order'=>'DESC',\n        'count'=>1\n    ]);\n    ?>\n```\n\n## PHP Errors\n\nSometimes something will go wrong and PHP will throw an error.\n\nWhen you are working locally, on your own machine, you can get PHP to display errors directly on the screen so you can see them in the browser. How PHP reports errors is configured in a file called php.ini, if you are using XAMPP you can get to this via your control panel by clicking the Config button on the Apache line of buttons and selecting php.ini.\n\nSearch for: `display_errors` and make sure that is set to On:\n\n```php\n    display_errors = On\n```\n\nAlso check that the value of error_reporting is as below, to make sure you get to see all potential errors:\n\n```php\n    error_reporting = E_ALL | E_STRICT\n```\n\nOn a live server you want errors to not be shown to the screen as they could reveal information that could be a security risk.\n\nWhen errors are not being shown this will usually mean that a PHP error will cause a “white screen” with nothing showing or a partial load of the document where if you View Source you can see the document stops loading at the point at which PHP threw the error. In this case errors should be logged to a file. You may find this is already available to you in your hosting control panel or in your site via FTP, if not have a look at an article written by Perch developer Rachel Andrew for Smashing Magazine, it details [how to get PHP errors logging on your server](http://coding.smashingmagazine.com/2011/11/30/a-guide-to-php-error-messages-for-designers/).","type":"perch"},{"title":"How do I move a Perch site?","permalink":"https://docs.grabaperch.com/perch/building/servers/how-do-i-move-a-perch-site/","id":"perch.building.servers.how-do-i-move-a-perch-site","excerpt":"**How do I move a Perch site?**","text":"**How do I move a Perch site?**\n\nIf you need to move a site from development to live or from one live server to another, follow these steps.\n\nIn a previous article I explained how to set up a local development environment using XAMPP so that you can work locally on your Perch sites. Once you have built your site you will need to move it to a live or staging server and this article explains how to do that.\n\nThese instructions are also to be followed if you are moving your site from staging to live, or moving your site between two live servers if you are changing hosts. I will refer throughout this tutorial to Old Server and New Server. Old Server is where the site is currently, New Server is where you are moving it to.\n\nTo move your Perch site and all of the content you will need to do the following things:\n\n1. Run the Perch Server Compatibility Test on the new server\n2. Take a copy of your database and transfer it to the new server\n3. Update your config file so that the connection details are correct for the new server\n4. Upload all of your files – including the perch folder to the root directory of the new server\n\n## Step 1: Run the Perch Server Compatibility Test on the new server\n\nThis step makes sure that the new server can run Perch and also checks your database connection details so that you have no problems when setting up the site.\n\nYou will need to know your:\n\n* database server location (it may be localhost or your host may have given you a server URL or IP address)\n* the name of the database\n* your database username and password\n\nDownload the test, upload it to the server and run it. We have a [video](http://docs.grabaperch.com/video/compatibility-test/) detailing all of the possible errors and what they mean. If you need to contact your host to check database details then this is the time to do it – before you have started to deploy your site!\n\n## Step 2: make a copy of your database and transfer it to the new server\n\nI am assuming here that you have phpMyAdmin running locally as described in the tutorial about setting up XAMPP and that your host also has phpMyAdmin. It is likely that this will be accessed via your hosting control panel under databases.\n\n## On the old server\n\nOpen phpMyAdmin locally. In XAMPP go to http://localhost click phpMyAdmin in the sidebar and log in.\n\nSelect your website database in the sidebar. Then Click Export in the navigation.\n\n### Exporting the database\n\nThe defaults of **SQL** and to **download a file** should be all you need. Click Go and save the file to your computer.\n\nThis text file contains all of the information that MySQL needs to fully recreate your database and all of your content on a new server.\n\n### On the new server\n\nLog into phpMyAdmin using the details provided by your host and select the database you are going to use for Perch. This should be the database that gave you a pass when using the Server Compatibility Test.\n\nSelect Import from the Navigation.\n\nBrowse for the file that you just saved from the old server. Set the Character Set to `utf-8`. The other options should be fine to leave as default.\nImport data\n\nHit Go and your database will import, after import you should be able to see all of the tables appear in the sidebar in phpMyAdmin.\n\n## Step 3. Update your config file so that the connection details are correct for the new server\n\nIf you are moving your files from the root of your development site to the root of your live site as suggested then the only file you need to change is your Perch Config file, as it will currently have the database settings for the old server.\n\nYou probably want to keep your development version working so in a text editor copy the following lines:\n\n```php\n    define(\"PERCH_DB_USERNAME\", 'root');\n    define(\"PERCH_DB_PASSWORD\", 'xxxxxx');\n    define(\"PERCH_DB_SERVER\", \"localhost\");\n    define(\"PERCH_DB_DATABASE\", \"db-site1\");\n```\n\nPaste them in the config file below the original lines so they are now listed twice. Change the details in the second set so that you use the MySQL server, database name, username and password for the new server. Then comment out your local ones for now. You can then change it back to keep working on the local server.\n\nYou could also follow the instructions give in our guide to creating a multiple server config file for Perch.\n\n```php\n    /* define(\"PERCH_DB_USERNAME\", 'root');\n    define(\"PERCH_DB_PASSWORD\", 'xxxxxx');\n    define(\"PERCH_DB_SERVER\", \"localhost\");\n    define(\"PERCH_DB_DATABASE\", \"db-site1\"); */\n\n    define(\"PERCH_DB_USERNAME\", 'mysite_username');\n    define(\"PERCH_DB_PASSWORD\", 'xxxxxx');\n    define(\"PERCH_DB_SERVER\", \"localhost\");\n    define(\"PERCH_DB_DATABASE\", \"mysite_databasename\");\n```\n\n## Step 4: Upload all of your files\n\nWith your config file edited all you need to do is upload all of your site files – including the Perch folder – from your old to the new server. All of your content should then be in place and your site is live on the new server.\n\nIf you are moving servers rather than transferring your local copy, remember that you need to move all of the contents of the resources folder as this is where any images and files that your client has uploaded will be.\n\nRemember that you will need to make the resources folder writable on the new server – just as when you first installed Perch – so that file uploads can be placed there.","type":"perch"},{"title":"Installing XAMPP for local development","permalink":"https://docs.grabaperch.com/perch/building/servers/installing-a-local-server-with-xampp/","id":"perch.building.servers.installing-a-local-server-with-xampp","excerpt":"**How can I install a server to run Perch on my computer?**","text":"**How can I install a server to run Perch on my computer?**\n\n## This solution shows you how to get set up to develop locally using XAMPP, a package that installs Apache, PHP and MySQL to create a testing server on your computer.\n\nIf you haven’t worked with PHP and MySQL before using Perch, this tutorial will help you to set up a development environment to easily work with Perch on your own computer.\n\n## A professional development environment\n\nIf you are building sites for clients then your process ideally would work like this:\n\n* You develop your site locally (on your own computer or a shared development server)\n* You show your client the site on a staging server\n* You then deploy the site and all content entered to the live server\n\nPerch allows you to enter these three locations against a license.\n\nWe would suggest that you avoid previewing sites in a subfolder of the live site, and certainly never to actually develop on a live server in this way. By developing in a subfolder of the live site you are creating all of your pages a level up from the root of the site. To go live you then need to move everything up a level. In the case of Perch or any script that needs to know the path from root this is problematic and will leave you needing to fix the site on going live.\n\nYour development environment should mimic the live environment as closely as possible – especially where the location of files is concerned.\n\n## The web and database servers\n\nPerch stores data – the text you enter in the administration area – in a MySQL database and uses PHP to access that data. To work with Perch locally you will need to run a web and database server. This can easily be installed on the computer you use for designing and developing websites, using a packaged application.\n\nI am going to use XAMMP for this write-up as it is available for Mac, Windows and Linux, however there are alternative products that essentially work in the same way.\nStep 1: Download and install XAMMP\n\nGo to: http://www.apachefriends.org/en/xampp.html and click the link for your Operating System.\n\n### Mac Users:\n\nDownload the Universal Binary then open the DMG image and drag the XAMPP folder into Applications.\n\n### Windows Users:\n\nChoose and download the Installer version.\n\nDouble click the installer .exe and step through the install. On the screen XAMPP Options you will asked if you want to install Apache and MySQL as a service. This means that they will start up when you start your computer, if you do a lot of development then you can select this option, if not you will need to start XAMPP from the control panel before using it.\n\n### Mac and Windows:\n\nAt the end of install start the XAMPP Control Panel when prompted.\n\n![XAMPP Control Panel](../img/local-server-with-xampp-xampp_control_panel_1.png)\n\n## Step 2: Start Apache and MySQL\n\nIn the XAMPP Control Panel you should see Apache and MySQL listed. To start using them you need to start the services so click Start on both. If you have a Firewall on your computer you may need to grant permission for these applications.\n\nOnce you have started Apache and MySQL open a web browser and visit `http://localhost` you should see the XAMPP Splash Screen where you can select a language and the next page is a web based control panel for XAMPP.\n\nYou now have a web server running on your computer. There are a few things you should do now.\n\nClick the Security link in the sidebar. You will see that some things are flagged up as insecure in red, below that is a link to fix the security problems. Click that and set a root password for MySQL.\n\nYou can also set a password for the XAMPP directory, however if you have a firewall that prevents incoming connections to your computer and will stop Apache and so on if using a laptop outside your network then you can leave this alone.\n\n## Step 3: Many websites – one computer\n\nIf you only work on one website then you could simply install Perch into the default XAMPP directory and build your site there, accessible at `http://localhost`. However you probably want to be able to work on a number of sites and maintain each development environment in case the client needs some changes.\n\nEach site served from one server is called a VirtualHost, creating VirtualHosts is essentially what shared hosting providers do to run many sites from one server. We’re going to do that now so you can have a host per site. This information should be pretty much correct if you are using XAMMP or having installed Apache in any other way.\n\nOur aim is to create two unique sites, each with their own root directory running at http://site1.local and http://site2.local.\n\nTo create VirtualHosts you need to do three things\n\n* Decide where you want to store the files for each site on your computer\n* Edit the hosts file on your computer\n* Create a VirtualHost in the Apache configuration.\n\n### Storing your files\n\nI usually put my sites inside a folder called Sites, one folder per site. So if I were setting up two Perch sites I might store the files like this.\n\n* Sites/site1\n* Sites/site2\n\nThe folder site1 and site2 will become the root directory for each site – I’d put the perch folder directly into each of those folders.\n\n### The hosts file\n\n* On Windows your hosts file is probably at: C:\\\\windows\\system32\\drivers\\etc\\hosts\n* On a Mac you should find it at: /private/etc/hosts\n\nWhat this file allows you to do is map a domain name to your local computer, so that when you enter that domain name in the browser instead of looking it up externally and trying to find a website out there on the Internet, it looks on the local computer. These domain names can be anything you like, I tend to use clientname.computername so my iMac is called ‘bubble’ and therefore a site for a client named ABC Widgets would be found at abcwidgets.bubble in a web browser. You could also use something like abcwidgets.local. It’s a good idea to use something that shows this is a local site.\n\n**Note that:**\n\n* you need root or administrator privileges to edit this file\n* you must edit it with a plain text editor like Notepad (a code editor should be fine)\n* take a backup before making any changes – just in case!\n\nEdit the hosts file and at the end add a line for each of your sites:\n\n    127.0.0.1 site1.local\n    127.0.0.1 site2.local\n\n![hosts file in Notepad on Windows\t](../img/local-server-with-xampp-hosts.png)\n\n* Save the hosts file.\n* The Apache configuration\n\nInside the xampp folder at `Applications/xampp` or `C:xampp open apache > conf > extra > httpd-vhosts` using the same plain text editor that you used to edit the hosts file.\n\nAt the bottom of this file add the following code:\n\n```php\n    NameVirtualHost *\n\n    <VirtualHost *>\n      DocumentRoot \"C:xampphtdocs\"\n      ServerName localhost\n    </VirtualHost>\n\n    <VirtualHost *>\n      DocumentRoot \"C:Sitessite1\"\n      ServerName site1.local\n      <Directory \"C:Sitessite1\">\n        Order allow,deny\n        Allow from all\n      </Directory>\n    </VirtualHost>\n\n    <VirtualHost *>\n      DocumentRoot \"C:Sitessite2\"\n      ServerName site2.local\n      <Directory \"C:Sitessite2\">\n        Order allow,deny\n        Allow from all\n      </Directory>\n    </VirtualHost>\n```\n\nYou will need to ensure the paths and ServerNames are correct for your computer so here is an explanation of each section of this code.\n\nThe first line we add tells Apache we want to use VirtualHosts:\n\n```php\n    NameVirtualHost *\n```\n\nThe next section maintains http://locahost pointing at the xampp htdocs directory so that you keep your handy XAMPP tools and access to PHPMyAdmin for MySQL.\n\n```php\n    <VirtualHost *>\n      DocumentRoot \"C:xampp\\htdocs\"\n      ServerName localhost\n    </VirtualHost>\n```\n\nWe then add two sections, one for each of our sites. To add a new site you will only need to add another of these sections. Inside `<VirtalHost>` tags we give the location of our files in two places, for DocumentRoot and also within the Directory tag. We also give the ServerName and this should be the same as the name for this site you added to the hosts file.\n\n```php\n    <VirtualHost *>\n      DocumentRoot \"C:Sites\\site1\"\n      ServerName site1.local\n      <Directory \"C:Sites\\site1\">\n        Order allow,deny\n        Allow from all\n      </Directory>\n    </VirtualHost>\n```\n\nSave this file. Now go back to the XAMPP Control Panel and stop and start Apache. Once it has restarted go to your web browser and type in http://site1.local. Unless you have added some files already with an index.php or index.html you will get a forbidden message. However if you put site files – or even just an index.html with the name of the site in it, in each directory you will find you have two individual sites.\n\n## Step 4: Create a database\n\nIf you are going to install Perch then you need a database for Perch to put your content into. To create a database visit `http://localhost` again in your web browser.\n\nIn the sidebar of the XAMPP page, under Tools click PHPMyAdmin. This is a web based tool for managing databases that XAMPP has installed. Usefully, this is also the most common web based tool used by web hosts so it is likely that when you come to move your site live you will also encounter PHPMyAdmin.\n\nLog in with the username root and the password you set as your MySQL root password earlier in this process.\n\nThe initial screen gives you some information about the server, in the panel on the left are databases that are already installed by XAMPP, you can ignore these, we’ll create a new database for Perch to use. You should create a new database for each Perch installation you run locally.\n\nTo create the database click the Databases navigation item at the top of the initial screen.\n\nIn the Create Database section of this page enter the name you would like your database to have (usually you would use the site name as part of this) and select under Collation the option `utf8_general_ci`. This ensures that data stored in the database is stored as `utf8` so you should not have any problems with any special characters entered.\n\nClick Create and you now have a database ready to go.\n\n## Step 5: Test your new setup by running the Perch Compatibility Test\n\nYou should be all set now to develop your sites locally. A good final test will be to use one of our sites plus the database we just created to run the Perch Server Compatibility Test.\n\nDownload the test.\n\nUnzip it and place it into one of your sites – I’m using my site1.\n\nVisit the perch test folder in the site on the server in a web browsers. I have to go to http://site1.local/perchtest. You should see the first screen of the test.\n\nComplete the details. Your server is localhost – a database server running on the same physical computer as the files. Your database is the one you just created – for me db_site1, then add username root and give the root password that you created. Click Next Step and if you have followed these instructions fully you should find you get a Pass.In that case you are all ready to run Perch! Just use the same details that passed the test when installing Perch.\n\n## Quick Reference for adding a new site\n\nThis has all been quite longwinded as we’ve had to install and configure lots of bits to get you up and running. However next time you need to add a new site you can follow these steps.\n\n* Create a folder on your computer for the files\n* Edit your host file to add the site name\n* Edit httpd-vhosts to add the VirtualHost\n* Restart Apache using the XAMPP Control Panel\n* Create a database for your site using PHPMyAdmin","type":"perch"},{"title":"Multiple Server Config Files","permalink":"https://docs.grabaperch.com/perch/building/servers/multiple-server-config/","id":"perch.building.servers.multiple-server-config","excerpt":"**How do I create a config file that will work on multiple servers?**","text":"**How do I create a config file that will work on multiple servers?**\n\nIf you have a local, staging and live version of your Perch site then every time you move your files you have to be careful not to overwrite the config file. This solution explains how to create a file that switches on the hostname, meaning that it is safe to upload to all of your locations.\n\nIf you have a local, staging and live version of your Perch site then every time you move your files you have to be careful not to overwrite the config file. This solution explains how to create a file that switches on the hostname, meaning that it is safe to upload to all of your locations.\n\nThe default Perch config file looks like this:\n\n```php\n    <?php\n    define('PERCH_LICENSE_KEY', 'P21001-XXXXXX-XXXXXX-XXXXXX-XXXXXX');\n\n    define(\"PERCH_DB_USERNAME\", 'root');\n    define(\"PERCH_DB_PASSWORD\", 'xxxxxx');\n    define(\"PERCH_DB_SERVER\", \"localhost\");\n    define(\"PERCH_DB_DATABASE\", \"db-site1\");\n\n    define('PERCH_EMAIL_FROM', 'me@mydomain.com');\n    define('PERCH_EMAIL_FROM_NAME', 'Rachel Andrew');\n\n    define('PERCH_LOGINPATH', '/perch');\n    define('PERCH_PATH', str_replace(DIRECTORY_SEPARATOR.'config', '', dirname(__FILE__)));\n    define('PERCH_CORE', PERCH_PATH.DIRECTORY_SEPARATOR.'core');\n\n\n    define('PERCH_RESFILEPATH', PERCH_PATH . DIRECTORY_SEPARATOR . 'resources');\n    define('PERCH_RESPATH', PERCH_LOGINPATH . '/resources');\n\n    define('PERCH_HTML5', true);\n\n    ?>\n```\n\nThe bits we are concerned with are those which are different from one server to another, essentially these four lines:\n\n```php\n    define(\"PERCH_DB_USERNAME\", 'root');\n    define(\"PERCH_DB_PASSWORD\", 'xxxxxx');\n    define(\"PERCH_DB_SERVER\", \"localhost\");\n    define(\"PERCH_DB_DATABASE\", \"db-site1\");\n```\n\nIdeally things like your DB prefix, location of resources and the name of the Perch folder would be the same in all locations as you should try and replicate the live environment as much as possible.\n\nWe are going to use PHP to look at the hostname of the server we are currently on, and create a switch statement that will call a different set of credentials in depending on what that hostname is.\n\nJust below your license key, using a plain text editor add the following line:\n\n```php\n    $http_host = getenv('HTTP_HOST');\n```\n\nNow we create the switch statement using each of the values you have set up as domains for this license, this should replace the four lines defining this information:\n\n```php\n    switch($http_host)\n    {\n    \tcase('mysite.local') :\n\n    \t\tdefine(\"PERCH_DB_USERNAME\", 'root');\n    \t\tdefine(\"PERCH_DB_PASSWORD\", 'xxxxxx');\n    \t\tdefine(\"PERCH_DB_SERVER\", \"localhost\");\n    \t\tdefine(\"PERCH_DB_DATABASE\", \"db-site1\");\n    \t\tbreak;\n\n    \tcase('mysite.my-staging-server.com') :\n    \t\tdefine(\"PERCH_DB_USERNAME\", 'staging_username');\n    \t\tdefine(\"PERCH_DB_PASSWORD\", 'staging_password');\n    \t\tdefine(\"PERCH_DB_SERVER\", \"localhost\");\n    \t\tdefine(\"PERCH_DB_DATABASE\", \"db-staging-database\");\n    \t\tbreak;\n\n\t    default :\n    \t\tdefine(\"PERCH_DB_USERNAME\", 'mysite_user');\n    \t\tdefine(\"PERCH_DB_PASSWORD\", 'mysite_password');\n    \t\tdefine(\"PERCH_DB_SERVER\", \"localhost\");\n    \t\tdefine(\"PERCH_DB_DATABASE\", \"db-mysite\");\n    \t\tbreak;\n        }\n```\n\nEssentially all the above is saying is that if the value in the parentheses after case matches the variable in $http_host, use this set of definitions. You just need to change the value in parentheses to match your sites.\n\nI would suggest making the live domain default – that way it will be used whether you have www or not in front of the domain, or in the case of having multiple domains pointed to one site.\n\nYou can save the file and – assuming the details are correct – this will now work in each of the locations and you don’t need to worry about overwriting it.","type":"perch"},{"title":"Updating from Perch 1","permalink":"https://docs.grabaperch.com/perch/building/updating/from-perch1/","id":"perch.building.updating.from-perch1","excerpt":"There is a little more work to be done to upgrade to a new major version as Perch 2 includes some larger changes than would be expected in a dot release.","text":"There is a little more work to be done to upgrade to a new major version as Perch 2 includes some larger changes than would be expected in a dot release.\n\n### Step 1: Upgrade to the latest version of Perch 1\n\nWe have tested the upgrader from newer versions of Perch. To be safe, if your Perch 1 version is very out of date upgrade to the latest v.1 release before updating to Perch 2.\n\n### Step 2: Back Up\n\nBack up your site and your MySQL database. That way if anything goes wrong you can always restore things.\n\n### Step 3. Rename your Perch folder\n\nIn your existing site rename the /perch folder – something like perchv1 is fine.\n\n### Step 4: Install Perch\n\nNow install Perch 2 as if you were doing a new installation and log into Perch. Perch creates the new database tables alongside your old ones. So when you first log into Perch you won’t see any content – don’t worry, we get it all back in the next step.\n\n### Step 5: Copy Templates and Resources\n\nCopy your templates and resources from the old (renamed) Perch folder to the new one. So that is the content of `perch/templates` and `perch/resources`\n\n### Step 6: Download and install any official apps\n\n[Official apps](http://grabaperch.com/add-ons/apps/) have all been updated for Perch 2 and the [Upgrade app](http://grabaperch.com/add-ons/apps/upgrade) will upgrade their data as well so you should now download any apps you are using in your site.\n\nInstall each app as if it were a brand new installation following the instructions for each app. Be sure to click on each app in the admin menu and check that you get no errors – as with content they will be empty right now.\n\n### Step 7: Install and run the upgrade app\n\nUpgrading is done using a [Perch app](http://grabaperch.com/add-ons/apps/upgrade) to give you full control of the process.\n\nInstall the [Upgrade app](http://grabaperch.com/add-ons/apps/upgrade) by putting it into `perch/addons/apps`. Visit the app in admin and it will tell you what you have to upgrade. This will always include:\n\n-   Users\n-   Settings\n-   Content\n\nThen any official apps that you have installed.\n\nNow click on each item in the list in turn.\n\nPerch will copy your content from the old tables into the new ones.\n\nAfter upgrading all of your content you should find that the content on your site and within Perch is all as it was. Once you have checked that you are happy, you can remove the upgrade app from `addons/apps`","type":"perch"},{"title":"Using Debug","permalink":"https://docs.grabaperch.com/perch/building/troubleshooting/how-do-i-debug-problems/","id":"perch.building.troubleshooting.how-do-i-debug-problems","excerpt":"**How do I debug problems with templates or custom content?**","text":"**How do I debug problems with templates or custom content?**\n\nPerch has a debug mode that can help you see what Perch is doing internally. This is helpful for troubleshooting your own problems and will give you extra information to give to support when you need help.\n\nTo switch on debug add the following line to your `perch/config/config.php` file.\n\n```html\n    define('PERCH_DEBUG', true);\n```\n\nThis will output debug underneath your admin area. If you also want to show debug at the bottom of pages on your site, add the line above and then add the following to any page where you want to see debug (or into a global footer layout or include).\n\n```html\n    <?php PerchUtil::output_debug(); ?>\n```\n\nThis will only output if you have turned on `PERCH_DEBUG` in your configuration file.\n\n## What can debug show you?\n\nOn the front-end of your site debug will show you the SQL queries that run when a page is loaded. You will be able to see if an SQL error is being thrown - which would explain missing content.\n\nDebug will also show you the template that is being used. It should then be very obvious if - for example - you think Perch should be using a custom template but is instead using one of the defaults due to a typo.\n\nOn apps such as Blog that cache certain parts of the page - such as the category listing you can see if the content came from the cache.\n\nHaving debug turned on during development can save a lot of frustration and help you get support more quickly.","type":"perch"},{"title":"How to get help","permalink":"https://docs.grabaperch.com/perch/building/troubleshooting/how-do-i-get-help/","id":"perch.building.troubleshooting.how-do-i-get-help","excerpt":"**How do I get help?**","text":"**How do I get help?**\n\nIn Perch Support we really want to be able to help you, however many support tickets and forum questions don’t give us enough information to be able to do so quickly.\n\nThis solution explains why we ask the questions we do and gives some suggestions that will help you to get your questions answered and issues resolved as quickly as possible.\n\n## Can you help yourself?\n\nThe quickest way to solve most problems is if you can find an answer in the documentation or related materials. The [Perch documentation](https://docs.grabaperch.com/) is designed to be easy to search – you should find documentation, videos and worked examples in some cases.\n\nWe have started to add troubleshooting sections to some of the docs. This is where we will add issues that we know people sometimes run into.\n\nAnother place to search is the forum, as someone else may have already had and solved the issue.\n\n## Still stuck? Where should you post?\n\nIf you don’t find your answer in the docs, then post to the [forum](https://community.perchcms.com/forum/). If you have an install/upgrade issue or something is broken on your live site then raise a support ticket.\n\nIf you have a question about how to do something, then the forum is the place to post.\n\nThere is no greater priority given to tickets over the forum. If your forum post requires that you give us confidential information we’ll turn it into a private ticket at that point.\n\n## How to write a ticket or forum post that will get help quickly\n\nMany tickets or forum posts start with a long-winded thread where we ask questions to identify what the customer is trying to do and the information about their system – before we can even get to helping. To avoid this, provide as much information up front as you can.\n\n### For tickets\n\nIf your problem is to do with installation or upgrade then please confirm that you have run the Compatibility Test ran on your server and got a pass – this will be the first thing we ask you otherwise.\n\nIf Perch is installed then you will be able to retrieve your Diagnostics Report from the Settings Page in Perch. Post this even if it doesn’t seem relevant.\n\nMake sure that you have upgraded to the latest available version (either the latest Perch 1 or the latest Perch 2 depending on your license) and have checked to see if the problem is still evident after the upgrade.\n\nIt can be helpful if we know the hosting company you are using as we get reports from other customers about hosts and so know that certain hosts have certain issues or setup quirks.\n\nIf you are getting a “blank screen” or “500 Error”. Both of these things mean that there is a PHP error being thrown. We cannot help you until we know what the actual error message is. Your host may be able to help you locate the actual PHP Error log or [this article](http://coding.smashingmagazine.com/2011/11/30/a-guide-to-php-error-messages-for-designers/), written by Rachel Andrew for Smashing magazine can help you get some useful error output.\n\nIf you have tried some steps to solve your problem, or have already references a forum post or part of the docs and it did not help – let us know. Explain:\n\n* What you tried\n* What you expected to happen\n* What actually happened\n\nThis helps us to understand whether your expectations are different to how things work – that might indicate our documentation is unclear for instance.\n\n### For implementation, “how do I…?” posts in the forum\n\nThe clearer your question then the more likely it is that someone can help you.\n\nPlease start a new thread if you have a problem, rather than jumping onto a thread that looks like a similar issue.\n\nBe sure to explain whether you are using an official app or if this is Perch content, and also which version of Perch you are running as the advice may be different if you are using version 1 rather than version 2.\n\nAs with tickets, if you have tried to get something to work and it doesn’t work explaining:\n\n* What you tried\n* What you expected to happen\n* What actually happened\n\nWill help us to understand what you are trying to achieve.\n\n## Show us your code!\n\nIf your problem is that you need to know how to get Perch to generate certain markup, then post the markup you need to generate.\n\nIf you have a template that does not seem to be working as you expect, post the entire template so we can see it.\n\nIf you are setting certain options in a page function, post the entire section of PHP so we can see it.\n\nAgain, if you are doing something that causes a blank screen or 500 error we need to know the actual error to help. If there is an obvious mistake in your PHP then we are likely to be able to spot it but, in general, if you can provide a PHP error message that will get your problem solved very quickly.","type":"perch"},{"title":"Step by step troubleshooting","permalink":"https://docs.grabaperch.com/perch/building/troubleshooting/tips/","id":"perch.building.troubleshooting.tips","excerpt":"Perch Support happens in our [forum](https://community.perchcms.com/forum/). Before posting check the following common issues that people encounter, and details of how you can get help quickly.","text":"Perch Support happens in our [forum](https://community.perchcms.com/forum/). Before posting check the following common issues that people encounter, and details of how you can get help quickly.\n\n- [Is Perch and all Add-ons up to date?](#uptodate)\n- [Try Perch Debug Mode](#debug)\n- [Will x Work?](#willitwork)\n- [Try a documentation search](#searchdocs)\n- [Try a forum search](#searchforum)\n- [I have a blank page / white screen / 500 error / cut off HTML output](#blankpage)\n- [I can't login](#cantlogin)\n- [I have a PHP error](#phperror)\n- [My assets are not uploading](#uploadassets)\n- [My images and not resizing / cropping](#resizeimages)\n- [My blog categories are not updating](#blogcategories)\n- [I have changed my template but the website isn’t showing the change](#caching)\n- [Perch isn't using the right template](#template)\n- [None of these helped!](#nohelp)\n\n## First things first\n\n### Is Perch and all Add-ons up to date? {#uptodate}\n\nIf you post to the forum and your software is out of date, the first thing we will do is ask you to update.\n\nTo see which version of Perch you are using look at your Diagnostics Report in Perch (under Settings). The versions of Add-ons are also listed there.\n\nIf you are not running the latest version, update and see if you still have the problem.\n\n### Try Perch Debug Mode {#debug}\n\nPerch has a debug mode. It can show you things like which template your content is using. The messages there may well help you solve your problem. If they don’t they will at least help us to help you.\n\n[This article explains how to enable debug](https://solutions.grabaperch.com/development/how-do-i-debug-problems).\n\n### Will x work? {#willitwork}\n\nWe get a lot of posts that just ask us if doing something in a template is going to work. The best way to find out is to try it for yourself - rather than wait potentially a few hours for us to try it for you.\n\nYou won’t break anything, try it and see what happens. It’s the best way to learn.\n\n### Have you searched the documentation? {#searchdocs}\n\nEvery day we reply to queries by going to the Perch documentation, searching for the question that was posted to the forum and then replying with the link.\n\nWe are always trying to improve the search of the docs so try searching for phrases that might describe your problem - you might just find the answer.\n\n### Have you searched the forum? {#searchforum}\n\nThe forum can also be searched. Someone else may have asked the same question and you can use our answer to them.\n\n## I have a: {#blankpage}\n\n- Blank page / white screen\n- A 500 error\n- HTML output that seems to “cut off”\n\nAny of the above indicate that you have a PHP error. If you post to the forum which any of the above we will ask you to take a look in your error log and find the error.\n\nThe error log you need is the PHP Error Log - this is not likely to be the same as the web server access log (the one where you see 404 errors etc.).\n\n[This article explains more able how to find your error log](https://www.smashingmagazine.com/2011/11/a-guide-to-php-error-messages-for-designers/).\n\nIf you cannot access the log then you need to ask your host, we are going to find it hard to help you if we can’t see the actual error. So do this first before posting and it will save you time.\n\n## I can’t login {#cantlogin}\n\nYou try to log into Perch and are immediately bounced back to the login page with a query string that looks like `?r=%2Fperch%2Fcore%2Fapps%2Fcontent%2F`.\n\nThis usually means a problem with Sessions on your server. Either you need to enable PHP Sessions in some way, or if this was previously working it may be that your Sessions folder is full. Either way this is something you will need to speak to you host about.\n\n## I have a PHP error! {#phperror}\n\nPHP errors may be printed directly to the page, or they may be in the error log mentioned in the last step.\n\n### Look at the first error\n\nYou often get a whole chain of errors, the first one is the most important (the others may be caused by that first error).\n\nThere are some errors that you are likely to see, which fall into a few classes of issues.\n\n### Mismatched Perch and Apps\n\n`PHP Catchable fatal error:  Argument 2 passed to PerchFieldType::__construct() must be an instance of PerchXMLTag`\n\nIf you see something like this and recently updated Perch it is likely the App you are using needs updating to match.\n\n### Permissions\n\n`Warning: move_uploaded_file(/home/mysite/public_html/upload/my_cat.jpg) [function.move-uploaded-file]: failed to open stream: Permission denied in /path/to/script.php on line 49`\n\nFor some functionality - such as uploading a file or image - Perch will need PHP to be able to write files. If your error says **Permission denied** then you need to find out how to set permissions for PHP to be able to create files.\n\nIf you don’t know how to do this for your hosting then your host would be the place to raise a support ticket.\n\n### Headers\n\n`Warning: Cannot modify header information - headers already sent by (output started at /path/to/file.php:12) in /this/file.php on line 28`\n\nTypically you will see this when doing a redirect of some sort. So when logging in a Member with the Members App or redirecting a user to checkout in Shop.\n\nAn HTTP response includes headers and a body. In those headers, you can set things like a Location header (a redirect), cookies, all sorts.\n\nThe body is typically the content of the file you're sending - so in our case an HTML document.\n\nThe trick is, once you stop sending the headers and start sending the body, you can't go back and set new headers. Therefore if you want to do anything that involves setting a header, you need to do it before the page content is output.\n\nYou will usually see this error if:\n\n1. You have white space above the Perch runtime include\n2. You have white space in your config file\n3. Your editor is saving files with a BOM (Byte Order Mark)\n4. You're using a page function that redirects the user, but have including HTML output above it\n\n## Database connection errors\n\nPerch needs to connect to your database and needs to have permissions to insert, edit and delete data and also to create and update tables.\n\n### Installing Perch\n\nYou can’t install Perch without being able to connect to the database so if you are seeing database connection problems in a new install try the [Perch Compatibility Test](https://grabaperch.com/compat/perch_compatibility_test.zip) or [Runway Compatibility Test](https://grabaperch.com/compat/runway_compatibility_test.zip) first and get that working. Then, use the same details when installing Perch.\n\nPerch needs either PDO or MySQLi installed in order to connect to your database.\n\n### Database problems with an existing site\n\nIf a live site suddenly stops connecting to the database and you haven’t changed anything this will *not have anything to do with Perch*. You should contact your host in this instance.\n\n### Allowed Memory Size Exhausted\n\n`Fatal error: Allowed memory size of 67108864 bytes exhausted (tried to allocate 17472 bytes) in /home/mysite/public_html/lib/Image.class.php on line 198`\n\nPHP has run out of available memory.\n\nYou might see this if you are trying to upload and process large images - see the details about Assets in this document for more help.\n\n### Old PHP\n\nYou will see errors if you try to run Perch or Runway on hosting  with very out of date PHP. Check the [requirements](https://grabaperch.com/requirements) here and use the Compatibility Test to make sure your hosting is capable.\n\n## Any error not mentioned here\n\nIf you have some unusual error that we don’t often see then all we will do is stick it into Google to see what it is. You can do that too!\n\nIt doesn’t matter if the advice refers to another PHP CMS, they all use the same types of hosting and so the errors are likely to be due to common reasons. Most PHP errors are not going to be something in Perch code as otherwise we would be seeing 100s of the same thing in the forum and would have fixed it. So most likely you will find something you need to raise with your host. If you aren’t sure we are happy to advise in the forums but there isn’t a lot we can do about server related issues outside of Perch.\n\n## My assets are not uploading {#uploadassets}\n\nWe see a range of issues with assets. The vast majority are due to hosting problems.\n\nThe first thing to check is whether anything can be uploaded via assets. Use a very small image with a tiny file size, if uploaded from a Perch template tag with a type of image remove anything that might resize the image (such as width and height attributes) we are just testing if we can upload an image at this point.\n\nIf you small image uploads fine, but your large image does not then the likely problem is that the PHP max_upload _ size is lower than the size of your image. You can see the limit in your Diagnostics report and will need to ask your host how to increase that limit.\n\nIf even a very small image does not upload then it is likely that PHP does not have permission to write to the resources folder or bucket you are trying to upload to. It may be that you need to speak to your host.\n\nIf images upload fine of the size required but the failure happens when trying to resize the image see the next step.\n\n## My images are not resizing/cropping {#resizeimages}\n\nTo process images we need either GD or ImageMagick on the server. You can see if you have one or the other in your Diagnostics Report. If you do not have either ask your host to enable one of them.\n\nIf you have one of these and are still having a problem try to resize a very small and simple image. If that works but larger and more complex images do not then the issue is that PHP is running out of available memory. This is something that can be increased in theory in your PHP configuration but you may gif that PHP is configured with plenty of memory and this issue still happens. This is due to the fact on shared hosting other sites may well be using up the memory, leaving not enough to do memory heavy operations. This isn’t something we can fix in Perch - if you need to process large images you will need to use hosting with better resources to do so.\n\n## My blog categories are not updating {#blogcategories}\n\nPerch caches some more expensive operations such as generating blog category lists. This can be a nuisance during development. If you set PERCH_PRODUCTION_MODE to `PERCH_PRODUCTION` in your config then they will not cache and you should see changes immediately.\n\n\n## I have changed my template but the website isn’t showing the change {#caching}\n\nTo keep your site nice and fast we cache the output of your template plus the content you enter when the content is saved. If you change your template you need to go hit save on that region in admin.\n\nWe also have a Republish All button you can click to republish all regions after making a change.\n\n## Perch is not using the right template {#template}\n\nFirst enable Perch Debug and see which template Perch is using for your content.\n\nIf this is in an App make sure that you have copied the App templates from the add-on install into perch/templates/app_name_ as described in the docs.\n\n## Nothing here helped! {#nohelp}\n\nThis is a great time to [post to support](https://community.perchcms.com/forum/) as you have checked some of the common issues people have.\n\nBefore posting to support make sure that you can demonstrate your problem in the simplest possible way. For template issues you should remove as much code as possible to still demonstrate the issue. This process of creating a *reduced test case* is important for any debugging. Whether you have a Perch problem or something in your CSS, by removing anything that doesn’t change the problem you make it much easier for someone to help you. In many cases during the process of creating a reduced test case you will find the problem yourself.\n\nPosting hundreds of lines of code to the forum means that you are asking the person helping you to do the work of creating a test case for you. Read [more about reduced test cases on CSS Tricks](https://css-tricks.com/reduced-test-cases/) - getting good at creating these will speed up all of your work, it's the best debugging skill you will learn!\n\nWhen you post to the forum make sure your post includes:\n\n1. Your Short Diagnostics Report\n2. An explanation of what you are trying to do\n3. If an error is occurring include the error\n4. If something other than what you expected has happened explain what you expected **as well as** what actually happens.\n5. Any code - as a reduced test case - to help us reproduce the problem\n6. If you have already ruled out any of the things mentioned here or performed any debugging steps - tell us! That will save us asking again.\n\nPosts that include all of the above are very likely to get an answer right away - getting you back to work. If we have to ask repeated questions to get the information, then it will take a lot longer as you won’t be the only person we are helping. So help us to help you and we can get you back to your project quickly.","type":"perch"},{"title":"Blank Page","permalink":"https://docs.grabaperch.com/perch/building/troubleshooting/why-am-i-getting-a-blank-page/","id":"perch.building.troubleshooting.why-am-i-getting-a-blank-page","excerpt":"**Why am I getting a blank page?**","text":"**Why am I getting a blank page?**\n\nThe dreaded White Screen of Death means you have a PHP error that is not being output to the screen. This solution explains what to do.\n\nIf you try to load a PHP page and get no HTML output at all - the **white screen of death** then PHP is erroring before and output is written. You can check to see if this is the case by Viewing Source. The View Source should be completely empty as well.\n\nIf this is happening then you have a PHP Error. The quickest way to solve the problem is to find the error, which will be located in your PHP error log. If you are using MAMP, XAMPP or similar locally then check the documentation to find the location of your error log.\n\nOn a live server you may need to ask your host the location of your error log. You can often configure error logging yourself, this [Smashing Magazine article](http://coding.smashingmagazine.com/2011/11/30/a-guide-to-php-error-messages-for-designers/) has information on how to do that.\n\nOnce you have access to the log, reload the problematic page and look at the most recent error. The most common reasons for a white screen of death in Perch are as follows.\n\n## Errors relating to missing files\n\nYou will either see an error saying something like:\n\n```php\n    PHP Warning:  include(perch/runtime.php): failed to open stream: No such file or directory in /home/mysite/public_html/test.php on line 2\n```\n\nOr, you will get errors about undefined functions.\n\nThis usually means that the Perch runtime is not included with a correct path or you are trying, for example, to use the Blog app functions but did not include the blog runtime in apps.php.\n\n## Errors relating to permissions\n\nHosts will require different permissions for PHP files, and for folders where files may be uploaded. If you use the wrong permissions you will see errors that say **Permission Denied**. If you are seeing these errors you need to speak to your host and check the permissions you need to use.\n\n## If all else fails bring your error to support\n\nWe'll be very pleased to see a support ticket with an actual error as that is usually something we can help with very quickly. So if you can't figure out why you are getting the error or you do not understand the reply from your host then raise a ticket and we'll get you sorted.","type":"perch"},{"title":"Assets","permalink":"https://docs.grabaperch.com/perch/control-panel/assets/","id":"perch.control-panel.assets","excerpt":"Assets is a Core Perch App that was first included in Perch 2.5. It provides a central place for Assets to be stored and enables their reuse around the site.","text":"Assets is a Core Perch App that was first included in Perch 2.5. It provides a central place for Assets to be stored and enables their reuse around the site.\n\n## Privileges for Asset Management\n\nWhen configuring a Role you can select to give that Role the ability to upload new Assets. In some circumstances you might want to populate a site with images and just allow editors to select from those images rather than upload new ones, for example.\n\n## Asset removal\n\nAssets stay in the library for one of the below three reasons:\n\n* The Asset is in use in content - \"in use\" does not mean \"displaying on the site\". It could be that the Asset is in an old revision and so maintained to enable that Region to be rolled back.\n* When uploading the Asset you (or the editor) selected \"Mark as Library Asset\" so the Asset remains as one to be selected from.\n* The Asset has been uploaded for less than 24 hours and so has not been cleaned up yet.\n\nAfter 24 hours assets that are not marked as Library Assets and not in use will be deleted from disk.\n\nIf you have Admin Privileges you can forcibly delete Assets by going to the individual Asset and clicking Delete. **This may result in broken images on your site or a broken and confusing rollback history** so we would suggest you do not do this unless you absolutely have to ensure a file is gone - for legal reasons for example.\n\n## Asset Thumbnails\n\nPerch creates a nice thumbnail preview of images but it is also possible to have a thumbnail of PDF files and even video automatically created.\n\nThumbnailing of non-image assets does require that you have certain libraries installed on your server. These are reasonably common, and if you have control of your hosting are a simple install with packages for most operating systems. These are as follows:\n\n* [ImageMagick](http://www.imagemagick.org/) – even if you use GD for image thumbnailing we need ImageMagick available for none-image Assets.\n* ghostscript – for PDF files (we’ve found the libmagickwand-dev package on Debian/Ubuntu to be the easiest way to get this working)\n* [ffmpeg](http://sourceforge.net/projects/ffmpeg-php/) – for video\n\nIf you don’t have these things then Assets will still work fine for you. You’ll just not get the thumbnails.\n\nImageMagick creates thumbnails by passing out the work to other software on the server that understands the file format in question. It doesn’t know how to deal with things like PDFs, but it knows a man who can, so it silently subcontracts that job out to ghostscript behind the scenes. In the same way, it delegates the job of thumbnailing video files to ffmpeg. Using this technique it should be able to thumbnail almost anything, provided a delegate has been configured that understands how to make an image from that type of file.\n\nIn common with everything we do at Perch, we assume that you have the bare minimum of things available to you and then enhance the functionality if you do happen to have the libraries required. However this is a nice little feature when you do have support and if you are developing a site that uses a lot of PDFs for example, it might be worth specifying hosting that will give you the ability to thumbnail them.","type":"perch"},{"title":"Branding","permalink":"https://docs.grabaperch.com/perch/control-panel/branding/","id":"perch.control-panel.branding","excerpt":"You can easily brand Perch with your own branding or that of your client. If you manage several Perch sites it can be helpful if the admin is branded so you know which site you are logging into!","text":"You can easily brand Perch with your own branding or that of your client. If you manage several Perch sites it can be helpful if the admin is branded so you know which site you are logging into!\n\n## Logo and colours\n\nIn Settings upload a logo. This will then display on the light gray sidebar in the admin and also above the login box.\n\nYou can also change the colour of the header bar and switch the text if you are using a dark colour.\n\n## Remove Perch branding\n\nIf you would rather hide the fact you are using Perch then check “Hide Perch Branding”. That will remove mention of Perch and hide the link to edgeofmyseat.com.\n\n## More extensive customization\n\nWe have an official way for you to import your own CSS and JavaScript into the admin. This means you will not need to redo your changes when upgrading. See [UI Customizations](/docs/customizing-perch/ui-customizations/) for more details.","type":"perch"},{"title":"Customizing","permalink":"https://docs.grabaperch.com/perch/control-panel/customizing/","id":"perch.control-panel.customizing","excerpt":"The Perch Control Panel can be customized in a variety of ways, from installing editors and apps, to adding your own CSS and JavaScript.","text":"The Perch Control Panel can be customized in a variety of ways, from installing editors and apps, to adding your own CSS and JavaScript.\n\nIf you simply want to add your own logo, or change the colours of the admin UI then this can be achieved via the Control Panel itself – see the section in these docs about [Branding](/perch/control-panel/branding).\n\nIf you want to customize the Control Panel further – perhaps to add some JavaScript or make more extensive CSS changes then we have provide a method to inject your own UI Customizations, without having to re-do the work each time you upgrade Perch.\n\n## How to use\n\nUI customizations are made by placing your files in the `perch/addons/plugins/ui` folder. Depending on your installation, this folder may or may not exist. You can create it if it's not there.\n\nThis folder includes a special file `_config.inc`. This file gets included at the bottom of all Perch control panel pages, at a point where all existing JavaScript and CSS has already been applied. The jQuery JavaScript library is available.\n\nEdit the `_config.inc` file to add a link to your own files.\n\n```html\n<link rel=\"stylesheet\" href=\"/perch/addons/plugins/ui/my_css_file.css\">\n<script src=\"/perch/addons/plugins/ui/my_javascript_file.js\"></script>\n```\n\nThis really just provides a mechanism to hook your own files into the interface without needing to edit any core Perch files. This means that your changes won’t need to be re-done each time you update Perch. However, be sure to test your changes after updating Perch in case anything that affects you has changed.\n\n(We appreciate that the end of the page is not the most super-ideal place to be adding new CSS files. If making big changes where this could be an issue, it may be better to look at implementing your code [with an app](/api) instead.)","type":"perch"},{"title":"Dashboard","permalink":"https://docs.grabaperch.com/perch/control-panel/dashboard/","id":"perch.control-panel.dashboard","excerpt":"The default view when logging into Perch is to see a list of your content organized by the Page it displays on. However for more complex sites we also have the Dashboard.","text":"The default view when logging into Perch is to see a list of your content organized by the Page it displays on. However for more complex sites we also have the Dashboard.\n\nTo enable the Dashboard check the Enable Dashboard Setting in the settings area of the Perch Admin area.\n\nMost apps will place a Widget on the Dashboard, what content these display depends on the app.\n\nThere are currently Dashboard Widgets available for\n[MailChimp](https://grabaperch.com/add-ons/dashboard/mailchimp),\n[Campaign Monitor](https://grabaperch.com/add-ons/dashboard/campaign-monitor) and more.\n\n## Adding additional Widgets\n\n\nWe have some Dashboard Widgets that are simply standalone widgets without any other app functionality. For example a widget that displays the Perch updates feed, and one that links to your Campaign Monitor account to display stats for a list.\n\nThese are installed in the same way as other apps, by placing the folder into **perch/addons/apps** and then reloading the dashboard in your browser. Any Settings you need to configure will then appear on the Settings Page in Perch.\n\n## Creating your own Widgets\n\nWidgets are simple to create and can be as simple as some static HTML that you would like to display on the Dashboard for your clients. See the [dashboard documentation](/api/dashboard) and also a tutorial explaining how to get started by [creating an HTML only widget](/solutions/create-a-dashboard-widget).","type":"perch"},{"title":"Drafts and Preview","permalink":"https://docs.grabaperch.com/perch/control-panel/drafts-and-preview/","id":"perch.control-panel.drafts-and-preview","excerpt":"When editing content in Perch, an editor might like to check their work before publishing to the site.","text":"When editing content in Perch, an editor might like to check their work before publishing to the site.\n\nThey can do this before saving by checking the **Save as a draft**\ncheckbox.\n\n![Save as a draft](https://static.grabaperch.com/docs/images/Screen_Shot_2013_08_12_at_102123.png)\n\nWhen working in a draft his is highlighted by a bar across the top of the editor. You can Preview your work by clicking Preview. This will launch the relevant page in a new window or tab so you can check.\n\n![Preview](https://static.grabaperch.com/docs/images/Screen_Shot_2013_08_12_at_101526.png)\n\n## Undo\n\nYou can also click Undo to revert changes that you have made. This gives content editors confidence when editing their content that they are not about to make a mistake that is irreversible.\n\nWe find that when content editors know they can step back if things go wrong, they are more likely to have confidence in editing their own content – leading to fewer calls to their web designer for help!","type":"perch"},{"title":"Diagnostics Report","permalink":"https://docs.grabaperch.com/perch/control-panel/diagnostics-report/","id":"perch.control-panel.diagnostics-report","excerpt":"The Perch Control panel contains a Diagnostics Report full of information about your installation of Perch and the hosting environment you have installed it on.","text":"The Perch Control panel contains a Diagnostics Report full of information about your installation of Perch and the hosting environment you have installed it on.\n\nIf you raise a support ticket you should always include this report as it gives us the information we need to help you. However, you may well find the report useful to debug your own issues.\n\n## Where is the Diagnostic Report?\n\nYou can find the report under Settings in Perch. From Perch 2.5 we display a short report on the first page, which contaisn the information that we most often need to help you in the forum.\n\nYou can view the full report from this page. The full report is split into two sections, the first shows things about Perch, the second things about your hosting environment.\n\n## Perch Information\n\nThe information here is from your install of Perch, these are things that you can change based on how you have installed Perch.\n\n### Perch and Apps Version\n\nThe version of Perch you are currently running can be found at the top of the report. Two lines down are all the installed apps and their versions.\n\nYou can then check our News page to see if there are newer versions to update to. We would always encourage you to update relatively frequently as releases include any bugs or issues that have been reported as well as enhancements and features.\n\n### App runtimes\n\nThese are the runtimes you have linked in. A common support request is when an App doesn’t work on the front-end of your site – usually that is because the relevant runtime is not linked, so you can check that here.\n\n### Other settings and constants\n\nBelow this are the values for a range of settings and constants that Perch uses. These can be useful if you are experiencing a problem but most of the time you won’t need to worry about these.\n\n## Hosting Settings\n\nThe information in this setting relates to your hosting. These are things that you can’t change from within Perch and will rely on your changing something about your hosting or raising a ticket with your host. Some of the more useful things are highlighted below.\n\n### Versions of PHP and MySQL\n\nYou can check the versions of PHP and MySQL at the top of this section. If you are running PHP 5.2 or MySQL 4.1 we would advise you to upgrade or ask your host to move you to an account with newer software.\n\n### Images and uploads\n\nThe next section is important if you want to upload files and resize images.\n\n```\nGD: Yes\nImageMagick: No\nPHP max upload size: 16M\nPHP max form post size: 16M\nPHP memory limit: 128M\nTotal max uploadable file size: 16M\nResource folder writeable: Yes\n```\n\nTo be able to upload files and images you need to have PHP configured to allow uploads and allow uploads of a reasonable size. Many hosts default this to 2MB, too small for images coming out of digital cameras these days.\n\nTo process images, for example to resize them, you also need a reasonable amount of memory. It should be noted that even if you have a good amount of memory detailed here, it may not be available to you if you are on shared hosting, as resources are shared between all users of the hardware.\n\nPerch uses one or other of the two most popular image libraries for processing images (GD and ImageMagick). Whether these are installed is detailed at the top of this section. It doesn’t matter which you have –\nif you have neither then the Compatibility Test will have told you this and you will be able to upload, but not process images.","type":"perch"},{"title":"Editing Shortcuts","permalink":"https://docs.grabaperch.com/perch/control-panel/editing-shortcuts/","id":"perch.control-panel.editing-shortcuts","excerpt":"Perch 2.4 introduced an option on the Settings page called *Ctrl-E to Edit*. Once switched on, this enables you to browse your site, and then hit the Ctrl-E key combination to jump right into the Perch edit screen for the current page.","text":"Perch 2.4 introduced an option on the Settings page called *Ctrl-E to Edit*. Once switched on, this enables you to browse your site, and then hit the Ctrl-E key combination to jump right into the Perch edit screen for the current page.\n\nThis is a good timesaver, and a nice alternative to browsing through your site hierarchy in the Pages list.\n\n## Enabling Ctrl-E to Edit\n\nThere are two things you need to do to have this working:\n\n-   Enable the option on the Settings page\n-   Add `perch_get_javascript();` to the bottom of your site pages, if\n    you’re not using it already. ([docs](/docs/feathers/))\n\n### A note on how the security works\n\nThis all might sound alarming. Don’t worry – this doesn’t change the security of your site.\n\nThe *Ctrl-E to Edit* JavaScript only gets added to your pages for users who have logged into Perch. They have to log into Perch at least once since the option has been enabled to be able to use the functionality. (We track them with a cookie.)\n\nOnce the JavaScript has been added to the page, all it does is redirect the user to that page’s edit URL when they hit the key combination. They still need to be able to log into Perch just as before. This feature does not lessen the security of your site in any way.\n\n\n## Navigational shortcuts\n\nPerch and Runway define a number of keyboard shortcuts that you can use to more efficiently navigate around the control panel. They're not necessary, but can speed up your workflow once you learn a few.\n\n### Enabling shortcuts\n\nMost of the keyboard shortcuts aren't enabled by default. You need to switch them on under Settings by checking the box alongside \"Enable keyboard shortcuts\".\n\nThe excption is the default _save_ shortcut, which is always enabled on pages with forms. To submit the current form, use `Cmd-S` on a Mac and `Ctrl-S` on Windows.\n\n### Available shortcuts\n\nThe following navigational shortcuts are available once shortcuts are enabled. They are all multiple key sequences starting with `g` for _go_. To jump to the page listing, for example, you would press the `g` key followed by the `p` key.\n\nShortcuts are disabled while using a form field.\n\n| Key sequence | Navigates to |\n|--|--|\n| `g p` | Page listing |\n| `g t` | Category sets (T for _taxonomy_) |\n| `g c` | Collections listing (Runway) |\n| `g r` | Routes listing (Runway) |\n| `g s` | Settings |\n| `g d r` | Diagnostics report |\n| `g u` | Users listing |\n| `g m p` | Master pages listing |\n| `g a` | Assets |","type":"perch"},{"title":"Users and Roles","permalink":"https://docs.grabaperch.com/perch/control-panel/users-and-roles/","id":"perch.control-panel.users-and-roles","excerpt":"You can control who can edit what in your Perch site by way of our Users and Roles system.","text":"You can control who can edit what in your Perch site by way of our Users and Roles system.\n\nIn a default Perch install we create two roles. An Admin Role with the ability to fully manage the system and an Editor Role. Users given the Editor Role can edit content but not do things such as delete regions and choose a new template. The Editor Role essentially gives a set of permissions that most people would want content editors to have.\n\nYou can edit the default Role privileges to add or remove options.\n\n## Creating a Role\n\nYou can also create specific Roles with privileges. If you have installed the Blog App and want to create a new user who can post to the Blog you would create a new Role – perhaps called “Blogger”, and check the options under Blog that you want to give them access to. Then create your user or users and give them the new Blogger role.\n\n## Many Users can have the same Role – or you can create a Role per User\n\nThe concept of Roles and Users is more flexible than assign privileges directly to a user. It means that if you have lots of users set up who can do a certain set of actions and you then want to enable an extra action – perhaps due to installing a new add-on – you only need change the Role privileges and not every user.\n\nIf you want to develop a system whereby 10 users can all edit their own page then you can achieve that by creating a Role per user.\n\n## Selecting which Roles can edit specific content\n\nOnce you have created a Role, go to any Perch Content and Select Region Options. In the Permissions section you will see your Roles listed. The default is Everyone. If you only want this to be editable by a particular Role or Roles change that selection.\n\n## Role Actions\n\nBy default, when you create a new Role all Perch Content Regions will be set to Everyone as described above. Sometimes you will want to create a new Role that only has access to editing one area of the site or some specific content.\n\nIn order that you do not have to go around your entire site deselecting the Everyone permission we have added Role Actions.\n\nGo to Users > Roles and select the Role you want to perform an action on. Click the Actions tab and you can there Revoke all privileges – this in effect removes the Everyone flag on all regions if set.\n\nYou can then go into the content you wish to allow this role to edit and give them access.","type":"perch"},{"title":"Region Options","permalink":"https://docs.grabaperch.com/perch/control-panel/region-options/","id":"perch.control-panel.region-options","excerpt":"After adding a Perch Region to a page, and selecting a template in the Control Panel, there are other ways to configure your Region. You do this from inside the Region by clicking Region Options.","text":"After adding a Perch Region to a page, and selecting a template in the Control Panel, there are other ways to configure your Region. You do this from inside the Region by clicking Region Options.\n\nThe default settings for a Region, unless you selected “Allow Multiples”\nwhen selecting the template are as in the screenshot above. We assume just one item can be added to the Region and that it is not shared.\n\nWe also assume you want it in the search results and that everyone can edit it.\n\nWe will cover\n[Sharing](/docs/control-panel/region-options/shared-content) and\n[Multiple Item Regions](/docs/control-panel/region-options/multiple-item-regions) on their own Pages. The other settings are explained below.\n\n\n## Join title fields with\n\nIf you use the [title attribute](/docs/templates/attributes/title) on a perch content tag in your template, this title will be displayed in admin as the title for the region. This is especially useful when editing a multiple item region in List Detail mode.\n\nIf you give multiple items in one template a title we will display all of them, and you can set here a character, such as a space or hyphen to separate them.\n\n## Search\n\nYou can exclude regions from appearing in search by unchecking this box.\n\nIf the Region is shared or used in various places with perch_content_custom() you can set a URL here for search to use when linking to this content.\n\n## Permissions\n\nYou can give permission to any of your Roles here to edit this content.","type":"perch"},{"title":"Multiple Item Regions","permalink":"https://docs.grabaperch.com/perch/control-panel/region-options/multiple-item-regions/","id":"perch.control-panel.region-options.multiple-item-regions","excerpt":"Repeating or Multiple Item Regions are Regions where you can add more than one item. So if you have a template that contains a title and some text the content editor could add as many of these items as they would like.","text":"Repeating or Multiple Item Regions are Regions where you can add more than one item. So if you have a template that contains a title and some text the content editor could add as many of these items as they would like.\n\nYou can set up a Region to allow multiple items when you initially assign the template or you can check the **Allow multiple items**\ncheckbox in Region Options.\n\nIf an item allows multiple items then you will get some additional options under Region Options for that region.\n\nThere are two ways to edit a multiple item region in Perch. This reflects the different types of content they may contain.\n\n## All on one page\n\nIf you check **Edit all on one page** in Region Options then you will edit everything on one page. This is best if the region contains only a couple of small fields – for example you are using it to manage a list.\n\n## List Detail mode\n\nThe alternative is list detail mode. In this mode each instance of the region can be edited on a different page. When going to that Region the editor will see a list of the contents and click the one they want to edit. This is best for Regions that contain a fairly complex or large template.\n\nIn your site is is likely that you will have both modes in use for different templates.\n\nIf using List Detail mode there is an extra setting you can use for more complex templates. You can select any columns you would like to appear in the initial list to help the editor identify the correct item to edit. Set this up as the value for **Item list column IDs** in Region Options.\n\n## Display\n\nYou can set some basic display options here, such as how the items should be sorted and whether to only display a certain number of items.\n\nTo get more control over the display of items take a look at [perch_content_custom](/docs/content/perch-content-custom/), however many regions on your site will be able to be displayed with these basic settings.","type":"perch"},{"title":"Shared Content","permalink":"https://docs.grabaperch.com/perch/control-panel/region-options/shared-content/","id":"perch.control-panel.region-options.shared-content","excerpt":"On most sites there is content that appears in a number of places. For example, contact information might appear in the footer of every page and on the contact page.","text":"On most sites there is content that appears in a number of places. For example, contact information might appear in the footer of every page and on the contact page.\n\nTo save your editors needing to duplicate that content, you can set content as being shared by checking the **Share across all pages** checkbox in Region Options.\n\nOnce you have done this the Region displays at the top of the content listing in Perch, so that content editors know that changing it in one place will change it everywhere.\n\nTo reuse the Region in your pages simply add a Region with the same name as the Region you have just shared to any page you would like it to appear on. This process is demonstrated in our video about [Shared Regions](/video/v/shared-regions/).","type":"perch"},{"title":"Development and Workflow Tips","permalink":"https://docs.grabaperch.com/perch/getting-started/development-tips/","id":"perch.getting-started.development-tips","excerpt":"Perch has been designed to fit in with your workflow and site structure rather than dictate how you build websites. Perch installations range from the very simple with just a few Regions made editable to larger content driven websites. We have a few suggestions that can make working with Perch easier - these are mostly just good development practices rather than anything Perch specific.","text":"Perch has been designed to fit in with your workflow and site structure rather than dictate how you build websites. Perch installations range from the very simple with just a few Regions made editable to larger content driven websites. We have a few suggestions that can make working with Perch easier - these are mostly just good development practices rather than anything Perch specific.\n\n## Avoid developing directly on the live server\n\nIt is straightforward to set up a local PHP development environment on your own computer, and there are a range of ways you can do so.\n\n- More information about local PHP and MySQL installs\n- How to move a Perch site\n\n## Keep your site root the same across all environments\n\nIf the Perch folder will live at `/perch`, so right inside the root of your site when you make the site live then you should also develop and stage with the folder in that location. The aim of development and staging environments is that they mirror you live environment as closely as possible. Moving the site root around means you will have to do more work on going live rather than just deploying your files and database.\n\nFor your local setup find out how to create virtualhosts, as this will allow you to run lots of different sites on your computer for testing all with their own site root. When staging, point a subdomain to the temporary hosting. Again, keeping root in the same place, rather than putting the new site into a subfolder.\n\n## Paths to images and CSS\n\nWhen using layouts and Master Page templates you will want to reference your CSS, JavaScript and any images or pages not managed by Perch from the root of the site. For example rather than:\n\n```html\n<link href=\"../css/styles.css\" rel=\"stylesheet\">\n```\n\nUse the forward slash right at the start of the path. This makes the path root relative and the link will be correct no matter where you are in the structure.\n\n```html\n<link href=\"/css/styles.css\" rel=\"stylesheet\">\n```\n\nAgain this relies on you not developing in such a way that you do not move your site root around.\n\nIt is worth noting that you cannot reference PHP includes in this way. They either need to be referenced in a way that is relative to the page they are on, or using the full directory path on the server. You can get that directory path in PHP with `$_SERVER['DOCUMENT_ROOT']`.\n\n```html\n<?php include($_SERVER['DOCUMENT_ROOT'].'/perch/runtime.php'); ?>\n```\n\n## Keep Perch and Add-ons up to date\n\nWe work very hard to make sure that updates do not break anything. In almost all cases an update will involve replacing the Perch `core` folder or the main addon folder, any database updates will be performed when you log into the Control Panel. If there is anything else it will be detailed in the update notes. We would certainly suggest updating to the latest version any time you work on the site.\n\nHaving an up to date Perch and addons is a requirement if you are requesting support. We tend to fix issues that come to light very quickly and ship an update, your issue may well already be fixed. Even if you are requesting implementation assistance rather than having a problem our advice will be based on the latest version of the software.\n\n## Avoid editing perch/core or anything in an add-on folder\n\nIn order to keep Perch updateable it is vital that you do not modify anything in the core Perch folder or in an addon folder. This includes the templates shipped with an add-on. In order to modify templates for an add-on copy them into your perch/templates folder.\n\nPerch has an API so if you need to add your own functionality this is the way to do that.\n\nIf we are aware that you are modifying the core software we will be unable to offer support to you, as we are no longer supporting our software.","type":"perch"},{"title":"Using different file extensions","permalink":"https://docs.grabaperch.com/perch/getting-started/file-extensions/","id":"perch.getting-started.file-extensions","excerpt":"Perch uses PHP to deliver your content, so by default the pages of your site must be `.php` files.","text":"Perch uses PHP to deliver your content, so by default the pages of your site must be `.php` files.\n\nHowever, if your hosting account allows for `.htaccess` (web server configuration) files, it’s possible to tell the web server to run PHP in other sorts of pages.\n\nTo do this, create a new file at the top level of your website and call it `htaccess.txt` (we’ll rename it shortly).\n\nThe configuration settings needed for this vary from host to host, but here are some common ones. You may need to check your host's documentation or knowledgebase on how to do this. Try one, and if it doesn't work, try the next.\n\n---\n\n### Option 1: AddType\n\nPut the following line into the file:\n\n```\nAddType application/x-httpd-php .php .htm .html\n```\n\n\n### Options 2: AddHandler\n\nPut the following line into the file:\n\n```\nAddHandler php-script .html\n```\n\n---\n\nYou can add any file extensions you’d like to treat as PHP. (Don’t add other server-side scripting languages like `.asp` unless you know what you’re doing!)\n\nOnce you’ve done that, **rename your file to `.htaccess`** – that’s starting with a dot and no file extension. This is a hidden file, so depending on your software settings, it may then appear to vanish. Most web editing software has a setting to show hidden files.\n\nThe files with the extensions you listed should now be run as PHP, enabling Perch to manage your content.\n\nYou can also use this method to parse a `.xml` or `.json` file or other text format as PHP if you want to use Perch to create those files.\n\nIf you make a mistake in the `.htaccess` file or this is not supported by your host you may get an error, or a zero-length document, or your `.html` pages will just ignore it.\n\n### Troubleshooting steps\n\n1. If your site is now throwing an error then you have either made a mistake in your `.htaccess` file or your host does not support this. Search on your hosting company website for *AddType* and see if they have an alternate syntax to use, or raise a ticket with your host for help. You could send them the link to this support page.\n\n2. If your site is not erroring but Perch does not seem to be picking up your regions, **View Source**. If you can see the Perch runtime include at the top of the page then PHP is **not** being parsed. This include should not be visible if everything is set up correctly.\n\n3.  Check that you have copied the line exactly with no extra characters into a plain text or code editor.\n\n4.  Check that you have renamed the file correctly as `.htaccess` and placed it in the root of your site.\n\n5.  If your host gets back to you with information that you do not understand, raise a ticket with us giving us details of what your host has said.","type":"perch"},{"title":"Fundamental ideas behind Perch","permalink":"https://docs.grabaperch.com/perch/getting-started/fundamentals/","id":"perch.getting-started.fundamentals","excerpt":"Perch has a fairly opinionated set of core values and fundamental ideas behind it. Understanding _why_ we have made certain choices in Perch architecture can be helpful as you begin to use Perch, especially if you are coming from another solution.","text":"Perch has a fairly opinionated set of core values and fundamental ideas behind it. Understanding _why_ we have made certain choices in Perch architecture can be helpful as you begin to use Perch, especially if you are coming from another solution.\n\n## Perch Templates become the schema for your content\n\nPerch is based around structured data, you define the type of data you are collecting when you create a template for content.\n\n## PHP goes in your pages, Perch template tags in your templates\n\nIf you are using a Perch Page Function, or some other PHP then this needs to go in the pages of your site. PHP will not be parsed in templates.\n\nIf you try and add a Perch Template Tag anywhere other than in a Perch Template file then it won't be parsed, and you will see Perch tags in your HTML when you View Source.\n\n## Everything has a Master Template\n\nAs your templates define the schema, any chunk of content needs to have a template that is used to define the data you want to collect. If using a regular Perch Region then this is the template that you select when creating the Region. You can use other templates to display part of that data, or to display the data with different markup but all of the fields that you want to use must be defined in the main template used for that content.\n\n## We prioritize structured content over a WYSIWYG \"pit\"\n\nPerch is very flexible in terms of the editing environment. If you want to use a WYSIWYG editor then you can do, however we promote the creation of structured content rather than each page just being a big text input with an editor. When you use structured content this gives you a huge amount of flexibility to redisplay that content.\n\nA simple example being that on one page you might display a heading as a level 1 heading, and when you display it elsewhere, perhaps as an excerpt you want to use a level 3 heading. If the data is all in a WYSIWYG generated block of HTML it is very hard to do this. If you have stored the data as a title for the content, then whenever you display it you can decide which markup to use as needed.","type":"perch"},{"title":"Installing Perch","permalink":"https://docs.grabaperch.com/perch/getting-started/installing/","id":"perch.getting-started.installing","excerpt":"Before you start:","text":"Before you start:\n\n1. You need a webserver running PHP and MySQL to run Perch. This could be on your hosting or a local development server.\n2. You will need the MySQL database name, username and password.\n3. Before you start check that your server meets the current Perch requirements by running the Compatibility Test.\n4. Download the zip containing the Perch software.\n\n## Step 1: Extract the Perch zip\n\nInside the download you will find a file called example.php (which shows you how to add Perch to a page), a default search page (`search.php`), and a folder named `perch` which is the Perch software.\n\n## Step 2: Put the perch folder into your website home directory\n\nCopy the perch folder into your home directory. If you are setting Perch up directly on your hosting company server then FTP the entire folder to the home directory there. If you are going to try Perch out on your own computer you will need to place it into your site.\n\nIf you want to rename the `perch` folder to something else - for example `admin` - then this is a good time to do that. The rest of these steps will assume that you ket the default `perch` and that this folder is in the root of your site.\n\n## Step 3: Visit the setup page\n\nVisit `/perch/setup` in a web browser. You will see a form.\n\n-   The license key is the one from your account for this site.\n-   Your details will create the first admin account in Perch.\n-   The install location is the location of perch in your site. If you just copied the `perch` folder into the root of your site then `/perch` is correct. If you renamed the Perch folder or put it into a subdirectory you need to update this.\n-   The final section is database settings – use the database location, name, username and password that worked for the Server Compatibility Test.\n\nAfter completing this form, hit submit. If we are able, Perch will write your configuration file for you. If your server permissions do not allow that you will see a block of configuration code.\n\nIf you get the code, copy it to your clipboard, then open the file `/perch/config/config.php`.\n\nPaste the code into `config.php` using a **plain text editor** and save it.\n\nBack in your browser click ‘I’ve done that’ and Perch will install.\n\nOtherwise, move onto the steps below.\n\n## Final Steps\n\nYou should now be able to log into Perch using the username and password you entered in the previous step.\n\nDelete the folder named `setup` which is directly inside the Perch folder.\n\nMake the `/perch/resources` folder writable by your webserver in order that files and images can be uploaded through Perch. Check with your host how to do this.\n\n## Install Troubleshooting\n\nFor most users these steps will install Perch without any problems. However there are some issues that we see reasonably regularly. These tend to be webhost specific.\n\n### After submitting the form at Step 3. Nothing happens.\n\nThis usually means **PHP Sessions** are not configured fully on your server. Ask your host if there is anything you need to do to get PHP Sessions working on your server.\n\nIf sessions are configured then the other possibility is that you have something causing a redirect on your server, for example in your `.htaccess` file.\n\n### You see a message that Perch cannot connect to the database\n\nPerch needs to be able to connect to MySQL. Your host should provide you with a database name, username and password, which you enter during installation. Use the Compatibility Test to check that the details are correct and then use the exact same details during installation. Copy and paste errors or mistyping these details are the usual reason for a compatibility test pass and installation fail.","type":"perch"},{"title":"Using Perch - getting started tutorial","permalink":"https://docs.grabaperch.com/perch/getting-started/using-perch/","id":"perch.getting-started.using-perch","excerpt":"Pre-requisites:","text":"Pre-requisites:\n\n- You have installed Perch and are now ready to start editing content.\n- You have a page with a `.php` extension on the same level as the `perch` folder (just like the `example.php` in your download)\n\n## 5 minutes to content management\n\n1. Add Perch to a page\n2. Add a Perch Region to the page\n3. Reload the page in your browser\n4. Select a template\n5. Edit your content\n\n### 1. Add Perch to a page\n\nTake your PHP page and add the following line of PHP as the very first thing in the document - above the `<!doctype html>`.\n\n```\n<?php include('perch/runtime.php'); ?>\n```\n\nThis statement includes a path from the page to the **Perch runtime** file. If you renamed the `perch` folder, you need to change the folder name in this path too.\n\n### 2. Add a Perch Region to the page\n\nFind an area of content on your page that you would like to make editable. Delete the content and replace it with the following PHP function.\n\n```\n<?php perch_content('Intro'); ?>\n```\n\nThis is a PHP tag with a single function inside `perch_content()`, pass into this function the name of the Region. This should be something you use to identify it in the Perch Control Panel. So if we want to edit the introductory text on a page, the name 'Intro' would make sense.\n\n### 3. Reload the page in your browser\n\nHit reload. This will cause Perch to \"see\" the new Region you have added. If you now View Source you should not see either of the PHP tags we have added, and in the place of your Region you will see an HTML comment indicating that this region is undefined.\n\n### 4. Select a template\n\nTo define the Region we need to choose a template. Log into the Perch Control Panel and you should see your page listed, with the Region identified as \"New\".\n\nClick on this Region and select a template. For now we will use one of the pre-defined templates included with Perch so choose Text Block and submit the form.\n\n### 5. Edit your content\n\nYou can then add some content and save it. Return to the page in your site, reload the page and the content will display.\n\nYou are now managing content with Perch! There is much more you can do with Perch, but if you have got this far you know that everything is working as it should. The rest of this document explains more details about the steps we have just taken.\n\n## Additional details and Troubleshooting\n\n### The path to the Perch Runtime include\n\nIn step 1 we added the Perch Runtime to the page. Any page that uses Perch functionality needs this file included. In this simple example the `perch` folder was at the same level as our file however just like a path to an image in HTML, this needs to be adjusted depending on where the page lives in your site.\n\nFor example, if the page in question is `/about/history.php `the path would need to be adjusted to move up out of the about folder like so:\n\n```\n<?php include('../perch/runtime.php'); ?>\n```\n\nPHP includes cannot be root relative (starting with a `/`) in the way that images or CSS files can. On most servers however, you can make the include path relative to the site root by using the `DOCUMENT_ROOT` server variable. This means that you don't need to adjust the path between pages.\n\n```\n<?php include($_SERVER['DOCUMENT_ROOT'].'/perch/runtime.php'); ?>\n```\n\n### Perch on .html pages\n\nThe simplest way to use Perch is for your pages to have a `.php` extension. However you can usually instruct your webserver to parse PHP in files with a `.html` extension or any other extension that you like. See the page Using other file extensions for more details.\n\n### Removing file extensions\n\nPerch does not have inbuilt routing as it is designed to be added to existing pages, and to run on servers even if they do not have the ability to rewrite URLs. However you can use your `.htaccess` file to remove file extensions or rewrite URLs in any way you like. [Read more about URL Rewriting and Perch](/perch/getting-started/file-extensions/).\n\n### If your region does not show up in the Control Panel\n\nView Source on the page where you added the Perch Region and check that you cannot see any PHP tags. If you can see PHP tags then this page is not running PHP. This is more common if you are trying to use extensions other than `.php` so a good test is to try a `.php` page to isolate the issue.\n\n### Perch Templates\n\nIn this walkthrough we chose the Text Block template. This is a predefined template that uses Markdown formatting. However this is just an example. You can define your own templates with anything from a single field like this one through to many fields to create complex structured data.","type":"perch"},{"title":"Installing Apps","permalink":"https://docs.grabaperch.com/perch/getting-started/installing/apps/","id":"perch.getting-started.installing.apps","excerpt":"Any apps that add functionality to your website pages or use scheduled tasks need an entry adding in the `perch/config/apps.php` file to complete installation.","text":"Any apps that add functionality to your website pages or use scheduled tasks need an entry adding in the `perch/config/apps.php` file to complete installation.\n\nThe format of this file was simplified for new installations from Perch 2.5 onwards, but both formats are valid.\n\n## New installations\n\nYour `apps.php` file looks like this:\n\n```php\n<?php\n    $apps_list = array(\n        'content',\n        'categories',\n    );\n?>\n```\n\nAdd any new apps by adding their name to the `$apps_list` array. For example, to add `perch_blog`, your file would now look like this:\n\n```php\n<?php\n    $apps_list = array(\n        'content',\n        'categories',\n        'perch_blog',\n    );\n?>\n```\n\n## Pre-Perch 2.5 installations\n\nYour `apps.php` file looks like this:\n\n```php\n<?php\n    include(PERCH_PATH.'/core/apps/content/runtime.php');\n    include(PERCH_PATH.'/core/apps/categories/runtime.php');\n?>\n```\n\nAdd any new apps by adding a new include line in this format:\n\n`include(PERCH_PATH.'/addons/apps/`**app\\_name**`/runtime.php');`\n\nIt should go at the end of the file, before the closing `?>` marker.\n\nTo add `perch_blog`, your file would now look like this. Note that we have also included the core Categories app here. If it is missing from your Apps list and you are running Perch 2.6 or newer you should add it, making sure the path includes `core` and not `addons`:\n\n```php\n<?php\n    include(PERCH_PATH.'/core/apps/content/runtime.php');\n    include(PERCH_PATH.'/core/apps/categories/runtime.php');\n    include(PERCH_PATH.'/addons/apps/perch_blog/runtime.php');\n?>\n```\n\n### Updating to the new syntax\n\nBoth methods of including apps will work once you have updated a pre-Perch 2.5 site to the latest version. So you may want to update your apps.php to use the new `apps_list()` array. This is straightforward. You can swap:\n\n```php\n<?php\n    include(PERCH_PATH.'/core/apps/content/runtime.php');\n    include(PERCH_PATH.'/core/apps/categories/runtime.php');\n    include(PERCH_PATH.'/addons/apps/perch_blog/runtime.php');\n?>\n```\n\nfor:\n\n```php\n<?php\n    $apps_list = array(\n        'content',\n        'categories',\n        'perch_blog',\n    );\n?>\n```\n\nin apps.php and everything should continue to load as before.","type":"perch"},{"title":"PHP","permalink":"https://docs.grabaperch.com/perch/getting-started/installing/php/","id":"perch.getting-started.installing.php","excerpt":"**Perch 2.5 (June 2014) now requires PHP 5.3 or greater. The next version of Perch will require PHP 5.4 or greater.**","text":"**Perch 2.5 (June 2014) now requires PHP 5.3 or greater. The next version of Perch will require PHP 5.4 or greater.**\n\nYou can find out the version of PHP you are running in your Perch Diagnostic Report. Under Settings in the Perch Admin is a link to the Diagnostic Report. The first section is details of your Perch installation, the second tells you all sorts of things about your hosting – including versions of PHP and MySQL.\n\nIf you are on shared hosting then a support request to your host should be enough to upgrade your account. We’d suggest going to the newest version they offer, which should be 5.6 or 7 at this point (there is no PHP 6). Shared hosts will often have servers running old versions of PHP and only move people if they ask – as older applications might throw errors on newer versions of PHP. If your site is just running Perch, upgrading will cause you no problems. We issue updates to ensure the latest release of Perch 2 fully supports the latest version of PHP.\n\nIf you are on a shared host who refuses or cannot upgrade you, that is a very strong reason to move away from that host. Or at the very least ask them how they justify keeping people on servers running a version of PHP that is not getting security patches and therefore vulnerable to attacks.\n\nIf you are running your own server or VPS then you should also upgrade, or ask your host to help you do so.\n\n## Why is this important?\n\nPHP 5.2 is [end-of-lifed and unsupported](http://php.net/eol.php) now by PHP. Therefore you run the risk of security and performance problems if you stay with it.\n\nSupporting such an old version of PHP also slows down how quickly we can release features and add-ons for Perch itself. There are improvements in 5.3 that enable us to far more quickly ship code – this is good for everyone!","type":"perch"},{"title":"Perch Scheduled Tasks","permalink":"https://docs.grabaperch.com/perch/getting-started/installing/scheduled-tasks/","id":"perch.getting-started.installing.scheduled-tasks","excerpt":"Some tasks can be automatically run on a schedule. In order to do this, you need to configure your server to periodically run a script.","text":"Some tasks can be automatically run on a schedule. In order to do this, you need to configure your server to periodically run a script.\n\nThe script should be set to run as frequently as your most frequent task. If you wanted to update from Twitter every 15 minutes, your script should run at least every 15 minutes.\n\n## Setting up a secret\n\nTo prevent the scheduled tasks being run accidentally, you need to configure a ‘secret’ in your `perch/config/config.php` file. This should be URL-safe letters and numbers, and no spaces.\n\n```php\ndefine('PERCH_SCHEDULE_SECRET', 'mysecret');\n```\n\n## Scheduling with cron\n\nYou can set up the script to run on the command line, or via a scheduling system like cron. Many hosting control panels will give you access to set this up.\n\n```php\nphp /path/to/site/perch/core/scheduled/run.php mysecret\n```\n\nIf you check the Scheduled Tasks page under Settings in Perch, you should see the full path you need to use.\n\nNote that some servers may require a path to the `php` command (perhaps something like `/usr/bin/env php` rather than just `php`) so check with your host.\n\n## Scheduling via a URL\n\nYou can also run the scheduled script via a URL in a browser (useful for remote scripts or Windows scheduled tasks).\n\n```php\nhttp://yoursite.com/perch/core/scheduled/run.php?secret=mysecret\n```\n\n## Task history\n\nYou can view a log of the tasks that have run from the Scheduled Tasks page under Settings in Perch. This log keeps the ten most recent runs of each individual task. Older log entries are purged automatically.","type":"perch"},{"title":"Navigation","permalink":"https://docs.grabaperch.com/perch/pages-and-nav/navigation/","id":"perch.pages-and-nav.navigation","excerpt":"Perch can create navigation for your site. However, in order to do so Perch needs to be aware of the structure of your site by there being Perch Content on the majority of your pages.","text":"Perch can create navigation for your site. However, in order to do so Perch needs to be aware of the structure of your site by there being Perch Content on the majority of your pages.\n\nIf you have only made editable one or two pages you would be advised to manage the navigation yourself.","type":"perch"},{"title":"Layouts","permalink":"https://docs.grabaperch.com/perch/pages-and-nav/layouts/","id":"perch.pages-and-nav.layouts","excerpt":"Perch is very flexible in how you build your pages. You don’t need to create themes, you can just drop regions into the page to add editable content.","text":"Perch is very flexible in how you build your pages. You don’t need to create themes, you can just drop regions into the page to add editable content.\n\nOn many sites, it’s useful to have common page elements like headers, footers and sidebars that don’t change between pages. To make those easy to manage, Perch has layouts.\n\n```php\n<?php include('perch/runtime.php'); ?>\n<?php perch_layout('global.header'); ?>\n<h1>Welcome to my website!</h1>\n<p>...</p>\n<?php perch_layout('global.footer'); ?>\n```\n\nIf you’re familiar with PHP includes, layouts do pretty much the same thing but in a more structured way, and with some handy extra features.\n\nLayout files live in `perch/templates/layouts`. They are PHP files, and should end with a `.php` file extension. Think of them like a reusable slice of a page – they can include anything you’d normally have in a page; HTML, PHP and Perch regions and function calls.\n\nLayouts can also be included [from within templates](/docs/templates/layouts/).\n\n## Naming\n\nPlace your layout files in `perch/templates/layouts`. There are two different ways you can choose to name your files. For simple sites without lots of different layouts, we’d recommend `layout.fragment.php`, for example, for a header in your ‘global’ layout:\n\n```php\nglobal.header.php\n```\n\nThe footer would be `global.footer.php` and a sidebar might be\n`global.sidebar.php`.\n\nIf you had a different structure for your homepage, for example, you could name those `home.header.php` and `home.footer.php`.\n\n### Grouping layouts in subfolders\n\nFor larger sites with lots of different layouts, you can also use subfolders.\n\n```php\nglobal/header.php\nglobal/footer.php\n```\n\nThese would then be loaded into your page using a slash, like a file path:\n\n```php\n<?php perch_layout('global/header'); ?>\n```\n\nGrouping layouts into subfolders helps keep them organized.\n\n## Why use Layouts instead of PHP Includes\n\nAs Perch manages layouts we can add some extra functionality not available if you use PHP includes to include parts of your pages.\n\n- You can pass Layout Variables into Layouts and use them.\n- You can include a Layout from a Perch Template","type":"perch"},{"title":"Creating Pages","permalink":"https://docs.grabaperch.com/perch/pages-and-nav/pages/","id":"perch.pages-and-nav.pages","excerpt":"You can use Perch to edit content on existing pages or you can use Perch to allow content editors to create new pages – either in specific locations or sitewide.","text":"You can use Perch to edit content on existing pages or you can use Perch to allow content editors to create new pages – either in specific locations or sitewide.\n\n## Overview\n\nPages are created from a Master Page. This is a special, full page template, which includes Perch Regions just as with any other page of your site.\n\nFind out more about [creating Master Pages](/perch/pages-and-nav/pages/master-pages/).\n\nAfter creating a Master Page and adding it to `perch/templates/pages` log into your admin and set up the Master Page by visiting *Master Pages*.\n\nIf you allow editors to create pages using that Master Page, then the Regions would show up as New – with no template defined. This isn’t generally what you want so when setting up your Master Page you can select another page to copy the Regions from. This means that when the new page is created, the Regions will have templates pre-selected, all ready for the content editor to start adding content.\n\nThe whole process of creating a Master Page, setting it up and creating pages from it is demonstrated in our tutorial video [Creating Pages](/video/v/creating-pages/)","type":"perch"},{"title":"Displaying a Layout from a Template","permalink":"https://docs.grabaperch.com/perch/pages-and-nav/layouts/displaying-from-templates/","id":"perch.pages-and-nav.layouts.displaying-from-templates","excerpt":"A layout file can be included from within a template using a template tag of `perch:layout` with a `path` attribute that has a value of the path of the layout relative to the `perch/layouts` directory, without the `.php` extension, just as when including a layout from a page.","text":"A layout file can be included from within a template using a template tag of `perch:layout` with a `path` attribute that has a value of the path of the layout relative to the `perch/layouts` directory, without the `.php` extension, just as when including a layout from a page.\n\n```php\n<perch:layout path=\"global.sidebar\">\n```\n\nAt runtime, the layout file is included. You can include Layout Variables by passing them in as attributes of the `perch:layout` tag. In this case I am passing in a variable called `dept` with a value of `HR`.\n\n```html \n<perch:layout path=\"global.sidebar\" dept=\"HR\">\n```","type":"perch"},{"title":"Unique titles with Layout Variables","permalink":"https://docs.grabaperch.com/perch/pages-and-nav/layouts/layout-variables/","id":"perch.pages-and-nav.layouts.layout-variables","excerpt":"**If my page title is in a layout, how do I pass in a unique title?**","text":"**If my page title is in a layout, how do I pass in a unique title?**\n\nYou are using Perch Layouts for your includes but you need to be able to insert the title for each page into that layout include.\n\n[Perch Layouts](http://docs.grabaperch.com/docs/layouts/variables/) can accept variables, these could be hardcoded or be added by your editors. By using Layout Variables you can add unique titles for each page.\n\nIn the layout that includes the title element add the following.\n\n```html\n    <title><?php perch_layout_var('title'); ?></title>\n```\n\nWhen add your layout to a page include the title as a variable. The first value `global.header` is just the name of my layout, the second an array including any variables. I just have one here - the title.\n\n```php\n    <?php\n    perch_layout('global.header', array(\n\t    'title'=>'Welcome to my site!'\n    ));\n    ?>\n```\n\nThe above is fine if you want to hardcode a title and set it as a variable. You can also pass in the title added when editing the page.\n\n```php\n    <?php\n    perch_layout('global.header', array(\n\t    'title'=>perch_pages_title(true),\n    ));\n    ?>\n```\n\nOr you can get a value from elsewhere - for example the title of your blog post.\n\n```php\n    <?php\n    $title = perch_blog_post_field(perch_get('s'), 'postTitle', true);\n    perch_layout('global.header', array(\n\t  'title'=>$title\n    ));\n    ?>\n```","type":"perch"},{"title":"Displaying a Perch Layout","permalink":"https://docs.grabaperch.com/perch/pages-and-nav/layouts/displaying/","id":"perch.pages-and-nav.layouts.displaying","excerpt":"To display a layout fragment on your page use the page function `perch_layout()`. Pass into this function the name of the layout you want to display, without the file extension.","text":"To display a layout fragment on your page use the page function `perch_layout()`. Pass into this function the name of the layout you want to display, without the file extension.\n\n```php\n<?php perch_layout('home.header'); ?>\n```\n\nThis would output the `perch/templates/layouts/home.header.php` file to the page.\n\n```php\n<?php perch_layout('global/home.header'); ?>\n```\n\nIf using subfolders this would output the `home.header.php` file inside the `global` subfolder.\n\n## Additional arguments\n\nTo just output the layout as you would an include, all you need to pass into the function is the name, there are however two further arguments you can pass in.\n\nThe second argument is an array, and is used to pass variables into your layout.\n\n```php\n<?php $header = perch_layout('home.header', array(\n  'title'=>'Welcome to my site!'\n)); ?>\n```\n\nRead more about using layout variables.\n\n### Returning the contents\n\nSometimes it is useful to return the contents of the layout, perhaps to do some further processing, rather than directly output it to the page. If you set the third argument for `perch_layout()` to `true`, the contents will not be output but instead returned (In PHP terms, this uses output buffering).\n\nIf you have no variables just use an empty array as the second argument. The below function call would return the `home.header.php` layout to the variable `$header`.\n\n```php \n<?php $header = perch_layout('home.header', array(), true); ?>\n```","type":"perch"},{"title":"Passing Variables into Layouts","permalink":"https://docs.grabaperch.com/perch/pages-and-nav/layouts/variables/","id":"perch.pages-and-nav.layouts.variables","excerpt":"Although we think of layouts being the same across multiple pages, there are usually small things that change from page to page. That might be the title in the HTML `<title>` tags, a class on the `<body>`, or whether to include a JavaScript file or not.","text":"Although we think of layouts being the same across multiple pages, there are usually small things that change from page to page. That might be the title in the HTML `<title>` tags, a class on the `<body>`, or whether to include a JavaScript file or not.\n\nTo help with this, we have layout variables. To use these you first need to define your variable in the page when you use the `perch_layout()` function, then you need to use the variable inside the layout.\n\n## Define the variable(s)\n\nIn the below code we have a global header Layout used on all pages of the website. This header includes the html `title` and `body` element. As we want to have unique titles on our pages and also add a class to the body to indicate a page or section of the site we can use Layotu Variables to pass this information into the header Layout.\n\nWhen including the Layout on the page with the `perch_layout()` function, pass in a second argument after the name of the Layout. This argument is a PHP array, the key is the name of the variable and the value is what will be output when using this variable.\n\n```php\nperch_layout('global.header', array(\n    'title'=>'Welcome to my site!',\n    'class'=>'home',\n));\n```\n\nYou can pass any value into the layout using an array.\n\n## Using a variable in a layout\n\nAs Layouts are PHP, you can use the variables passed into them in a variety of ways. The most simple use is to display the contents of the variable.\n\nTo use a variable in a layout, we have the `perch_layout_var()` function. The below code is inside our `global.header.php` layout file, and outputs the value of the `title` variable passed in from the array.\n\n```php\n<title><?php perch_layout_var('title'); ?></title>\n```\n\nValues are automatically HTML-encoded so they’re safe for output. To return the value, or get it before it’s encoded (essential if the variable isn’t a string), add a second argument of `true` to the `perch_layout_var()` function. The below code would not directly output the value of `title` but instead write it to a PHP variable called `$title`.\n\n```php\n<?php $title = perch_layout_var('title', true); ?>\n```\n\n## Testing for a layout variable\n\nYou can test to see if a layout variable has been set using `perch_layout_has()`, passing in the name of the variable. In the below code we check to see if a variable named `title` has been set. If it has, we use it. If not we output a string.\n\n```php \n<?php\n    if (perch_layout_has('title')) {\n    \tperch_layout_var('title');\n    }else{\n    \techo \"Welcome to my site!\";\n    }\n?>\n```","type":"perch"},{"title":"Navigation Groups","permalink":"https://docs.grabaperch.com/perch/pages-and-nav/navigation/navigation-groups/","id":"perch.pages-and-nav.navigation.navigation-groups","excerpt":"The purpose of Navigation Groups is to give you a way to create a small subset of site navigation – perhaps to show key links in the footer of your site. **You should not need to place your main navigation into a Navigation Group** – this is not what they were designed for and usually leads to problems!","text":"The purpose of Navigation Groups is to give you a way to create a small subset of site navigation – perhaps to show key links in the footer of your site. **You should not need to place your main navigation into a Navigation Group** – this is not what they were designed for and usually leads to problems!\n\nThe standard Navigation functions should be all you need to display main and sub-navigation. Use Navigation groups to allow your content editors to select and order small groups of links.\n\n## Creating a Navigation Group\n\nYou create groups in the Perch Admin under `Pages > Navigation Groups`.\n\nOnce you have a group or groups these will appear in the Page Options for each page, to add a page to a group check the relevant checkbox.\n\nThe pages will then be listed under the Navigation Group where you can reorder them.\n\n## Displaying a group on your site\n\nTo display a navgroup on your site you use the standard [Navigation Functions](/functions/navigation/) and include the navgroup slug. If I have created a navgroup for footer navigation called footer, I could add the following block to the page:\n\n```php\n<?php perch_pages_navigation(array(\n  'navgroup' =>'footer',\n  'levels' => 1\n)); ?>\n```\n\nThis would add the pages in that navgroup, if the content editor added pages or re-ordered them this would now be reflected on the site.","type":"perch"},{"title":"Use Page Attributes for Open Graph Tags","permalink":"https://docs.grabaperch.com/perch/pages-and-nav/page-attributes/facebook-and-twitter-sharing/","id":"perch.pages-and-nav.page-attributes.facebook-and-twitter-sharing","excerpt":"**Using Page Attributes to add Facebook Open Graph Tags and Twitter Cards**","text":"**Using Page Attributes to add Facebook Open Graph Tags and Twitter Cards**\n\n## The Page Attributes functionality in Perch makes it simple for you to control how your content looks when it is shared on Twitter and Facebook. This solution shows you how.\n\nBoth Twitter and Facebook support open graph tags. These tags go into the head of your document along with other meta information. They allow you to specify a title, description, image and other information that is shown alongside your post on these sites.\n\nIf you have ever shared a blog post and then found the Facebook was displaying a strange image picked from your site alongside it, this solution shows you how to fix that problem!\n\nThis solution relies on functionality that was released in Perch and Perch Runway 2.7.4 so check that you are running at least that version before continuing.\n\nPerch ships with a basic Page Attributes template that you can find in `perch/templates/pages/attributes`. The default.html template includes seo.html - a template for adding page meta data. To add Facebook and Twitter tags I am going to create two new templates:\n\n* facebook.html\n* twitter.html\n\nI then link these into the default.html template.\n\n```html\n    <perch:template path=\"pages/attributes/seo.html\">\n    <perch:template path=\"pages/attributes/facebook.html\">\n    <perch:template path=\"pages/attributes/twitter.html\">\n```\n\n### facebook.html\n\nThe contents of this template is as follows:\n\n```html\n    <meta property=\"og:site_name\" content=\"<perch:pages id=\"sitename\" type=\"hidden\">\">\n    <meta property=\"og:url\" content=\"<perch:pages id=\"url\" type=\"hidden\">\">\n    <meta property=\"og:title\" content=\"<perch:pages id=\"og_title\" label=\"Social title\" type=\"text\" escape help=\"Title for this document with no branding or site name\" divider-before=\"Facebook Open Graph Tags\">\">\n    <meta property=\"og:description\" content=\"<perch:pages id=\"og_description\" label=\"Social description\" type=\"textarea\" size=\"s\" escape>\">\n    <perch:if exists=\"og_image\">\n    <meta property=\"og:image\" content=\"<perch:pages id=\"domain\" type=\"hidden\"><perch:pages id=\"og_image\" label=\"Image when shared\" help=\"Should be at least 1200x630\" type=\"image\" width=\"1200\">\">\n    <perch:else>\n    <meta property=\"og:image\" content=\"<perch:pages id=\"domain\" type=\"hidden\"><perch:pages id=\"sharing_image\" type=\"hidden\">\">\n    </perch:if>\n    <perch:if exists=\"og_type\">\n    <meta property=\"og:type\" content=\"<perch:pages id=\"og_type\" label=\"Facebook type\" type=\"select\" options=\"article,book,profile,website,video,music\" allowempty>\">\n    </perch:if>\n    <perch:if exists=\"og_author\">\n    <meta property=\"article:author\" content=\"<perch:pages id=\"og_author\" type=\"hidden\">\">\n    </perch:if>\n```\n\n* **og:site_name** - this is the name of the site.\n* **og:url** - the page URL\n* **og:title** - a title as used on Facebook\n* **og:description** - a description\n* **og:image** - an image\n* **og:type** - a defined type, if not set will default to website\n* **og:author** - The author of the piece, needs to be a Facebook Page or Profile.\n\nThe Open Graph tags are [detailed on Facebook](https://developers.facebook.com/docs/sharing/best-practices#tags). You can add any other tags that are relevant to your content, in the same way as my examples.\n\nSome of the fields in my template are regular Perch Content tags that will add fields to the Page Details Tab in the Perch Control Panel.\n\nOthers have been set to `type=\"hidden\"` because I am going to pass the information to these tags from the page rather than ask an editor to fill them in.\n\n### twitter.html\n\nMy twitter.html template contains the following tags.\n\n```html\n    <meta name=\"twitter:card\" content=\"summary\">\n    <meta name=\"twitter:site\" content=\"<perch:pages id=\"twittername\" type=\"hidden\">\">\n    <meta name=\"twitter:title\" content=\"<perch:pages id=\"og_title\" label=\"Social title\" type=\"text\" escape help=\"Title for this document with no branding or site name\">\">\n    <meta name=\"twitter:description\" content=\"<perch:pages id=\"og_description\" label=\"Social description\" type=\"textarea\" size=\"s\" escape>\">\n    <perch:if exists=\"og_image\">\n    <meta property=\"twitter:image\" content=\"<perch:pages id=\"domain\" type=\"hidden\"><perch:pages id=\"og_image\" label=\"Image when shared\" help=\"Should be at least 1200x630\" type=\"image\" width=\"1200\">\">\n    </perch:if>\n    <meta name=\"twitter:url\" content=\"<perch:pages id=\"url\" type=\"hidden\">\">\n```\n\n* **twitter:card** - set to summary, there are other types of card if you are publishing certain content\n* **twitter:site** - set to the Twitter handle for the site author\n* **twitter:title** - I use the same ID as in the Facebook template so that the editor can enter this once and the content is used for Twitter and Facebook. Change the ID if you want to add special content for each.\n* **twitter:image** - reusing the ID for the Facebook image\n* **twitter:url** - the URL of the content\n\nYou can see the information about these tags on the [Twitter developer site](https://dev.twitter.com/cards/types/summary). As with the Facebook template some of these tags will create a field to complete and others we will pass in values from the page.\n\n### Adding the tags to our pages\n\nIn a Perch Layout (or just on each page if you are not using layouts) you can set variables that are then available to the template engine using PerchSystem::set_var. Before including my attribute templates I set these variables. I am getting the domain and full URL of the page, setting the name of the website and including a default image which can be overridden if the content editor uploads a specific one for any page.\n\nFinally I call in my default.html template, which includes my Facebook and Twitter templates. The below code should go in-between the `<head></head>` tags in your page or layout.\n\n```php\n    <?php\n    $domain        = 'http://'.$_SERVER[\"HTTP_HOST\"];\n    $url           = $domain.$_SERVER[\"REQUEST_URI\"];\n    $sitename      = \"The name of my website\";\n    $twittername   = \"@mytwittername\";\n    $sharing_image = '/images/default_fb_image.jpg';\n\n    PerchSystem::set_var('domain',$domain);\n    PerchSystem::set_var('url',$url);\n    PerchSystem::set_var('sharing_image',$sharing_image);\n    PerchSystem::set_var('twittername',$twittername);\n\n    perch_page_attributes(array(        \n      'template' => 'default.html'    \n    ));\n    ?>\n```\n\nYou should now be able to edit the contents of the template tags in the Page Details section of any page and see the values appear in the head section of your page.\n\nIf you are using the Twitter tags you should [validate your card on Twitter](https://cards-dev.twitter.com/validator). This page will also tell you if you need to authorise the use of cards on your domain and allow you to do that.\n\n[Facebook also have a handy tool](https://developers.facebook.com/tools/debug/) that lets you see what will be returned for any URL.\n\n### Pushing blog or other app content into Page Attributes\n\nThe above all works well for regular page content, and you can now make sure that each page has the meta information added. However for app content such as blog, or any List/Detail type display of content you may have a single \"page\" that actually holds the content for 100s of articles.\n\nIn Perch 2.7.4 the `perch_page_attributes_extend` function accepts an array of data that will essentially overwrite anything that has been set for the attributes named. Use the function before your layout, or wherever you include your attributes template.\n\nIn the following example, I have a post.php that is the page on which blog posts display (this would be the blog post Master Page in Perch Runway).\n\nI get my post using `perch_blog_post_custom` with the `return-html` value set to true. This will give me the full templated blog post but also all the individual fields inside $post[0].\n\nI have added a field to my blog template with an ID of fbimage specifically so that content editors can include an image for social sharing.\n\n```php\n    <?php\n    # get the post\n    $post = perch_blog_custom(array(\n          'filter'        => 'postSlug',\n          'match'         => 'eq',\n          'value'         => perch_get('s'),\n          'skip-template' => 'true',\n          'return-html'   => 'true',\n\t  ));\n\n    # set up the variables\n    $title       = $post['0']['postTitle'];\n    $description = strip_tags($post['0']['excerpt']);\n    if (isset($post[0]['fbimage'])) {\n\t    $fbimage = $post[0]['fbimage'];\n    } else {\n\t    $fbimage = '';\n    }\n\n    # use the variables in the array value\n    perch_page_attributes_extend(array(\n        'description'    => $description,\n        'og_description' => $description,\n        'og_title'       => $title,\n        'og_type'        => 'article',\n        'sharing_image'  => $fbimage,\n        'og_author'      => 'https://www.facebook.com/myfbname',\n    ));\n    ?>\n```\n\nTo actually display the blog post, I can save another PHP function call by just echoing out the variable `$post['html']`.\n\n```php\n    <?php echo $post['html']; ?>\n```\n\nThis process would work for any of the apps, for example pushing in details about a podcast or event. It would also work in a List Detail using perch_content_custom or with Collections in Runway.","type":"perch"},{"title":"Add a class to the body tag","permalink":"https://docs.grabaperch.com/perch/pages-and-nav/page-attributes/how-do-i-add-a-body-class/","id":"perch.pages-and-nav.page-attributes.how-do-i-add-a-body-class","excerpt":"**How do I allow users to change a class applied to the body element of a page?**","text":"**How do I allow users to change a class applied to the body element of a page?**\n\nIt is sometimes useful to have functionality where editors can change a class on the body element. This can facilitate choosing the colour scheme for a page, or allowing you to set a background image based on that selection. You can do this using Page Attributes.\n\nTo add a class to the body element I create a new template in `perch/pages/templates/attributes` and name it `body_attributes.html` this template includes a select list of classes.\n\n```html\n<perch:pages id=\"bodyclass\" label=\"Page Theme\"\nhelp=\"Select the theme for this page\" type=\"select\"\noptions=\"red,green,blue\">\n```\n\nYou can use all of the usual Perch Template tags and attributes in Page Attributes.\n\nI then include this template in the template `pages/attributes/default.html`.\n\n```html\n    <perch:template path=\"pages/attributes/body_attributes.html\">\n```\n\nOn my page, I add this to the body element using the perch_page_attribute function – this just returns a single attribute from the template.\n\n```php\n    <body class=\"<?php\n    perch_page_attribute('bodyclass', array(\n        'template' => 'body_attributes.html'\n    ));\n    ?>”>\n```\n\nYou can see this process in our [Page Attributes video](http://docs.grabaperch.com/video/tutorials/techniques/page-attributes/). Also read the [Page Attributes documentation](http://docs.grabaperch.com/docs/pages/page-attributes/) to learn more about the feature.","type":"perch"},{"title":"Master Pages","permalink":"https://docs.grabaperch.com/perch/pages-and-nav/pages/master-pages/","id":"perch.pages-and-nav.pages.master-pages","excerpt":"Master Pages are a special kind of Perch Template that defines an entire page and is used when an editor creates a new page in Perch. You can set up any number of Master Pages and then choose where these are used in your site.","text":"Master Pages are a special kind of Perch Template that defines an entire page and is used when an editor creates a new page in Perch. You can set up any number of Master Pages and then choose where these are used in your site.\n\n## Creating a Master Page\n\nAn example Master Page is included in your Perch install at\n`perch/templates/pages/default.php`.\n\nA Master Page is just like any other page in your site. So a good starting point is to save a copy of a page that is like the pages you want content editors to create into `perch/templates/pages/`.\n\nThe only important difference to a regular page is that you need to ensure your Perch runtime include references the document root. So the include should look like this:\n\n```php\n<?php include($_SERVER['DOCUMENT_ROOT'].'/perch/runtime.php'); ?>\n```\n\n## Setting up a Master Page in the Perch Admin\n\nLog into your Perch Admin and select the Master Pages link. The list here is of all Master Pages in your `perch/templates/pages/` folder.\n\nClick on your new Master Page and you can set it up ready for use.\n\n**Title** is just a name for the page in the system, use something descriptive – especially if you will have lots of different Master Pages.\n\nThe **Copy Region Options** setting lets you choose a page to copy region information from. I would normally use the page that I copied to create my Master Page. This ensures that when an editor creates a new page, all of the templates and any other options on those Regions are already defined. They just start to edit content.\n\nThe setting **New Pages Should** Reference this Master Page, means that when new pages are created they will use the Master Page as a reference and any future changes you make to the Master Page design will be reflected in pages created from it – **this is the most usual choice**. If for some reason however you want to copy the Master Page HTML over to your new page and *not* have changes to the Master Page reflected in it, select **Copy this master page** as the value.\n\nFinally, if you have any [Navigation Groups](/docs/navigation/navigation-groups/) set up, you will see checkboxes to select a group if you want created pages to go into that group.\n\nSubmit this form and your new Master Page is ready to be used.\n\nYou can view a video of the whole process in our [Creating Pages video tutorial](/video/tutorials/swift/creating-pages/).\n\n## Configuring regions automatically\n\nIt can be useful to pre-define your regions with templates, sorting options and so on, so that this doesn't need to be done each time a new page is created. You can do this by using [perch_content_create()](/docs/developers/creating-regions/) within your master page.","type":"perch"},{"permalink":"https://docs.grabaperch.com/perch/content/looping-data/","id":"perch.content.looping-data","excerpt":"In Perch there are various ways of creating repeating content, most of which happen via your templates rather than by messing around inside a PHP loop on the page! In this post I’ll introduce them and suggest when you might use each one.","text":"In Perch there are various ways of creating repeating content, most of which happen via your templates rather than by messing around inside a PHP loop on the page! In this post I’ll introduce them and suggest when you might use each one.\n\n## Looping in your template\n\nOur “big three” methods for repeating content happen within your templates and settings in the Perch Admin, and don’t require any code to be added to your pages.\n\nThese methods are applicable in Perch and Perch Runway sites.\n\n### Multiple Item Regions\n\nThe simplest looping structure in Perch is accessed by setting a Region in your Perch Control Panel to “Allow Multiple Items”, You can do this when defining the region, or at any time later in Region Options.\n\nOnce a Region can allow multiple items your content editor will be able to Save and Add Another item – so the template you have chosen for that Region will repeat as many times as they add content.\n\nWhen setting up your Region you can choose to edit in List/Detail Mode or “All on one page”. If using List/Detail setting a title on one field of your template will mean that Perch will use that field as the name of the instance in the List Mode. If nothing has a title attribute set to true Perch will list the items as “Item 1”, “Item 2” and so on.\n\n### Repeaters\n\nWhere a Region set to allow Multiple Items repeats the entire template, a Repeater is like a mini template within a template. It enables the looping of small amounts of content.\n\nA good example of where a Repeater is useful is if you want your content editor to add multiple images to a Blog Post or article. If you wrap that section of the template in a Repeater they will be able to add as many as they require.\n\n### Blocks\n\nIn Perch and Perch Runway 2.8 we introduced the powerful Blocks feature. With Blocks you can create a template that enables a content editor to not only add multiple pieces of content – but also choose the template to use. A good example of that is when creating a photo essay type post, where you might want a large image, an image with text or text only.\n\nA Blocks template can contain Repeaters, it can also be the template used in a Multiple Item Region.\n\n### Which template looping structure to use\n\nI’ve described three methods of looping through content – so which should you choose? It really comes down to the content in question. If your content is a defined object – a product, an article or an event I would define it as a template and set the Region to allow Multiple Items. This keeps the data about each product together – and enables you to then reuse that content using perch_content_custom.\n\nInside that template you might want to allow multiple images to be added, or allow a data table to be built up of product attributes and here a Repeater would be useful.\n\nYou might want the content editor to have flexibility in part of the template and so you could add a Blocks section. If you intend to reuse the content around the site then it would be a good plan to have some fixed fields in the template before starting the Blocks. For a product you might have a title, description and price set as required fields outside of the Blocks and then give the content editor freedom to add the more description information around the product. The fixed fields would ensure you had the data you needed for a homepage listing of items or other feature.\n\n### Template tips for Looping Structures\n\nWhen creating a template for a Region that will allow multiple items you can use `<perch:before></perch:before>` tags to output content before the repeating section and `<perch:after></perch:after>` to output content after the repeating section. Before and After can be handy if you want to output an opening and closing list element or wrap the repeating block in some other markup.\n\nYou can use Perch Conditionals to add markup, classes or even to exclude items when displaying the template. For example, if your template opens with an li element and you want to add a class of odd to the odd elements you could use perch:every.\n\nBeware PHP limits on fields! If you have very large templates, particularly those with many repeaters in them you can hit up against resource limits on your server.\n\nThe problematic setting is a PHP setting called max_input_vars, you can read about how to change it here. If you are editing a Multiple Item Region “All on one page” a quick fix is to change to List/Detail Mode in the Region Settings. If the issue is that you have large templates of Repeaters or Blocks then you will need to change this in your php.ini.\n\n## Looping on your page\n\nMost of the time in Perch and Perch Runway you’ll be using the above methods to loop through the content of your Regions. We try as much as possible to keep you out of the PHP. No-one wants to have to poke around in a PHP loop to display content.\n\nHowever if you are reusing content or have made use of Collections in Perch Runway you may want to get content back and loop through it on the page.\n\n### perch_content_custom()\n\nWhen you use `perch_content_custom()` rather than `perch_content()` you can retrieve your content and pass in a template which will display the content just as if you defined the template in the Perch Admin for that region. With custom content however you are able to filter the content or display content normally displayed with one template using a different one.\n\nTemplates passed in via perch_content_custom are the same as any other Perch Templates and can contain before and after tags and conditionals.\n\nIf you are used to working with PHP and want to do some other processing or loop through the template using PHP then adding skip-template with a value of true will return your content as an associative array. You can then do with it whatever you like.\n\nAs a tip, if you use skip-template with the option return-html set to true you get the templated HTML back as part of the array, with the key ‘html’. If you want to do some processing but also then display the templated data, this will save you another trip to the database.\n\n### perch_collection()\n\nFor Perch Runway users you also have `perch_collection()`. This behaves much like perch_content_custom but is for displaying Collection data.\n\n## Wrapping up\n\nThat’s all you need to know about how to loop through data in Perch. As with many things we try and offer flexibility, this means you can provide the best editing experience based on the type of content that needs to be edited. We also want to ensure that you can reuse your content and that pages load quickly.\n\nIf you are unsure about the best way to create editing forms for your data then do pop into the [forum](https://community.perchcms.com/forum/) and ask us. If you can explain the data you need to make editable and what you will need to do with it we can help you work out the best architecture.","type":"perch"},{"title":"Combining Content from Several Regions","permalink":"https://docs.grabaperch.com/perch/content/functions/content-from-multiple-pages-and-regions/","id":"perch.content.functions.content-from-multiple-pages-and-regions","excerpt":"**Can I combine content from several regions?**","text":"**Can I combine content from several regions?**\n\nYou want to gather content from more than one Perch Region, and display it on a page.\n\nThe first argument to [perch_content_custom](/functions/content/perch-content-custom/) is the key (or name) of the region you want to fetch the content from. However it can also be an array of keys.\n\nYou can also get content from more than one page by passing an array of page URLs as the value of page in the second argument.\n\nIf you have more than one place that content is being added but then want to combine it, this can be very useful. The following example combines data from two regions on two different pages. I have been careful to use the same IDs in each template for the content so I can output it all using a single template.\n\n```php\n    <?php perch_content_custom(array('Writing','Podcasts'), array(\n      'count'=>10,\n\t\t  'template'=>'_external_resource.html',\n\t\t  'page'=>array('/writing/index.php','/podcasts/index.php'),\n\t\t  'sort'=>'date',\n      'sort-order'=>'RAND'\n    ));\n\t\t?>\n```","type":"perch"},{"title":"Pre-populating Template Regions","permalink":"https://docs.grabaperch.com/perch/content/functions/create-a-prepopulated-region/","id":"perch.content.functions.create-a-prepopulated-region","excerpt":"**Can I create a Region and pre-populate the template used?**","text":"**Can I create a Region and pre-populate the template used?**\n\nThe standard way to create a Perch Region is to use the perch_content PHP tag. You can then select the template used and set up an options in admin. Sometimes you might want to pre-populate a region with a template instead.\n\nInstead of using perch_content, use `perch_content_create()` and pass in an array of options.\n\n```php\n    <?php perch_content_create('News', array(\n\t    'template' => 'article.html',\n\t    'multiple' => true,\n\t    'edit-mode' => 'listdetail',\n\t    'sort' => 'date',\n\t    'sort-order' => 'DESC',\n    ));\n   ?>\n```\n\nThen reload your page in the browser as usual. If the Region does not exist this function will create it. If the Region does already exist perch_content_create will do nothing.\n\nCreating regions in this way is especially useful when you are only going to display the region using perch_content_custom. Create the region **first** with `perch_content_create` and then display it using `perch_content_custom`.\n\nRead the documentation for [perch_content_create](/functions/content/perch-content-create).","type":"perch"},{"title":"Accessing content before it is templated","permalink":"https://docs.grabaperch.com/perch/content/functions/get-content-before-templating/","id":"perch.content.functions.get-content-before-templating","excerpt":"**Can I access the content added in Perch before it is templated?**","text":"**Can I access the content added in Perch before it is templated?**\n\nYou want to get data entered into Perch as an array so that you can use it in your own PHP script.\n\nThe `perch_content_custom` function (and the `_custom` function in our first party apps) can be passed an option of `skip-template` set to `true`. This will then return that data as an associative array and you can use it in any way you want. It's a handy way to let Perch do most of the legwork, giving you the final data to play with.\n\n```php\n    <?php\n      $content = perch_content_custom('Writing', array(\n\t\t    'count'=>5,\n\t\t    'skip-template'=>'true',\n\t\t    'page'=>'/writing/index.php',\n\t\t    'sort'=>'date',\n        'sort-order'=>'DESC'\n    )); ?>\n```","type":"perch"},{"title":"Adding an RSS Feed","permalink":"https://docs.grabaperch.com/perch/content/functions/how-do-i-add-an-rss-feed/","id":"perch.content.functions.how-do-i-add-an-rss-feed","excerpt":"**How do I add an RSS feed to a news page?**","text":"**How do I add an RSS feed to a news page?**\n\nIn this article we’ll look at how to use the power of perch_content_custom() and templates to create a simple RSS feed for content stored in a standard multiple item region in Perch.\n\nIn this article we’ll look at how to use the power of `perch_content_custom()` and templates to create a simple RSS feed for your site.\n\nTo do this, we’ll assume that you already have a multiple-item region set up with the content that you want to replicate in the RSS feed. For us, that’s going to be a region called ‘News’ on the page /news.php – just adapt the examples accordingly to fit your own site.\n\nThe solution is more straightforward than you might think. RSS feeds are a form of XML, which is a text format based on tags just like HTML. We’re going to create a page using XML tags instead of HTML, and pull in the content from the News page using perch_content_custom().\n\n## Creating the page\n\nFirst we need to add a new page to our site. I’m calling mine rss.php and placing it at the top level alongside my news.php page. RSS feeds are made up of two main parts. The first is general information about the feed (the title etc, similar in many ways to the <head> section of an HTML page) and then the news items themselves.\n\n```html\n    <?php include('perch/runtime.php'); ?>\n    <?php echo '<'.'?xml version=\"1.0\"?'.'>'; ?>\n    <rss version=\"2.0\">\n    <channel>\n        <title>Example Co News</title>\n        <link>http://example.com/news.php</link>\n        <description>News and information about Example Co</description>\n    </channel>\n    </rss>\n```\n\nThe first line is the familiar Perch runtime link. The strange incantation on the second line is a workaround necessary for using the XML `<?xml ... ?>` prolog on PHP servers which mistake this for a PHP opening tag. It’s strange, but copy it as written and it should be fine.\n\nNext we have the basic structure of the RSS feed. Go ahead and set the title, link and description to be whatever you need for your site. You could even make these editable using perch_content() regions.\n\nSo that’s the basic outline of the feed. Next we need to make a template to use in a repeating region for the news items.\n\n## Creating the template\n\nAdd a new file for your template in perch/templates/content/. I’m calling mine `_rss_item.html`. Starting the file name with an underscore causes it to be hidden from the web interface, as this isn’t a template we need available for regular regions.\n\n```html\n    <item>\n    <title></title>\n    <link></link>\n    <description>\n        <![CDATA[\n\n        ]]>\n    </description>\n    </item>\n```\n\nAgain, the basic outline for an item is quite simple. The only strange thing here is the CDATA block inside the <description> tags – that’s required if we want to put HTML inside the item.\n\nNext we need to add the perch:content tags to our template, using the same id attributes as appear in the template that our main news items use. For me, that’s article.html.\n\n```html\n    <item>\n    <title><perch:content id=\"heading\" type=\"text\" label=\"Heading\"></title>\n    <link>http://example.com/news.php#news<perch:content id=\"perch_item_index\" type=\"hidden\"></link>\n    <description>\n        <![CDATA[\n            <perch:content id=\"body\" type=\"textarea\" label=\"Body\" textile>\n        ]]>\n    </description>\n    </item>\n```\n\nIf you want to use just an excerpt in your feed, you can use the [words attribute](http://docs.grabaperch.com/docs/templates/attributes/words/) to limit the number of words you output.\n\nWorth noting here is the way the content for the <link> tag is created. We’re using the perch_item_index special value to create a link to the item on our news page. To make this work, I’ve added the same to the article template:\n\n```html\n    <h2 id=\"news<perch:content id=\"perch_item_index\" type=\"hidden\">\">...</h2>\n```\n\nObviously, you’ll also want to update the http://example.com/news.php to be the correct URL of your news page.\n\n## Putting the two together\n\nSo we have our RSS page, and we have a template to display the items. We just need to put the two together. The items appear after the <description> tags in an RSS feed.\n\n```html\n    <?php include('perch/runtime.php'); ?>\n    <?php echo '<'.'?xml version=\"1.0\"?'.'>'; ?>\n    <rss version=\"2.0\">\n      <channel>\n        <title>Example Co News</title>\n        <link>http://example.com/news.php</link>\n        <description>News and information about Example Co</description>\n        <?php\n            $opts = array(\n                    'page'=>'/news.php',\n                    'template'=>'_rss_item.html'\n                );\n            perch_content_custom('News', $opts);\n        ?>\n      </channel>\n    </rss>\n```\n\nWe set the options for perch_content_custom() to take the content from the page our news is on, and tell it to use the template we created for the RSS items. We then use the same region name that our news page uses.\n\n## Linking the feed to the news page\n\nRSS feeds are included using a <link> tag in the <head> of a page. This is how you get the feed to show up as an RSS icon in the browser’s location bar. Add the following to the <head> section of your news page:\n\n```html\n    <link rel=\"alternate\" type=\"application/rss+xml\" title=\"RSS\" href=\"/rss.php\">\n```\n\nAnd that’s it – we’re done.","type":"perch"},{"title":"Creating a FAQ","permalink":"https://docs.grabaperch.com/perch/content/functions/how-do-i-create-a-faq/","id":"perch.content.functions.how-do-i-create-a-faq","excerpt":"**How do I create a FAQ?**","text":"**How do I create a FAQ?**\n\nAn FAQ page often has a list of links at the top, skipping down to the answers below. This solution demonstrates how to create this in Perch.\n\nIn this tutorial we will create an example FAQ page using a custom template. We will also use perch_content_custom to create a list of links at the top of the page jumping down to the individual FAQ answers.\n\nThe first thing we need to do is to create our FAQ template. The quickest way to do that is to look in the perch/templates/content directory and grab one of the example templates as a starting point. I’m going to use article.html.\n\nOpen article.html in a text editor save it as faq.html and delete everything other than the heading and body tags.\n\nI am also going to change the Heading tag to be named Question and Body to Answer just to make it clear to editors what needs to be entered here and, as this will be a list of FAQ questions and answers, I’ve wrapped the items in an li element.\n\nThe final code for this template is shown below. Save the template.\n\n```html\n    <li>\n      <h2><perch:content id=\"question\" type=\"text\" label=\"Question\" required></h2>\n      <perch:content id=\"answer\" type=\"textarea\" label=\"Answer\" textile editor=\"markitup\" required>\n    </li>\n```\n\nNow go back to your FAQ page. We just need to add Perch to this page.\n\nAdd the include for the Perch runtime at the top of the document and then add a Perch Region to create a content area for the FAQ. I have surrounded this call with an unordered list to wrap the list items in the FAQ template that I created in the last step.\n\n```html\n    <ul class=\"faq\">\n      <?php perch_content('FAQ'); ?>\n    </ul>\n```\n\nYou are ready to start adding FAQ items. Refresh your FAQ page so that Perch picks up the new region, then log into the administration area. You should see that your FAQ page is now showing as having new content.\n\nClick on the page name, then on the FAQ Reqion within that page.\n\nSelect FAQ from the dropdown list for template. As you will want the user to be able to add multiple FAQ items, check the allow multiple checkbox and submit the form.\n\nThe page will reload and you will be able to add your first FAQ item. After adding the item click the “Save, and add another” button to add another item.\n\nIf you have a lot of items you may want to switch this region into List/Detail View. Just visit the Region Options and uncheck ‘Edit all on one page’ to enable this.\n\nAfter adding your items refresh the FAQ page on your site to view the content.\n\n## Adding a list of links to individual FAQ items\n\nThe above process might be all you need for your FAQ page, however on a long page you might like to have a list of the questions at the top of the page and use an anchor to jump to individual answers. You achieve this in Perch by using the `perch_content_custom()` function.\n\nThe `perch_content_custom()` page function is really useful if you want to reuse content from one page on another (for example showing two items from your news page on the homepage) it can also be used to create an anchor list for our FAQ page.\n\nAbove your FAQ list add the following code:\n\n```html\n    <ul class=\"questions\">\n    <?php\n      perch_content_custom('FAQ', array(\n        'template'=>'faq_question.html',\n        'page'=>'/faq.php'\n      ));\n    ?>\n    </ul>\n```\n\nWe are opening an unordered list for the links.\n\nThen we call perch_content_custom passing in the ID of the area on the page our content should come from, which is ‘FAQ’, and an array of options.\n\nIn this case our options are quite simple:\n\n* template is set to `faq_question.html`, we will create this template next\n* page is set to `/faq.php` this is my FAQ page in my site\n\nNow create a new template in the `perch/templates/content` directory with a single list item of the question. Wrap the question in a link.\n\nTo create our anchors in the link we can use the `perch_item_index` tag, which will give you the unique index of that content item. This is ideal for creating our anchor links by adding the unique id onto the end of the word faq, creating an ID of `faq1`, `faq2` and so on.\n\n```html\n    <li>\n      <a href=\"#faq<perch:content id=\"perch_item_index\" type=\"hidden\">\">\n        <perch:content id=\"question\" type=\"text\" label=\"Question\" required>\n      </a>\n    </li>\n```\n\nNow open the initial `faq.html` template that you created and add an ID to the `h2` element, the ID value will be the word `faq` plus the item index. The attribute type needs to have a value of hidden to stop this showing up as an editable field in the admin.\n\n```html\n    <li>\n      <h2 id=\"faq<perch:content id=\"perch_item_index\" type=\"hidden\">\">\n        <perch:content id=\"question\" type=\"text\" label=\"Question\" required>\n      </h2>\n\n      <perch:content id=\"answer\" type=\"textarea\" label=\"Answer\" textile editor=\"markitup\" required>\n    </li>\n```\n\nTo get your content to pick up the template changes you will need to visit the page in the admin and edit and save the FAQ region. After doing this refresh your page and you should see that you have a list of FAQ questions at the top of the page, clicking on any question will jump down to the FAQ answer.","type":"perch"},{"title":"Create a Google Sitemap","permalink":"https://docs.grabaperch.com/perch/content/functions/how-do-i-create-a-google-sitemap/","id":"perch.content.functions.how-do-i-create-a-google-sitemap","excerpt":"**How do I create a Google Sitemap**","text":"**How do I create a Google Sitemap**\n\n[Sitemaps](http://www.sitemaps.org/) are an easy way for webmasters to inform search engines about pages on their sites that are available for crawling. In its simplest form, a Sitemap is an XML file that lists URLs for a site along with additional metadata about each URL (when it was last updated, how often it usually changes, and how important it is, relative to other URLs in the site) so that search engines can more intelligently crawl the site.\n\nWhilst a fully featured Sitemap is quite a bit of work, Perch can create a simple Sitemap automatically and easily using the navigation functionality.\n\n## Create a navigation template\n\nFirst, create a new navigation template at perch/templates/navigation/sitemap.html containing the following.\n\n```html\n    <perch:before><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n    <urlset xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\">\n    </perch:before>\n    <url>\n    \t<loc>http://example.com<perch:pages id=\"pagePath\"></loc>\n    </url>\n    <perch:after>\n    </urlset>\n    </perch:after>\n```\n\nUpdate the template to contain your URL rather than example.com and save it.\n\n## Create the sitemap page\n\nNormally, the convention is to create your Sitemap as sitemap.xml at the root of your site. See Using Different File Extensions for how to configure Perch to run without a .php extension.\n\nFor now, create your file as sitemap.php at the top level of your website.\n\nThe first thing this file does is set the Content-type header to state that it’s an XML document. Then it just includes the Perch runtime, and called perch_pages_navigation() to output the site structure using the sitemap.html template we created.\n\n```html\n    <?php\n\t    header('Content-type: application/xml');\n\t    include('perch/runtime.php');\n\t    perch_pages_navigation(array(\n\t\t    'template'=>'sitemap.html',\n\t\t    'flat'=>true\n\t\t  ));\n    ?>\n```\n\nThat should be it – you now have a basic, but fully functional Sitemap which can be submitted to Google using the Web Master Tools.","type":"perch"},{"title":"Create a list detail page","permalink":"https://docs.grabaperch.com/perch/content/functions/how-do-i-create-list-detail-pages/","id":"perch.content.functions.how-do-i-create-list-detail-pages","excerpt":"**How do I create list and detail pages in Perch?**","text":"**How do I create list and detail pages in Perch?**\n\nA common pattern in many websites is the idea of list-and-detail pages. One view shows a list of items, and clicking through shows more detail about the chosen item. This can be accomplished with Perch using a multiple-item content region.\n\nThis guide will show you how to set up list and detail pages for a simple list of products. The same technique would apply for many other types of content, such as news articles, real estate listings, events and so on.\n\nIf you get lost, you can download the example files from the end of the article and get back on track.\n\n## Setting up the templates\n\nWe need two templates – one for the detail view (showing all the information) and one shortened view for the listing page.\n\n### Detail template\n\nThe detail template is the master template – the one that’s used for editing. It needs to include fields for all the information you want to appear in the edit form. It is used for the detail page when the user clicks through from a listing.\n\nIn our case, it needs to represent one single product. Save this as product_detail.html\n\n```html\n    <h1><perch:content id=\"title\" type=\"text\" label=\"Product title\" required title></h1>\n    <perch:content id=\"image\" type=\"image\" label=\"Image\" width=\"640\" output=\"tag\">\n    <perch:content id=\"desc\" type=\"textarea\" label=\"Description\" textile editor=\"markitup\">\n    <p>Price: &pound;<perch:content id=\"price\" type=\"text\" label=\"Price\" format=\"#:2\"></p>\n    <perch:content id=\"slug\" for=\"title\" type=\"slug\" suppress>\n    <perch:content id=\"image\" type=\"image\" label=\"Image\" width=\"100\" height=\"100\" crop suppress>\n```\n\nAt the end of the template we’ve added an additional size for the image – the suppress attribute will stop it being output on the detail template, but keeps it available for us to use on the listing template. As this is the master template, all the image sizes we want to use need to be defined here, else they won’t be created.\n\nWe’ve also added a ‘slug’ field. This makes a URL-friendly version of the title for use when linking to the detail page. It is also suppressed, as we don’t want to show it here, just make sure it’s created.\n\n### List template\n\nThe list template is just a simplified version of the detail template. The only addition is before and after sections, to add the right markup for a list. Save this as product_listing.html\n\n```html\n    <perch:before>\n    <ul>\n    </perch:before>\n    <li>\n     <a href=\"?s=<perch:content id=\"slug\" type=\"slug\">\">\n          <perch:content id=\"image\" type=\"image\" width=\"100\" height=\"100\" crop output=\"tag\">\n          <perch:content id=\"title\" type=\"text\">\n     </a>\n    </li>\n    <perch:after>\n    </ul>\n    </perch:after>\n```\n\nAs well as adding markup to make this a list of items (the `<ul>` and `<li>` tags) we’ve added a link. The link uses the slug field as a query string parameter. That means that if our listing page URL looks like:\n\n`/products.php`\n\na detail page might look like:\n\n`/products.php?s=wooden-handled-claw-hammer`\n\nYou can, of course, use mod_rewrite rules to write cleaner URLs, but we’ll keep this simple for now.\n\n## Setting up the page\n\nNow that we have our templates, it’s time to create the page. We’re going to use one page that acts in a different way depending if it’s in list or detail mode.\n\n_Tip: You can use two different pages if you prefer, by splitting the parts out. Perhaps follow along with this one-page example first, until you understand how it’s working._\n\nCreate a new page, products.php, with whatever boilerplate code you’d like to use for the page. Here’s mine:\n\n```html\n    <?php include('perch/runtime.php'); ?>\n    <!doctype html>\n    <html lang=\"en\">\n      <head>\n        <meta charset=\"utf-8\">\n        <title>Products</title>\n      </head>\n      <body>\n\n      </body>\n    </html>\n```\n\n## Creating the region\n\nNormally, new regions are created by putting a `perch_content()` region in the page. In this instance, we’ll be displaying the content using `perch_content_custom()` for both the list and the detail view. Therefore, we’ll use `perch_content_create()` to set up the region instead.\n\n```php\n    <?php\n    perch_content_create('Products', array(\n     'template'   => 'product_detail.html',\n     'multiple'    => true,\n     'edit-mode' => 'listdetail',\n    ));\n    ?>\n```\n\nHere we’re specifying the detail template as the master template for the region. We’re setting multiple to true, so that the region allows for multiple items, and setting the edit mode to list/detail (rather than editing all the items at once).\n\nWhen the page loads, this region will be created at set up, if it doesn’t already exist.\n\nRefresh the page, check that it shows up in admin, and add a few products to test with – you’ll need them in a moment so that you know it’s all working.\n\n## Choosing a mode – list or detail?\n\nWe next need to add some logic to the page to decide whether to show list mode or detail mode. We’ll do that by looking to see if there’s a product slug on the page URL. We do that with `perch_get()`, which is a helper function that looks for items on the query string.\n\n```php\n    <?php\n    if (perch_get('s')) {\n\n     // Detail mode\n\n    } else {\n\n     // List mode\n\n    }\n\n  ?>\n```\n\nThe logic says “if s=something is set on the query string, show detail mode, otherwise, show list mode”.\n\n## Adding the list code\n\nWe’re going to use `perch_content_custom()` to show the list code. All we need it to do is show the region using the list template.\n\n```php\n    perch_content_custom('Products', array(\n     'template' => 'product_listing.html',\n    ));\n```\n\nThis goes in the ‘else’ section:\n\n```php\n    <?php\n    if (perch_get('s')) {\n\n     // Detail mode\n\n    } else {\n\n     // List mode\n     perch_content_custom('Products', array(\n          'template' => 'product_listing.html',\n     ));\n    }\n\n    ?>\n```\n\nIf you load your page in the browser, you should see your test products listed. Click through to one of them, and should get nothing… yet. Note how the URL now has a s= query string parameter that contains your product slug. It’s this that we’ll use to filter the detail view to show just one product.\n\n## Adding the detail code\n\nTo display the detail view of a single product, we need to get clever. We know the ‘slug’ from the value of s= on the query string. We need to feed that into a filter with `perch_content_custom()`\n\n```php\n    perch_content_custom('Products', array(\n     'template' => 'product_detail.html',\n     'filter' => 'slug',\n     'match' => 'eq',\n     'value' => perch_get('s'),\n     'count' => 1,\n    ));\n```\n\nAs this is the detail view, we’ve chosen the product_detail.html template to use. The filter, match and value options are saying “find any items where the slug is equal to whatever s= is on the query string”. And then just to be sure, we set the count to 1, as we only every want to output a single item here.\n\nThis goes in the top half of the if block:\n\n```php\n    <?php\n    if (perch_get('s')) {\n\n     // Detail mode\n     perch_content_custom('Products', array(\n          'template' => 'product_detail.html',\n          'filter' => 'slug',\n          'match' => 'eq',\n          'value' => perch_get('s'),\n          'count' => 1,\n     ));\n    } else {\n\n     // List mode\n     perch_content_custom('Products', array(\n          'template' => 'product_listing.html',\n     ));\n    }\n\n    ?>\n```\n\nReload your previously empty ‘detail’ page in the browser, and you should see your content appear. That’s it, we’re done!\n\n[Download the files for this solution](https://static.grabaperch.com/docs/download-list-detail.zip)","type":"perch"},{"title":"Previous and Next Links in content","permalink":"https://docs.grabaperch.com/perch/content/functions/how-do-i-link-prev-next/","id":"perch.content.functions.how-do-i-link-prev-next","excerpt":"**How do I create links to previous and next items?**","text":"**How do I create links to previous and next items?**\n\nWhen using a multiple item region, particularly with a list/detail display, it is sometimes useful to be able to link to the next or previous item in that region. This can be done with some simple filtering and ordering using `perch_content_custom()`\n\nHere's the scenario; we have a multiple item region set up using the [list and detail](/architecture/how-do-i-create-list-detail-pages) approach. On the detail page, it would be great to be able to show links to the previous and next items in the list, with the user needing to navigate back to the list to find them.\n\nTo do this we need three `perch_content_custom()` calls:\n\n1. The original call that finds the main item we're looking at\n2. A call to find the previous item\n3. A call to find the next item\n\n## Modifying the main call\n\nTaking the example from the [list and detail](/architecture/how-do-i-create-list-detail-pages) solution, our `perch_content_custom()` call used to show the detail view looks like this:\n\n```php\nperch_content_custom('Products', array(\n    'template' => 'product_detail.html',\n    'filter'   => 'slug',\n    'match'    => 'eq',\n    'value'    => perch_get('s'),\n    'count'    => 1,\n));\n```\n\nWe need to make an important change to this in order to have the information we need to find the next and previous items. We need to use the `skip-template` option to return the raw content, and then use the `return-html` option to make sure we get the HTML back too.\n\nThe result looks like this:\n\n```php\n$result = perch_content_custom('Products', array(\n    'template'      => 'product_detail.html',\n    'filter'        => 'slug',\n    'match'         => 'eq',\n    'value'         => perch_get('s'),\n    'count'         => 1,\n    'skip-template' => true,\n    'return-html'   => true,\n));\n```\n\nBecause of the `skip-template`, this call won't output anything to the page. We need to do that with a simple `echo` statement:\n\n```php\necho $result['html'];\n```\n\nThis leaves us with the main detail item being output to the page just as before, but now we have the raw content fields also available to us in the variable `$result`.\n\n## Creating the template\n\nTo show the previous and next items, we need a template. This can be anything from a simple link, to a mini preview of the content item. You have the full range of content available, including images and so on.\n\nSave this as `product_prevnext.html` in your templates folder.\n\n```html\n<a href=\"?s=<perch:content id=\"slug\" type=\"slug\">\">\n    <perch:if exists=\"is_prev\">Previous<perch:else>Next</perch:if>:\n    <perch:content id=\"image\" type=\"image\" width=\"100\" height=\"100\" crop output=\"tag\">\n    <perch:content id=\"title\" type=\"text\">\n</a>\n```\n\n## Finding the Next item\n\nTo find the next item, the logic is simple:\n\n1. Sort the region\n2. Filter for just the items that come _after_ our main item in the list\n3. Take the first one of those left\n\nRemember we have our main item stored in the variable `$result`, so we can make use of that here.\n\n```php\nperch_content_custom('Products', array(\n    'template'   => 'product_prevnext.html',\n    'filter'     => '_order',\n    'match'      => 'gt',\n    'value'      => $result[0]['_sortvalue'],\n    'sort'       => '_order',\n    'sort-order' => 'ASC',\n    'count'      => 1,\n));\n```\n\nThere's a neat trick at play here. We're filtering on a special value of `_order`. This is the 'natural' order of the items within the region. According to this filter, the `_order` needs to be greater than (`gt`) the `_sortvalue` of the main item.\n\n`_sortvalue` is the other part of the trick. This is the value that was used for sorting when the main item was found. So if it was found using the natural order (no sort value) then it would be its `_order`. If you sorted by another field, say price, then `_sortvalue` would be the price. This enables you to figure out a relational order between items no matter how they're sorted.\n\nWe're sorting by the regions natural order, and filtering where the position in that order is greater than the main item's position. And then just taking the first result.\n\n## Finding the Previous item\n\nThe process for the previous item is just the same, but we reverse the filtering and ordering. We need to find the items whose order puts them before our main item in the list, and then just pick off the last one. We don't have the tools to pick off the last one, so we reverse the order (`'sort-order'=>'DESC'`) and pick off the first.\n\nWe also need to set that `is_prev` value that our template is using to display the correct labels.\n\n```php\nPerchSystem::set_var('is_prev', true);\n\nperch_content_custom('Products', array(\n    'template'   => 'product_prevnext.html',\n    'filter'     => '_order',\n    'match'      => 'lt',\n    'value'      => $result[0]['_sortvalue'],\n    'sort'       => '_order',\n    'sort-order' => 'DESC',\n    'count'      => 1,\n));\n```\n\nThat gives us our previous item.\n\n## Sorting by a particular field\n\nIf you want to sort the region by something other than its natural order, you just need to set the same `sort` option on all three `perch_content_custom()` calls, and update the `filter` on the previous and next items to use that field too.","type":"perch"},{"title":"How to pass options to custom functions","permalink":"https://docs.grabaperch.com/perch/content/functions/passing-options-to-custom-functions/","id":"perch.content.functions.passing-options-to-custom-functions","excerpt":"When you use `perch_content_custom`, `perch_collection` or any of the App custom functions you pass options into the function with a PHP array.","text":"When you use `perch_content_custom`, `perch_collection` or any of the App custom functions you pass options into the function with a PHP array.\n\nIn the documentation you can see an example:\n\n```php\n<?php\n  perch_content_custom('News', array(\n    'page'=>'/news/index.php',\n    'template'=>'article.html',\n    'sort'=>'date',\n    'sort-order'=>'DESC',\n    'count'=>1\n  ));\n?>\n```\n\nWhat is happening here? The first thing we pass in is the name of the Perch Region we are using as a string, so this is either a Region you created with the perch_content function and are now replacing with perch_content_custom, a region created elsewhere with perch_content_create or a Region defined elsewhere on your page or site.\n\nNext we have some options stored in an array. The array looks like this if we remove it from the function.\n\n```php\narray(\n  'page'=>'/news/index.php',\n  'template'=>'article.html',\n  'sort'=>'date',\n  'sort-order'=>'DESC',\n  'count'=>1\n)\n```\n\nThe string on the left of the fat arrow `=>` is the key, so this is the option name, and on the right is the value you want to set for that option. Unless indicated in the documentation, most options are not required. You only need to set the things you want to change the default behaviour of.\n\nWe normally show this options array passed into the function as in the first example. However if you prefer you can write it to a variable and then pass the variable into the array, so the example below is the same as the first example.\n\n```php\n<?php\n  $opts = array(\n    'page'=>'/news/index.php',\n    'template'=>'article.html',\n    'sort'=>'date',  \n    'sort-order'=>'DESC',\n    'count'=>1\n  )\n  perch_content_custom('News', $opts);\n?>\n```\n\nIn our example you can see that one of the options is `page`. For perch_content_custom this means you can use content created on another page of your site. Make sure it is set to a full path from the root of your site.\n\nYou can also pass in a template with the `template` option. This means that you can use a different template to the one used to create the content – perhaps this use only requires some of the fields, or you wish to use different markup. Perhaps your article when posted in full uses an h1 for the main heading, but your homepage shows an excerpt using an h3 as the story title, this is all possible by creating a new template.\n\nFor Content and Collections templates should be stored in perch/templates/content or in a subfolder of that folder, so the path to the template is relative to the folder. In the example above article.html is directly inside the perch/templates/content folder. First party app templates are stored in their own folder – for example perch/templates/blog.","type":"perch"},{"title":"Display an item at random","permalink":"https://docs.grabaperch.com/perch/content/functions/show-one-random-item/","id":"perch.content.functions.show-one-random-item","excerpt":"**How do I display a random item from a multiple-item region?**","text":"**How do I display a random item from a multiple-item region?**\n\nYou have a multiple-item region and would like to display one item at random from it, perhaps on your homepage.\n\nYou can select from content used elsewhere on your site with `perch_content_custom`. To display the content randomly use a sort-order of `RAND`, to display only one item set count to 1.\n\n```php\n    <?php perch_content_custom('Testimonials',array(\n      'page' => '/testimonials.php',\n      'template' => '_home_testimonial.html',\n      'sort' => 'familyname',\n      'sort-order' => 'RAND',\n      'count' => 2\n    ));\n```\n\nYou can also see this solution in our video tutorial on [using perch_content_custom](/video/tutorials/swift/using-perch-content-custom/).","type":"perch"},{"title":"Sorting data","permalink":"https://docs.grabaperch.com/perch/content/functions/sorting-data/","id":"perch.content.functions.sorting-data","excerpt":"When you use `perch_content_custom`, `perch_collection` or any of the App custom functions you can use the options array to tell Perch the order you want the data returned in.","text":"When you use `perch_content_custom`, `perch_collection` or any of the App custom functions you can use the options array to tell Perch the order you want the data returned in.\n\nI have a template which allows data about sites to be leased to be entered as Perch Content. In that template we have:\n\n- a name\n- number of bedrooms\n- a description\n- whether the apartment is leased or not\n\nThese are represented by template IDs:\n\n- apartmentname\n- rooms\n- description\n- leased\n\n```html\n<div class=\"apartment\">\n  <h3 class=\"<perch:if id=\"leased\" value=\"yes\">leased<perch:else>available</perch:if>\"><perch:content id=\"apartmentname\" type=\"text\" label=\"Name\" required title> <span>- <perch:if id=\"leased\" value=\"yes\">leased<perch:else>available</perch:if></span></h3>\n  <p>No. of rooms: <perch:content id=\"rooms\" type=\"text\" label=\"No. of bedrooms\" required size=\"s\"></p>\n  <div class=\"description\">\n    <perch:content id=\"description\" type=\"textarea\" label=\"Description\" markdown editor=\"markitup\" required>\n  </div>\n</div>\n<perch:content id=\"leased\" type=\"checkbox\" label=\"Apt. is leased\" value=\"yes\" suppress>\n```\n\nTo order your data you need to pass in two options as described in the documentation, ‘sort’ which is the ID of the data you want to use to sort the content, and ‘sort-order’ which should be one of the following values:\n\n- `ASC` – sort in ascending order\n- `DESC` – sort in descending order\n- `RAND` – sort in random order\n\nYou can also pass in a third option `sort-type`. This can be either:\n\n- alpha\n- numeric\n\nThe default is alpha, so you only need to pass this in if you are dealing with something that is always a number so we can treat it as one when the data is sorted.\n\n## Sorting in practice\n\nIf I want to display my apartments alphabetically by name (A to Z)\n\n```php\n<?php perch_content_custom('Intro', array(\n  'page' => '/apartments',\n  'sort' => 'apartmentname',\n  'sort-order' => 'ASC',\n  'template' => 'apartment.html'\n)); ?>\n```\n\nIf I want to reverse that and show them Z to A, I just change the sort-order.\n\n```php\n<?php perch_content_custom('Intro', array(\n  'page' => '/apartments',\n  'sort' => 'apartmentname',\n  'sort-order' => 'DESC',\n  'template' => 'apartment.html'\n)); ?>\n```\n\nTo show them with the smallest number of rooms first – and here I am adding the sort-type option set to numeric.\n\n```php\n<?php perch_content_custom('Intro', array(\n  'page' => '/apartments',\n  'sort' => 'rooms',\n  'sort-order' => 'ASC',\n  'sort-type' => 'numeric',\n  'template' => 'apartment.html'\n)); ?>\n```\n\nHere they are displayed with the largest number of rooms first.\n\n```php\n<?php perch_content_custom('Intro', array(\n  'page' => '/apartments',\n  'sort' => 'rooms',\n  'sort-order' => 'DESC',\n  'sort-type' => 'numeric',\n  'template' => 'apartment.html'\n)); ?>\n```","type":"perch"},{"title":"Two page list and detail","permalink":"https://docs.grabaperch.com/perch/content/functions/two-page-list-and-detail/","id":"perch.content.functions.two-page-list-and-detail","excerpt":"**How do I create two-page list and detail pages?**","text":"**How do I create two-page list and detail pages?**\n\nSometimes you want to have two different files handling list and detail duties. Here's how to set it up.\n\nIn [Creating List and Detail Pages](/perch/content/functions/how-do-i-create-list-detail-pages) we set up a single page that could act in both list and detail mode. Sometimes it’s desirable to have two different pages perform those tasks.\n\nThe key tasks are:\n\n1. Move the detail code onto its own page\n2. Update the detail code to reference the region on the listing page\n3. Update the listing template to link to the new page for detail links\n\n## Setting up the pages\n\nIn the previous example, we had the page `products.php` working in both list and detail mode. This time we’ll use `products.php` to act as the list page, and `product.php` as the detail page.\n\nThe list page, `products.php` has two jobs:\n\n1. To create and hold the region containing the content\n2. To show the list of products, each linking through to the detail page\n\nThe detail page, `product.php` does just one thing; show the detail of the product.\n\n## The list page\n\nJust as before, the list page needs to create the content region to hold the items.\n\n```php\n\t<?php\n\tperch_content_create('Products', array(\n\t     'template'   => 'product_detail.html',\n\t     'multiple'    => true,\n\t     'edit-mode' => 'listdetail',\n\t));\n\t?>\n```\n\nThen we need to add the list code.\n\n```php\n\tperch_content_custom('Products', array(\n\t     'template' => 'product_listing.html',\n\t));\n```\n\n## The detail page\n\nThe detail page needs to use the detail code as before, but this time adding a new option. We need to set the page option to point to the location of the listing page. This is because the region that holds the content lives on the listing page. In order to display the content, we need to tell Perch which page to get it from.\n\nThe page option needs a root-relative path, so it always starts with a forward-slash.\n\n```php\n\tperch_content_custom('Products', array(\n\t     'page' => '/products.php',\n\t     'template' => 'product_detail.html',\n\t     'filter' => 'slug',\n\t     'match' => 'eq',\n\t     'value' => perch_get('s'),\n\t     'count' => 1,\n\t));\n```\n\nIn this case, I’m pointing it to `/products.php` to get the content. That means the `products.php` page in the root of the website. If `products.php` were to be in a subfolder, I’d need to adjust the path from the root of the site, e.g. `/what-we-do/products.php`.\n\n## Adjusting the templates\n\nThe only thing left to do is change the listing template to make sure it links to the location of the detail page.\n\nWhere we previously had a link to the detail view:\n\n```html\n\t<a href=\"?s=<perch:content id=\"slug\" type=\"slug\">\"> … </a>\n```\n\nwe need to update the href to make sure the page name is included:\n\n```html\n\t<a href=\"product.php?s=<perch:content id=\"slug\" type=\"slug\">\"> … </a>\n```\n\nYour two-page list and detail should now be complete.","type":"perch"},{"title":"A user-filtered list","permalink":"https://docs.grabaperch.com/perch/content/functions/user-filtered-lists/","id":"perch.content.functions.user-filtered-lists","excerpt":"**How do I create a user-filterable list?**","text":"**How do I create a user-filterable list?**\n\nYou can a region that you'd like the website visitor to be able to filter using a form. Here's how to do it using multiple dynamic filters.\n\nIt's a fairly common scenario that you have a long list of items that you'd like the user to be able to search (or more accurately, filter) using a form on the page. In this example, we'll take a real estate listing.\n\nOur region, _Properties_, contains a large number of houses, apartments and studios. It has fields for the number of bedrooms, the location (inner city or suburbs) and the price.\n\nNormally, we'd display the listing like this:\n\n```php\nperch_content_custom('Properties', array(\n    'template'   => 'property_listing.html',\n    'sort'       => 'price',\n    'sort-order' => 'DESC',\n));\n```\n\nThis lists all our properties, most expensive to least expensive.\n\n## Creating a filtering form\n\nThe first thing to do is create a form on the page for the user to make their selections.\n\nInstall the Forms app if you haven't already, as this gives us access to the handy `perch_form()` function for displaying forms without needing a content region.\n\nIn your page:\n\n```php\nperch_form('property_filter.html');\n```\n\nThen create a new file at `perch/templates/forms/property_filter.html` and start building up your form.\n\n```html\n<perch:form id=\"filter\" method=\"get\">\n\t<div>\n\t\t<perch:label for=\"type\">Type</perch:label>\n    \t<perch:input type=\"select\" id=\"type\" options=\",House|house,Apartment|apartment,Studio|studio\">\n    </div>\n\t<div>\n\t\t<perch:label for=\"beds\">Bedrooms</perch:label>\n    \t<perch:input type=\"select\" id=\"beds\" options=\",1,2,3,4\">\n    </div>\n    <div>\n\t\t<perch:label for=\"location\">Location</perch:label>\n    \t<perch:input type=\"select\" id=\"location\" options=\",City|city, Suburbs|suburbs\">\n    </div>\n    <div><perch:input type=\"submit\" value=\"Filter\"></div>\n</perch:form>\n```\n\nYou want to add fields for each thing you want to filter by. This form uses the `GET` HTTP method, so when it's submitted, the chosen options will be added to the URL as a query string, something like:\n\n    ?beds=3&location=city\n\n## Filtering from the URL options\n\nOnce you have the options set on the URL, you can create your filters.\n\n```php\n// Create an empty array ready to add our filters to\n$filters = array();\n\nif (perch_get('type')) {\n\t// if 'type' is on the URL, add a filter for bedrooms\n\t$filters[] = array(\n\t\t'filter' => 'type',\n\t\t'match'  => 'eq',\n\t\t'value'  => perch_get('type'),\n\t);\n}\n\nif (perch_get('beds')) {\n\t// if 'beds' is on the URL, add a filter for bedrooms\n\t$filters[] = array(\n\t\t'filter' => 'beds',\n\t\t'match'  => 'eq',\n\t\t'value'  => perch_get('beds'),\n\t);\n}\n\nif (perch_get('location')) {\n\t// if 'location' is on the URL, add a filter for the location\n\t$filters[] = array(\n\t\t'filter' => 'location',\n\t\t'match'  => 'eq',\n\t\t'value'  => perch_get('location'),\n\t);\n}\n\n// Unset the filters if none are used:\nif (!count($filters)) $filters=false;\n\n// Then get the list\nperch_content_custom('Properties', array(\n    'template'   => 'property_listing.html',\n    'sort'       => 'price',\n    'sort-order' => 'DESC',\n    'filter'     => $filters,\n));\n```","type":"perch"},{"title":"Adding Help Text","permalink":"https://docs.grabaperch.com/perch/content/templates/adding-help-text/","id":"perch.content.templates.adding-help-text","excerpt":"**How do I add help text to the Control Panel**","text":"**How do I add help text to the Control Panel**\n\nYou would like to add some information to help your content editors use the edit forms.\n\nWe've tried to make it possible for you to really guide your content editors through their use of Perch. One way is to add help text to edit forms and individual fields.\n\nTo add a block of help text at the top of an edit for use the perch:help tag.\n\n```html\n    <perch:help>\n    <p>Any amount of HTML-formatted help can be specified here, including images and links if required.</p>\n    </perch:help>\n```\n\nTo add help next to a certain field use the help attribute on that field.\n\n```html\n<perch:content type=\"text\" id=\"heading\" label=\"Heading\" help=\"Give the article a descriptive title\">\n```\n\nAdding help text in this way can really aid in enforcing the content strategy for your site.","type":"perch"},{"title":"Can I use HTML5?","permalink":"https://docs.grabaperch.com/perch/content/templates/can-i-use-html5/","id":"perch.content.templates.can-i-use-html5","excerpt":"**Can I use HTML5 with Perch?**","text":"**Can I use HTML5 with Perch?**\n\nPerch doesn’t insert anything into your website without you asking it to, this means that you can use any mark-up. So whether you prefer HTML4.01, XHTML or HTML5 or even want to edit an XML document, Perch will help you do that. In this solution we’ll have a look at some of the new HTML5 elements and how you can create templates for these. The example files that ship with Perch and first party add-ons all use HTML5.\n\nThe information and examples in this article have been mainly taken from the HTML5 Doctor website, which is a great first port of call if you want to start using HTML5. I have linked to the appropriate pages on that site throughout.\n\nTo start using HTML5, you need to use the HTML5 doctype on your pages:\n\n```html\n    <!DOCTYPE html>\n```\n\nThis is backwards compatible and you are safe to use this instead of your current HTML or XHTML doctype. You’ll find that if you were already coding in HTML 4.01 or XHTML that your pages should validate as HTML5 and you can carry on working in the way you have done, this is because you can write HTML5 in an HTML or XHTML style. From this point on it is up to you whether to just use older elements – or to begin to introduce some of the new HTML5 elements – whichever path you choose Perch can help.\n\n# HTML5 Boilerplate\n\nFor this tutorial I’m starting out with a page based on the HTML5 Boilerplate available from the HTML5 Doctor website. This includes some CSS and also a link to a JavaScript file that makes the new HTML5 elements stylable with CSS in versions of Internet Explorer earlier than IE9. You only need this if you are using the new structural elements and not for using HTML5 audio or video for example.\n\n```html\n    <!DOCTYPE html>\n    <html>\n    <head>\n      <meta charset=\"utf-8\">\n      <title>HTML 5 complete</title>\n      <!--[if IE]>\n      <script src=\"http://html5shiv.googlecode.com/svn/trunk/html5.js\"></script>\n      <![endif]-->\n      <style>\n       article, aside, details, figcaption, figure, footer, header,\n       hgroup, menu, nav, section { display: block; }\n      </style>\n    </head>\n    <body>\n    <p>Hello World</p>\n    </body>\n    </html>\n```\n\n## HTML5 Structural Elements\n\nHTML5 gives us semantic, meaningful ways to mark-up our content and describe what it is. It includes new elements such as article, section, nav and aside. The `<article></article>` element is used to mark-up an independent piece of content – something that could be republished and make sense outside of the site. A blog post would be a good example of content you would put inside the article element. See HTML5 Doctor – article for more examples.\n\nYou might use section instead of article if the thing you are marking up is not something that could be independently syndicated, however is still a complete section of a document – including a heading.\n\nThe nav element is for marking up navigation. The aside element can be used within article, in which case it refers to information related to that article or outside of an article, in which case it refers to information relating to the current web page.\n\nPerch, with its focus on structured content, is ideal as a CMS for managing content marked up using these HTML5 elements. For example, the following template would enable an editor to add an article, with an aside for further reading.\n\n```html\n    <article>\n        <h1><perch:content id=\"heading\" type=\"text\" label=\"Heading\" required title></h1>\n        <perch:content id=\"body\" type=\"textarea\" label=\"Article body\"\n    textile editor=\"markitup\" required>\n        <aside>\n\n          <h1>Further reading</h1>\n          <perch:content id=\"reading\" type=\"textarea\" label=\"Further reading\"\n    textile editor=\"markitup\" required>\n        </aside>\n    </article>\n```\n\nIt is allowed to have multiple articles on the page – if that is the case in your site you could set this to allow multiples in Perch.\n\n## HTML5 Audio and Video\n\nHTML5 gives us a way to include video and audio in HTML documents without needing any plugins. For example to include audio on a page you can use the following.\n\n```html\n    <audio controls preload=\"auto\" autobuffer>\n      <source src=\"elvis.mp3\">\n      <source src=\"elvis.ogg\">\n      Your browser does not support the <code>audio</code> element.\n    </audio>\n```\n\nAs a Perch template including the ability for the admin to upload the various files.\n\n```html\n    <audio controls preload=\"auto\" autobuffer>\n      <source src=\"<perch:content id=\"audiomp3\" type=\"file\" label=\"MP3 File\" order=\"1\">\">\n      <source src=\"<perch:content id=\"audioogg\" type=\"file\" label=\"Ogg File\" order=\"2\">\">\n      Your browser does not support the <code>audio</code> element.\n    </audio>\n```\n\nThis will embed video.\n\n```html\n    <video controls>\n      <source src=\"foo.ogg\" type=\"video/ogg\">\n      <source src=\"foo.mp4\">\n      Your browser does not support the <code>video</code> element.\n    </video>\n```\n\nHere it is as a Perch template.\n\n```html\n    <video controls>\n      <source src=\"<perch:content id=\"videomp4\" type=\"file\" label=\"MP4 File\" order=\"1\">\">\n      <source src=\"<perch:content id=\"videoogg\" type=\"file\" label=\"Ogg File\" order=\"2\">\" type=\"video/ogg\">\n      Your browser does not support the <code>video</code> element.\n    </video>\n```\n\nWith both audio and video, if you replace the comment with your chosen Flash solution this will then kick in if the browser does not have support for the video and audio elements. For example for the videos on this website – which play as HTML5 video if you have a supporting browser – use Flowplayer if the video element is unsupported. So your Perch video template would look like the below, if you were to do the same in Perch.\n\n```html\n    <video width=\"502\" height=\"376\" controls=\"controls\">\n      <source src=\"<perch:content id=\"videomp4\" type=\"file\" label=\"MP4 File\" order=\"1\">\">\n      <source src=\"<perch:content id=\"videoogg\" type=\"file\" label=\"Ogg File\" order=\"2\">\" type=\"video/ogg\">\n      <source src=\"<perch:content id=\"videowebm\" type=\"file\" label=\"webm File File\" order=\"3\">\"\n    type=\"video/webm\">\n      <a id=\"flashplayer\" href=\"<perch:content id=\"videoflv\" type=\"file\" label=\"FLV File\" order=\"4\">\"></a>\n      <script type=\"text/javascript\" charset=\"utf-8\">\n                flowplayer(\"flashplayer\", \"/assets/swf/flowplayer-3.1.1.swf\",  {\n                    clip: { autoPlay: false,  autoBuffering: true }\n                });\n      </script>\n    </video>\n```\n\nThe lists of formats for audio and video are due to the different browsers supporting different formats. You can read more about this on the HTML5 Doctor website – audio and video. For our Perch videos we use the online service encoding.com, uploading a .mov file and the service then returns the MP4, OGV, WEBM and FLV formats.\nHTML5 Blog templates\n\n*Happy HTML5-ing with Perch!*","type":"perch"},{"title":"Adding a class to every other item","permalink":"https://docs.grabaperch.com/perch/content/templates/add-class-to-odd-items/","id":"perch.content.templates.add-class-to-odd-items","excerpt":"**Can I add a class to every odd item?**","text":"**Can I add a class to every odd item?**\n\nYou want to add a class to every other item in Perch so you can style it using CSS.\n\nYou can use the [perch:every](/templates/conditionals/every/) tag to achieve this.\n\n```html\n<li<perch:every count=\"2\"> class=\"odd\"</perch:every>> ... </li>\n```\n\nWhile needing to add classes for presentational purposes is becoming less of a requirement as more browsers support CSS3 selectors such as `nth-child`, it is worth remembering that you could use this technique to include additional markup or anything else you want to do with alternate items.","type":"perch"},{"title":"Compressive images in Perch","permalink":"https://docs.grabaperch.com/perch/content/templates/compressive-images/","id":"perch.content.templates.compressive-images","excerpt":"**How do I use compressive images in Perch?**","text":"**How do I use compressive images in Perch?**\n\nIn their blog post Compressive Images, the Filament Group describe how a large image, heavily compressed and shown scaled down in the browser can result in a higher quality image without a big hit on file size. Sometimes even with a file size reduction.\n\nYou can [read the full post](http://filamentgroup.com/lab/rwd_img_compression/) for the lowdown. This is particularly useful for responsive design, where you might want to enable images to scale up and down, and when targeting hi-DPI screens like Apple’s Retina displays.\n\nSo how would you do that with a Perch template? There’s a few attributes on the image tag that can help. Let’s take a really basic image field as a starting point. We’ll use the output=\"tag\" attribute to have Perch output an entire image tag for us:\n\n```html\n\t<perch:content id=\"img\" type=\"image\" label=\"Image\" output=\"tag\" width=\"400\">\n```\n\nWe’re scaling the image down to 400px wide.\n\nThe two main characteristics of the compressive image technique are that the image is larger than it’s displayed, and that it’s more heavily compressed. The image field type has three attributes that help with that.\n\n* `density` -- set the pixel density of the image vs its display size, so makes the image bigger than it’s displayed\n* `quality` -- sets the compression level. It’s a value from 0 to 10.\n* `sharpen` -- sets the amount of sharpening added to the image. Again, 0 to 10, this defaults to 4. We can reduce the sharpening to lower the image quality.\n\nApplying those gives us a template tag like this:\n\n```html\n\t<perch:content id=\"img\" type=\"image\" label=\"Image\" output=\"tag\" width=\"400\" density=\"2\" quality=\"30\" sharpen=\"2\">\n```\n\nSetting the density to 2 makes the image file twice as big (800px wide). A quality of 30 makes it quite heavily compressed, and the sharpening can be reduced to 2 without too much definition being lost.\n\nThe exact values to use can depend roughly on the sorts of images and the intended purpose. A photographer’s portfolio would benefit from better quality at the expense of file size, whereas a news site might sacrifice more quality for speed. The above settings give me images of the same file size, the same appearance on regular screens, and a better quality image on a Retina display.","type":"perch"},{"title":"Toggling display with a checkbox","permalink":"https://docs.grabaperch.com/perch/content/templates/allow-editors-to-select-which-regions-to-show/","id":"perch.content.templates.allow-editors-to-select-which-regions-to-show","excerpt":"**How do I let my editor select which items to display in a multiple-item region?**","text":"**How do I let my editor select which items to display in a multiple-item region?**\n\nYou want your editors to be able to create a list of content and use a checkbox to display certain ones on the site.\n\nThe first step is to add a checkbox to your template. This will enable your editor to make their selection.\n\n```html\n<perch:content id=\"showprofile\" type=\"checkbox\" label=\"Display on site\" value=\"1\" suppress>\n```\n\nThe `suppress` attribute ensures that this does not output a `1` to your site when checked.\n\nWe can now test to see if the value of show profile is 1 using `perch:if`.\n\n```html\n    <perch:if id=\"showprofile\" value=\"1\">\n      <h3>\n\t\t    <perch:content id=\"firstname\" type=\"text\" label=\"First name\" required title order=\"1\">\n\t\t    <perch:content id=\"lastname\" type=\"text\" label=\"Last name\" required title order=\"2\">\n\t    </h3>\n\t    <p class=\"job-title\">\n\t\t    <perch:content id=\"jobtitle\" type=\"text\" label=\"Job title\" order=\"3\">\n\t    </p>\n\t\t  <perch:content id=\"showprofile\" type=\"checkbox\" label=\"Display on site\" value=\"1\" suppress>\n    </perch:if>\n```","type":"perch"},{"title":"Hide templates from the Control Panel selection","permalink":"https://docs.grabaperch.com/perch/content/templates/hide-templates-from-list/","id":"perch.content.templates.hide-templates-from-list","excerpt":"**How do I hide templates from the list in the Control Panel?**","text":"**How do I hide templates from the list in the Control Panel?**\n\nIf you are using templates for perch_content_custom you probably don't want these cluttering the select list when setting up a region.\n\nTo hide templates from the list in the Control Panel, start the template name with an underscore. The following template **will** appear in the list:\n\n```html\nmy_custom_template.html\n```\n\nRename it with an underscore at the start and it **will not** appear but still be accessible from `perch_content_custom`.\n\n```html\n_my_custom_template.html\n```","type":"perch"},{"title":"Re-using content with a dataselect","permalink":"https://docs.grabaperch.com/perch/content/templates/how-do-i-reuse-content-in-a-select-list/","id":"perch.content.templates.how-do-i-reuse-content-in-a-select-list","excerpt":"**How can I use content from one part of my site in a select list to create content on another page?**","text":"**How can I use content from one part of my site in a select list to create content on another page?**\n\nYour editors have created a list on one page of the site - for example a list of offices - you now want to let them select an office name from that list.\n\nYou can do this easily in Perch with our [dataselect](/templates/field-types/dataselect/) Field Type. It creates a select box which draws its options from the content of another region.\n\nI have a Region on my /careers/index.php page that lists the offices. The template used for this Region looks like this.\n\n```html\n    <perch:content id=\"title\" type=\"text\" label=\"Office name\" required title>\n    <perch:content id=\"slug\" for=\"title\" type=\"slug\">\n```\n\nOn my job listing page I want the editor to just be able to select one of the office names already entered on this page. I enable this with the following Perch template tag.\n\n```html\n    <perch:content id=\"office\" label=\"Office\" type=\"dataselect\" page=\"/careers/index.php\" region=\"Offices\" options=\"title\">\n```\n\n* The `page` attribute is the page that the original content is on\n* The type is `dataselect`\n* The `region` attribute is the Perch Region on the page\n* The `options` attribute is used to pass in the field or fields I want to use in my dataselect. You can use multiple fields, separated by spaces.\n* The `allowempty` boolean attribute is used to make the selection optional.","type":"perch"},{"title":"Correcting Links with the replace attribute","permalink":"https://docs.grabaperch.com/perch/content/templates/correcting-external-links-with-replace/","id":"perch.content.templates.correcting-external-links-with-replace","excerpt":"**How do I make sure people enter correct links to a website address?**","text":"**How do I make sure people enter correct links to a website address?**\n\nContent editors sometimes forget to add a full website address including the http:// leaving you with broken links on the site.\n\nYou can use the `replace` attribute on a template tag to ensure that you end up with an http:// at the beginning of a URL.\n\nFirstly add `http://` to the beginning of the link, this will ensure that all links start with `http://`. You now need to deal with the fact that some editors will add the http:// and you don't want it to appear twice.\n\nOn the template tag used to collect this information add the replace attribute with a value of `http://|`. This tells Perch that if it finds the string http:// in the field to replace it with nothing when displaying it.\n\n```html\n<a href=\"http://<perch:content id=\"url\" type=\"text\" label=\"Your website\" replace=\"http://|\">\">\n```","type":"perch"},{"title":"Uploading images and files","permalink":"https://docs.grabaperch.com/perch/content/templates/how-do-i-upload-images-and-files/","id":"perch.content.templates.how-do-i-upload-images-and-files","excerpt":"**How do I let content editors add images and files?**","text":"**How do I let content editors add images and files?**\n\nThis solution details how to give your editors the ability to upload images and files in the Perch admin.\n\nThere are a couple of ways in which Perch can be used to enable your client to add images and files to their content, either by using the file and image Perch Content tags or by allowing them to upload images inline using an editor.\n\n## Using the Perch Content tags\n\nPerch Content tags are used in your templates when defining content to be added by an editor. For example you might have a template with a heading, and image and a large block of text. See the video on Creating Templates to see how templates work in Perch.\n\nA Perch File Content Tag looks like this:\n\n```html\n    <perch:content id=\"report\" type=\"file\" label=\"Annual report PDF\">\n```\n\nThis will present a file upload field in the administration form and the editor can upload an image from their computer. When displayed on your site this will create a link to the file, stored in the Perch resources folder.\n\nA Perch Image Content Tag looks like this:\n\n```html\n    <perch:content id=\"logo\" type=\"image\" label=\"Logo\">\n```\n\nJust as with a file tag, this will present a file upload field in the administration form and the editor can upload an image from their computer. It is most likely that you will want to have some control over the dimensions of the image and so you can set the following attributes:\n\n* width\n* height\n* crop\n\nSetting width and height will scale the image. If you only set width then the image ratio will remain the same to scale the height, likewise if you set height we will scale the image within the correct ratio to get the width. If you want to force the image to a certain width AND height (for example making a square thumbnail) you need to set both width and height and also set the attribute crop to true.\n\n```html\n    <perch:content id=\"thumbnail\" type=\"image\" label=\"Thumbnail\" width=\"40\" height=\"40\" crop>\n```\n\n### Using the standard MarkItUp! Editor\n\nThe editor included in Perch has the ability to upload files into a textarea content block in Perch. Images can be optionally resized by using the imagewidth, imageheight and imagecrop attributes on the textarea content tag.\n\n### Using ckEditor\n\nWe have configured the ckEditor image upload button to also allow images uploads in Perch, this opens a modal dialogue and is standard ckEditor functionality.\n\n## Which should you use?\n\nIf you want to have full control over the placement of your images then using the Perch Content Tags gives the best control. You get to choose where on the page the image sits and how it falls in the layout with other things around it.\n\nIf however you just want your client to be able to add images inline of a blog post or page of text then the options to use MarkItUp or ckEditor can be very helpful, you can of course mix both methods across a site using Perch or even on one page.\n\n## Potential problems with image and file uploads\n\nUploading images and files is one place where we see problems based on the various ways hosting accounts are configured. Shared hosting is often configured with very low upload limits, so you may find you cannot upload an image greater than 2MB for example. Perch cannot override this setting. You can find out what your hosting is limited to by looking in your Diagnostic Report under Settings.\n\nPerch relies on one of the two most common image libraries being installed on your server. These are GD and ImageMagick. The Compatibility Test will tell you if you do not have one or other of these libraries – it is unusual to find shared hosting that does not support this.","type":"perch"},{"title":"Responsive Images in Perch","permalink":"https://docs.grabaperch.com/perch/content/templates/how-do-i-use-responsive-images-in-perch/","id":"perch.content.templates.how-do-i-use-responsive-images-in-perch","excerpt":"**How do I use responsive images in Perch?**","text":"**How do I use responsive images in Perch?**\n\nYou would like to ensure that as browsers begin to support the new picture element that your site takes advantage of it.\n\nThe _picture_ element, a method for using true responsive images on the web, is now making it's way into browsers. Perch makes it easy to use this new element in your designs so that as browsers start to add support your site will allow visitors to benefit.\n\n## First steps to responsive images\n\nAt the simplest level, if you have a responsive design then you are likely to not want heights and widths on images. Use the config setting [PERCH_RWD](http://docs.grabaperch.com/docs/installing-perch/configuration/markup/) set to true and where image tags are created they will not include height or width and the image will be able to respond to browser width.\n\n## The picture Element\n\nThe picture element covers a range of use cases. It gives you the ability to change image sizes based on responsive design rules, optimise images for high-dpi screens, serve images with different mime types and even to display different versions of an image descending on context. For example rather than just displaying a squished down big image on a mobile phone you might opt to show a cropped version.\n\nPerch works really well in combination with the picture element to help you communicate to content editors what is required for your design.\n\nIn this solution I have taken some of the examples used in [this post on Dev.Opera](http://dev.opera.com/articles/responsive-images/). I'm showing the markup, and then a Perch template that would give you this output.\n\nIn practice you would most likely be including the picture element within a larger template with other field types, to make up an article, post or product listing.\n\n## Art direction use case\n\nIn this case you want the content editor to upload two images. One will be used for large screens (wider than 1024 pixels) and the other a prepared crop for small screens. We use help text to guide the editor.\n\n### Output HTML\n\n```html\n    <picture>\n\t    <source media=\"(min-width: 1024px) srcset=\"opera-fullshot.jpg\">\n\t    <img src=\"opera-closeup.jpg\" alt=\"The Oslo Opera House\">\n    </picture>\n```\n\n### Perch template\n\n```html\n    <picture>\n\t    <source media=\"(min-width: 1024px)\" srcset=\"<perch:content type=\"image\" id=\"image\" label=\"Image\" help=\"Full size image for large screens\">\">\n\t    <img src=\"<perch:content type=\"image\" id=\"imagecloseup\" label=\"Closeup image\" help=\"Closeup image for small screens, will be resized down to 1024 pixels\" width=\"1024\">\" alt=\"<perch:content type=\"text\" id=\"alt\" label=\"Description\" required help=\"Description of subject of these images.\" title>\">\n    </picture>\n```\n\n## Different image types use case\n\nIn this case you want the content editor to upload a webp image for browsers that support it and a JPG or other format for the others.\n\n_**Note**: support for webp is coming to PHP. At the moment in Perch our suggestion is to use a file upload type in order that your file does not get mangled._\n\n### Output HTML\n\n```html\n    <picture>\n\t    <source srcset=\"opera.webp\" type=\"image/webp\">\n\t    <img src=\"opera.jpg\" alt=\"The Oslo Opera House\">\n    </picture>\n```\n\n### Perch Template\n\n```html\n    <picture>\n      <source srcset=\"<perch:content type=\"file\" id=\"webp\" label=\"Webp Image\" help=\"Webp image type for supporting browsers.\">\" type=\"image/webp\">\n      <img src=\"<perch:content type=\"image\" id=\"image\" label=\"Image\" help=\"Image for broswers without webp support\">\" alt=\"<perch:content type=\"text\" id=\"alt\" label=\"Description\" required help=\"Description of subject of these images.\" title>\">\n    </picture>\n```\n\n## High-DPI images use case\n\nIn this case we want our content editors to only upload one image. Perch will then create three images - a standard one plus two higher DPI images.\n\nWe use the density attribute of the perch:image tag and reuse the id of the image, in order that Perch will know to present just one upload field but create the different images specified.\n\nThe density attribute on a image acts as a multiplier on the dimensions you give. If an image is scaled to a width of 1024 with density=\"2\", Perch will actually scale it to 2048, but when asked will output a width value of 1024. It does more than save you some mental arithmetic, though, as it performs the same multiplication on the height, which you can’t know at the time of writing the template.\n\n### Output HTML\n\n```html\n    <img src=\"opera-1x.jpg\" alt=\"The Oslo Opera House\"\n\tsrcset=\"opera-2x.jpg 2x, opera-3x.jpg 3x\">\n```\n\n### Perch template\n\n```html\n    <img src=\"<perch:content id=\"image\" type=\"image\" width=\"1024\" label=\"Image\">\" alt=\"<perch:content type=\"text\" id=\"alt\" label=\"Description\" required help=\"Description of this image\" title>\" srcset=\"<perch:content id=\"image\" type=\"image\" width=\"1024\" label=\"Image\" density=\"2\"> 2x, <perch:content id=\"image\" type=\"image\" width=\"1024\" label=\"Image\" density=\"3\"> 3x\">\n```\n\n## High-DPI images & art direction use case\n\nIn this case we want to combine art direction - uploading a specific crop for smaller screens with the high-DPI technique. Our content editor will need to upload two images - Perch will create 6.\n\n### Output HTML\n\n```html\n    <picture>\n\t    <source media=\"(min-width: 1024px)\"\n\t\t  srcset=\"opera-fullshot-1x.jpg 1x,\n\t\t\t  opera-fullshot-2x.jpg 2x,\n\t\t\t\topera-fullshot-3x.jpg 3x\">\n\t<img src=\"opera-closeup-1x.jpg\" alt=\"The Oslo Opera House\"\n\t\tsrcset=\"opera-closeup-2x.jpg 2x,\n\t\t\t\topera-closeup-3x.jpg 3x\">\n    </picture>\n```\n\n### Perch template\n\n```html\n    <picture>\n\t    <source media=\"(min-width: 1024px)\"\n\t\t  srcset=\"<perch:content id=\"image\" type=\"image\" label=\"Image\" help=\"Full size image for large screens\"> 1x,\n\t\t\t  <perch:content id=\"image\" type=\"image\" label=\"Image\" density=\"2\"> 2x,\n\t\t\t\t<perch:content id=\"image\" type=\"image\" label=\"Image\" density=\"3\"> 3x\">\n\t<img src=\"<perch:content type=\"image\" id=\"imagecloseup\" label=\"Closeup image\" help=\"Closeup image for small screens, will be resized down to 1024 pixels\" width=\"1024\">\" alt=\"<perch:content type=\"text\" id=\"alt\" label=\"Description\" required help=\"Description of subject of these images.\" title>\"\n\t\tsrcset=\"<perch:content type=\"image\" id=\"imagecloseup\" label=\"Closeup image\" width=\"1024\" density=\"2\"> 2x,\n\t\t\t\t<perch:content type=\"image\" id=\"imagecloseup\" label=\"Closeup image\" width=\"1024\" density=\"3\"> 3x\">\n    </picture>\n```\n\n## Changing image sizes use case\n\nIn this use case we want to use different image sizes for different browser window widths. Supporting browsers will select the best image to use. We want our content editor to just need to upload one image, in the case of the below template Perch will then create the main image (used as a fallback in non-supporting browsers) and 4 additional images at widths 200 pixels, 400 pixels, 800 pixels and 1200 pixels.\n\n### Output HTML\n\n```html\n    <img src=\"opera-fallback.jpg\" alt=\"The Oslo Opera House\"\n\tsizes=\"(min-width: 640px) 60vw, 100vw\"\n\tsrcset=\"opera-200.jpg 200w,\n\t\t\topera-400.jpg 400w,\n\t\t\topera-800.jpg 800w,\n\t\t\topera-1200.jpg 1200w\">\n```\n\n### Perch template\n\n```html     \n    <img src=\"<perch:content type=\"image\" id=\"image\" label=\"Image\" help=\"Upload or select an image\">\" alt=\"<perch:content type=\"text\" id=\"alt\" label=\"Description\" required help=\"Description of this image\" title>\"\n\tsizes=\"(min-width: 640px) 60vw, 100vw\"\n\tsrcset=\"<perch:content type=\"image\" id=\"image\" label=\"Image\" width=\"200\"> 200w,\n\t\t\t<perch:content type=\"image\" id=\"image\" label=\"Image\" width=\"400\"> 400w,\n\t\t\t<perch:content type=\"image\" id=\"image\" label=\"Image\" width=\"800\"> 800w,\n\t\t\t<perch:content type=\"image\" id=\"image\" label=\"Image\" width=\"1200\"> 1200w\">\n```\n\n## Changing image sizes, high-DPI images and art direction use case\n\nAs you have probably realised by now you can combine these techniques as best works for your site and requirements. This final template will require the content editor to upload two images - a full-size image and a crop, just as in the very first example. However Perch will create a whole range of images - the fallback image plus 6 versions of the main image and 6 of the crop. The browser will then select the best one to use keeping in mind image width and screen DPI.\n\nThe fantastic thing about this is that your content editor just has to upload or select from Assets two images. Perch and the magic of the picture element will take care of the rest.\n\n### Output HTML\n\n```html\n    <picture>\n\t    <source\n\t\tmedia=\"(min-width: 1280px)\"\n\t\tsizes=\"50vw\"\n\t\tsrcset=\"opera-fullshot-200.jpg 200w,\n\t\t\t\topera-fullshot-400.jpg 400w,\n\t\t\t\topera-fullshot-800.jpg 800w,\n\t\t\t\topera-fullshot-1200.jpg 1200w,\n\t\t\t\topera-fullshot-1600.jpg 1600w,\n\t\t\t\topera-fullshot-2000.jpg 2000w\">\n\t    <img\n\t\tsrc=\"opera-fallback.jpg\" alt=\"The Oslo Opera House\"\n\t\tsizes=\"(min-width: 640px) 60vw, 100vw\"\n\t\tsrcset=\"opera-closeup-200.jpg 200w,\n\t\t\t\topera-closeup-400.jpg 400w,\n\t\t\t\topera-closeup-800.jpg 800w,\n\t\t\t\topera-closeup-1200.jpg 1200w,\n\t\t\t\topera-closeup-1600.jpg 1600w,\n\t\t\t\topera-closeup-2000.jpg 2000w\">\n    </picture>\n```\n\n### Perch template\n\n```html\n    <picture>\n\t<source\n\t\tmedia=\"(min-width: 1280px)\"\n\t\tsizes=\"50vw\"\n\t\tsrcset=\"<perch:content type=\"image\" id=\"image\" label=\"Image\" width=\"200\"> 200w,\n\t\t\t\t<perch:content type=\"image\" id=\"image\" label=\"Image\" width=\"400\"> 400w,\n\t\t\t\t<perch:content type=\"image\" id=\"image\" label=\"Image\" width=\"800\"> 800w,\n\t\t\t\t<perch:content type=\"image\" id=\"image\" label=\"Image\" width=\"1200\"> 1200w,\n\t\t\t\t<perch:content type=\"image\" id=\"image\" label=\"Image\" width=\"1600\"> 1600w,\n\t\t\t\t<perch:content type=\"image\" id=\"image\" label=\"Image\" width=\"2000\"> 2000w\">\n\t    <img\n\t\tsrc=\"<perch:content type=\"image\" id=\"image\" label=\"Image\" help=\"Full size image for large screens\">\" alt=\"<perch:content type=\"text\" id=\"alt\" label=\"Description\" required help=\"Description of subject of these images.\" title>\"\n\t\tsizes=\"(min-width: 640px) 60vw, 100vw\"\n\t\tsrcset=\"<perch:content type=\"image\" id=\"imagecloseup\" label=\"Closeup image\" help=\"Closeup image for small screens.\" width=\"200\"> 200w,\n\t\t\t\t<perch:content type=\"image\" id=\"imagecloseup\" label=\"Closeup image\" width=\"400\"> 400w,\n\t\t\t\t<perch:content type=\"image\" id=\"imagecloseup\" label=\"Closeup image\" width=\"800\"> 800w,\n\t\t\t\t<perch:content type=\"image\" id=\"imagecloseup\" label=\"Closeup image\" width=\"1200\"> 1200w,\n\t\t\t\t<perch:content type=\"image\" id=\"imagecloseup\" label=\"Closeup image\" width=\"1600\"> 1600w,\n\t\t\t\t<perch:content type=\"image\" id=\"imagecloseup\" label=\"Closeup image\" width=\"2000\"> 2000w\">\n    </picture>\n```","type":"perch"},{"title":"Create an excerpt","permalink":"https://docs.grabaperch.com/perch/content/templates/how-to-create-an-excerpt/","id":"perch.content.templates.how-to-create-an-excerpt","excerpt":"**How do I create an excerpt?**","text":"**How do I create an excerpt?**\n\nWhen redisplaying content, or creating a list/detail page it can be helpful to show an excerpt rather than all of the content entered into a particular field.\n\nUsing the `chars` attribute tells the template engine to only show that number of characters when rendering the field:\n\n```html\n<perch:content type=\"text\" id=\"heading\" label=\"Heading\" chars=\"100\">\n```\n\nThe `words` attribute has the same effect, this time restricting the number of words:\n\n```html\n<perch:content type=\"text\" id=\"heading\" label=\"Heading\" words=\"20\">\n```\n\nIn both cases you can use the `append` attribute to add `...` or anything else to the end of the string to show it is an excerpt.\n\n```html\n<perch:content type=\"text\" id=\"heading\" label=\"Heading\" words=\"20\" append=\"...\">\n```\n\nThere is information about [words](/templates/attributes/words/) and [chars](/templates/attributes/chars/) in the Perch documentation.","type":"perch"},{"title":"Displaying a section of a template only if content has been entered","permalink":"https://docs.grabaperch.com/perch/content/templates/only-show-a-section-if-content/","id":"perch.content.templates.only-show-a-section-if-content","excerpt":"**How do I only show a section of a template if content has been entered?**","text":"**How do I only show a section of a template if content has been entered?**\n\nIf parts of your template are not required you may need to exclude some HTML output.\n\nYou can use the [perch:if](/templates/conditionals/if/) tag to check to see if content has been entered. In the below example I am using `perch:if` to test to see if an image has been uploaded. I only display the mark-up for the figure if one has.\n\n```html\n     <perch:if exists=\"figure\">\n\t\t   <figure>\n         <img src=\"<perch:content id=\"figure\" type=\"image\" label=\"Upload a figure\" width=\"640\" height=\"480\">\" alt=\"<perch:content id=\"alt\" type=\"text\" label=\"Alt text\">\">\n\n         \t<figcaption><perch:content id=\"caption\" type=\"text\" label=\"Figure caption\"></figcaption>\n       \t</figure>\n      </perch:if>\n```\n\n## Second Example\n\nA second optimization can be made by adding a nested if statement. In this example, mark-up for figcaption only displays if there is a caption.\n\n```html\n\t\t<perch:if exists=\"figure\">\n\t\t\t<figure>\n\t\t \t\t<img src=\"<perch:content id=\"figure\" type=\"image\" label=\"Upload a figure\" width=\"640\" height=\"480\">\" alt=\"<perch:content id=\"alt\" type=\"text\" label=\"Alt text\">\">\n\t\t\t  <perch:if exists=\"caption\">\n\t\t\t  <figcaption><perch:content id=\"caption\" type=\"text\" label=\"Figure caption\"></figcaption>\n\t\t\t  </perch:if>\n\t\t\t</figure>\n\t\t</perch:if>\n```","type":"perch"},{"title":"Video playlists","permalink":"https://docs.grabaperch.com/perch/content/templates/how-to-create-video-playlist-descriptions/","id":"perch.content.templates.how-to-create-video-playlist-descriptions","excerpt":"_Written by Marissa Cookson_","text":"_Written by Marissa Cookson_\n\n**How do I create a video playlist with a description for each video?**\n\nYou want to create an editable playlist with a custom description for each video using jQuery. The video description should update when you click on a playlist item.\n\nTools:  \n- jQuery 1.10.2+\n- [jQuery Responsive YouTube Vimeo Player](http://codecanyon.net/item/responsive-youtube-vimeo-playlist/4748903)\n\nLive demo: http://www.thevisionhouse.com.au/gear-in-action\n\n## Part 1: The video descriptions\n\nCreate an empty container for a list of video descriptions. These will be populated by Perch and only one list item will be visible based on the current video that’s playing. Default markup and css:\n\n```html\n    <ul class=\"video-descriptions\">\n    \t<?php perch_content('Videos'); ?>\n    </ul>\n\n    .video-descriptions li {\n        display: none;\n    }\n    .video-descriptions li:first-child {\n        display: block;\n    }\n```\n\nCreate a `video_list.html` template inside `perch/templates/content`.\n\nThis is a repeater block which will allow the editor to add multiple videos and reorder them. The `video-url` is used to populate the playlist. These links are not visible on the page as they're empty. No need for a `p` tag around the description content because this is added by [Textile formatting](http://docs.grabaperch.com/docs/templates/attributes/type/textarea/).\n\n```html\n\t<perch:repeater id=\"Videos\" label=\"Videos\">\n\t\t<li>\n\t\t\t<div>\n\t\t\t\t<a class=\"video-url\"\n        href=\"<perch:content id=\"video-url\" type=\"text\" label=\"Video URL\" required>\"></a>\n\t\t\t\t<h3><perch:content id=\"video-title\" type=\"text\" label=\"Video Title\"></h3>\n\t\t\t\t<perch:content id=\"video-description\"\n        type=\"textarea\" label=\"Video Description\" textile html >\n\t\t\t</div>\n\t\t</li>\n\t</perch:repeater>\n```\n\n## Part 2: The video playlist\n\nDynamically build a playlist based on the video links entered in Perch.\n\nVideo player markup:\n\n```html\n    <div id=\"rp_plugin\">\n    \t<div id=\"rp_videoContainer\">\n    \t\t<div id=\"rp_video\"></div>\n    \t</div>\n    \t<div id=\"rp_playlistContainer\">\n    \t\t...\n    \t</div>\n    </div>\n```\n\nAppend a `ul` to the playlist container since an empty `ul` in the markup is invalid:\n\n\t$('#rp_playlistContainer').append('<ul id=\"rp_playlist\">');\n\nFor each video description item, get the video url and push it to a `videoLinks` array. Append an empty playlist item so there is an equal number of descriptions and videos:\n\n```javascript    \n\tvar videoLinks = [];\n\t$('.video-descriptions li').each(function(){\n\t\tvar videoUrl = $('.video-url',this);\n\t\tvideoLinks.push(videoUrl);\n\t\t$('#rp_playlist').append('<li>');\n\t});\n```\n\nFor each empty playlist item, append the corresponding video link from the `videoLink`s array:\n\n```javascript\n\t$('#rp_playlist li').each(function(i){\n\t\t$(this).append(videoLinks[i]);\n\t});\n```\n\nInit video player (feel free to substitute your own. If yours doesn't have an `onChange` event, listen for a click event on each playlist item instead).\n\n`onChange`: Wait until the player has updated the current video, then get the index of the current video and show its corresponding video description. Hide the other descriptions.\n\n```javascript \t\n\t$(\"#rp_playlist\").responsiveplaylist({\n\t\tonChange: function(){\n\t    \t\tsetTimeout(function(){\n\t    \t\t\tvar currIndex = $('#rp_playlist li.rp_currentVideo').index();\n\t\t\t\t\t$('.video-descriptions li:eq('+currIndex+')').show();\n\t\t\t\t\t$('.video-descriptions li:eq('+currIndex+')').siblings().hide();\n\t\t    \t},1000);\n\t\t}\n\t});\n```","type":"perch"},{"title":"Displaying a placeholder image","permalink":"https://docs.grabaperch.com/perch/content/templates/show-placeholder/","id":"perch.content.templates.show-placeholder","excerpt":"**How do I show a placeholder if no image is uploaded?**","text":"**How do I show a placeholder if no image is uploaded?**\n\nIf the content editor has uploaded an image we want to display it. If they have not we will display a placeholder.\n\nWe combine perch:if and perch:else to achieve this. First we use `perch:if` and check to see if an image has been uploaded. We then use `perch:else` to say what to do if we don't have an image.\n\n```html\n    <perch:if exists=\"image\">\n\t\t  <perch:content id=\"image\" type=\"image\" label=\"Avatar\" width=\"80\" height=\"80\" crop output=\"tag\">\n\t  <perch:else>\n\t\t  <img src=\"/img/placeholder-avatar.png\" alt=\"\">\n\t  </perch:if>\n```","type":"perch"},{"title":"Using Rich Snippets","permalink":"https://docs.grabaperch.com/perch/content/templates/rich-snippets-seo/","id":"perch.content.templates.rich-snippets-seo","excerpt":"**How do I use rich snippets for SEO in Perch?**","text":"**How do I use rich snippets for SEO in Perch?**\n\nYou would like to add rich snippets to your content to improve how your data is displayed in search engine result pages.\n\nGoogle and other search engines support [Rich Snippets](https://support.google.com/webmasters/answer/99170?hl=en), a way to indicate to the search engine that certain content is special. These snippets are then used on search engine result pages. Perch is ideal for ensuring that your content is correctly marked up to take advantage of this.\n\nGoogle suggests using Microdata to create your rich snippets and supports the following content types:\n\n* Reviews\n* People\n* Products\n* Businesses and Organizations\n* Recipes\n* Events\n* Music\n\nThe below templates are examples, based on those shown on Google, including help text to ensure that content editors enter the correct content.\n\nIt is worth noting that while you need to ensure that the microdata attributes are correct you do not have to use the particular tags - for example span or div, or a certain heading level. Those can be changed to fit your content.\n\n## Reviews\n\nA [review](https://support.google.com/webmasters/answer/146645) can be represented as a single review or as an aggregate.\n\nIf you are using this markup the main topic of the page needs to be the item being reviewed, not a list of items. So this would be ideal to add to a product page for example.\n\n### Single Review template\n\n```html\n    <div itemscope itemtype=\"http://data-vocabulary.org/Review\">\n      <h3 itemprop=\"itemreviewed\"><perch:content id=\"title\" type=\"text\" label=\"Title\" required title help=\"Must be the name of the product that is being reviewed\"></h3>\n      <p>Reviewed by <span itemprop=\"reviewer\"><perch:content id=\"author\" type=\"text\" label=\"Author\" required></span> on\n      <time itemprop=\"dtreviewed\" datetime=\"<perch:content id=\"date\" type=\"date\" label=\"Review date\" format=\"Y-m-d\">\"><perch:content id=\"date\" type=\"date\" label=\"Published date\" format=\"F j\"></time>.</p>\n      <p itemprop=\"summary\"><perch:content id=\"summary\" type=\"text\" label=\"Summary\" required help=\"One line summary of the review\"></p>\n      <div itemprop=\"description\"><perch:content id=\"body\" type=\"textarea\" label=\"Review\" markdown editor=\"markitup\" required></div>\n      <p>Rating: <span itemprop=\"rating\"><perch:content id=\"rating\" type=\"text\" label=\"Rating\" required help=\"Rating between 1 and 5, 1 being the lowest\" size=\"s\"></span></p>\n    </div>\n```\n\n### Aggregate Review Template\n\n```html\n    <div itemscope itemtype=\"http://data-vocabulary.org/Review-aggregate\">\n      <h3 itemprop=\"itemreviewed\"><perch:content id=\"title\" type=\"text\" label=\"Title\" required title help=\"Must be the name of the product that is being reviewed\"></h3>\n      <img src=\"<perch:content type=\"image\" id=\"image\" label=\"Image\" width=\"800\">\" alt=\"<perch:content id=\"title\" type=\"text\" label=\"Title\">\">\n      <p><span itemprop=\"rating\" itemscope itemtype=\"http://data-vocabulary.org/Rating\">\n      <span itemprop=\"average\"><perch:content id=\"rating\" type=\"text\" label=\"Rating\" required help=\"Average review rating, eg: 9\" size=\"s\"></span>\n      out of <span itemprop=\"best\"><perch:content id=\"ratingbest\" type=\"text\" label=\"Rating top score\" required help=\"The top score a user could select, eg: 10\" size=\"s\"></span>\n      </span>\n    based on <span itemprop=\"votes\"><perch:content id=\"numvotes\" type=\"text\" label=\"Number of votes\" required help=\"How many people rated this item?\" size=\"s\"></span> ratings.\n      <span itemprop=\"count\"><perch:content id=\"numreviews\" type=\"text\" label=\"Number of reviews\" required help=\"How many people reviewed this item?\" size=\"s\"></span> user reviews.</p>\n    </div>\n```\n\n## People\n\nYou can mark-up a [person](https://support.google.com/webmasters/answer/146646) with a range of properties and even signify relationships.\n\n### Person template\n\n```html\n    <div itemscope itemtype=\"http://data-vocabulary.org/Person\">\n      My name is <span itemprop=\"name\"><perch:content id=\"fullname\" type=\"text\" label=\"Full name\" required title></span>,\n      but people call me <span itemprop=\"nickname\"><perch:content id=\"nickname\" type=\"text\" label=\"Nickname\"></span>.\n      Here is my homepage:\n      <a href=\"<perch:content id=\"url\" type=\"text\" label=\"Homepage URL\" required>\" itemprop=\"url\"><perch:content id=\"url\" type=\"text\" label=\"Homepage URL\"></a>.\n      I live in\n      <span itemprop=\"address\" itemscope\n    itemtype=\"http://data-vocabulary.org/Address\">\n    <span itemprop=\"locality\"><perch:content id=\"city\" type=\"text\" label=\"City\" required></span>,\n    <span itemprop=\"region\"><perch:content id=\"state\" type=\"text\" label=\"State\" required></span>\n      </span>\n      and work as an <span itemprop=\"title\"><perch:content id=\"jobtitle\" type=\"text\" label=\"Job title\" required></span>\n      at <span itemprop=\"affiliation\"><perch:content id=\"company\" type=\"text\" label=\"Employer\" required></span>.\n\n      <perch:repeater id=\"friends\" label=\"Friends\">\n      <perch:before>\n      <h3>My friends:</h3>\n      <ul>\n      </perch:before>\n\n        <li><a href=\"<perch:content id=\"friendurl\" type=\"text\" label=\"Homepage\">\" rel=\"friend\"><perch:content id=\"friendname\" type=\"text\" label=\"Name\"></a></li>\n\n      <perch:after>\n      </ul>\n      </perch:after>\n\n      </perch:repeater>\n\n    </div>\n```\n\n## Recipe\n\nThe [recipe](https://support.google.com/webmasters/answer/173379) rich snippet is for recipe information and allows you to indicate things about the recipe such as calorie count and preparation time.\n\n### Recipe template\n\n```html\n    <div vocab=\"http://schema.org/\" typeof=\"Recipe\">\n      <h1 property=\"name\"><perch:content id=\"title\" type=\"text\" label=\"Recipe title\" required></h1>\n      <p>By <span property=\"author\"><perch:content id=\"author\" type=\"text\" label=\"Author\" required></span>,\n      <meta property=\"datePublished\" content=\"<perch:content id=\"date\" type=\"date\" label=\"Published date\" format=\"Y-m-d\">\"><perch:content id=\"date\" type=\"date\" label=\"Published date\" format=\"F j, Y\"></p>\n      <img property=\"image\" src=\"<perch:content type=\"image\" label=\"Image\" id=\"Image\" width=\"800\">\" alt=\"<perch:content id=\"alt\" type=\"text\" label=\"Image description\">\">\n      <div property=\"description\"><perch:content id=\"description\" type=\"textarea\" label=\"Description\" size=\"s\" markdown editor=\"markitup\" required></div>\n      <p>Prep Time: <meta property=\"prepTime\" content=\"PT<perch:content id=\"preptime\" type=\"text\" label=\"Prep time\" required help=\"Add the preparation time as a number in minutes\" size=\"s\">M\"><perch:content id=\"preptime\" type=\"text\" label=\"Prep time\"> minutes\n      <br>Cook time: <meta property=\"cookTime\" content=\"PT<perch:content id=\"cooktime\" type=\"text\" label=\"Cook time\" required help=\"Add the cooking time as a number in minutes\" size=\"s\">M\"><perch:content id=\"cooktime\" type=\"text\" label=\"Cook time\"> minutes\n     <br>Yield: <span property=\"recipeYield\"><perch:content id=\"yield\" type=\"text\" label=\"Yield\" required help=\"For example - 1 loaf or 12 buns\" size=\"m\"></span></p>\n\n     <div property=\"nutrition\" typeof=\"NutritionInformation\">\n       <h3>Nutrition facts:</h3>\n       <p><span property=\"calories\"><perch:content id=\"calories\" type=\"text\" label=\"Calories\" required size=\"s\"> calories</span>,\n       <span property=\"fatContent\"><perch:content id=\"fat\" type=\"text\" label=\"Fat\" required help=\"Amount of fat in grams\" size=\"s\"> grams fat</span></p>\n      </div>\n\n\t    <perch:repeater id=\"ingredients\" label=\"Ingredients\">\n\t      <perch:before>\n\t      <h3>Ingredients:</h3>\n\t      <ul>\n\t      </perch:before>\n        <li><span property=\"ingredients\"><perch:content id=\"ingredient\" type=\"text\" label=\"Ingredient\"></span>\n        <perch:after>\n        </ul>\n        </perch:after>\n      </perch:repeater>\n\n\t    <perch:repeater id=\"instructions\" label=\"Instructions\">\n\t      <perch:before>\n        <h3>Instructions:</h3>\n        <ol property=\"recipeInstructions\">\n\t      </perch:before>\n\n        <li><perch:content id=\"step\" type=\"text\" label=\"Recipe step\"></li>\n\n        <perch:after>\n        </ol>\n        </perch:after>\n        </perch:repeater>\n    </div>\n```\n\n## Validating Rich Snippets\n\nOnce you have added rich snippets to your site, check that the markup is correct. You can do this by from within Google Webmaster Tools using the [Structured Data Testing Tool](http://www.google.com/webmasters/tools/richsnippets).\n\nWith correctly used rich snippets on your pages you can then look forward to enhanced content in your search engine results.","type":"perch"},{"title":"Changing the size of textareas","permalink":"https://docs.grabaperch.com/perch/content/templates/sizing-textareas/","id":"perch.content.templates.sizing-textareas","excerpt":"**How do I change the size of textareas in the admin?**","text":"**How do I change the size of textareas in the admin?**\n\nYou can use \"t-shirt sizes\" to create appropriately sized textareas for your content.\n\nOne of the great strengths of Perch is the flexibility to construct content forms that match the nature of your content. Often you know when a field like a textarea should expect a little or a lot of content.\n\nA perfect example of this a news article – you might have a big textarea for the main body of the article, and a much smaller one for an introductory paragraph used for a listing elsewhere on the site.\n\nYou can set the size of a textarea in your template:\n\n```html\n    <perch:content type=\"textarea\" size=\"xl\" id=\"news_article\" label=\"Main article\">\n```\n\nThe size options are based on t-shirt sizes: xs,s, m, l, xl and xxl. You can read about the other options for textareas on the [textarea documentation page](http://docs.grabaperch.com/docs/templates/attributes/type/textarea/).","type":"perch"},{"title":"Using content templates inside apps","permalink":"https://docs.grabaperch.com/perch/content/templates/template-includes-rescope/","id":"perch.content.templates.template-includes-rescope","excerpt":"**How do I use my content template includes inside apps?**","text":"**How do I use my content template includes inside apps?**\n\nIf you are using template includes to tidy up your templates you may run into a problem. If you want to use a content template partial inside blog then you need to use perch:blog tags rather than perch:content.\n\nThe template include syntax includes a method of _rescoping_ template tags to correct the namespace.\n\nI have a template partial saved as `_figure.html` which looks like this.\n\n```html\n    <perch:if exists=\"figure\">\n\t\t   <figure>\n         <img src=\"<perch:content id=\"figure\" type=\"image\" label=\"Upload a figure\" width=\"640\" height=\"480\">\" alt=\"<perch:content id=\"alt\" type=\"text\" label=\"Alt text\">\">\n         <figcaption><perch:content id=\"caption\" type=\"text\" label=\"Figure caption\"></figcaption>\n       </figure>\n\t   </perch:if>\n```\n\nI can include it in a content template like this.\n\n```html\n    <article>\n      <h1><perch:content id=\"title\" type=\"text\" label=\"Article Title\"></h1>\n    <perch:template path=\"content/_figure.html\">\n      <perch:content id=\"content\" type=\"text area\" label=\"Article Body\">  \n    </article>\n```\n\nTo use it in blog I just need to use the `rescope` attribute to include it in my post.html template. It will then act as if all `perch:content` tags in the partial start with `perch:blog`.\n\n```html\n    <h1><perch:blog id=\"postTitle\" type=\"text\" required size=\"xl\"></h1>\n    <time datetime=\"<perch:blog id=\"postDateTime\" format=\"%Y-%m-%d\">\" pubdate class=\"published\"><perch:blog id=\"postDateTime\" format=\"%d %B %Y\"></time>\n\n\t\t<perch:template path=\"content/_figure.html\" rescope=\"parent\">\n\n    <div class=\"description entry-content\">\n      <perch:blog id=\"postDescHTML\" type=\"textarea\" encode=\"false\" editor=\"markitup\" textile size=\"xxl\" required>\n    </div>\n```","type":"perch"},{"title":"Add dividers to show sections in a template","permalink":"https://docs.grabaperch.com/perch/content/templates/template-dividers/","id":"perch.content.templates.template-dividers","excerpt":"**How do I split up the admin editing page into sections**","text":"**How do I split up the admin editing page into sections**\n\nIf you have created a complex editing form it can be helpful to your editors to split it up into sections. The divider attribute can help you to do that.\n\nDividers let you split up a complex template into sections, creating a divider bar and heading in the UI.\n\nTo use Template Dividers you can select a template tag that you want the Divider to display after and use the attribute `divider-before` with a value that will display as text in the bar.\n\n```html\n    <perch:content id=\"text\" type=\"textarea\" label=\"Text\" textile editor=\"markitup\" divider-before=\"Important information\">\n```\n\nOr you can use `divider-after` in the same way.\n\n```html\n    <perch:content id=\"text\" type=\"textarea\" label=\"Text\" textile editor=\"markitup\" divider-after=\"Related material\">\n```","type":"perch"},{"title":"Understanding Conditional Tags","permalink":"https://docs.grabaperch.com/perch/content/templates/understanding-conditionals/","id":"perch.content.templates.understanding-conditionals","excerpt":"The Perch template language has lots of ways to control the output based on the content being used. This can range from simple tests to see if something exists, though to doing different things depending on the iteration within a loop.","text":"The Perch template language has lots of ways to control the output based on the content being used. This can range from simple tests to see if something exists, though to doing different things depending on the iteration within a loop.\n\nThe most straightforward example is if you want to output a default if no content is entered. For this you can use the else attribute.\n\n```html\n<perch:content id=\"img\" type=\"image\" else=\"default.png\">\n```\n\nThe above would use default.png as the image if no image had been added for that item.\n\nIf you want a bit more control, you can use a perch:if tag pair to test if something is set.\n\n```html\n<perch:if exists=\"img\">\n    <perch:content id=\"img\" type=\"image\" output=\"tag\">\n<perch:else>\n    <img src=\"default.png\">\n</perch:if>\n```\n\nThe perch:if tag checks if img exists, and does one thing if it does, and other if it doesn’t. You can also flip this on its head with `not-exists`:\n\n```html\n<perch:if not-exists=\"img\">\n    <img src=\"default.png\">\n<perch:else>\n    <perch:content id=\"img\" type=\"image\" output=\"tag\">\n</perch:if>\n```\n\nIf you need to check more than one item with exists, you can do that too:\n\n```html\n<perch:if exists=\"price AND (on_sale OR is_download)\">\n   ...\n</perch:if>\n```\n\nAs well as checking if an item exists, you can check its value. This would compare the field date to see if it’s greater than 1 Jan 2008:\n\n```html\n<perch:if id=\"date\" match=\"gt\" value=\"2008-01-01\">\n   ...\n</perch:if>\n```\n\nIf you want to compare against a dynamic value, use curly braces:\n\n```html\n<perch:if id=\"date\" match=\"gt\" value=\"{today}\">\n   ...\n</perch:if>\n```\n\nThere’s all sorts of interesting things we can do when it comes to looping through sets of results. We can compare if a value is different from the previous item in the loop:\n\n```html\n<perch:if different=\"date\">\n   <h2><perch:content id=\"date\" type=\"date\" format=\"d F Y\"></h2>\n</perch:if>\n```\n\nThis would output a heading with the date if the date of the current item is different from the last. You can also use the format attribute to manipulate the value before it’s compared – for example, to only compare the year part of a date:\n\n```html\n<perch:if different=\"date\" format=\"Y\">\n   <h2><perch:content id=\"date\" type=\"date\" format=\"Y\"></h2>\n</perch:if>\n```\n\nYou can also conditionally do things on different iterations through the loop. You can use perch:every to do something different every 4th time, for example:\n\n```html\n<perch:every count=\"4\">\n    <hr>\n</perch:every>\n```\n\nYou can also use CSS nth-child logic in your tags:\n\n```html\n<perch:every nth-child=\"4n+1\">\n    This happens for 1, 5, 9, 13, 17, 21...\n</perch:every>\n```\n\nYou can learn more about perch:every in our video tutorial. A great place to dive into learning about conditionals is the documentation for `perch:if`.","type":"perch"},{"title":"Including one template inside another","permalink":"https://docs.grabaperch.com/perch/content/templates/template-includes/","id":"perch.content.templates.template-includes","excerpt":"**Can I include one template inside another?**","text":"**Can I include one template inside another?**\n\nIn a site you may find that you have a lot of templates that use the same mark-up. To keep things tidy you can include one template inside another.\n\n[Template includes](/templates/includes/) are inserted at runtime before any processing is done. So your main template will act in the same way as if it were one single template.\n\nFor example, I have a template that contains all of the mark-up for an HTML5 figure element. I want to include it in a template that creates an article.\n\n```html\n    <article>\n      <h1><perch:content id=\"title\" type=\"text\" label=\"Article Title\"></h1>\n    <perch:template path=\"content/_figure.html\">\n      <perch:content id=\"content\" type=\"text area\" label=\"Article Body\">  \n    </article>\n```\n\nThe template path is relative to the `perch/templates` directory.","type":"perch"},{"title":"Upload one image, generate many sizes","permalink":"https://docs.grabaperch.com/perch/content/templates/upload-one-image-generate-many-sizes/","id":"perch.content.templates.upload-one-image-generate-many-sizes","excerpt":"**How do I upload one image but generate multiple sizes for display?**","text":"**How do I upload one image but generate multiple sizes for display?**\n\nIf you are reusing your content around the site in different templates you may want a range of sizes and even crops for each image.\n\nIn Perch templates you can reuse the ID of any Perch Template Tag. Reusing an ID means that the editor will be prompted to add that content only once rather than needing to repeat it just because it is displayed twice.\n\nFor [images](http://docs.grabaperch.com/docs/templates/attributes/type/image/), you can reuse the ID, but also specify different sizes to resize that image to. Perch will then crop the image to each size on upload.\n\nFor example, the following template will display one image upload field in admin but will generate three images:\n\n* one will be resized to a maximum 640x480\n* the second will be resized to a maximum 320x240\n* the third will be a 120x120 crop\n\nThe template code would look like this:\n\n```html\n    <img src=\"<perch:content id=\"main_image\" type=\"image\" label=\"Article image\" width=\"640\" height=\"480\">\" alt=\"<perch:content id=\"alt\" type=\"text\" label=\"Alt text\">\">\n    <perch:content id=\"main_image\" type=\"image\" label=\"Article image\" width=\"320\" height=\"240\" suppress>\n    <perch:content id=\"main_image\" type=\"image\" label=\"Article image\" width=\"120\" height=\"120\" suppress>\n```\n\nNote that the second and third images have the [suppress attribute](/templates/attributes/suppress/) set to true. This means that the only image that will display on the front end of the site when this template is used, will be the large image. The other images would be for us when the content is represented perhaps on the homepage.","type":"perch"},{"title":"Perch Before and After","permalink":"https://docs.grabaperch.com/perch/content/templates/using-perch-before-and-after/","id":"perch.content.templates.using-perch-before-and-after","excerpt":"**How do I output opening and closing ul tags only if there is content in the Region?**","text":"**How do I output opening and closing ul tags only if there is content in the Region?**\n\nSome regions might contain markup that needs wrapping - for example if you are allowing your editors to add items marked up in an li, you will only want to display the opening `<ul>` and closing `</ul>` if they have entered at least one item.\n\nTo add content before your region, wrap it in `<perch:before> ... </perch:before>`, to display content after your region wrap it in `<perch:after> ... </perch:after>`.\n\n```html\n    <perch:before>\n    <ul>\n    </perch:before>\n      <li><h3><perch:content id=\"concert_title\" label=\"Title\" type=\"text\"></h3>\n      <perch:content id=\"Summary\" label=\"Summary\" type=\"textarea\"></li>\n    <perch:after>\n    </ul>\n    </perch:after>\n```\n\nDocumentation for [perch:before](/templates/conditionals/before/) and [perch:after](/templates/conditionals/after/).","type":"perch"},{"title":"See what is available in a template","permalink":"https://docs.grabaperch.com/perch/content/templates/using-perch-showall/","id":"perch.content.templates.using-perch-showall","excerpt":"**How do I see what is available in my template?**","text":"**How do I see what is available in my template?**\n\nDuring development, you want to know what is available from the template you are working with.\n\nYou can add a special [perch:showall](/docs/templates/show-all/) template tag to any template in Perch and it will show you all of the fields that are available for use.\n\n```html\n    <perch:showall>\n```","type":"perch"},{"title":"Unique IDs in a multiple item Region","permalink":"https://docs.grabaperch.com/perch/content/templates/unique-ids/","id":"perch.content.templates.unique-ids","excerpt":"**How do I create unique IDs in a multiple-item region?**","text":"**How do I create unique IDs in a multiple-item region?**\n\nIf you need each item displayed with a multiple item region to have a unique ID then perch_item_index will help.\n\nSometimes, when outputting a multiple item region, it’s useful to be able to number the items. That might be to help with a design element on the page, or even to output unique, sequential IDs to help with some JavaScript.\n\nYou can do this in your template using the special ID value [perch_item_index](/templates/attributes/id/).\n\n```html\n    <div id=\"item<perch:content id=\"perch_item_index\">\">\n      ...\n    </div>\n```\n\nFor each content item output by the template, Perch will increment the number by one. The above would result in:\n\n```html\n    <div id=\"item1\">\n      ...\n    </div>\n    <div id=\"item2\">\n      ...\n    </div>\n    <div id=\"item3\">\n      ...\n    </div>\n```\n\nOne thing that’s important to remember, is that `perch_item_index` is a sequential count of the items as they are output. If items are added or removed, or the ordering is changed, then the number output by `perch_item_index` will change correspondingly.","type":"perch"},{"title":"Create a simple image gallery","permalink":"https://docs.grabaperch.com/perch/content/templates/how-do-i-create-a-simple-image-gallery/","id":"perch.content.templates.how-do-i-create-a-simple-image-gallery","excerpt":"**How do I create an image gallery?**","text":"**How do I create an image gallery?**\n\nPerch has a feature complete Gallery app, however sometimes all you need is a basic listing of images that you can combine with a jQuery plugin to make a simple slideshow.\n\nPerch has a feature complete Gallery app, however sometimes all you need is a basic listing of images that you can combine with a jQuery plugin to make a simple slideshow.\n\nThis solution demonstrates how to use Perch to create a list of thumbnails that link to larger images.\n\nIn your page, create a new region called Gallery, wrapping it in an unordered list. This region will contain our thumbnails as list items.\n\n```html\n    <ul>\n      <?php perch_content('Gallery'); ?>\n    </ul>\n```\n\nNext, we need to create a custom template for this region to use. Create a new file inside perch/templates/content and call it gallery_image.html.\n\nEach item in the region will be a list item containing a thumbnail image which links to the larger version. So the outline of the HTML for the template will look like this:\n\n```html\n    <li>\n      <a href=\"\">\n        <img src=\"\" alt=\"\">\n      </a>\n    </li>\n```\n\nThe src of the image needs to be an image file, so we’ll add that first.\n\nWhen you use a type of image in a Perch Content tag this does not give you an image HTML tag, rather it return the src attribute as seen below. This means you need to create a template uses this tag.\n\n```html\n    <li>\n      <a href=\"\">\n        <img src=\"<perch:content id=\"image\" type=\"image\" label=\"Image\" width=\"75\" height=\"75\" crop>\" alt=\"\">\n      </a>\n    </li>\n```\n\nI have decided to create square thumbnails, no matter what the dimensions of the uploaded image. So I set the width and height to 75 pixels and crop to true.\n\nThe href of the link needs to point to a larger version of the file. If we reuse the same ID for a second image, Perch will only prompt the user to upload one file, but will process it in two different ways.\n\n```html\n    <li>\n      <a href=\"<perch:content id=\"image\" type=\"image\" label=\"Image\" width=\"800\" height=\"600\">\">\n        <img src=\"<perch:content id=\"image\" type=\"image\" label=\"Image\" width=\"75\" height=\"75\" crop>\" alt=\"\">\n      </a>\n    </li>\n```\n\nThis time we’ve set a maximum dimension of 800 pixels for the width and 600 pixels for the height height, but not set it to crop – this will resize the image but keep its natural ratio. (It’s always worth setting some dimensions unless you really want to let content editors upload enormous images!)\n\nThe final step is to add a regular text field for the alt attribute and set it to be required.\n\n```html\n    <li>\n      <a href=\"<perch:content id=\"image\" type=\"image\" label=\"Image\" width=\"800\" height=\"600\">\">\n        <img src=\"<perch:content id=\"image\" type=\"image\" label=\"Image\" width=\"75\" height=\"75\" crop>\"\n             alt=\"<perch:content id=\"title\" label=\"title\" type=\"text\" required>\">\n      </a>\n    </li>\n```\n\nSave your template, and choose it to use for your Gallery region, allowing multiple items. Then add a few images.\n\nIf you go back to your PHP page and refresh you should see a list of square images, clicking on any image will take you to the larger version.\n\nObviously, this basic implementation works just fine for users without JavaScript, but some real polish and flare can then be added with the use of something like Fancybox for jQuery or something similar for your favourite JavaScript library.\n\nIf you are having problems with uploading and resizing images this is often down to configuration of your hosting. Check the troubleshooting tips for images in the documentation for help.","type":"perch"},{"title":"Using Bootstrap with Perch","permalink":"https://docs.grabaperch.com/perch/content/templates/bootstrap-templates/","id":"perch.content.templates.bootstrap-templates","excerpt":"**Can I use Bootstrap with Perch?**","text":"**Can I use Bootstrap with Perch?**\n\nBootstrap is a popular CSS framework that can help you to rapidly develop responsive sites. In this solution I take a look at how to build Perch templates for the various components.\n\nPerch is ideally suited for working with a framework like Bootstrap. Bootstrap requires that you add classes to your markup in order to make use of the various component styles. A CMS like Perch that allows you to create templates with the exact HTML that you need makes this easy.\n\nYou use Bootstrap by including the Bootstrap CSS and JavaScript. For this solution I have used the [Bootstrap Basic Template](http://getbootstrap.com/getting-started/#template), loading the files from the CDN. With Bootstrap included in my pages I can add Perch Regions to test out my templates.\n\n<p class=\"text-center\"><a href=\"https://github.com/PerchCMS/perch-bootstrap-templates\" class=\"btn btn-success\"><i class=\"glyphicon glyphicon-arrow-down\"></i> Download the templates</a></p>\n\n## The jumbotron\n\n![Jumbotron via Perch](https://static.grabaperch.com/solutions/bootstrap-templates-jumbotron.png){.img-thumbnail}\n\nThe [jumbotron](http://getbootstrap.com/components/#jumbotron) is a large header area that can be used as a call to action. My template adds the header and body along with a link styled as a button.\n\n```html\n    <div class=\"jumbotron\">\n      <h1><perch:content id=\"heading\" type=\"text\" label=\"Heading\" required title></h1>\n      <perch:content id=\"content\" type=\"textarea\" label=\"Content\" required markdown editor=\"markitup\">\n      <p><a class=\"btn btn-primary btn-lg\" role=\"button\" href=\"<perch:content id=\"link\" type=\"text\" label=\"Link\" required>\"><perch:content id=\"linktext\" type=\"text\" label=\"Link text\" required help=\"Text for the button, keep it short but try to avoid using click here!\"></a></p>\n    </div>\n```\n\n## The Page Header\n\nThe [Page Header](http://getbootstrap.com/components/#page-header) component gives you a header and subtext style. I have made the subtext optional using Perch Conditionals.\n\n```html\n    <div class=\"page-header\">\n      <h1><perch:content id=\"heading\" type=\"text\" label=\"Heading\" required title>\n      <perch:if exists=\"subtext\">\n        <small><perch:content id=\"subtext\" type=\"text\" label=\"Subtext\"></small>\n      </perch:if>\n      </h1>\n    </div>\n```\n\n## Thumbnails\n\n![Thumbnails created by Perch](https://static.grabaperch.com/solutions/bootstrap-templates-thumbnails.png){.img-thumbnail}\n\n[Default Thumbnails](http://getbootstrap.com/components/#thumbnails-default) just give you a grid of images. I contain the grid within `perch:before` and `perch:after` tags and then set this region to **Allow Multiples** when selecting the template in the Perch Control Panel.\n\n```html\n    <perch:before>\n\t\t\t\t<div class=\"row\">\n    </perch:before>\n    <div class=\"col-xs-6 col-md-3\">\n      <a href=\"<perch:content id=\"link\" type=\"text\" label=\"Link\" required>\" class=\"thumbnail\">\n        <img src=\"<perch:content id=\"image\" type=\"image\" label=\"Image\" width=\"171\" height=\"180\" crop>\" alt=\"<perch:content id=\"alt\" type=\"text\" label=\"Alt text\" title>\">\n      </a>\n    </div>\n    <perch:after>\n      </div>\n    </perch:after>\n```\n\n[Custom Content Thumbnails](http://getbootstrap.com/components/#thumbnails-custom-content) can contain other content, and I’ve created a template that matches the example on the Bootstrap site.\n\n```html\n    <perch:before>\n      <div class=\"row\">\n    </perch:before>\n    <div class=\"col-xs-6 col-md-4\">\n  \t  <div class=\"thumbnail\">\n  \t\t  <img src=\"<perch:content id=\"image\" type=\"image\" label=\"Image\" width=\"242\" height=\"200\" crop>\" alt=\"<perch:content id=\"alt\" type=\"text\" label=\"Alt text\">\">\n    \t  <div class=\"caption\">\n    \t\t  <h3><perch:content id=\"heading\" type=\"text\" label=\"Heading\" required title></h3>\n    \t\t  <perch:content id=\"content\" type=\"textarea\" label=\"Content\" required size=\"s\" markdown editor=\"markitup\">\n  \t\t\t  <p><a href=\"<perch:content id=\"link\" type=\"text\" label=\"Link\" required>\" class=\"btn btn-primary\" role=\"button\">\n  \t\t\t\t<perch:content id=\"linktext\" type=\"text\" label=\"Link text\" required help=\"Text for the button, keep it short but try to avoid using click here!\">\n  \t\t\t  </a></p>\n  \t\t  </div>\n  \t  </div>  \n    </div>\n    <perch:after>\n      </div>\n    </perch:after>\n```\n\n## Media Object\n\n![Media Object created by Perch](https://static.grabaperch.com/solutions/bootstrap-templates-media.png){.img-thumbnail}\n\nThe [Media Object](http://getbootstrap.com/components/#media) is for building components that feature a left or right aligned image along with some other content.\n\n```html\n    <div class=\"media\">\n      <a class=\"pull-left\" href=\"<perch:content id=\"link\" type=\"text\" label=\"Link\" required>\">\n        <img src=\"<perch:content id=\"image\" type=\"image\" label=\"Image\" width=\"64\" height=\"64\" crop>\" alt=\"<perch:content id=\"alt\" type=\"text\" label=\"Alt text\">\" class=\"media-object\">\n      </a>\n      <div class=\"media-body\">\n        <h4 class=\"media-heading\"><perch:content id=\"heading\" type=\"text\" label=\"Heading\" required title></h4>\n        <perch:content id=\"content\" type=\"textarea\" label=\"Content\" required size=\"s\" markdown editor=\"markitup\">\n      </div>\n    </div>\n```\n\n## Panels\n\n![Panels created by Perch](https://static.grabaperch.com/solutions/bootstrap-templates-panels.png){.img-thumbnail}\n\nThe [Panel](http://getbootstrap.com/components/#panels) Component means you can put content in a box. The Panel can optionally have a header and footer and there are also ways to give Panels contextual styles. My first template is just a simple panel with a header and an optional footer.\n\nThe `perch:if` conditional ensures that we do not get empty footer markup if the content editor doesn’t enter footer content.\n\n```html\n    <div class=\"panel panel-default\">\n      <div class=\"panel-heading\">\n        <h3 class=\"panel-title\"><perch:content id=\"heading\" type=\"text\" label=\"Heading\" required title></h3>\n      </div>\n      <div class=\"panel-body\">\n        <perch:content id=\"content\" type=\"textarea\" label=\"Content\" required size=\"m\" markdown editor=\"markitup\">\n      </div>\n      <perch:if exists=\"footertext\">\n        <div class=\"panel-footer\">\n          <perch:content id=\"footertext\" type=\"text\" label=\"Footer text\" help=\"An optional footer for the panel\">\n        </div>\n      </perch:if>\n    </div>\n```\n\n### Contextual Panel Headings\n\nBootstrap gives a list of classes that can be applied to a panel instead of `panel-default`. These will [give the panel some context](http://getbootstrap.com/components/#panels-alternatives).\n\nIn order that content editors can choose which type of Panel to create we can give them a drop down list in the Perch Control Pane when editing this content, using the Perch template tag with a type of [select](http://docs.grabaperch.com/docs/templates/attributes/type/select/).\n\n![Perch Admin](https://static.grabaperch.com/solutions/bootstrap-templates-admin.png){.img-thumbnail}\n\nSelect takes a list of options, and you can separate a friendly name for the option - that will be displayed in admin - from the value that is output.  We then output the chosen class to the content.\n\n```html\n    <div class=\"panel <perch:content id=\"contextual\" type=\"select\" label=\"Panel context\" options=\"Default|panel-default,Primary|panel-primary,Success|panel-success,Info|panel-info,Warning|panel-warning,Danger|panel-danger\">\">\n      <div class=\"panel-heading\">\n        <h3 class=\"panel-title\"><perch:content id=\"heading\" type=\"text\" label=\"Heading\" required title></h3>\n      </div>\n      <div class=\"panel-body\">\n        <perch:content id=\"content\" type=\"textarea\" label=\"Content\" required size=\"m\" markdown editor=\"markitup\">\n      </div>\n      <perch:if exists=\"footertext\">\n        <div class=\"panel-footer\">\n          <perch:content id=\"footertext\" type=\"text\" label=\"Footer text\" help=\"An optional footer for the panel\">\n        </div>\n      </perch:if>\n    </div>\n```\n\n### Panel with List Group\n\nYou can output [full width list-groups](http://getbootstrap.com/components/#panels-list-group) or tables within a Panel. This template has a panel with a heading and body, then a Bootstrap [List Group](http://getbootstrap.com/components/#list-group) added by way of a [Perch Repeater](/templates/repeaters/) template tag.\n\n```html\n    <div class=\"panel panel-default\">\n      <div class=\"panel-heading\">\n        <h3 class=\"panel-title\"><perch:content id=\"heading\" type=\"text\" label=\"Heading\" required title></h3>\n      </div>\n      <div class=\"panel-body\">\n        <perch:content id=\"content\" type=\"textarea\" label=\"Content\" required size=\"m\" markdown editor=\"markitup\">\n      </div>\n      <perch:repeater id=\"link_list\" label=\"Resources list\">\n      <perch:before>\n        <div class=\"list-group\">\n      </perch:before>\n        <a class=\"list-group-item\" href=\"<perch:content id=\"link\" type=\"text\" label=\"Link\" required>\">\n          <h4 class=\"list-group-item-heading\"><perch:content id=\"linkheading\" type=\"text\" label=\"Link heading\" required></h4>\n          <p class=\"list-group-item-text\"><perch:content id=\"linkdesc\" type=\"text\" label=\"Link short description\" required></p>\n        </a>\n      <perch:after>\n        </div>\n      </perch:after>\n      </perch:repeater>\n      <perch:if exists=\"footertext\"><div class=\"panel-footer\"><perch:content id=\"footertext\" type=\"text\" label=\"Footer text\" help=\"An optional footer for the panel\"></div></perch:if>\n    </div>\n```\n\nAs you can see it is easy to turn Bootstrap components into Perch Templates. You can use these examples as starting points for your own Bootstrap and Perch websites.","type":"perch"},{"title":"App Specific Tags","permalink":"https://docs.grabaperch.com/templates/apps/","id":"templates.apps","excerpt":"In most cases our official Apps implement all of the Field Types and related attributes found in the main template reference, for third party apps you will need to refer to the documentation for that app.","text":"In most cases our official Apps implement all of the Field Types and related attributes found in the main template reference, for third party apps you will need to refer to the documentation for that app.\n\nOur Apps will typically then expose additional Field Types and attributes to perform functionality specific to that App. In this section of the template documentation we detail those specific additions.","type":"templates"},{"title":"Template Comments","permalink":"https://docs.grabaperch.com/templates/comments/","id":"templates.comments","excerpt":"Template comments can be used to annotate a template with notes for yourself and other developers. They are stripped from the template before being output to the browser.","text":"Template comments can be used to annotate a template with notes for yourself and other developers. They are stripped from the template before being output to the browser.\n\n```html\n<!--* This is a template comment *-->\n```\n\nTemplate comments are just like HTML comments, but with the addition of an asterisk. Comments can span one or multiple lines.\n\nWhen comments are removed they expand to encompass any whitespace around them, so care should be taken within whitespace-sensitive contexts like `<pre>` tags.","type":"templates"},{"title":"Blocks Tags","permalink":"https://docs.grabaperch.com/templates/blocks/","id":"templates.blocks","excerpt":"Blocks offer the ability to structure an item with a choice of mixed content. Within each item (such as an item in a multiple item region, or a Collection item in Perch Runway) the template can define a `perch:blocks` section containing a choice of blocks to add.","text":"Blocks offer the ability to structure an item with a choice of mixed content. Within each item (such as an item in a multiple item region, or a Collection item in Perch Runway) the template can define a `perch:blocks` section containing a choice of blocks to add.\n\nBlocks defines the following template tags:\n\n| Tag | Description |\n|-|-|\n| `<perch:blocks></perch:blocks>` | The entire blocked section should be inside this pair. |\n| `<perch:block></perch:block>` | An individual block, defining the start and end of that micro-template |\n\nEach block is like a micro-template. It can include the usual mix of field types, Repeaters and markup.\n\n```html\n<perch:blocks>\n  <perch:block type=\"text\" label=\"Text\">\n    ...\n  </perch:block>\n  <perch:block type=\"quote\" label=\"Pull quote\">\n    ...\n  </perch:block>\n  <perch:block type=\"image\" label=\"Feature image\">\n    ...\n  </perch:block>\n</perch:blocks>\n```\n\n## The `perch:blocks` tag pair\n\nAll blocks must exist within a  `perch:blocks` tag pair. This defines the _’blocked’_ section of the template.\n\nA template using blocks can contain other content outside of the blocks. The order of the fields and the blocked section can be controlled with the `order` attribute.\n\n```html\n<perch:content type=\"smarttext\" id=\"heading\" order=\"1\">\n<perch:content type=\"date\" id=\"date\" order=\"3\">\n<perch:blocks order=\"2\">\n  …\n</perch:blocks>\n```\n\nThe blocked section can use `perch:before` and `perch:after` sections in order to display markup around the blocks. These do not show if no blocks are selected.\n\nThe blocks are output in a group, so `perch:every` acts across the blocks, and each block has its own `perch_item_index` and friends.\n\n## The `perch:block` tag pair\n\nBlock tags appear within a `perch:blocks` tag pair. They define each block than can be chosen by the content editor.\n\n```html\n<perch:block type=\"image\" label=\"Feature image\">\n  <figure>\n      <img src=\"<perch:content id=\"image\" type=\"image\" width=\"1600\" label=\"Image\">\">\n      <figcaption>\n        <perch:content id=\"caption\" type=\"smarttext\" label=\"Caption\">\n      </figcaption>\n    </figure>\n</perch:block>\n```\n\nA `perch:block` tag pair then just contains normal template code, including content tags, repeaters and markup. (Each individual block does not have a `before` or `after` section, but they do have an index within the blocked group.) You can use the `divider-before` and `divider-after` attributes to give the edit form more structure.\n\nThe `perch:block` opening tag has two required attributes. `type` describes the block to the templating system, and `label` describes it to your users.\n\n|Attribute|Value|\n|-|-|\n|type|An ID-like reference used to refer to the block in templates|\n|label|A short, human-readable description of the block type|\n|icon|The name of an icon to use to represent the block in the user interface|\n\nThe `label` attribute is used in the editing interface to describe the block.\n\nA blocked section can include as many blocks as needed. A template can only contain one `perch:blocks` section.\n\n## Using template includes\n\nIt is perfectly fine to use template includes to make your code more modular.\n\n```html\n<perch:blocks>\n  <perch:block type=\"image\" label=\"Feature image\">\n    <perch:template path=\"content/blocks/image.html\">\n  </perch:block>\n</perch:blocks>\n```\n\nYou can even make sets of common blocks and add special cases as needed:\n\n```html\n<perch:blocks>\n  <perch:template path=\"blocks/article_blocks.html\">\n  <perch:block type=\"image\" label=\"Feature image\">\n    <perch:template path=\"content/blocks/image.html\">\n  </perch:block>\n</perch:blocks>\n```\n## Accessing content outside the blocks\n\nBy default, blocks operate as a silo – like a region within the template. They have their own content scope, and the template engine treats them as a distinct zone with its own *before* and *after* properties and new item counts.\n\nContent from outside the `perch:blocks` tag is out of scope. You can bring it into scope for all blocks using the `scope-parent` attribute on the `perch:blocks` tag.\n\nTo prevent ID clashes, the items from outside the blocks become `parent.originalID` within the blocks. So a field that is `id=\"title\"`\noutside the blocks would be `id=\"parent.title\"` when brought into scope within the blocks.\n\n## Icons\n\nA block can be represented by an icon. The available icons are listed below.\n\n\n\n|Icon|Name|\n|--|--|\n|<svg role=\"img\" width=\"16\" height=\"16\"> <use xlink:href=\"/assets/svg/blocks.svg#address-book\"> </svg> |address-book|\n|<svg role=\"img\" width=\"16\" height=\"16\"> <use xlink:href=\"/assets/svg/blocks.svg#alarm-alt\"> </svg> |alarm-alt|\n|<svg role=\"img\" width=\"16\" height=\"16\"> <use xlink:href=\"/assets/svg/blocks.svg#anchor\"> </svg> |anchor|\n|<svg role=\"img\" width=\"16\" height=\"16\"> <use xlink:href=\"/assets/svg/blocks.svg#bed\"> </svg> |bed|\n|<svg role=\"img\" width=\"16\" height=\"16\"> <use xlink:href=\"/assets/svg/blocks.svg#bell\"> </svg> |bell|\n|<svg role=\"img\" width=\"16\" height=\"16\"> <use xlink:href=\"/assets/svg/blocks.svg#book\"> </svg> |book|\n|<svg role=\"img\" width=\"16\" height=\"16\"> <use xlink:href=\"/assets/svg/blocks.svg#bookmark\"> </svg> |bookmark|\n|<svg role=\"img\" width=\"16\" height=\"16\"> <use xlink:href=\"/assets/svg/blocks.svg#burger\"> </svg> |burger|\n|<svg role=\"img\" width=\"16\" height=\"16\"> <use xlink:href=\"/assets/svg/blocks.svg#calculator\"> </svg> |calculator|\n|<svg role=\"img\" width=\"16\" height=\"16\"> <use xlink:href=\"/assets/svg/blocks.svg#calendar-add\"> </svg> |calendar-add|\n|<svg role=\"img\" width=\"16\" height=\"16\"> <use xlink:href=\"/assets/svg/blocks.svg#calendar\"> </svg> |calendar|\n|<svg role=\"img\" width=\"16\" height=\"16\"> <use xlink:href=\"/assets/svg/blocks.svg#camera-alt\"> </svg> |camera-alt|\n|<svg role=\"img\" width=\"16\" height=\"16\"> <use xlink:href=\"/assets/svg/blocks.svg#cart\"> </svg> |cart|\n|<svg role=\"img\" width=\"16\" height=\"16\"> <use xlink:href=\"/assets/svg/blocks.svg#chart-pie\"> </svg> |chart-pie|\n|<svg role=\"img\" width=\"16\" height=\"16\"> <use xlink:href=\"/assets/svg/blocks.svg#chat\"> </svg> |chat|\n|<svg role=\"img\" width=\"16\" height=\"16\"> <use xlink:href=\"/assets/svg/blocks.svg#circle-add\"> </svg> |circle-add|\n|<svg role=\"img\" width=\"16\" height=\"16\"> <use xlink:href=\"/assets/svg/blocks.svg#clock\"> </svg> |clock|\n|<svg role=\"img\" width=\"16\" height=\"16\"> <use xlink:href=\"/assets/svg/blocks.svg#cloud\"> </svg> |cloud|\n|<svg role=\"img\" width=\"16\" height=\"16\"> <use xlink:href=\"/assets/svg/blocks.svg#code\"> </svg> |code|\n|<svg role=\"img\" width=\"16\" height=\"16\"> <use xlink:href=\"/assets/svg/blocks.svg#coffee-togo\"> </svg> |coffee-togo|\n|<svg role=\"img\" width=\"16\" height=\"16\"> <use xlink:href=\"/assets/svg/blocks.svg#compass\"> </svg> |compass|\n|<svg role=\"img\" width=\"16\" height=\"16\"> <use xlink:href=\"/assets/svg/blocks.svg#contacts\"> </svg> |contacts|\n|<svg role=\"img\" width=\"16\" height=\"16\"> <use xlink:href=\"/assets/svg/blocks.svg#dashboard\"> </svg> |dashboard|\n|<svg role=\"img\" width=\"16\" height=\"16\"> <use xlink:href=\"/assets/svg/blocks.svg#database\"> </svg> |database|\n|<svg role=\"img\" width=\"16\" height=\"16\"> <use xlink:href=\"/assets/svg/blocks.svg#document\"> </svg> |document|\n|<svg role=\"img\" width=\"16\" height=\"16\"> <use xlink:href=\"/assets/svg/blocks.svg#download\"> </svg> |download|\n|<svg role=\"img\" width=\"16\" height=\"16\"> <use xlink:href=\"/assets/svg/blocks.svg#edit\"> </svg> |edit|\n|<svg role=\"img\" width=\"16\" height=\"16\"> <use xlink:href=\"/assets/svg/blocks.svg#flag\"> </svg> |flag|\n|<svg role=\"img\" width=\"16\" height=\"16\"> <use xlink:href=\"/assets/svg/blocks.svg#folder\"> </svg> |folder|\n|<svg role=\"img\" width=\"16\" height=\"16\"> <use xlink:href=\"/assets/svg/blocks.svg#heart\"> </svg> |heart|\n|<svg role=\"img\" width=\"16\" height=\"16\"> <use xlink:href=\"/assets/svg/blocks.svg#home\"> </svg> |home|\n|<svg role=\"img\" width=\"16\" height=\"16\"> <use xlink:href=\"/assets/svg/blocks.svg#keyboard\"> </svg> |keyboard|\n|<svg role=\"img\" width=\"16\" height=\"16\"> <use xlink:href=\"/assets/svg/blocks.svg#keynote\"> </svg> |keynote|\n|<svg role=\"img\" width=\"16\" height=\"16\"> <use xlink:href=\"/assets/svg/blocks.svg#lightbulb\"> </svg> |lightbulb|\n|<svg role=\"img\" width=\"16\" height=\"16\"> <use xlink:href=\"/assets/svg/blocks.svg#link\"> </svg> |link|\n|<svg role=\"img\" width=\"16\" height=\"16\"> <use xlink:href=\"/assets/svg/blocks.svg#list\"> </svg> |list|\n|<svg role=\"img\" width=\"16\" height=\"16\"> <use xlink:href=\"/assets/svg/blocks.svg#location\"> </svg> |location|\n|<svg role=\"img\" width=\"16\" height=\"16\"> <use xlink:href=\"/assets/svg/blocks.svg#mail\"> </svg> |mail|\n|<svg role=\"img\" width=\"16\" height=\"16\"> <use xlink:href=\"/assets/svg/blocks.svg#megaphone\"> </svg> |megaphone|\n|<svg role=\"img\" width=\"16\" height=\"16\"> <use xlink:href=\"/assets/svg/blocks.svg#menu\"> </svg> |menu|\n|<svg role=\"img\" width=\"16\" height=\"16\"> <use xlink:href=\"/assets/svg/blocks.svg#microphone\"> </svg> |microphone|\n|<svg role=\"img\" width=\"16\" height=\"16\"> <use xlink:href=\"/assets/svg/blocks.svg#music\"> </svg> |music|\n|<svg role=\"img\" width=\"16\" height=\"16\"> <use xlink:href=\"/assets/svg/blocks.svg#newspaper\"> </svg> |newspaper|\n|<svg role=\"img\" width=\"16\" height=\"16\"> <use xlink:href=\"/assets/svg/blocks.svg#notepad\"> </svg> |notepad|\n|<svg role=\"img\" width=\"16\" height=\"16\"> <use xlink:href=\"/assets/svg/blocks.svg#paint-roller\"> </svg> |paint-roller|\n|<svg role=\"img\" width=\"16\" height=\"16\"> <use xlink:href=\"/assets/svg/blocks.svg#paintbrush\"> </svg> |paintbrush|\n|<svg role=\"img\" width=\"16\" height=\"16\"> <use xlink:href=\"/assets/svg/blocks.svg#paper-airplane\"> </svg> |paper-airplane|\n|<svg role=\"img\" width=\"16\" height=\"16\"> <use xlink:href=\"/assets/svg/blocks.svg#paperclip\"> </svg> |paperclip|\n|<svg role=\"img\" width=\"16\" height=\"16\"> <use xlink:href=\"/assets/svg/blocks.svg#pencil-paintbrush-pen\"> </svg> |pencil-paintbrush-pen|\n|<svg role=\"img\" width=\"16\" height=\"16\"> <use xlink:href=\"/assets/svg/blocks.svg#pencil\"> </svg> |pencil|\n|<svg role=\"img\" width=\"16\" height=\"16\"> <use xlink:href=\"/assets/svg/blocks.svg#phone\"> </svg> |phone|\n|<svg role=\"img\" width=\"16\" height=\"16\"> <use xlink:href=\"/assets/svg/blocks.svg#photo\"> </svg> |photo|\n|<svg role=\"img\" width=\"16\" height=\"16\"> <use xlink:href=\"/assets/svg/blocks.svg#photos\"> </svg> |photos|\n|<svg role=\"img\" width=\"16\" height=\"16\"> <use xlink:href=\"/assets/svg/blocks.svg#plane\"> </svg> |plane|\n|<svg role=\"img\" width=\"16\" height=\"16\"> <use xlink:href=\"/assets/svg/blocks.svg#popsicle\"> </svg> |popsicle|\n|<svg role=\"img\" width=\"16\" height=\"16\"> <use xlink:href=\"/assets/svg/blocks.svg#pulse-wave\"> </svg> |pulse-wave|\n|<svg role=\"img\" width=\"16\" height=\"16\"> <use xlink:href=\"/assets/svg/blocks.svg#puzzle\"> </svg> |puzzle|\n|<svg role=\"img\" width=\"16\" height=\"16\"> <use xlink:href=\"/assets/svg/blocks.svg#question\"> </svg> |question|\n|<svg role=\"img\" width=\"16\" height=\"16\"> <use xlink:href=\"/assets/svg/blocks.svg#quote\"> </svg> |quote|\n|<svg role=\"img\" width=\"16\" height=\"16\"> <use xlink:href=\"/assets/svg/blocks.svg#redirect\"> </svg> |redirect|\n|<svg role=\"img\" width=\"16\" height=\"16\"> <use xlink:href=\"/assets/svg/blocks.svg#signs\"> </svg> |signs|\n|<svg role=\"img\" width=\"16\" height=\"16\"> <use xlink:href=\"/assets/svg/blocks.svg#tag\"> </svg> |tag|\n|<svg role=\"img\" width=\"16\" height=\"16\"> <use xlink:href=\"/assets/svg/blocks.svg#theater-masks\"> </svg> |theater-masks|\n|<svg role=\"img\" width=\"16\" height=\"16\"> <use xlink:href=\"/assets/svg/blocks.svg#truck\"> </svg> |truck|\n|<svg role=\"img\" width=\"16\" height=\"16\"> <use xlink:href=\"/assets/svg/blocks.svg#tv\"> </svg> |tv|\n|<svg role=\"img\" width=\"16\" height=\"16\"> <use xlink:href=\"/assets/svg/blocks.svg#umbrella\"> </svg> |umbrella|\n|<svg role=\"img\" width=\"16\" height=\"16\"> <use xlink:href=\"/assets/svg/blocks.svg#user-female\"> </svg> |user-female|\n|<svg role=\"img\" width=\"16\" height=\"16\"> <use xlink:href=\"/assets/svg/blocks.svg#user\"> </svg> |user|\n|<svg role=\"img\" width=\"16\" height=\"16\"> <use xlink:href=\"/assets/svg/blocks.svg#users\"> </svg> |users|\n|<svg role=\"img\" width=\"16\" height=\"16\"> <use xlink:href=\"/assets/svg/blocks.svg#utensils\"> </svg> |utensils|\n|<svg role=\"img\" width=\"16\" height=\"16\"> <use xlink:href=\"/assets/svg/blocks.svg#video\"> </svg> |video|\n|<svg role=\"img\" width=\"16\" height=\"16\"> <use xlink:href=\"/assets/svg/blocks.svg#weather\"> </svg> |weather|\n|<svg role=\"img\" width=\"16\" height=\"16\"> <use xlink:href=\"/assets/svg/blocks.svg#wine\"> </svg> |wine|\n|<svg role=\"img\" width=\"16\" height=\"16\"> <use xlink:href=\"/assets/svg/blocks.svg#world\"> </svg> |world|\n|<svg role=\"img\" width=\"16\" height=\"16\"> <use xlink:href=\"/assets/svg/blocks.svg#wrench\"> </svg> |wrench|\n|<svg role=\"img\" width=\"16\" height=\"16\"> <use xlink:href=\"/assets/svg/blocks.svg#yin-yang\"> </svg> |yin-yang|","type":"templates"},{"title":"Conditional Tags","permalink":"https://docs.grabaperch.com/templates/conditionals/","id":"templates.conditionals","excerpt":"Sometimes, you only want to output a section of the template if a piece of content has been given. For example, if no heading content has been given, you don’t want to output a set of empty `<h2></h2>` tags. This is where conditionals come in. Here’s an example:","text":"Sometimes, you only want to output a section of the template if a piece of content has been given. For example, if no heading content has been given, you don’t want to output a set of empty `<h2></h2>` tags. This is where conditionals come in. Here’s an example:\n\n```html\n<perch:if exists=\"heading\">\n    <h2>\n        <perch:content id=\"heading\" type=\"text\" label=\"Heading\" required=\"false\">\n    </h2>\n</perch:if>\n```\n\nThe above example will only output the HTML inside the tags if a value has been entered for the heading. You can wrap the conditional tags around any part of the template, and you may include one conditional tag inside another.\n\nThe conditional tags `if` and `else` allow you to check a condition and do one thing or another based on it matching or not.\n\nThe conditional tags `every`, `before` and `after` are for use with repeating elements - templates that repeat in multiple item regions, Repeaters and Blocks.\n\n## Available conditional tags\n\n| Tag | Description |\n|-|-|\n| `if` | check to see if a condition is true |\n| `else` | use with `if` to define what happens if that does not match |\n| `every` | Do something (for example add a class) every certain number of repeats |\n| `before` | Do something before outputting a repeat section |\n| `after` | Do something after outputting a repeat section |","type":"templates"},{"title":"Category Tags","permalink":"https://docs.grabaperch.com/templates/categories/","id":"templates.categories","excerpt":"- Template namespace: `perch:category`\n- Templates: `/perch/templates/categories/`\n- Defines: `<perch:categories></perch:categories>`, `<perch:category></perch:category>`","text":"- Template namespace: `perch:category`\n- Templates: `/perch/templates/categories/`\n- Defines: `<perch:categories></perch:categories>`, `<perch:category></perch:category>`\n\nCategory templates can use any Field Types available to other templates in Perch and Runway.\n\n## The `<perch:categories>` tag\n\nUsed as a self-closing tag, `perch:categories` will add the Category selection interface to the template when it is displayed in the Perch Control Panel.\n\n```html\n<perch:categories id=\"work\" label=\"Type of work\" set=\"work\" required>\n```\n\nIf you simply want to capture a category selection in order to filter the content then this is all you need to add. If you wish to output a list of categories to the page then you can use the `perch:categories` tag pair with your markup between the opening and closing tags.\n\n```html\n<perch:categories id=\"work\" label=\"Type of work\" set=\"work\" required>\n  <perch:before>\n  <h3>Our work on this project</h3>\n  <ul>\n  </perch:before>\n  <li><a href=\"/category/<perch:category id=\"catPath\">\"><perch:category id=\"catTitle\"></a></li>\n  <perch:after>\n  </ul>\n  </perch:after>\n</perch:categories>\n```\n\n\n## Field styles: lists vs checkboxes\n\nBy default, categories appear on the edit form as a list from which you can make multiple selections. This is in effect a multiple-item select field, enhanced with JavaScript.\n\nSometimes you might want to display categories as checkboxes. This works well for simple sets that don’t use nested categories. To do so, add the display-as=\"checkboxes\" attribute.\n\n```html\n    <perch:categories id=\"work\" label=\"Type of work\" set=\"work\" required display-as=\"checkboxes\">\n```","type":"templates"},{"title":"Tag attributes","permalink":"https://docs.grabaperch.com/templates/attributes/","id":"templates.attributes","excerpt":"Each tag has three required attributes:","text":"Each tag has three required attributes:\n\n|Attribute|Values and description|\n|-|-|\n| `id` | A unique identifier for the item within that template. This should be lowercase letters, numbers and underscores only.|\n| `type` | The type of editing field the content should use. There are [lots of default field types](/docs/templates/attributes/type/) and more can be created as add-ons |\n| `label` | This is the nicely formatted label used for the field when editing it. |\n\nBeyond those, there are different attributes you can add to tags to specify how they should behave within the CMS, and how the content should be output to the page.\n\nDifferent field types make use of different attributes. For example, a date field can use the `format` attribute to specify the format in which the date should be output. A textarea field might use `words` or `chars` to limit the amount of content output in that context.\n\nThis section lists the available attributes and how they make the tag behave.","type":"templates"},{"title":"Template Core Concepts","permalink":"https://docs.grabaperch.com/templates/core-concepts/","id":"templates.core-concepts","excerpt":"Whether using Perch, Perch Runway or one of our official apps you use templates to define the content that is entered in the admin Control Panel and then output to your pages.","text":"Whether using Perch, Perch Runway or one of our official apps you use templates to define the content that is entered in the admin Control Panel and then output to your pages.\n\n## 1. Tag Structure\n\nTags are made up of two main parts – the tag itself, and the tag\n*attributes*.\n\nTake this tag:\n\n```html\n<perch:content id=\"title\" type=\"text\" label=\"Heading\">\n```\n\nThis is a `perch:content` tag. The fact that it starts with `perch:` lets us know that this is a tag that the CMS will process, and won’t be output to the page.\n\nThe second part, `content`, means that this is a general content tag, the most basic type of tag in Perch. Add-ons such as apps introduce new tags, and the name of the tag indicates which add-on will process it.\n\nFor instance, a `<perch:blog>` tag would be processed by the Blog app. A `<perch:members>` tag would be processed by the Members app, and so on.\n\n(History lesson: Long, long ago, the *Pages* section in Perch used to be called *Content*. Technically, it’s the *Content app*, and that’s where the `perch:content` tags come from.)\n\n### Attributes\n\nOther than the tag itself, we have attributes. There are three required attributes: `id`, `type` and `label`.\n\nAttributes control either how the tag behaves within the CMS, or how it is output to the page. Many different attributes can be used, and they’re listed in the [Attributes](/templates/attributes/) section.\n\n## 2. Re-using content in the template\n\nThe `id` in a template tag identifies that content uniquely. Therefore if you want to use the same content in multiple places in your template, you can re-use the `id`. The administrator would only enter the content once despite in the output the content being displayed in more than one places.\n\nAn example where you might want to do this is with an email address. You want the admin to enter the email address once in the edit form, but display it on the page and also as the `mailto` of a link. The template for this would be as follows.\n\n```html\nYou can email us at:\n<a href=\"mailto:<perch:content id=\"email\" type=\"text\" label=\"Email address\">\">\n    <perch:content id=\"email\" type=\"text\" label=\"Email address\">\n</a>\n```\n\n## 2. Namespacing\n\nAs already explained, templates for regular content in Perch, including Runway Collections, use a tag namespaced as `perch:content` and official apps define their own namespace. If you are working with a blog template you would use `perch:blog`.\n\nIn order to enable template reuse, it is possible to [rescope a template](/perch/content/templates/template-includes-rescope/) so that a template can be used in both content and an app.\n\n## 3. Master Templates\n\nIt can be helpful to think of the main template used to input and display your content as a \"Master Template\". This concept is very clear in Apps - for example in the Blog App the Master Template is `post.html`. Any fields that you want to appear in admin for content to be entered need to appear in this template, even if they do not display when displaying a post.\n\nFor content created via regular Perch Content or a Runway Collection the concept is the same. The main template used for this content is the Master Template. Any content that you need fields for in the admin should be in this template. If this means that there are fields in your Master Template that should not be part of the output when this template is displayed you can use the [suppress](/templates/attributes/suppress/) attribute to prevent them being output.\n\n## 4. Field Types  \n\nWhen using any Perch Template tag the `type` attribute represents a Field Type. Perch ships with a large number of [inbuilt Field Types](/templates/field-types/) and you can also create your own via the [API](/api/field-types/).","type":"templates"},{"title":"Field Types","permalink":"https://docs.grabaperch.com/templates/field-types/","id":"templates.field-types","excerpt":"Every content template tag has a `type` attribute. This specifies which type of field is used to collect and process the data. From text to textarea, checkbox to file, these all have different form controls and ways of handling the data.","text":"Every content template tag has a `type` attribute. This specifies which type of field is used to collect and process the data. From text to textarea, checkbox to file, these all have different form controls and ways of handling the data.\n\nDepending on the value of the `type` attribute, and therefore the Field Type used for your template tag, you will also use additional attributes to further define the behaviour of the input and output of data collected by this tag. For example, if you use the template tag type of `text`, then in the Control Panel the content editor will see a single line text field.\n\n```html\n<perch:content id=\"heading\" type=\"text\" label=\"Heading\">\n```\n\nThe only required attributes for `text` are `id` and `label`. However you can also add:\n\n- `maxlength`: The number of characters that can be input to the form field.\n- `required`: Whether the field must be completed or not.\n- `title`: Whether to use the contents of this field as a title in the Control Panel\n\n\nIf you use a `type` of `checkbox` then you are also required to use `id` and `label` plus an attribute of `value` which will be the value of the checkbox once it is checked.\n\n```html\n<perch:content id=\"sale_item\" type=\"checkbox\" label=\"Sale item\" value=\"sale\">\n```\n\n-\n\n## Adding additional Field Types\n\nTo add a new Field Type, such as one you have downloaded from our site, just extract the archive and drop the folder into\n`perch/addons/fieldtypes/`\n\nYou can then use the field type with the `type=\"\"` attribute in your template tags.\n\n## Creating your own Field Types\n\nField Types are essentially a PHP class. To find out how to write your own see the [Field Type documentation](/api/field-types) and also a solution explaining how to [write your own Field Type](/solutions/create-a-field-type).","type":"templates"},{"title":"Field Groups","permalink":"https://docs.grabaperch.com/templates/groups/","id":"templates.groups","excerpt":"<div class=\"callout warning\">\n  <h5>Experimental feature</h5>\n  <p>Field groups are an experimental feature added to Perch 3.1.</p>\n</div>","text":"<div class=\"callout warning\">\n  <h5>Experimental feature</h5>\n  <p>Field groups are an experimental feature added to Perch 3.1.</p>\n</div>\n\nField groups are a way to logically group sets of fields fields witin the editing interface. Field groups can be collapsed to hide the fields, helping to tidy up more complex forms. When a field group is collapsed, it is replaced by a summary of the content contained within.\n\nCreate a field group with the `perch:group` tags around the fields you wish to group.\n\n```html\n<perch:group label=\"My group\">\n   ...\n</perch:group>\n```\n\n*Note:* If you reorder field using the `order` attribute, or repeat a field outside and before the group, the results may not be as you expect. To make use of the group feature you need to make sure your fields will appear together in the form.\n\n### Group Configuration\n\nThe `perch:group` opening tag can take the following attributes\n\n|Attribute|Value|\n|-|-|\n|label|A label to use for the group on the edit form.|\n|collapse|(optional, boolean) Whether the group should be initially collapsed when the form is loaded.|\n\n\n## Group collapsing\n\nIf the `collapse` attribute is set, the field group will be automatically collapsed when the form loads. The exception to this is if the group contains validation errors.\n\n```html\n<perch:group label=\"My group\" collapse>\n   <perch:content id=\"heading\" type=\"text\" label=\"Heading\" required>\n   <perch:content id=\"subheading\" type=\"text\" label=\"Sub-heading\">\n</perch:group>\n```\n\nIf a group contains validation errors that will be triggered when the form is submitted, the group can no longer be collapsed.","type":"templates"},{"title":"Template Includes","permalink":"https://docs.grabaperch.com/templates/includes/","id":"templates.includes","excerpt":"One template can be included inside another:","text":"One template can be included inside another:\n\n```html\n<perch:template path=\"content/another_template.html\">\n```\n\nAt runtime, the included template is inserted before any further processing is done. It’s as if the inner template was always part of the outer.\n\nThe `path` is relative to the `perch/templates` directory.\n\n## Rescoping tags\n\nIf you want to reuse sub templates in different contexts, you may find that you run up against having the wrong sort of tags for the current scope. For example, a template would use `<perch:content>` tags for page content, but `<perch:blog>` tags within the Blog app.\n\nTo overcome this, use `<perch:content>` tags in your sub template, and add the `rescope=\"parent\"` attribute when you include it.\n\n```html\n<perch:template path=\"content/another_template.html\" rescope=\"parent\">\n```\n\nThis will translate any `<perch:content>` tags to match the namespace of the current scope.","type":"templates"},{"title":"Navigation Tags","permalink":"https://docs.grabaperch.com/templates/navigation/","id":"templates.navigation","excerpt":"Navigation can be displayed using the [navigation functions](/functions/navigation/). These then use templates to output the results to your page.","text":"Navigation can be displayed using the [navigation functions](/functions/navigation/). These then use templates to output the results to your page.\n\n## Namespaces\n\nNavigation falls under the page management aspects of Perch and therefore uses the namespace `perch:pages`.\n\n## Templates\n\nNavigation templates can be found in the `perch/templates/navigation` folder.\n\n| Purpose | Template |\n|-|-|\n| Navigation links | item.html |\n| Breadcrumb links | breadcrumbs.html |\n\n## Variables as ID values\n\n| Value | Description |\n|-|-|\n|pagePath|Link path of the navigation item|\n|pageNavText|Navigation text configured for the page|\n|pageTitle|The title of the page. (Generally you want to use `pageNavText` in navigation)|\n|current_page|True/false. The link being output is for the page currently being viewed|\n|ancestor_page|True/false. The link being output is an ancestor of the page currently being viewed|\n|subitems|If there are links to display below the current link, those are inserted here|\n|pageOrder|The numerical ranking of the page amoungst its siblings|\n|pageDepth|The level in the navigation tree for this page|\n|pageTemplate|The file path of the master page used by the page|\n\nValues set by page attributes are also available within the template, using the IDs from their corresponding attribute templates.\n\n## Navigation items and subitems\n\nThe [navigation functions](/functions/navigation/) call the `item.html` template recursively for each level of a navigation tree. That means the template is processed over and over again for each branch of the tree, with the next level down being inserted at the point of the `subitems` tag:\n\n```html\n<perch:pages id=\"subitems\" encode=\"false\">\n```\n\nAs the subitems have already been run through the template and are HTML, we use `encode=\"false\"` so that the HTML isn't double-encoded.\n\nYou can test to see if the current page has subitems by using `perch:if`\n\n```html\n<perch:if exists=\"subitems\">\n    class=\"has-children\"\n</perch:if>\n```\n\n### Item template\n\nThe default navigation item templates does a lot of work in just a few lines of markup. It's best to think of the template being run for each _level_ of navigation in the tree - even if you're only displaying one level.\n\n```html\n<perch:before>\n    <ul>\n</perch:before>\n\t\t<li<perch:if exists=\"current_page\"> class=\"selected\"</perch:if>\n\t\t\t<perch:if exists=\"ancestor_page\"> class=\"ancestor\"</perch:if>>\n            <a href=\"<perch:pages id=\"pagePath\">\"><perch:pages id=\"pageNavText\"></a>   \n            <perch:pages id=\"subitems\" encode=\"false\">\n        </li>\n<perch:after>\n    </ul>\n</perch:after>\n```\nFor each _level_:\n\n1. The `perch:before` section is output if this is the first link in the level\n2. We consider each page in turn:\n\t1. If the link is for the page currently being viewed, it's given a class of `selected`\n\t2. If the link is for a parent or grandparent of the current page, it's given a class of `ancestor`\n\t3. We output the link\n\t4. If the page has another level to show below it, output the `subitem`\n3. Once all the links are done, the `perch:after` section is output","type":"templates"},{"title":"No Results Tag","permalink":"https://docs.grabaperch.com/templates/noresults/","id":"templates.noresults","excerpt":"Defines `<perch:noresults></perch:noresults>`","text":"Defines `<perch:noresults></perch:noresults>`\n\nSometimes, if you filter the content of a region, you can end up with a situation where no items are matched. If you want to display something different in this situation, add a `<perch:noresults></perch:noresults>`\nsection to your template.\n\n## Example\n\n```html\n<perch:before>\n<ul>\n</perch:before>\n    <li><perch:content id=\"item\" type=\"text\" label=\"Item\"></li>\n<perch:after>\n</ul>\n</perch:after>\n<perch:noresults>\n    Sorry, there are no items currently available.\n</perch:noresults>\n```","type":"templates"},{"title":"Pagination Tags","permalink":"https://docs.grabaperch.com/templates/pagination/","id":"templates.pagination","excerpt":"When using `perch_content_custom()` to paginate the returned data you must also add some markup to your template to display the paging. This markup makes use of a number of special `id` values to display pagination.","text":"When using `perch_content_custom()` to paginate the returned data you must also add some markup to your template to display the paging. This markup makes use of a number of special `id` values to display pagination.\n\n\n## Example\n\nIn this example I place my pagination code between `perch:after` tags in order that it only displays after results have been shown and use the special `id` values:\n\n- `current_page`\n- `number_of_pages`\n- `not_first_page`\n- `prev_url`\n- `page_links`\n- `not_last_page`\n- `next_url`\n- `perch_index_in_set`\n- `perch_zero_index_in_set`\n- `perch_first_in_set`\n- `perch_last_in_set`\n\nThe `perch:content` tags using these special id values are all given a type of hidden, in order that they do not show up in the Control Panel when this content is edited.\n\n```html\n<perch:after>\n  <perch:if exists=\"paging\">\n    <div class=\"paging\">\n      Page <perch:content id=\"current_page\" type=\"hidden\"> \n        of <perch:content id=\"number_of_pages\" type=\"hidden\">\n      <perch:if exists=\"not_first_page\">\n        <a href=\"<perch:content id=\"prev_url\" type=\"hidden\" encode=\"false\">\">Previous</a>\n      </perch:if>\n      <perch:content id=\"page_links\" encode=\"false\">\n      <perch:if exists=\"not_last_page\">\n        <a href=\"<perch:content id=\"next_url\" type=\"hidden\" encode=\"false\">\">Next</a>\n      </perch:if>\n    </div>\n  </perch:if>\n</perch:after>\n```\n\n### Pagination template variables\n\n|ID|Purpose|\n|-|-|\n|paging|Set if paging is present. Can be testing for with a perch:if tag.|\n|total|The total number of items in the result set.|\n|number_of_pages|The number of pages the result set is split into.|\n|total_pages|Same as number_of_pages. (Compatibility)|\n|per_page|Number of results per page.|\n|current_page|The current page in the result set.|\n|lower_bound|The first record index on this page.|\n|upper_bound|The last record index on this page.|\n|prev_url|The URL of the previous page. Empty for the first page.|\n|next_url|The URL of the next page. Empty for the last page.|\n|prev_page_number|The page number of the previous page. Empty for the first page.|\n|next_page_number|The page number for the next page. Empty for the last page.|\n|not_first_page|Present and set if the current page is not the first page in the set.|\n|not_last_page|Present and set if the current page is not the last page in the set.|\n|page_links|The HTML output of the page links template, if enabled.|\n|perch_index_in_set|An integer storing the position of this item in the result set, indexed from 1|\n|perch_zero_index_in_set|An integer storing the position of this item in the result set, indexed from 0|\n|perch_first_in_set|Will be true if this is the first item in the set|\n|perch_last_in_set|Will be true if this is the last item in the set|\n\n## Using a subtemplate\n\nOften, you’ll want to set up one pagination style for the whole of your site and reuse it when needed. You can do this with a sub template.\n\nPerch includes an example, which often is a good starting point. Use it like this:\n\n```html\n<perch:template path=\"pagination/default.html\" rescope=\"parent\">\n```\n\n## Working with paged content\n\nWhen paging content, some of the pagination variables help you to control how the content is displayed in addition to generating the pagination itself. \n\nFor example, a common pattern is to output a list of items, but use a different template for the first item in the set. Subsequent pages do not show the featured item. We can do this by checking to see if our item is `perch_first_in_set`. Then using the appropriate template tags, or included template.\n\n```html\n<perch:if exists=\"perch_first_in_set\">\n    <perch:template path=\"content/special-item.html\">\n<perch:else>\n    <perch:template path=\"content/item.html\">\n</perch:if>\n```\n\nYou can use `perch_index_in_set` to look for the first `n` items and either add a different class, or use a different template as above. In the below example I am testing to see if `perch_index_in_set` is equal to or less than 3, and if it is applying a special class.\n\n```html\n<div class=\"box<perch:if id=\"perch_index_in_set\" match=\"lte\" value=\"3\"> special</perch:if>\">\n```\n\n## Pagination options\n\nFor all page functions that provide pagination (not just `perch_content_custom`) you can set an number of options to configure how the pagination behaves.\n\n### Pagination Options\n\n\n|Option|Values|\n|-|-|\n|paginate|True or false. Whether to use pagination.|\n|count|Integer. (When used with `paginate`) The number of items to show per page if pagination is being used.|\n|pagination-var|The URL query string parameter name to use for the page number. Defaults to page.|\n|page-links|True or false. Create numbered page links as well as previous and next links.|\n|page-link-template|The template to use (if not the default) to generate the page links.|\n|page-link-style|shortened or all. By default a shortened set of page links are generated. If you want a link for every page, set to all.|","type":"templates"},{"title":"Repeaters Tags","permalink":"https://docs.grabaperch.com/templates/repeaters/","id":"templates.repeaters","excerpt":"Repeaters are parts of a template that can repeat. This is useful if, for example, you want to add multiple images but don’t know how many each item may have. You can add one image to the template, and then wrap it in a repeater.","text":"Repeaters are parts of a template that can repeat. This is useful if, for example, you want to add multiple images but don’t know how many each item may have. You can add one image to the template, and then wrap it in a repeater.\n\n```html\n<perch:repeater id=\"images\" label=\"Images\">\n    <img src=\"<perch:content type=\"image\" id=\"image\" label=\"Image\">\"\n      alt=\"<perch:content type=\"text\" id=\"alt\" label=\"Description\">\">\n</perch:repeater>\n```\n\nThe repeater tag takes a few attributes.\n\n### Repeater attributes\n\n|Attribute|Value|\n|-|-|\n|id|Required. The ID of the repeater. Follows the same rules as normal template tag IDs|\n|label|Required. A label to display when editing the items within Perch.|\n|max|Integer. An optional maximum limit on the number of items that can be added to the repeater.|\n|scope-parent|  True or false. Bring the content variables outside of the repeater into scope within the repeater.|\n\n## Using a repeater\n\nThe space within a repeater acts a bit like a mini template of its own. It can include `perch:before` and `perch:after` sections, and item counts as `perch:every` counts are reset within it.\n\n```html\n<perch:repeater id=\"images\" label=\"Images\" max=\"5\">\n    <perch:before><ul></perch:before>\n    <li>\n        <img src=\"<perch:content type=\"image\" id=\"image\" label=\"Image\">\"\n          alt=\"<perch:content type=\"text\" id=\"alt\" label=\"Description\">\">\n    </li>\n    <perch:after></ul></perch:after>\n</perch:repeater>\n```\n\n## Accessing content outside the repeater\n\nBy default, a repeater is a silo – like a mini region within the content item. It has its own content scope, and the template engine treats it as a distinct zone with its own *before* and *after* properties and new item counts.\n\nContent from outside the repeater is out of scope. You can bring it into scope within the repeater using the `scope-parent` attribute on the repeater tag.\n\nTo prevent ID clashes, the items from outside the repeater become\n`parent.originalID` within the repeater. So a field that is `id=\"title\"`\noutside the repeater would be `id=\"parent.title\"` when brought into scope within the repeater.","type":"templates"},{"title":"Search Tags","permalink":"https://docs.grabaperch.com/templates/search/","id":"templates.search","excerpt":"Search defines `perch:search` and some special values for `id` in order to display search listings.","text":"Search defines `perch:search` and some special values for `id` in order to display search listings.\n\n|ID|Description|\n|-|-|\n|search_key|The value that was searched for|\n|result_url|The URL of the matched item|\n|result_title|The title of the matched item|\n|result_source|The app that returned the result (e.g. `PerchContent` or `PerchBlog`)|\n|result_excerpt|A content excerpt for the matched item|\n\n\n```html\n<li class=\"<perch:search id=\"perch_item_odd\">\">\n  <h2><perch:search id=\"result_title\"></h2>\n  <perch:if exists=\"result_excerpt\">\n  <p class=\"excerpt\">&hellip;<perch:search id=\"result_excerpt\" encode=\"false\">&hellip;</p>\n  </perch:if>\n  <p><a href=\"<perch:search id=\"result_url\">\"><perch:search id=\"result_url\"></a></p>\n</li>\n```\n\nYour search is likely to need pagination, in which case take a look at the [Pagination template documentation](/templates/pagination) for more details.\n\n## Displaying the search result title\n\nBy default, the search will display the page path as the ‘title’ of the result, unless the item has title set on one if the items in the template. That’s the same attribute that changes the \"Item 1, Item 2, Item 3\" list on the edit page to something meaningful. So it’s recommended that you set `title` in your templates wherever possible, and then re-save your content so it takes effect.\n\n## Search and multiple item regions\n\nIf you have multiple item regions set up in a list/detail arrangement with `perch_content_custom`, you need to go into your region options and set the \"URL for search results\" option. This is how you tell the search result page how to display content for that region. You’d set it to something like `/news-article.php?s={slug}` and the `{slug}` will get replaced out with the value of the slug field for that item when the results are shown.","type":"templates"},{"title":"Show All Tag","permalink":"https://docs.grabaperch.com/templates/show-all/","id":"templates.show-all","excerpt":"Sometimes it’s helpful to know what content is available to use within a template. The documentation is useful here, but sometimes it’s easier just to look at see what you have.","text":"Sometimes it’s helpful to know what content is available to use within a template. The documentation is useful here, but sometimes it’s easier just to look at see what you have.\n\nYou can do this by adding the following to your template:\n\n```html\n<perch:showall>\n```\n\nThis will output an HTML table with two columns. The first is the ID of the content, and the second is the content itself, or a sample of it for longer items.\n\nThis is a tool to help with template development, of course, and the tag should be removed in production.","type":"templates"},{"title":"Passing variables into templates","permalink":"https://docs.grabaperch.com/templates/passing-variables-into-templates/","id":"templates.passing-variables-into-templates","excerpt":"Perch allows for variables to be set at runtime which are then available within templates.","text":"Perch allows for variables to be set at runtime which are then available within templates.\n\nNote: this will only work if the template is processed as the page loads, so it won't work with `perch_content()` as that renders the template when the content is edited. Use `perch_content_custom()` instead.\n\n## Using a `data` option\n\nMost page functions accept a `data` option passed into their options array. This is an associative array with the key being the IDs and the value being the value you want to appear in the template.\n\n```php\nperch_content_custom('My region', [\n    'data' => [\n        'colour' => 'red',\n        'fruit'  => 'apple',\n        'season' => 'winter',\n    ],\n]);\n```\n\n## Using PerchSystem\n\nThe `PerchSystem` class can be used to set variables at runtime which are then available within templates.\n\nNote, this only works for templates which are parsed at runtime – such as content rendered with `perch_content_custom()` rather than the precompiled output from `perch_content()`.\n\nUsing `PerchSystem::set_var('name', 'value')` you can do things like this:\n\n```php\n\nPerchSystem::set_var('lang', 'en');\nperch_content_custom('My region', [\n    'template'=>'template.html'\n]);\n\n```\n\nThen in your template:\n\n```html\n<a href=\"/<perch:content id=\"lang\">/contact/\">Contact Us</a>\n```\n\nThe variable set with `set_var()` is passed into the template and merged with the regular content. You should think about avoiding ID collisions, and perhaps devise a naming scheme.\n\n### Bulk setting variables\n\nYou can also use the plural `PerchSystem::set_vars()` to set multiple variables at once. It takes a PHP associative array with keys and values.\n\n```php\n<?php\n    PerchSystem::set_vars([\n        'colour'=>'red',\n        'fruit'=>'apple',\n        'season'=>'winter'\n    ]);\n?>\n```\n\n### Unsetting variables\n\nVariables set will persist for the duration of the page load. They can be reset by using the same name again, or explicitly unset.\n\n```php\nPerchSystem::unset_var('lang');\n```\n\n### Getting values back\n\nA variable previously set can be read back.\n\n```php\n$lang = PerchSystem::get_var('lang');\n```\n\nOr all get be fetched at once, as an associative array.\n\n```php\nprint_r(PerchSystem::get_vars());\n```","type":"templates"},{"title":"Form Tags","permalink":"https://docs.grabaperch.com/templates/form/","id":"templates.form","excerpt":"| Tag | Description |\n|-|-|\n| `<perch:label>` | Creates a label element |\n| `<perch:input>` | Creates a form input element |\n| `<perch:error></perch:error>` | Outputs error state information |\n| `<perch:success></perch:success>` | Content displayed on successful submission |","text":"| Tag | Description |\n|-|-|\n| `<perch:label>` | Creates a label element |\n| `<perch:input>` | Creates a form input element |\n| `<perch:error></perch:error>` | Outputs error state information |\n| `<perch:success></perch:success>` | Content displayed on successful submission |\n\n\nCreating a form template using perch:form is exactly like creating any other Perch template. You create a new template and can then add a mixture of perch:content and form tags to that template to create your form.\n\nThe template can then be selected after adding a new editable region.\n\nThe perch:form tags an also be used in apps and are exposed through the API.\n\n## HTML5 or XHTML\n\nPerch rarely outputs any HTML that is not under your full control, however when creating form input elements we need to do so. From Perch 1.7 we have enabled HTML5 style markup by default. If your site is XHTML you can disable this in your configuration file.","type":"templates"},{"title":"before","permalink":"https://docs.grabaperch.com/templates/conditionals/before/","id":"templates.conditionals.before","excerpt":"The `<perch:before></perch:before>` conditional tag is used to contain any part of the template to be output at the start of the region, if the region contains content.","text":"The `<perch:before></perch:before>` conditional tag is used to contain any part of the template to be output at the start of the region, if the region contains content.\n\nThis makes it useful for, e.g. outputting a heading that you only want to appear above your content if there is some content to show.\n\nFor multiple item regions, the content inside `<perch:before>` tags is only displayed before the first item in the region.\n\n## Example\n\nThe following code would cause a heading to display above a list of news items, only if there are items to show.\n\n```html\n<perch:before>\n    <h2>Latest news</h2>\n</perch:before>\n\n<h3><perch:content id=\"newsTitle\" label=\"Title\" type=\"text\"></h3>\n<perch:content id=\"newsSummary\" label=\"Summary\" type=\"textarea\" words=\"30\">\n```","type":"templates"},{"title":"after","permalink":"https://docs.grabaperch.com/templates/conditionals/after/","id":"templates.conditionals.after","excerpt":"The `<perch:after></perch:after>` conditional tag is used to contain any part of the template to be output at the end of the region, if the region contains content.","text":"The `<perch:after></perch:after>` conditional tag is used to contain any part of the template to be output at the end of the region, if the region contains content.\n\nFor multiple item regions, the content inside `<perch:after>` tags is only displayed after the last item in the region.\n\n## Example\n\nThe below example shows `<perch:after>` used with [perch:before](/docs/templates/conditionals/before/) to wrap a multiple item region of list items in `<ul>` tags.\n\n```html\n<perch:before>\n    <ul>\n</perch:before>\n    <li><perch:content id=\"newsTitle\" label=\"Title\" type=\"text\"></li>\n<perch:after>\n    </ul>\n</perch:after>\n```","type":"templates"},{"title":"else","permalink":"https://docs.grabaperch.com/templates/conditionals/else/","id":"templates.conditionals.else","excerpt":"If you want to provide an alternative when a [perch:if](/docs/templates/conditionals/if/) condition is not met, you can use the `<perch:else>` tag. Anything that comes after it is treated as the else.","text":"If you want to provide an alternative when a [perch:if](/docs/templates/conditionals/if/) condition is not met, you can use the `<perch:else>` tag. Anything that comes after it is treated as the else.\n\n```html\n<perch:if exists=\"name\">\n     <h2><perch:content id=\"name\" type=\"text\" label=\"Name\"></h2>\n <perch:else>\n     Author unknown\n</perch:if>\n```","type":"templates"},{"title":"every","permalink":"https://docs.grabaperch.com/templates/conditionals/every/","id":"templates.conditionals.every","excerpt":"The `<perch:every></perch:every>` tags are used within a template which outputs multiple items. They can be used if you need to output something different every other item, or every 3 items and so on.","text":"The `<perch:every></perch:every>` tags are used within a template which outputs multiple items. They can be used if you need to output something different every other item, or every 3 items and so on.\n\n```html\n<perch:every count=\"3\">\n    This happens every 3 items.\n</perch:every>\n\n<perch:every nth-child=\"odd\">\n    Odd items only\n</perch:every>\n\n<perch:every nth-child=\"2n+3\">\n    You can use nth-child values in the same way as in CSS selectors\n</perch:every>\n```\n\n### Attributes for every\n\n|Attribute|Value|\n|-|-|\n|count|A simple integer. A value of 3 would match for every third item.|\n|nth-child|An alternative to count. Takes CSS-style nth-child values including keywords|\n\n\n## Else blocks\n\nEvery also supports an else block. It is used if the ‘every’ condition is false.\n\n```html\n<perch:every nth-child=\"odd\">\n    Odd items\n<perch:else>\n    Even items\n</perch:every>\n```","type":"templates"},{"title":"if","permalink":"https://docs.grabaperch.com/templates/conditionals/if/","id":"templates.conditionals.if","excerpt":"The `<perch:if></perch:if>` conditional tag can be used to only include a section of the template if a value has been set for one of the fields.","text":"The `<perch:if></perch:if>` conditional tag can be used to only include a section of the template if a value has been set for one of the fields.\n\nThe following code example uses perch:if to check that content has been entered for the heading and only outputs the markup if it has.\n\n```html\n<perch:if exists=\"heading\">\n    <h2>\n        <perch:content id=\"heading\" type=\"text\" label=\"Heading\" required=\"false\">\n    </h2>\n</perch:if>\n```\n\nThe following attributes can be used with perch:if:\n\n### perch:if attributes\n\n|Attribute|Description|\n|-|-|\n|exists|The `id` of a content item to check for the existence of any value (i.e. not empty).|\n|not-exists|The same as `exists` but with the reverse outcome.|\n|id|The id of a content item to check against a specific value.|\n|value|The string to compare against the content in the item with the given ID. If the value is wrapped in {braces} it is evaluated as a content ID rather than a literal string.|\n|match|The type of comparison to use when comparing the content of field id to string given in the value attribute. Defaults to eq (equal to) see below for other values|\n|different|The id of a content item to compare with the value of the previous item, when outputting multiple items. Can be used with format.|\n|format|Used with different or ID comparisons, to format the value (e.g. to use a month from a date field) before comparison. Value as per format attribute on content tags.|\n|format-both|true or false. Used with format, to format both the value AND the value of the ID field in order to make a like-for-like comparison.|\n|case|Used with different or ID comparisons. Set to insensitive to make the comparison case insensitive.|\n\n### Values for the match attribute\n\n| Value      | Aliases       | Description                                                         |\n| ---------- | ------------- | ------------------------------------------------------------------- |\n| eq         | `is`, `exact` | equal to                                                            |\n| neq        | `not`, `!eq`  | not equal to                                                        |\n| gt         |               | greater than                                                        |\n| gte        |               | greater than or equal to                                            |\n| lt         |               | less than                                                           |\n| lte        |               | less than or equal to                                               |\n| contains   |               | the value exists within the content (a simple search)               |\n| !contains  |               | opposite of `contains`: the value does not exist within the content |\n| regex      | `regexp`      | using a PCRE regular expression                                     |\n| between    |               | match between two values                                            |\n| !between   |               | opposite of `between`                                               |\n| eqbetween  |               | match between two values inclusively                                |\n| !eqbetween |               | opposite of `eqbetween`                                             |\n| in         | `within`      | match within a comma delimited content list (like a list of tags)   |\n| !in        | `!within`     | opposite of `in`                                                    |\n\n## Testing for multiple values\n\nThe `exists` and `not-exists` attributes can test multiple values, separated by `AND`, `OR` and `XOR` keywords. For example, check to see if the field with an id of name OR the field with an id of title has been completed:\n\n```html\n<perch:if exists=\"name OR title\"></perch:if>\n```\n\nCheck to see that the field with an id of price AND the field with an id of on_sale have been completed:\n\n```html\n<perch:if exists=\"price AND on_sale\"></perch:if>\n```\n\nThese can also be combined:\n\n```html\n<perch:if exists=\"price AND on_sale OR is_download\"></perch:if>\n```\n\nThe logic string is processed left-to-right, so the above would be processed as:\n\n```php\n(price AND on_sale) OR is_download\n```\n\nYou can control the sequence using brackets:\n\n```html\n<perch:if exists=\"price AND (on_sale OR is_download)\"></perch:if>\n```\n\nThe result of any value can also be flipped with the `!` not operator. The following would test for `price` _and not_ `on_sale`:\n\n```html\n<perch:if exists=\"price AND !on_sale\"></perch:if>\n```\n\n## Examples\n\nAs well as hiding the markup around a field when a field is not used, conditional tags can have other uses. For example, you can use a checkbox to turn parts of a template on and off:\n\n```html\n<perch:content type=\"checkbox\" id=\"sale\" value=\"1\" label=\"Sale in progress\" suppress>\n<perch:if exists=\"sale\">\n        <div class=\"promo\">Sale now on!</div>\n</perch:if>\n```\n\nOr check content for specific values:\n\n```html\n<perch:if id=\"text\" value=\"Hello\">\n    The value of field 'text' is 'Hello'\n</perch:if>\n\n<perch:if id=\"age\" value=\"18\" match=\"gt\">\n    The value of field 'age' is greater than 18.\n</perch:if>\n```\n\nThe `value` attribute can also be dynamic – comparing one content value against another. To do this, wrap the value in {braces}.\n\n```html\n<perch:if id=\"price\" match=\"lt\" value=\"{list_price}\">\n    <strong>Fantastic reduction!</strong>\n</perch:if>\n```\n\nThe `different` attribute is used when outputting multiple items. It compares the current value of the specified field with the same field in the previous item. If they’re not the same, the condition is true. If the are the same, the else is used.\n\nThe following would output the category, only if it’s different from the previous category.\n\n```html\n<perch:if different=\"category\">\n    <h2><perch:content id=\"category\" type=\"text\"></h2>\n</perch:if>\n```\n\nThe [format](/docs/attributes/format/) attribute can be used to prepare a value before comparing it. This is particularly useful for dates.\n\nThe following would output the name of the month, only if the month is different from the previous entry. (`F` is the formatting code to display the full month name.)\n\n```html\n<perch:if different=\"date\" format=\"F\">\n    <h2><perch:content id=\"date\" type=\"date\" format=\"F\"></h2>\n</perch:if>\n```","type":"templates"},{"title":"chars","permalink":"https://docs.grabaperch.com/templates/attributes/chars/","id":"templates.attributes.chars","excerpt":"The number of characters from the field to display in the output. Useful for creating excerpts.","text":"The number of characters from the field to display in the output. Useful for creating excerpts.\n\n```html\n<perch:content type=\"text\" id=\"heading\" label=\"Heading\" chars=\"100\">\n```\n\nThe `append` attribute can be used with both `words` and `chars` to append a string at the end of the truncated text, for example, an ellipsis.\n\n```html\n<perch:content type=\"text\" id=\"heading\" label=\"Heading\" chars=\"100\" append=\"...\">\n```","type":"templates"},{"title":"default","permalink":"https://docs.grabaperch.com/templates/attributes/default/","id":"templates.attributes.default","excerpt":"The default value of the field when a new item is created.","text":"The default value of the field when a new item is created.\n\n```html\n<perch:content type=\"text\" id=\"heading\" label=\"Heading\" default=\"This is the news\">\n```","type":"templates"},{"title":"else","permalink":"https://docs.grabaperch.com/templates/attributes/else/","id":"templates.attributes.else","excerpt":"The `else` attribute sets a default value for the tag to output if the field has no content.","text":"The `else` attribute sets a default value for the tag to output if the field has no content.\n\n```html\n<perch:content id=\"img\" type=\"image\" label=\"Image\" else=\"default.png\">\n```\n\nThe equivalent to the above using [perch:if](https://docs.grabaperch.com/templates/conditionals/if/) tags:\n\n```html\n<perch:if exists=\"img\">\n    <img src=\"<perch:content id=\"img\" type=\"image\">\" alt=\"\">\n<perch:else>\n    <img src=\"default.png\" alt=\"\">\n</perch:if>\n```","type":"templates"},{"title":"divider-after","permalink":"https://docs.grabaperch.com/templates/attributes/divider-after/","id":"templates.attributes.divider-after","excerpt":"Dividers can be used to organize larger edit forms into sections. They are an editing feature and have no impact on how the content is output to your site pages.","text":"Dividers can be used to organize larger edit forms into sections. They are an editing feature and have no impact on how the content is output to your site pages.\n\nBy using the `divider-before` or `divider-after` field attributes, you can output a heading to break up the form before or after the field.\n\n```html\n<perch:content id=\"beds\" type=\"text\" label=\"Number of bedrooms\" divider-after=\"Room configuration\">\n```\n\nThis example will output a heading “Room configuration” after the “Number of bedrooms” field in the edit form.","type":"templates"},{"title":"encode","permalink":"https://docs.grabaperch.com/templates/attributes/encode/","id":"templates.attributes.encode","excerpt":"The `encode` attribute, when set to `true`, converts special characters to HTML entities. This is the the opposite of what the [html attribute](/templates/attributes/html/) does.","text":"The `encode` attribute, when set to `true`, converts special characters to HTML entities. This is the the opposite of what the [html attribute](/templates/attributes/html/) does.\n\nBy default the Perch template engine converts special characters to HTML entities. When you want to override this behaviour for a tag use `encode=\"false\"`\n\n```html\n<perch:content id=\"categories\" type=\"hidden\" encode=\"false\">\n```\n\n\n## Passing HTML from outside the template\n\n<div class=\"callout warning\">\n  <h5>Render trusted HTML only</h5>\n  <p>Avoid rendering HTML from user-provided content or third parties as this can lead to [XSS attacks](https://en.wikipedia.org/wiki/Cross-site_scripting).</p>\n</div>\n\nThe `encode` attribute is useful when passing HTML from outside the template (see: [Passing variables into templates](/templates/passing-variables-into-templates/)):\n\n```php\nperch_content_custom('My region', [\n    'data' => [\n        'title'         => '<h2 class=\"title\">Some Heading</h2>',\n        'categories'    => perch_categories([], true),\n    ],\n]);\n```\n\n```html\n<perch:content id=\"title\" type=\"hidden\" encode=\"false\">\n<perch:content id=\"categories\" type=\"hidden\" encode=\"false\">\n```","type":"templates"},{"title":"escape","permalink":"https://docs.grabaperch.com/templates/attributes/escape/","id":"templates.attributes.escape","excerpt":"The **escape** attribute HTML-encodes the output, including encoding any quote marks. This makes it suited to outputting content within an HTML tag attribute.","text":"The **escape** attribute HTML-encodes the output, including encoding any quote marks. This makes it suited to outputting content within an HTML tag attribute.\n\n```html\n<a title=\"<perch:content id=\"title\" type=\"text\" label=\"Title\" escape>\">\n```","type":"templates"},{"title":"format","permalink":"https://docs.grabaperch.com/templates/attributes/format/","id":"templates.attributes.format","excerpt":"The format attribute can be used to change the formatting of the content as it is output.","text":"The format attribute can be used to change the formatting of the content as it is output.\n\n## Dates and times\n\nWhen used on a date (or date and time) field, the format attribute can be used to change how the date is presented.\n\nThe value is a formatting code, e.g. format=“d M Y”. Accepts either PHP date formatting (which does not support locale settings) and strftime formatting (which does).\n\nSee the documentation for the [date field type](/docs/templates/attributes/type/date/) for more information.\n\n## Numbers\n\nTo format a number, start your formatting code with \\#: followed by the number of decimal places to use:\n\n```html\nformat=\"#:2\"`\n```\n\nThere are two further options you can specify; the symbol to use for a decimal point, and the separator to use for thousands. By default these are . and , is most circumstances. If you which to specify these, they follow the number of decimal places, separated with a | character:\n\n```html\nformat=\"#:2|.|,\"\n```\n\n## Money\n\nTo format currency values, Perch again hooks into some native PHP functionality. Begin your value with `$:` and then add any valid PHP money format string.\n\n```html\nformat=\"$:%.2n\"\n```\n\n## Padding\n\nA string can be padded with another string, to the left or the right, until it reaches a desired length. Begin you value with `P:` follow by the length, the string to pad with and then ‘left’ or ‘right’, separated with a | character:\n\n```html\nformat=\"P:length|string|left\"\n```\n\ne.g.\n\n```html\nformat=\"P:2|0|left\"\n```\n\n## Character limits\n\nLike using the `chars` attribute, format can also limit the string to a number of characters. This is useful for formatting strings for comparison in `perch:if` tags.\n\n```html\nformat=\"C:length\"\n```\n\ne.g.\n\n```html\nformat=\"C:2\"\n```\n\n## Case\n\nSet `format=\"UC\"` for upper case and `format=\"LC\"` for lower case.\n\n## File sizes in bytes to kilobytes and megabytes\n\nSet `format=\"MB\"` to format the value as a file size. This presumes the content is in bytes, and formats as kilobytes or megabytes depending on the size.","type":"templates"},{"title":"help","permalink":"https://docs.grabaperch.com/templates/attributes/help/","id":"templates.attributes.help","excerpt":"A brief piece of instructional text that will be displayed alongside the item on the edit form.","text":"A brief piece of instructional text that will be displayed alongside the item on the edit form.\n\n```html\n<perch:content type=\"text\" id=\"heading\" label=\"Heading\" help=\"Give the article a title\">\n```\n\n## Help at the top of the edit form\n\nIn addition to using the help attribute you can also use the\n`perch:help` tags to display a help section at the top of your page. You can put any kind of content in between these tags – including html – so you could add a screenshot or even a video.\n\n```html\n<perch:help>\n    <p>Any amount of HTML-formatted help can be specified here,\n        including images and links if required.</p>\n</perch:help>\n```\n\nThe help block is taken as-is and placed at the top of the edit form. When the content is published, the help block is not included in the HTML output.","type":"templates"},{"title":"html","permalink":"https://docs.grabaperch.com/templates/attributes/html/","id":"templates.attributes.html","excerpt":"By default the Perch template engine converts special characters to HTML entities. The `html` attribute tells the template engine whether to output the tag's value as plain HTML.","text":"By default the Perch template engine converts special characters to HTML entities. The `html` attribute tells the template engine whether to output the tag's value as plain HTML.\n\nThe attribute is most commonly used with the [textarea field type](/templates/field-types/textarea/) when a WYSIWYG editor is used:\n\n```html\n<perch:content id=\"desc\" type=\"textarea\" label=\"Description\" editor=\"redactor\" html>\n```\n\n\n## Passing HTML from outside the template\n\n<div class=\"callout warning\">\n  <h5>Render trusted HTML only</h5>\n  <p>Avoid rendering HTML from user-provided content or third parties as this can lead to [XSS attacks](https://en.wikipedia.org/wiki/Cross-site_scripting).</p>\n</div>\n\nThe `html` attribute is also useful when passing HTML from outside the template (see: [Passing variables into templates](/templates/passing-variables-into-templates/)):\n\n```php\nperch_content_custom('My region', [\n    'data' => [\n        'title'         => '<h2 class=\"title\">Some Heading</h2>',\n        'categories'    => perch_categories([], true),\n    ],\n]);\n```\n\n```html\n<perch:content id=\"title\" type=\"hidden\" html>\n<perch:content id=\"categories\" type=\"hidden\" html>\n```","type":"templates"},{"title":"id","permalink":"https://docs.grabaperch.com/templates/attributes/id/","id":"templates.attributes.id","excerpt":"The `id` template attribute is a unique identifier for the content field. It is a required attribute. Use **letters, numbers and underscores only** for an `id`.","text":"The `id` template attribute is a unique identifier for the content field. It is a required attribute. Use **letters, numbers and underscores only** for an `id`.\n\n```html\n<perch:content id=\"main_heading\" type=\"text\" label=\"Main heading\">\n```\n\n## Re-using an ID in the template\n\nThe `id` identifies the content uniquely within the template. Therefore if you want to use the same content in multiple places in your template, you can re-use the `id`. The user adding content would only enter the content once despite in the output the content being displayed in more than one place.\n\nAn example where you might want to do this is with an email address. You want the user to enter the email address once in the edit form, but display it on the page and also as the mailto of a link. The template for this would be as follows.\n\n```html\nYou can email us at:\n<a href=\"mailto:<perch:content id=\"email\" type=\"text\" label=\"Email address\">\">\n    <perch:content id=\"email\" type=\"text\">\n</a>\n```\n\nWhen an ID is reused, the options for editing are taken from the _first instance of the tag_ in the template. Make sure any attributes that affect the editing experience are added to the first instance of the tag.\n\n## Special Values\n\nNormally, when creating a Perch template tag, you choose the string to use for the ID, however there are a few special values you can use instead. Using one of these special values will cause Perch to output content for you as described below.\n\nWhen using a special ID value also set that field to a type of `hidden`\nas the values of these fields is generated by Perch you don’t need them to display in the edit form.\n\nThe below Perch Template Tag, if used in a multiple-item region will output an index – 1 for the first item, 2 for the second and so on.\n\n```html\n<perch:content id=\"perch_item_index\" type=\"hidden\">\n```\n\n### Special ID Values\n\n|Value|Description|\n|-|-|\n|perch_item_index|The number of the item within a multiple-item region. Outputs 1 for the first item, 2 for the second and so on.|\n|_id|The unique ID of that item of content within the region. This does not change throughout the life of the content.|\n|perch_item_odd|Outputs odd for odd-numbered items with a multiple-item region, and nothing for even items.|\n|perch_item_count|The total number of items in the region|\n|perch_item_first|Has a value for the first item only, so can be used in a perch:if, for example.|\n|perch_item_last|Has a value for the last item only, so can be used in a perch:if, for example.|\n|_page|The page path this content has been pulled from.|\n|perch_page_path|The path to the current page as Perch sees it (only useful in runtime-processed templates like forms or with perch_content_custom)|\n|perch_item_zero_index|The same as perch_item_index, but starts counting from zero.|\n|perch_item_rev_index|A count of the remaining items left, including the current item.|\n|perch_item_rev_zero_index|A count of the remaining items left.|","type":"templates"},{"title":"jsonencode","permalink":"https://docs.grabaperch.com/templates/attributes/jsonencode/","id":"templates.attributes.jsonencode","excerpt":"The **jsonencode** attribute JSON-encodes the value for using in a JSON safe context.","text":"The **jsonencode** attribute JSON-encodes the value for using in a JSON safe context.\n\n```html\n<perch:content id=\"title\" type=\"text\" label=\"Title\" jsonencode>\n```","type":"templates"},{"title":"no-index","permalink":"https://docs.grabaperch.com/templates/attributes/no-index-attribute/","id":"templates.attributes.no-index-attribute","excerpt":"The `no-index` attribute tells Perch not to index a field. In general, any field that is not needed for sorting or filtering does not need to be indexed. The attribute works for [content regions](/functions/content/) and [collections](/runway/collections/).","text":"The `no-index` attribute tells Perch not to index a field. In general, any field that is not needed for sorting or filtering does not need to be indexed. The attribute works for [content regions](/functions/content/) and [collections](/runway/collections/).\n\n```html\n<perch:content id=\"img\" type=\"image\" label=\"Image\" no-index>\n```\n\nAn example for an article:\n\n```html\n<!--*  articles may be filtered or sorted by title *-->\n<perch:content id=\"title\" type=\"text\" label=\"Title\">\n\n<!--* article URL may contain the slug (e.g. /blog/?s=perch-is-awesome), which can be used to look up the article *-->\n<perch:content id=\"slug\" type=\"slug\" for=\"title\">\n\n<!--* articles need to be sorted by the published date *-->\n<perch:content id=\"date\" type=\"date\" label=\"Published Date\">\n\n<!--* drafts need to be excluded, so status field is needed for filtering *-->\n<perch:content id=\"status\" type=\"select\" label=\"Status\" options=\"Draft,Published\">\n\n\n<!--* articles don't need to be filtered by the image or the body text *-->\n<perch:content id=\"img\" type=\"image\" label=\"Image\" no-index>\n<perch:content id=\"desc\" type=\"textarea\" label=\"Article Body\" no-index>\n```","type":"templates"},{"title":"notes-before","permalink":"https://docs.grabaperch.com/templates/attributes/notes-before/","id":"templates.attributes.notes-before","excerpt":"A brief piece of instructional text that will be displayed before the field appears.","text":"A brief piece of instructional text that will be displayed before the field appears.\n\n```html\n<perch:content type=\"text\" id=\"start_time\" label=\"Start time\" notes-before=\"Enter the event timings. Be as specific as possible.\">\n```\n\nThis works well when used with [divider-before](/templates/divider-before). You can add a divider with a heading for this group of form fields, then some notes with `notes-before`.","type":"templates"},{"title":"label","permalink":"https://docs.grabaperch.com/templates/attributes/label/","id":"templates.attributes.label","excerpt":"The label attribute is used to present a nicer field description when editing content. It may contain spaces, capitalisation etc. to look presentable.","text":"The label attribute is used to present a nicer field description when editing content. It may contain spaces, capitalisation etc. to look presentable.\n\n```html\n<perch:content id=\"main_heading\" type=\"text\" label=\"Main heading\">\n```","type":"templates"},{"title":"order","permalink":"https://docs.grabaperch.com/templates/attributes/order/","id":"templates.attributes.order","excerpt":"Provides a mechanism for customizing the order in which the items appear on the edit form. Specify `order=\"1\"` to place an item first, `order=\"2\"` to place an item second, and so on.","text":"Provides a mechanism for customizing the order in which the items appear on the edit form. Specify `order=\"1\"` to place an item first, `order=\"2\"` to place an item second, and so on.\n\n```html\n<perch:content type=\"text\" id=\"heading\" label=\"Heading\" order=\"1\">\n```\n\nBy default fields will display as they are ordered in the template you have created for that content. This often isn’t the most natural way to edit them – especially if your template contains suppressed fields that are used for filtering, or for displaying the same content with an alternate template.\n\nThe order attribute, only changes the way the the form appears in admin, so you can use this to change the edit order of the form fields.","type":"templates"},{"title":"required","permalink":"https://docs.grabaperch.com/templates/attributes/required/","id":"templates.attributes.required","excerpt":"States whether the content should be a required field in the editing interface.","text":"States whether the content should be a required field in the editing interface.\n\n```html\n<perch:content id=\"main_heading\" type=\"text\" label=\"Main heading\" required>\n```","type":"templates"},{"title":"replace","permalink":"https://docs.grabaperch.com/templates/attributes/replace/","id":"templates.attributes.replace","excerpt":"The replace attribute offers some basic string replacement as the content is output. It’s not intended for heavy-lifting, just small tweaks.","text":"The replace attribute offers some basic string replacement as the content is output. It’s not intended for heavy-lifting, just small tweaks.\n\nThe value of the replace attribute is the value to search for, followed by a `|` followed by the value to replace it with. Multiple items can be added with commas.\n\n```html\n<perch:content type=\"text\" id=\"aperture\" label=\"Lens aperture\" replace=\"f|ƒ\">\n```","type":"templates"},{"title":"rewrite","permalink":"https://docs.grabaperch.com/templates/attributes/rewrite/","id":"templates.attributes.rewrite","excerpt":"The rewrite attribute can be used on a template tag that outputs a URL with a querystring. A good example is the `next_url` and `prev_url` links output by [pagination](/docs/templates/pagination/).","text":"The rewrite attribute can be used on a template tag that outputs a URL with a querystring. A good example is the `next_url` and `prev_url` links output by [pagination](/docs/templates/pagination/).\n\n```html\n<perch:content id=\"next_url\" rewrite=\"/archive/{page:page/%s/}\">\n```\n\nThe rewrite attribute is a literal string, apart of sections in\n{braces}. These sections are matched against the arguments on the querystring. The format is as follows:\n\n```php\n{querystring parameter to match:replacement}\n```\n\nThe replacement can contain a `%s` to represent the value of the item.\n\nSo to match `page=2` and rewrite it to, for example, `p2`, we’d need the following replacement:\n\n```php\n{page:p%s}\n```\n\nTo take an example from the Blog app, the pagination tags might output a URL like this:\n\n```php\n/blog/archive.php?cat=cooking&page=2\n```\n\nLet’s say we wanted to rewrite that link to the following format:\n\n```php\n/blog/archive/category:cooking/page:2/\n```\n\nThe `rewrite` attribute would need to look like this:\n\n```php\nrewrite=\"/blog/archive/{cat:category:%s/}{page:page:%s/}\"\n```\n\nTo account for a possible `tag` and `year` parameter, we would just add those in.\n\n```php\nrewrite=\"/blog/archive/{cat:category:%s/}{tag:tag:%s/}{year:year:%s/}{page:page:%s/}\"\n```","type":"templates"},{"title":"suppress","permalink":"https://docs.grabaperch.com/templates/attributes/suppress/","id":"templates.attributes.suppress","excerpt":"Use the suppress attribute with a value of true and the value will not be included in the output. However you can use that value in a perch:if statement.","text":"Use the suppress attribute with a value of true and the value will not be included in the output. However you can use that value in a perch:if statement.\n\n```html\n<perch:content type=\"checkbox\" id=\"instock\" label=\"Item is in stock\" value=\"true\" suppress>\n```","type":"templates"},{"title":"searchable","permalink":"https://docs.grabaperch.com/templates/attributes/searchable/","id":"templates.attributes.searchable","excerpt":"The `searchable` attribute tells Perch whether to include the value of a field in the search text.","text":"The `searchable` attribute tells Perch whether to include the value of a field in the search text.\n\n```html\n<perch:content id=\"featured\" type=\"checkbox\" label=\"Featured item\" value=\"1\" searchable=\"false\">\n```","type":"templates"},{"title":"striptags","permalink":"https://docs.grabaperch.com/templates/attributes/striptags/","id":"templates.attributes.striptags","excerpt":"The **striptags** attribute causes any HTML tags to be stripped from the content.","text":"The **striptags** attribute causes any HTML tags to be stripped from the content.\n\n```html\n<meta name=\"description\" content=\"<perch:content id=\"desc\" type=\"textarea\" label=\"Description\" escape striptags textile words=\"30\">\">\n```","type":"templates"},{"title":"title","permalink":"https://docs.grabaperch.com/templates/attributes/title/","id":"templates.attributes.title","excerpt":"The title attribute declares that this content should be used for the title of the entire content item within the control panel. By default, content items within a region are labelled \"Item 1\", \"Item 2\" and so on. Setting `title` on one of your tags replaces this with the content that is entered into that field.","text":"The title attribute declares that this content should be used for the title of the entire content item within the control panel. By default, content items within a region are labelled \"Item 1\", \"Item 2\" and so on. Setting `title` on one of your tags replaces this with the content that is entered into that field.\n\nIf multiple fields have `title` set, they are concatenated together to form the title. The character used in the concatenation is defined in the \"Join title fields with\" option in the Region Options within the control panel.\n\n```html\n<perch:content type=\"text\" id=\"heading\" label=\"Heading\" title>\n```\n\n## Title with reused IDs\n\nIf you are reusing the same ID to repeat field content in your template, make sure you add important attributes to the first instance of that ID in the template. Perch looks at the first tag with each ID and ignores the rest at edit time.","type":"templates"},{"title":"urlencode","permalink":"https://docs.grabaperch.com/templates/attributes/urlencode/","id":"templates.attributes.urlencode","excerpt":"The `urlencode` attribute converts the value of a field to a URL-encoded version. e.g. changing spaces into `%20`.","text":"The `urlencode` attribute converts the value of a field to a URL-encoded version. e.g. changing spaces into `%20`.\n\n```html\n<perch:content id=\"title\" type=\"text\" label=\"Title\" urlencode=\"true\">\n```","type":"templates"},{"title":"divider-before","permalink":"https://docs.grabaperch.com/templates/attributes/divider-before/","id":"templates.attributes.divider-before","excerpt":"Dividers can be used to organize larger edit forms into sections. They are an editing feature and have no impact on how the content is output to your site pages.","text":"Dividers can be used to organize larger edit forms into sections. They are an editing feature and have no impact on how the content is output to your site pages.\n\nBy using the `divider-before` or `divider-after` field attributes, you can output a heading to break up the form before or after the field.\n\n```html\n<perch:content id=\"beds\" type=\"text\" label=\"Number of bedrooms\" divider-before=\"Room configuration\">\n```\n\nThis example will output a heading “Room configuration” before the “Number of bedrooms” field in the edit form.","type":"templates"},{"title":"urlify","permalink":"https://docs.grabaperch.com/templates/attributes/urlify/","id":"templates.attributes.urlify","excerpt":"The **urlify** attribute converts the value of a field to a basic URL-safe version.","text":"The **urlify** attribute converts the value of a field to a basic URL-safe version.\n\n```html\n<perch:content id=\"title\" type=\"text\" label=\"Title\" urlify>\n```","type":"templates"},{"title":"type","permalink":"https://docs.grabaperch.com/templates/attributes/type/","id":"templates.attributes.type","excerpt":"The `type` attribute represents the Field Type of the template tag and is a required attribute. Perch comes with a number of built in Field Types, additional types can be added, or developed to add additional functionality.","text":"The `type` attribute represents the Field Type of the template tag and is a required attribute. Perch comes with a number of built in Field Types, additional types can be added, or developed to add additional functionality.\n\nThe below template tag has a type of text and will output a single line text field in the Control Panel.\n\n```html\n<perch:content id=\"main_heading\" type=\"text\" label=\"Main heading\">\n```","type":"templates"},{"title":"words","permalink":"https://docs.grabaperch.com/templates/attributes/words/","id":"templates.attributes.words","excerpt":"The number of words from the field to display in the output. Useful for creating excerpts.","text":"The number of words from the field to display in the output. Useful for creating excerpts.\n\n```html\n<perch:content type=\"text\" id=\"heading\" label=\"Heading\" words=\"20\">\n```\n\nThe `append` attribute can be used with both `words` and `chars` to append a string at the end of the truncated text, for example, an ellipsis.\n\n```html\n<perch:content type=\"text\" id=\"heading\" label=\"Heading\" words=\"20\" append=\"...\">\n```","type":"templates"},{"title":"Checkbox","permalink":"https://docs.grabaperch.com/templates/field-types/checkbox/","id":"templates.field-types.checkbox","excerpt":"type=\"checkbox\" will create a single on/off checkbox.","text":"type=\"checkbox\" will create a single on/off checkbox.\n\nYou must also include an attribute of **value** which has a value of the string that will be assigned to the checkbox when it is checked and will be output to the HTML.\n\nFor example, including the below tag in your template would output the word “sale” to the page if the administrator checked the checkbox.\n\n```html\n<perch:content id=\"sale_item\" type=\"checkbox\" label=\"Sale item\" value=\"sale\">\n```","type":"templates"},{"title":"Composite","permalink":"https://docs.grabaperch.com/templates/field-types/composite/","id":"templates.field-types.composite","excerpt":"The composite field type combines one or more text values into a single field. This can be useful for creating a value to sort the region by, or for outputting commonly combined fields as a single unit.","text":"The composite field type combines one or more text values into a single field. This can be useful for creating a value to sort the region by, or for outputting commonly combined fields as a single unit.\n\nIt has no form input of its own – it takes values from other text fields.\n\n```html\n<perch:content id=\"firstname\" type=\"text\" label=\"First name\">\n<perch:content id=\"lastname\" type=\"text\" label=\"Last name\">\n<perch:content id=\"fullname\" type=\"composite\" for=\"firstname lastname\">\n```\n\nIn the above example, if the first name was “Oscar” and the last name “Wilde”, then the `fullname` composite field would contain the value “Oscar Wilde”.\n\n## Joining fields\n\nBy default, the fields are joined with a single space. You can specify a different joining character with the `join` attribute.\n\n```html\n<perch:content id=\"firstname\" type=\"text\" label=\"First name\">\n<perch:content id=\"lastname\" type=\"text\" label=\"Last name\">\n<perch:content id=\"fullname\" type=\"composite\" for=\"lastname firstname\" join=\", \">\n```\n\nThis time, the composite field would contain “Wilde, Oscar”. This might be useful for sorting a region by last name, first name.","type":"templates"},{"title":"Dataselect","permalink":"https://docs.grabaperch.com/templates/field-types/dataselect/","id":"templates.field-types.dataselect","excerpt":"The `dataselect` field type will create a select box which draws its options from the content of another region.","text":"The `dataselect` field type will create a select box which draws its options from the content of another region.\n\n```HTML\n<perch:content id=\"thing\" label=\"Thing\" type=\"dataselect\" page=\"/about.php\" region=\"Main heading\" options=\"text\">\n```\n\nYou use it like a regular select box, but with some extra parameters:\n\n### dataselect Configuration\n\n|Attribute|Value|\n|-|-|\n|page|the root-relative path to a page containing the region you want to use|\n|region|the name of the (usually multiple-item) region to use|\n|options|the ID of a field in the region to populate the select box with. Can be multiple IDs, separated by spaces.|\n|values|(optional) the ID of another field in the region to take the values from.|\n\n## In use\n\nUsing a data select starts by creating a region to hold the source data for the list. This will normally be a multiple item region (one item per select list entry), and often with two fields per item (name and value).\n\nLet’s say we want to create a data select to list categories. We’ll create a new page called `/categories.php` and create a region on it called `Categories`. The template for this region might look like this:\n\n```html\n<perch:content id=\"categoryName\" type=\"text\" label=\"Category name\" required>\n<perch:content id=\"categorySlug\" type=\"slug\" for=\"categoryName\" hidden=\"true\">\n```\n\nWhen editing the region, the user will be asked for the category name. A second field, `categorySlug` will be created automatically and stored. That should be all ready go.\n\nIn a different template, we can make use of the categories in a data select like this:\n\n```html\n<perch:content id=\"category\" type=\"dataselect\" label=\"Category\" page=\"/categories.php\" region=\"Categories\" options=\"categoryName\" values=\"categorySlug\">\n```\n\nPicking an option from the data select will store the `categorySlug` as the value for that field.","type":"templates"},{"title":"File","permalink":"https://docs.grabaperch.com/templates/field-types/file/","id":"templates.field-types.file","excerpt":"Using `type=\"file\"` will present the user with a file upload to upload a document from their computer.","text":"Using `type=\"file\"` will present the user with a file upload to upload a document from their computer.\n\n```html\n<perch:content id=\"report\" type=\"file\" label=\"Annual report PDF\">\n```\n\nAs with image, using the tag in your template as it is will simply print out the path to the file. To create a download link you need to use the tag as the href of a link.\n\n```html\n<a href=\"<perch:content id=\"report\" type=\"file\" label=\"Annual report PDF\">\">Download my file</a>\n```\n\n## Resource buckets\n\nThe `bucket` attribute can be used to set the resource bucket the file should be stored in.\n\n```html\n<perch:content id=\"report\" type=\"file\" label=\"Annual report PDF\" bucket=\"reports\">\n```\n\n## Default file type in Assets chooser\n\nYou can use the `file-type` attribute to have the Assets chooser filter existing assets by the specified file type.\n\n\n```html\n<perch:content id=\"podcast_episode\" type=\"file\" file-type=\"audio\" label=\"Podcast Episode\">\n```\n\n### File types\n\n| Type    | File extensions                                                      |\n| ------- | -------------------------------------------------------------------- |\n| img     | jpg, png, gif, svg, jpeg, webp                                       |\n| doc     | doc, docx, pdf, odt, fodt, epub, mobi, docm, rtf, txt, uof, wpd, wri |\n| sheet   | xls, csv, ods, fods, xlsx                                            |\n| audio   | mp3, wav, ogg, flac, m4a, wma, aiff, mp2, spx, ra, rm, mid           |\n| video   | mp4, mov, webm, ogv, aff, 3gp, asf, avi, flv, mpeg, mpg, wmv, m4v    |\n| pres    | ppt, pps, odp, fodp, key, pez, pptx, pot, opt                        |\n| archive | zip                                                                  |\n| file    | All the above file extensions except those listed for the `img` type |\n\n\n\n## Output options\n\nAs well as outputting the file path, you can use a file tag to output other types of information about the file. This is done with the optional `output` attribute.\n\n### Values for the output attribute\n\n|Value|Description|\n|-|-|\n|path|Default. The path to the file.|\n|filename|The name of the file.|\n|mime|The mime type of the file, if known.|\n|size|The size of the file. Can be used with the format attribute (e.g. format=\"MB\").|","type":"templates"},{"title":"Date","permalink":"https://docs.grabaperch.com/templates/field-types/date/","id":"templates.field-types.date","excerpt":"Using a type of date will create a group of select boxes (day, month, year) in the admin.","text":"Using a type of date will create a group of select boxes (day, month, year) in the admin.\n\nIf you include the **format** attribute on a Perch Template Tag with a type of date, this allows you to set how the date will be displayed on the website.\n\nThe value of format should be a formatting code, e.g. `format=\"d M Y\"`.\n\nAccepts either PHP [date](http://www.php.net/manual/en/function.date.php) formatting (which does not support locale settings) and [strftime](http://www.php.net/manual/en/function.strftime.php) formatting (which does).\n\nIf you set the optional attribute time to true, the date field will also have selections for hour and minute.\n\n## Examples\n\nDate formatted as *Sun 04 July 10* using PHP date formatting options:\n\n```php\n<perch:content id=\"event_date\" type=\"date\" label=\"Date of event\" format=\"D d F y\">\n```\n\nAn ISO 8601 standard date:\n\n```php\n<perch:content id=\"event_date\" type=\"date\" label=\"Date of event\" format=\"c\">\n```\n\nLocale-compatible date Sunday, 4 July 2010 using strftime options, if\nlocale was set to fr\\_FR this would display as *Dimanche, 4 juillet\n2010*\n\n```php\n<perch:content id=\"event_date\" type=\"date\" label=\"Date of event\" format=\"%A, %e %B %Y\">\n```\n\n## strftime issues\n\nstrftime formatting is not the same across operating systems therefore you may find that some values do not work on a Windows system. Please\ncheck the [PHP documentation](http://www.php.net/manual/en/function.strftime.php) for more information before raising this as an issue in Perch.\n\nIf you are developing a site on Windows but moving it to a Linux webhost then you may find that locally your formatting behaves inconsistently but the problem is resolved on the live host.\n\n## Using native HTML5 controls\n\nIf you know your Perch users have a modern browser with HTML5 form field support, you may want to use the native browser controls for date input. Enable this by adding the attribute `native` with a value of `true`.\n\n```php\n<perch:content id=\"date\" type=\"date\" label=\"Date\" format=\"d F Y\" native>\n```\n\nFor a `datetime` field add `time` as usual:\n\n```html\n<perch:content id=\"datetime\" type=\"date\" time label=\"Date/Time\" format=\"d F Y H:i\" native>\n```\n\nFor `datetime-local` set `time=\"local\"`:\n\n```html\n<perch:content id=\"datetime\" type=\"date\" time=\"local\" label=\"Date/Time\" format=\"d F Y H:i\" native>\n```\n\n## Changing field order\n\nBy default, the select boxes for a date field are ordered day, month, year. Some users may prefer a different order, for example an order of month, day, year is common in the USA.\n\nThis can be set with the `fieldorder` attribute. It takes a string of the letters `d`, `m` and `y` in the order you want them.\n\nDay, month, year:\n\n```html\nfieldorder=\"dmy\"\n```\n\nMonth, day, year:\n\n```html\nfieldorder=\"mdy\"\n```\n\nIn full:\n\n```html\n<perch:content id=\"event_date\" type=\"date\" label=\"Date of event\" format=\"D d F y\" fieldorder=\"mdy\">\n```","type":"templates"},{"title":"Hidden","permalink":"https://docs.grabaperch.com/templates/field-types/hidden/","id":"templates.field-types.hidden","excerpt":"Using `type=\"hidden\"` creates a field that will not be shown in the edit form, but whose values are included in the output. Typically used with the special ID values in order that you can use these values in the output but not show an empty field to content editors.","text":"Using `type=\"hidden\"` creates a field that will not be shown in the edit form, but whose values are included in the output. Typically used with the special ID values in order that you can use these values in the output but not show an empty field to content editors.\n\n```html\n<perch:content id=\"perch_item_index\" type=\"hidden\">\n```","type":"templates"},{"title":"Chat","permalink":"https://docs.grabaperch.com/templates/field-types/messenger-chat/","id":"templates.field-types.messenger-chat","excerpt":"Using `type=\"chat\"` will create a field so the administrator can sect the messenger api version available by Facebook that time.","text":"Using `type=\"chat\"` will create a field so the administrator can sect the messenger api version available by Facebook that time.\n\n\n### Adding your Facebook PAGE ID\n\nTo set your Facebook PAGE ID for use with the fieldtype, add it to your `perch/config/config.php` file:\n\n\n```php\ndefine('PERCH_CHAT_PAGE_ID', 'abc123');\n```\n\n## Steps for setup  Messenger Chat on your website (first way)\n\n1. Go to https://business.facebook.com\n2. Log in or Create an account\n3. Copy & Paste the asset_id from the link of your facebook page\n4. Add the asset_id in the config.php file (\"PERCH_MESSENGER_PAGE_ID\", \"your page id\")\n5. Go to https://developers.facebook.com/tools/explorer/\n6. Click on User or Page and select your page under Page Access Tokens\n7. Add the following permissions\n  pages_show_list\n  pages_messaging\n  pages_read_engagement\n  pages_manage_metadata\n8. Click Generate Access Token\n9. Go to https://developers.facebook.com/docs/messenger-platform/webview/extensions\n10. In Step 1 (whitelist your domain) Copy & Paste the API to your terminal and change the PAGE_ACCESS_TOKEN with your Access Token and the domain name with the domain name of your website\n\n## Steps Using the Meta Business Suite (second way)\n1. Go to https://business.facebook.com\n2. Log in or Create an account\n3. Click Page Settings and then click Messaging\n4. Click the Get Started button which will be below \"Add Messenger to your website\"\n5. Click the button Set up and Choose a setup method\n6. Select language\n7. Add the domain name of your website\n8. Click Save and Continue\n9. On the Copy Code step copy your page id where you can find near page_id\n10. Paste the page_id in your config file (\"PERCH_MESSENGER_PAGE_ID\", \"your page id\")\n\n\n```html\n<perch:content id=\"chat\" type=\"chat\" >\n```\n\n\n## Displaying chat icon\n\nCreate the chat region and set to the chat template.\n```php\n  perch_content('Chat')\n```","type":"templates"},{"title":"Map","permalink":"https://docs.grabaperch.com/templates/field-types/map/","id":"templates.field-types.map","excerpt":"Using `type=\"map\"` embeds a Google Map in the page. The editor can search for a location, position and zoom the map, set the map type and place a pin on the map.","text":"Using `type=\"map\"` embeds a Google Map in the page. The editor can search for a location, position and zoom the map, set the map type and place a pin on the map.\n\n### Adding your Google Maps API key\n\nTo set your Google Maps API key for use with the fieldtype, add it to your `perch/config/config.php` file:\n\n```php\ndefine('PERCH_GMAPS_API_KEY', 'abc123');\n```\n\n### Attributes for type map\n\n|Attribute|Values and description|\n|-|-|\n|width|Integer. The width of the map on the page.|\n|height|Integer. The height of the map on the page.|\n|zoom|Integer. The default zoom level|\n\n```html\n<perch:content id=\"map\" type=\"map\" label=\"Address\" width=\"400\" height=\"300\" zoom=\"15\">\n```\n\n## Maps and Responsive layouts\n\nThe map container needs to have dimensions in order for the Google Maps JavaScript to be able to plot the map. This is why the map has width and height attributes.\n\nIf your site is responsive, you may want to make the map flexible. You can do this if Perch is in RWD mode.\n\n1.  Add `define('PERCH_RWD', true);` to your `perch/config/config.php` file\n2.  Remove the height and width from your map template tag\n3.  Save your map\n4.  Add CSS to your site to give the map container a default width and height (it gets given the class `cmsmap`)\n\nIf you don’t follow that final step of giving the map a default width and height, **nothing will display**.\n\nIf your site has responsive images, you may also need to reset this within the map container. If you don’t, the controls like zoom and Street View may not display correctly.\n\n```css\n.cmsmap img {\n    max-width: auto;\n}\n```\n\n## Showing and hiding maps\n\nDue to the way the Google JavaScript works, if your map isn’t on screen when the page loads, it doesn’t display correctly when it’s then shown. This happens, for example, if the map is in a set of tabs. When the user switches to the tab the map is on, it shows but the layout is messed up.\n\nTo combat this, Perch adds a JavaScript method you can call to refresh the maps and get them working again.\n\n```js\nCMSMap.UI.refresh();\n```\n\nThis should be called when the map is displayed. For example, if using Bootstrap tabs, you might do something like this:\n\n```js\n$('.nav-tabs a').click(function (e) {\n    e.preventDefault();\n    $(this).tab('show');\n    CMSMap.UI.refresh();\n});\n```\n\n## Using your own map display code\n\nIf you want something radically different from what the Map field type provides, you’d be best to create a new field type to do that. If, however, there’s some small aspect you wish you could tweak (like adding custom markers, or changing the behaviour slightly) then it may be enough to switch out the default JavaScript for your own.\n\nYou can do that by adding the following to your\n`perch/config/config.php` file:\n\n```php\ndefine('PERCH_MAP_JS', '/path/to/your/script.js');\n```\n\nIf doing so, the simplest approach is to take a copy of our `public_maps.js` script and modify it to suit your needs. Remember to store it outside of the `perch/core` folder so it doesn’t get overwritten on update.","type":"templates"},{"title":"Image","permalink":"https://docs.grabaperch.com/templates/field-types/image/","id":"templates.field-types.image","excerpt":"Using `type=\"image\"` will create an upload field so the administrator can upload an image from their own computer. By using the optional variables shown below you can specify resizing and cropping for these images giving you control over what is displayed on the page.","text":"Using `type=\"image\"` will create an upload field so the administrator can upload an image from their own computer. By using the optional variables shown below you can specify resizing and cropping for these images giving you control over what is displayed on the page.\n\n### Image upload attributes\n\n|Attribute|Values and description|\n|-|-|\n|width|Integer. The maximum width allowed, in pixels. The image will be proportionally scaled down if the width exceeds the given value.|\n|height|Integer. The maximum height allowed, in pixels. The image will be proportionally scaled down if the height exceeds the given value.|\n|crop|True or false. Whether to crop the image to a fixed size. Requires both width and height to be set.|\n|quality|Compression quality for uploaded images. Values are between 0 (very compressed) to 100 (top banana). The default is 85.|\n|output|The information to output with the tag. Optional, and defaults to path. See below.|\n|density|Integer. The pixel density of the image. Default is 1. A value of 2 would scale the image to 2x the dimensions given, but display the image at the size specified (e.g. for retina displays).|\n|sharpen|0-10. The amount of sharpening to apply to images. Default is 4.|\n|bucket|The name of a resource bucket to store the image files in.|\n\n```html\n<perch:content id=\"logo\" type=\"image\" label=\"Logo\">\n```\n\n## Displaying images\n\nIt is important to note that if you simply use an image tag like the one above, this will print out the *path to the image* on your page, not a complete HTML image tag.\n\nTo create an image tag you would use this path in the src attribute of an HTML image tag, as shown below. I have also used an additional field with a type of text so that the administrator can add some alt text for the image.\n\n```html\n<img src=\"<perch:content id=\"logo\" type=\"image\" label=\"Logo\">\" alt=\"<perch:content id=\"logoalt\" type=\"text\" label=\"Alt text\">\">\n```\n\n## Changing image sizes in the template after upload\n\nPerch resizes the images on upload when you add them to the site, therefore if you change the size of the images in your template you will need to re-upload the images to generate them at the correct size.\n\n## Sharpening transparent PNGs\n\nThe underlying PHP GD image library does a bad job of applying sharpening to transparent PNGs, resulting in unpleasant edge artifacts. There's nothing Perch can do to fix this, it's an underlying weakness in that part of PHP. If you need to add transparent PNGs, you have two options for avoiding this issue:\n\n1. Disabling sharpening with `sharpen=\"0\"` on the template tag\n2. Switch to using ImageMagick, which does a much better job\n\n## Output options\n\nAs well as outputting the image path, you can use an image tag to output other types of information about the image. This is done with the optional `output` attribute.\n\n### Values for the output attribute\n\n|Value|Description|\n|-|-|\n|path|Default. The path to the image file.|\n|w|The width of the image in pixels.|\n|h|The height of the image in pixels.|\n|size|The file size in bytes. Can be used with the format attribute (e.g. MB).|\n|tag|Output a basic HTML image tag.|\n|mime|Output the mime type of the image, if known.|\n\nFor example, to output the width of an image:\n\n```html\n<perch:content id=\"logo\" type=\"image\" label=\"Logo\" output=\"w\">\n```","type":"templates"},{"title":"Period","permalink":"https://docs.grabaperch.com/templates/field-types/period/","id":"templates.field-types.period","excerpt":"The `period` field type collects a number and a time unit (days, weeks, months, years).","text":"The `period` field type collects a number and a time unit (days, weeks, months, years).\n\n```html\n<perch:content id=\"duration\" type=\"period\" label=\"Duration\">\n```","type":"templates"},{"title":"Radio","permalink":"https://docs.grabaperch.com/templates/field-types/radio/","id":"templates.field-types.radio","excerpt":"Using `type=\"radio\"` will create a set of radiobuttons from a string of options.","text":"Using `type=\"radio\"` will create a set of radiobuttons from a string of options.\n\nMust be used with an attribute of options that has a value of a comma-separated list of options.\n\n```html\n<perch:content id=\"course_time\" type=\"radio\" label=\"Time of course\" options=\"AM, PM, Full day, Evenings\">\n```\n\n## Setting options\n\nThe simplest way to set options is with a basic string of options separated by a comma. Perch will then use each item in the string as both the visible label for that radiobutton and the value that gets written to your HTML.\n\n```html\noptions=\"House, Apartment, Room-share\"\n```\n\nSometimes you might want to have something different displayed to the editor than gets written to the HTML. For example, the value may be used for a class attribute that needs to be lowercase with no spaces, but you want to present the choice more attractively formatted in the edit form.\n\nYou can provide a value to write to the HTML for each item by using a `|` character. The order is nice label first, followed by `|` followed by the value that gets written to the template.\n\n```html\noptions=\"House|house, Apartment|apartment, Room-share|roomshare\"\n```","type":"templates"},{"title":"Select","permalink":"https://docs.grabaperch.com/templates/field-types/select/","id":"templates.field-types.select","excerpt":"A type of select will create a select box with a list of predefined options in the interface.","text":"A type of select will create a select box with a list of predefined options in the interface.\n\nMust be used with an attribute of **options** that has a value of a comma-separated list of options.\n\n```html\n<perch:content id=\"course_time\" type=\"select\" label=\"Time of course\"\noptions=\"AM, PM, Full day, Evenings\" allowempty=\"false\" required>\n```\n\n## Setting options\n\nThe simplest way to set options is with a basic string of options separated by a comma. Perch will then use each item in the string as both the visible option in the select box and the value that gets written to your HTML.\n\n```html\noptions=\"House, Apartment, Room-share\"\n```\n\nSometimes you might want to have something different displayed to the editor than gets written to the HTML. For example, the value may be used for a class attribute that needs to be lowercase with no spaces, but you want to present the choice more attractively formatted in the edit form.\n\nYou can provide a value to write to the HTML for each item by using a `|` character. The order is nice label first, followed by `|` followed by the value that gets written to the template.\n\n```html\noptions=\"House|house, Apartment|apartment, Room-share|roomshare\"\n```\n\n## Allowing for no selection\n\nThe **allowempty** attribute creates an empty option at the start of the select box to make it possible for the editor not to choose an option. Without this, one of the options is always chosen (the first by default).","type":"templates"},{"title":"Slug","permalink":"https://docs.grabaperch.com/templates/field-types/slug/","id":"templates.field-types.slug","excerpt":"Creates a URL-safe slug from the content of one of the other fields. This template tag doesn’t display anything on the edit form, it just works in the background and creates the slug for you to use.","text":"Creates a URL-safe slug from the content of one of the other fields. This template tag doesn’t display anything on the edit form, it just works in the background and creates the slug for you to use.\n\nYou need to also have an attribute **for**. This is the ID of the field you want to make a slug from.\n\nYou can also use a space-separated list of IDs in the `for` attribute. This will draw content from multiple fields.\n\n## Editable slugs\n\nBy default, a slug is not editable on the form. If you want to make the slug editable you can set\n\n```html\n<perch:content id=\"slug\" type=\"slug\" for=\"heading\" editable>\n```\n\nThe field will then appear on the edit form. Don’t forget to set a label for it.\n\nNormally, you don’t want a slug to change once it’s been set. This may be because it forms part of a URL (and you don’t want to break the URL) or it has been referenced in code. Set the indelible attribute to fix the slug once it’s been set. (i.e. allow it to be edited once)\n\n```html\n<perch:content id=\"slug\" type=\"slug\" for=\"heading\" editable indelible=\"true\">\n```\n\n## Examples\n\nThe following takes the value entered into the heading field and makes a URL-safe version of it, storing it as the slug field.\n\n```html\n<perch:content id=\"heading\" type=\"text\" label=\"Heading\" required>\n<perch:content id=\"slug\" type=\"slug\" for=\"heading\">\n```\n\nSo if the heading was entered as *The Moon Is Made Of Cheese* the value of slug would be *the-moon-is-made-of-cheese*.\n\nThis can then be used in your templates, for example in a link:\n\n```html\n<a href=\"/article.php?item=<perch:content id=\"slug\" type=\"slug\" for=\"heading\">\">\n    <perch:content id=\"heading\" type=\"text\" label=\"Heading\" required>\n</a>\n```\n\nThis would output:\n\n```html\n<a href=\"/article.php?item=the-moon-is-made-of-cheese\">\n    The Moon Is Made Of Cheese\n</a>\n```\n\nHow is this useful? You could have `article.php` pick up the value for the URL and use `perch_content_custom()` to filter your articles to display just the one you want:\n\n```php\n<?php\n    perch_content_custom(\"News articles\", array(\n        \"page\"     => \"/news.php\",\n        \"template\" => \"article.html\",\n        \"filter\"   => \"slug\",\n        \"match\"    => \"eq\",\n        \"value\"    => perch_get('item'),\n    ));\n?>\n```","type":"templates"},{"title":"Smarttext","permalink":"https://docs.grabaperch.com/templates/field-types/smarttext/","id":"templates.field-types.smarttext","excerpt":"The `smarttext` field type provides a single-line text field, but the output is processed to translate plain text punctuation characters into “smart” typographic punctuation.","text":"The `smarttext` field type provides a single-line text field, but the output is processed to translate plain text punctuation characters into “smart” typographic punctuation.\n\nThis makes it particularly suited to text like headings.\n\n```html\n<perch:content id=\"heading\" type=\"smarttext\" label=\"Heading\" required>\n```\n\nThe following changes are made:\n\n-   Straight quotes `\"` and `'` are turned into “curly” quotes\n-   Dashes `--` and `---` are turned into en- and em-dashes\n-   Three consecutive dots `...` are turned into an ellipsis\n\nUnlike a regular textarea processed with Textile or Markdown, the content isn’t wrapped in block-level paragraphs – only punctuation is changed.\n\nBy default, unicode characters are used. If you’re not serving your pages as UTF-8, you may wish to use HTML entities instead. This can be done with the following setting in your `perch/config/config.php` file:\n\n```php\ndefine('PERCH_HTML_ENTITIES', true);\n```","type":"templates"},{"title":"Text","permalink":"https://docs.grabaperch.com/templates/field-types/text/","id":"templates.field-types.text","excerpt":"Text is the simplest content type – it represents a basic line of text, and is edited with a single-line text input.","text":"Text is the simplest content type – it represents a basic line of text, and is edited with a single-line text input.\n\n```html\n<perch:content id=\"heading\" type=\"text\" label=\"Heading\" required>\n```\n\n### Optional attributes to use with type text\n\n\n|Attribute|Values and description|\n|-|-|\n|maxlength|Integer. The number of characters that can be input to the form field.|\n|required|Boolean. Whether the field must be completed or not.|\n|title|Boolean. Whether to use the contents of this field as a title in the Control Panel|","type":"templates"},{"title":"Textarea","permalink":"https://docs.grabaperch.com/templates/field-types/textarea/","id":"templates.field-types.textarea","excerpt":"Textarea represents a multi-line block of text, and is edited with a textarea input field. You can use formatting languages with this textarea and also implement a variety of WYSIWYG editors via our plugin system.","text":"Textarea represents a multi-line block of text, and is edited with a textarea input field. You can use formatting languages with this textarea and also implement a variety of WYSIWYG editors via our plugin system.\n\nThe code example below would create a textarea using Markdown formatting and implementing the default editor for Perch, SimpleMDE.\n\n```html\n<perch:content id=\"body\" type=\"textarea\" label=\"Article body\" markdown editor=\"simplemde\">\n```\n\n### Attributes for type textarea\n\n|Attribute|Values and description|\n|-|-|\n|textile|True or False. Whether to allow Textile formatting for the content.|\n|markdown|True or false. Whether to allow Markdown formatting for the content.|\n|html|True or false. Whether to allow HTML formatting for the content.|\n|editor|The name of the JavaScript content editor to apply to the textarea. Set to `simplemde` to use the default editor.|\n|size|A t-shirt size code for the size of the field: xs, s, m, l, xl, xxl|\n|bucket|The name of the resource bucket to upload images and files into.|\n|count|Set to `words` or `chars` to display a word or character count below the field.|\n\n## Using editors\n\nPerch ships with three editors.\n\n1. SimpleMDE (`editor=\"simplemde\"`) is a Markdown editor with some visual formatting. This is the default.\n2. MarkItUp (`editor=\"markitup\"`) is a Markdown editor without visual formatting. This was the default for Perch 1 and 2, and is kept for compatibility.\n3. Redactor (`editor=\"redactor\"`) is a WYSIWYG editor\n\nWe have also packaged some other popular WYSIWYG editors and these are available from the Add-ons section of the Perch website.\n\nIf using a WYSIWYG editor other than MarkItUp it is most likely that these will insert HTML, so you must make sure that you add the attribute `html` to your Perch Template Tag and remove the `markdown` or `textile` attribute if one is set.\n\nMost editors support the resizing of uploaded images directly from the editor. If you want to use that functionality then set the following optional attributes on your tag.\n\n### optional image upload attributes\n\n|Attribute|Values and description|\n|-|-|\n|imagewidth|Integer. The maximum width allowed, in pixels. The image will be proportionally scaled down if the width exceeds the given value.|\n|imageheight|Integer. The maximum height allowed, in pixels. The image will be proportionally scaled down if the height exceeds the given value.|\n|imagecrop|True or false. Whether to crop the image to a fixed size. Requires both imagewidth and imageheight to be set.|\n|imageclasses|A comma-delimited list of classes the user can apply to the image. (MarkItUp only.)|\n|imagequality|Integer. Compression quality for uploaded images. Values are between 0 (very compressed) to 100 (top banana). The default is 85.|\n|imagedensity|Integer. The pixel density of the image. Default is 1. A value of 2 would scale the image to 2x the dimensions given, but display the image at the size specified (e.g. for retina displays).|\n|imagesharpen|0-10. The amount of sharpening to apply to images. Default is 4.|\n\nExample:\n\n```html\n<perch:content id=\"body\" type=\"textarea\" label=\"Article body\" markdown editor=\"markitup\" imagewidth=\"300\" imageheight=\"200\" imagecrop bucket=\"news\">\n```","type":"templates"},{"title":"Including Layouts in Templates","permalink":"https://docs.grabaperch.com/templates/includes/layouts/","id":"templates.includes.layouts","excerpt":"A layout file can be included from within a template:","text":"A layout file can be included from within a template:\n\n```html\n<perch:layout path=\"global.sidebar\">\n```\n\nAt runtime, the layout file is included. Any attributes set on the `perch:layout` tag are passed through as layout variables.\n\nThe `path` is relative to the `perch/layouts` directory.","type":"templates"},{"title":"Comments App","permalink":"https://docs.grabaperch.com/templates/apps/comments/","id":"templates.apps.comments","excerpt":"The Perch Comments App uses the namespace `perch:comments` when displaying comments. Comment forms are Perch Forms and use the `perch:forms` namespace.","text":"## Namespaces\n\nThe Perch Comments App uses the namespace `perch:comments` when displaying comments. Comment forms are Perch Forms and use the `perch:forms` namespace.\n\n## Master templates\n\n| Template | Used for |\n|-|-|\n|comment.html|A comment|\n\n## Default templates\n\n| Template | Used for |\n|-|-|\n|comment_form.html|A form for collecting new comments|\n\n## Comment template IDs\n\nBy default, an comment template includes the following IDs:\n\n| Value | Description |\n|-|-|\n|`commentID`| The numeric, sequential unique ID for the comment |\n|`commentEmail`| The email address of the commenter |\n|`commentURL`| The URL for the commenter |\n|`commentName`| The commenter's name |\n|`commentDateTime`| The date and time at which the comment was left |\n|`commentHTML`| The HTML body of the comment |\n\n\n## Editing templates\n\nThe default templates are stored inside the `perch_comments/templates` folder however you should not edit these directly.\n\nTo modify templates copy the templates from `/perch/addons/apps/perch_comments/templates/comments` to `/perch/templates/comments` and then make your changes.\n\nIf a template has the same name in this folder as the template in the `perch_comments` folder it will be used rather than the default. You can also create your own templates with any name you like and pass in the name of the template in the function’s options array.\n\n## Usage examples\n\nThe Comments app has two main templates – the comment form, and the comment list.\n\n### A Comments Form\n\nThe comment form should be a Perch form, and must have an `id` of `comment` to be processed. Tags used for the form elements are defined in the [`perch:form` template documentation](/templates/form/).\n\n```html\n<perch:form id=\"comment\" method=\"post\" app=\"perch_comments\">\n  <fieldset>\n    <legend>Leave a comment</legend>\n    <div>\n      <perch:label for=\"commentName\">Name</perch:label>\n      <perch:input type=\"text\" id=\"commentName\" required label=\"Name\" antispam=\"name\">\n      <perch:error for=\"commentName\" type=\"required\">Required</perch:error>\n    </div>\n    <div>\n      <perch:label for=\"commentEmail\">Email</perch:label>\n      <perch:input type=\"email\" id=\"commentEmail\" required label=\"Email\" antispam=\"email\">\n      <perch:error for=\"commentEmail\" type=\"required\">Required</perch:error>\n      <perch:error for=\"commentEmail\" type=\"format\">Check format of address</perch:error>\n    </div>\n    <div>\n      <perch:label for=\"commentURL\">Website</perch:label>\n      <perch:input type=\"url\" id=\"commentURL\" placeholder=\"http://\" label=\"URL\" antispam=\"url\">\n    </div>\n    <div>\n      <perch:label for=\"commentHTML\">Comment</perch:label>\n      <perch:input type=\"textarea\" id=\"commentHTML\" required label=\"Message\" antispam=\"body\">\n      <perch:error for=\"commentHTML\" type=\"required\">Required</perch:error>\n    </div>\n    <div>\n      <perch:input type=\"hidden\" id=\"parentID\" value=\"<perch:comments id=\"parentID\">\">\n      <perch:input type=\"hidden\" id=\"parentTitle\" value=\"<perch:comments id=\"parentTitle\">\">\n      <perch:input type=\"submit\" id=\"submitComment\" value=\"Submit\">\n    </div>\n  </fieldset>\n  <perch:success>\n    <p>Thank you. Your comment has been submitted and will appear on the site once approved.</p>\n  </perch:success>\n</perch:form>\n```\n\n### Comment Listing\n\nA typical template might look like this:\n\n```html\n<perch:before>\n  <h2>Comments</h2>\n  <ul class=\"comments listing\">\n</perch:before>\n    <li id=\"comment<perch:comments id=\"commentID\" type=\"hidden\">\">\n      <img src=\"//www.gravatar.com/avatar/<perch:comments id=\"commentEmail\" type=\"email\" label=\"Email\" order=\"2\" hash=\"md5\" required>?s=120&d=mm\" width=\"60\" height=\"60\">\n      <div class=\"comment\">\n        <div class=\"commenter\">\n          <perch:if exists=\"commentURL\"><a href=\"<perch:comments id=\"commentURL\" type=\"url\" label=\"URL\" order=\"3\">\"></perch:if>\n            <strong><perch:comments id=\"commentName\" type=\"text\" label=\"Name\" order=\"1\" required>:</strong>\n          <perch:if exists=\"commentURL\"></a></perch:if>\n        </div>\n        <p rel=\"bookmark\" class=\"date\"><perch:comments id=\"commentDateTime\" format=\"%d %b %Y %X\" type=\"date\" time label=\"Date\"></p>\n        <perch:comments id=\"commentHTML\" encode=\"false\" html type=\"textarea\" label=\"Message (HTML)\" order=\"4\" required>\n      </div>\n    </li>\n<perch:after>\n  </ul>\n</perch:after>\n```","type":"templates"},{"title":"Perch Blog","permalink":"https://docs.grabaperch.com/templates/apps/blog/","id":"templates.apps.blog","excerpt":"Perch Blog uses the namespace `perch:blog`.","text":"## Namespaces\n\nPerch Blog uses the namespace `perch:blog`.\n\n\n## Master Templates\n\n| Template | Used for |\n|-|-|\n| post.html | A blog post |\n| post_meta.html | Meta and open graph tags for a post |\n| author.html | A blog author |\n| blog.html | A blog (Perch Runway) |\n| section.html | A blog section |\n \n## Default Templates\n\n| Template | Used for |\n|-|-|\n| post_in_list.html | A listing of blog posts |\n| author_list.html | Listing authors | \n| author_name.html | Displaying the name of an author |\n| comment.html | A listing of comments |\n| comment_form.html | A new comment form |\n| meta_head.html | HTML meta tags for the head of a post page |\n| rss_post.html | A post in an RSS feed |\n| section_list.html | A listing of blog sections |\n\n## Template IDs\n\nThe different types of templates have different fields supplied with them. These can typically be customised, with new fields easily added to the appropriate master template. By default, the following IDs are specified in the default templates supplied with the add-on.\n\n### Post template IDs\n\nBy default, an author template includes the following IDs:\n\n| Value | Description |\n|-|-|\n|`postTitle`| The title of the post |\n|`postURL`| The URL of the post |\n|`postSlug`| The URL-safe _slug_ for the post |\n|`postDateTime`| The date and time at which the post was published |\n|`postDescHTML`| The HTML for the body of the post |\n|`postTags`| A string of tags assigned to the post |\n|`postStatus`| The post status - Published or Draft |\n|`authorGivenName`| The first name of the post author |\n|`authorFamilyName`| The last name of the post author |\n|`authorEmail`| The email address of the post author |\n|`authorSlug`| The URL-safe slug for the post author |\n\n### Author template IDs\n\nBy default, an author template includes the following IDs:\n\n| Value | Description |\n|-|-|\n|`author_image`| An image for the author |\n|`authorGivenName`| The author's first name |\n|`authorFamilyName`| The author's last name |\n|`authorSlug`| A URL-safe slug for the author |\n|`author_biog`| An extended biography/description for the author |\n|`author_twitter`| The author's Twitter handle |\n|`author_facebook`| The author's Facebook profile URL |\n\n\n### Blog template IDs\n\nBy default, an blog template includes the following IDs:\n\n| Value | Description |\n|-|-|\n|`blogTitle`| The title of the blog |\n|`blogSlug`| A URL-safe slug for the blog |\n\n\n### Section template IDs\n\nBy default, an section template includes the following IDs:\n\n| Value | Description |\n|-|-|\n|`sectionTitle`| The title of the section |\n|`sectionSlug`| A URL-safe slug for the section |\n|`sectionPostCount`| A count of the number of posts within the section |\n\n### Comment template IDs\n\nBy default, an comment template includes the following IDs:\n\n| Value | Description |\n|-|-|\n|`commentID`| The numeric, sequential unique ID for the comment |\n|`commentEmail`| The email address of the commenter |\n|`commentURL`| The URL for the commenter |\n|`commentName`| The commenter's name |\n|`commentDateTime`| The date and time at which the comment was left |\n|`commentHTML`| The HTML body of the comment |\n\n\n## Editing Templates\n\nAs with Perch content the blog uses templates. The default templates are stored inside the `perch_blog/templates` folder however you should not edit these directly.\n\nTo modify templates copy the templates from `/perch/addons/apps/perch_blog/templates/blog` to `/perch/templates/blog` and then make your changes. If a template has the same name in this folder as the template in the `perch_blog folder` it will be used rather than the default. You can also create your own templates with any name you like and pass in the name of the template when using `perch_blog_custom`.\n\n### Adding fields to use in other templates\n\nBy default any field you add to the post.html template will appear on the page. If you just want to add a field so that it appears in admin and may be used by another template then add the variable `suppress` to the field. It will then appear in admin to be completed by the user but not display when post.html is used.\n\nThe excerpt in the default `post.html` is a good example of this. The below creates a field that does not display when `post.html` is used but is used instead on `post_in_list.html`.\n\n```html\n<perch:blog id=\"excerpt\" type=\"textarea\" label=\"Excerpt\" editor=\"markitup\" markdown order=\"1\" suppress size=\"m\">\n```\n\n\n\n## Usage examples\n\nUsing a blog variable in your template. To show the post title use:\n\n```html\n<perch:blog id=\"postTitle\" type=\"text\">\n```","type":"templates"},{"title":"Events App","permalink":"https://docs.grabaperch.com/templates/apps/events/","id":"templates.apps.events","excerpt":"The Perch Events App uses the namespace `perch:events`.","text":"## Namespaces\n\nThe Perch Events App uses the namespace `perch:events`.\n\n## Master templates\n\n| Template | Used for |\n|-|-|\n| event.html | An event |\n| category.html | An event category |\n\n## Default templates\n\n| Template | Used for |\n|-|-|\n| calendar/calendar.html | Calendar grid: The encapsulating grid structure and navigation |\n| calendar/blank-day.html | Calendar grid: an empty day cell with no events |\n| calendar/event-day.html | Calendar grid: a day cell with events |\n| listing/calendar.html | Calendar listing: The encapsulating list structure and navigation |\n| listing/blank-day.html | Calendar listing: an empty day with no events (not shown by default) |\n| listing/event-day.html | Calendar listing: a day with events |\n\n## Template IDs\n\nThe different types of templates have different fields supplied with them. These can typically be customised, with new fields easily added to the appropriate master template. By default, the following IDs are specified in the default templates supplied with the add-on.\n\n### Event templates\n\n| Value | Description |\n|-|-|\n|`eventTitle`| The title of the event |\n|`eventSlug`| A URL-safe slug for the event |\n|`eventDateTime`| The date and time at which the event occurs |\n|`eventDescHTML`| The HTML description of the event |\n|`category_names`| A string of category names applied to the event |\n|`category_slugs`| A string of category slugs applied to the event |\n|`eventURL` | The URL of the event detail page (based on the path in Settings) |\n\n### Calendar grids\n\nThe above event IDs should be available, along with:\n\n| Value | Description |\n|-|-|\n|`header`| The grid heading columns |\n|`body`| The grid body cells |\n|`selected_month`| The month the calendar is showing events for |\n|`prev_month`| The month previous to the one being displayed  |\n|`next_month`| The month following the one being displayed |\n|`current_month`| The current month _right now_ as the calendar is being viewed |\n|`day`| Inside a day cell: the day |\n\n## Editing templates\n\nThe default templates are stored inside the `perch_events/templates` folder however you should not edit these directly.\n\nTo modify templates copy the templates from `/perch/addons/apps/perch_events/templates/events` to `/perch/templates/events` and then make your changes.\n\nIf a template has the same name in this folder as the template in the `perch_events` folder it will be used rather than the default. You can also create your own templates with any name you like and pass in the name of the template in the function’s options array.\n\n### Adding fields to use in other templates\n\nBy default any field you add to the `event.html` template will appear on the page. If you just want to add a field so that it appears in admin\nand may be used by another template then add the variable `suppress` to the field. It will then appear in admin to be completed by the user but not display when `event.html` is used.","type":"templates"},{"title":"Gallery App","permalink":"https://docs.grabaperch.com/templates/apps/gallery/","id":"templates.apps.gallery","excerpt":"The Perch Gallery App uses the namespace `perch:gallery`.","text":"## Namespaces\n\nThe Perch Gallery App uses the namespace `perch:gallery`.\n\n## Master templates\n\n| Template | Used for |\n|-|-|\n| image.html | An image |\n\n## Image versions and sizes\n\nWhen an image file is uploaded to the gallery, it is processed to create\ncopies at different sizes. For example, this might be a ‘large’ version\nto fit your site’s layout width and a thumbnail version to use for\nnavigation. These versions and sizes are defined in the `image.html`\ntemplate.\n\n```html\n<perch:gallery id=\"image\" type=\"image\" key=\"main\"  width=\"640\" height=\"480\">\n<perch:gallery id=\"image\" type=\"image\" key=\"small\" width=\"100\" height=\"100\" crop>\n<perch:gallery id=\"image\" type=\"image\" key=\"thumb\" width=\"30\" height=\"30\" crop>\n```\n\nAs you can see, a new image version can be created by adding a new tag\nwith the ID of `image`, and setting its width, height and crop\nattributes in the way all images work in Perch templates.\n\nA small difference with the Gallery templates is the `key` attribute.\nThis gives the version of the image a name by which you can refer to it\nin templates. To take an example, if you wanted to output the path to\nthe small version of the image (which is resized and cropped to 100\npixels square) in a template, you’d use the code below, using the key as\nan ID:\n\n```html\n<perch:gallery id=\"small\">\n```\n\nTo output the width and height of the image, you can append -w or -h to\nthe key to make an ID:\n\n```html\n<perch:gallery id=\"small-w\">\n<perch:gallery id=\"small-h\">\n```\n\nTo output a full image tag, you’d combine these:\n\n```html\n<img src=\"<perch:gallery id=\"small\">\" width=\"<perch:gallery id=\"small-w\">\" height=\"<perch:gallery id=\"small-h\">\">\n```\n\nYou can add the name of the image by using the `imageAlt` item:\n\n```html\n<img alt=\"<perch:gallery id=\"imageAlt\">\" src=\"<perch:gallery id=\"small\">\" width=\"<perch:gallery id=\"small-w\">\" height=\"<perch:gallery id=\"small-h\">\">\n```\n\nIf you wanted to output the main version (or any other version you’ve\nadded to your image.html template) just substitute its key in place of\nsmall.\n\nIf you fail to specify a key for an image, Perch will create one for you\ncomprising of the width and height of the image version, e.g. w640h480.\nIt is recommended that you do specify your own key, however.\n\nIt’s worth remembering that these versions are created when the image is\nuploaded. The more versions you create, the longer it will take to\nprocess the upload and the more server memory and CPU you’ll require.\n\n## Editing templates\n\nThe default templates are stored inside the `perch_gallery/templates` folder however you should not edit these directly.\n\nTo modify templates copy the templates from `/perch/addons/apps/perch_gallery/templates/gallery` to `/perch/templates/gallery` and then make your changes.\n\nIf a template has the same name in this folder as the template in the `perch_gallery` folder it will be used rather than the default. You can also create your own templates with any name you like and pass in the name of the template in the function’s options array.\n\n### Adding fields to use in other templates\n\nBy default any field you add to the `image.html` template will appear on the page. If you just want to add a field so that it appears in admin\nand may be used by another template then add the variable `suppress` to the field. It will then appear in admin to be completed by the user but not display when `image.html` is used.","type":"templates"},{"title":"Mailchimp App","permalink":"https://docs.grabaperch.com/templates/apps/mailchimp/","id":"templates.apps.mailchimp","excerpt":"The Perch Mailchimp App uses the namespace `perch:mailchimp`.","text":"## Namespaces\n\nThe Perch Mailchimp App uses the namespace `perch:mailchimp`.\n\n## Master templates\n\nThe Mailchimp App is not used for creating data in the Perch Control Panel and so does not have a Master Template for data input.\n\n\n## Template IDs\n\n|Value|Description|\n|--|--|\n|`campaignSubject`| The subject line of the email|\n|`campaignSendTime`| a datetime, can be formatted|\n|`campaignArchiveURL`| the URL of the MailChimp hosted archive page|\n|`campaignURL`| the URL of your local archive page as set up in Settings within Perch|\n|`campaignText`| the text version of the email|\n|`campaignHTML`| the HTML version of the email|\n|`campaignSlug`| Perch generates this on import|\n\nOther stored variables are available but you would not normally display these:\n\n|Value|Description|\n|--|--|\n|`campaignCreated`|The date and time the campaign was created|\n|`campaignSent`|number of emails sent|\n|`campaignTitle`|the internal name of the Campaign on MailChimp and used in Perch admin|\n\n\n## Editing templates\n\nThe default templates are stored inside the `perch_mailchimp/templates` folder however you should not edit these directly.\n\nTo modify templates copy the templates from `/perch/addons/apps/perch_mailchimp/templates/mailchimp` to `/perch/templates/mailchimp` and then make your changes.\n\nIf a template has the same name in this folder as the template in the `perch_mailchimp` folder it will be used rather than the default. You can also create your own templates with any name you like and pass in the name of the template in the function’s options array.\n\n### Example: Simple Archive Template\n\n```html\n<perch:before>\n  <ul>\n</perch:before>\n    <li>\n      <h2>\n    <a href=\"<perch:mailchimp id=\"campaignURL\" type=\"text\">\">\n    <perch:mailchimp id=\"campaignSubject\" type=\"text\">\n    </a>\n    </h2>\n    <p><perch:mailchimp id=\"campaignSendTime\" type=\"date\" format=\"d F Y\"></p>\n</li>\n<perch:after>\n</ul>\n</perch:after>\n```","type":"templates"},{"title":"Members App","permalink":"https://docs.grabaperch.com/templates/apps/members/","id":"templates.apps.members","excerpt":"The Perch Members App uses the namespace `perch:members`.","text":"## Namespaces\n\nThe Perch Members App uses the namespace `perch:members`.\n\n## Editing templates\n\nAs with all Perch apps, the Members app uses templates. The default templates are stored inside the `perch/addons/perch_members/templates` folder, however you should not edit these directly.\n\nTo modify templates copy the templates from `/perch/addons/apps/perch_members/templates/members` to `/perch/templates/members` and then make your changes. If a template has the same name in this folder as the template in the `perch_members` folder it will be used rather than the default.\n\nYou can also create your own templates with any name you like and pass in the name of the template when using the Members app page functions.\n\nAny tag with `listing=\"true\"` will be added to the member listing screen.","type":"templates"},{"title":"Podcasts App","permalink":"https://docs.grabaperch.com/templates/apps/podcasts/","id":"templates.apps.podcasts","excerpt":"The Perch Podcasts App uses the namespace `perch:podcasts`.","text":"## Namespaces\n\nThe Perch Podcasts App uses the namespace `perch:podcasts`.\n\n## Master templates\n\n| Template | Used for |\n|-|-|\n| show.html | A show |\n| episode.html | An individual podcast episode |\n\n## Template IDs\n\n| Value | Description |\n|-|-|\n| showID | |\n| showTitle | Title of the Show |\n| showSlug | Slug which can be used in a URL to identify the show |\n| showCreated | Creation date of this show |\n| showEpisodeCount | Number of episodes for this show |\n| episodeID | |\n| episodeNumber | Number of this episode |\n| episodeTitle | Title of the episode |\n| episodeSlug | |\n| episodeDate | |\n| episodeDuration | |\n| episodeDurationHMS | |\n| episodeFile | |\n| episodeFileSize | |\n| episodeFileType | |\n| episodeStatus | |\n| episodeTrackedURL | |\n\n\n## Editing templates\n\nThe default templates are stored inside the `perch_podcasts/templates` folder however you should not edit these directly.\n\nTo modify templates copy the templates from `/perch/addons/apps/perch_podcasts/templates/podcasts` to `/perch/templates/podcasts` and then make your changes.\n\nIf a template has the same name in this folder as the template in the `perch_podcasts` folder it will be used rather than the default. You can also create your own templates with any name you like and pass in the name of the template in the function’s options array.","type":"templates"},{"title":"Shop FoxyCart App","permalink":"https://docs.grabaperch.com/templates/apps/shop-foxycart/","id":"templates.apps.shop-foxycart","excerpt":"**Tis add-on is deprecated. If creating a store look at the Perch Shop App.**","text":"**Tis add-on is deprecated. If creating a store look at the Perch Shop App.**\n\n## Namespaces\n\nThe Perch Foxycart App uses the namespace `perch:shop`. This is the same as the other Shop Apps we have which means you may only use one at a time.\n\n## Master templates\n\n| Template | Used for |\n|-|-|\n| product.html | A product |\n\n\n## Template IDs\n\n| Value | Description |\n|-|-|\n|`productTitle` | |\n|`productCode` | |\n|`productPrice` | |\n|`productDescHTML` | |\n|`productOptions_html` | |\n|`productFoxyCategory` | |\n|`productImage` | |\n\n## Editing templates\n\nTo modify templates copy the templates from `/perch/addons/apps/perch_shop_foxycart/templates/shop` to\n`/perch/templates/shop` and then make your changes. If a template has\nthe same name in this folder as the template in the `perch_shop_foxycart` folder it will be used rather than the default.\nYou can also create your own templates with any name you like and pass\nin the name of the template when using `perch_shop_custom`.\n\n### Adding fields to use in other templates\n\nBy default any field you add to the `product.html` template will appear on the page. If you just want to add a field so that it appears in admin\nand may be used by another template then add the variable `suppress` to the field. It will then appear in admin to be completed by the user but not display when `product.html` is used.","type":"templates"},{"title":"Perch Shop","permalink":"https://docs.grabaperch.com/templates/apps/shop/","id":"templates.apps.shop","excerpt":"The following namespaced tags are used by Perch Shop.","text":"## Namespaces\n\nThe following namespaced tags are used by Perch Shop.\n\n| Namespace | Used for |\n|-|-|\n| perch:shop | All shop tag types except those detailed below |\n| perch:cartitems | Tag pair around items in the cart |\n| perch:cartitem | Used for template tags for individual cart items |\n| perch:productopts | Product options (size, colour) |\n| perch:productopt | Single product option |\n| perch:productvalues | Product option values (M, L, red, blue) |\n| perch:productvalue | Single product option value |\n| perch:variants | Product variants |\n| perch:variant | Single product variant |\n\n## Master Templates\n\nThe master templates for Shop are as follows. All templates are within `perch_shop/templates/shop` and an individual template should be copied to the corresponding location within your local `perch/templates/shop` folder before editing.\n\n|Entity|Template|\n|-|-|\n|Customer address|addresses/address.html|\n|Brand|brands/brand.html|\n|Cart|cart/cart.html|\n|Currency|currencies/currency.html|\n|Customer|customers/customer.html|\n|Email|emails/email.html|\n|Order|orders/order.html|\n|Order status|orders/status.html|\n|Product|products/product.html|\n|Product file|products/file.html|\n|Product options|product/option.html|\n|Product variants|product/variant.html|\n|Promotions|promotions/promotion.html|\n|Shipping methods|shippings/shipping.html|\n|Shipping zones|shipping/zone.html|\n|Tax groups|tax/group.html|\n|Tax locations|tax/location.html|\n\n\n## Template IDs\n\nPerch Shop exposes the following variables as values for the `id` attribute in template tags.\n\n### Cart tags\n\n|Tag|Description|\n|-|-|\n|product_count|Number of unique products in the cart|\n|item_count|Number of individual items in the cart|\n|shipping_id|Shipping ID for the shipping method in use for the cart|\n|shipping_method|The name of the shipping method being used|\n|shipping_weight|The combined weight of items being shipped|\n|shipping_tax|Tax paid on selected shipping method, defaults to 0|\n|shipping_tax_formatted|Formatted value for shipping tax|\n|shipping_tax_rate|Rate used for shipping tax|\n|shipping_with_tax|Shipping charge with tax added|\n|shipping_with_tax_formatted|Shipping charge with tax added, formatted|\n|shipping_without_tax|Cost of shipping without tax|\n|shipping_without_tax_formatted|Cost of shipping without tax, formatted|\n|total_items|Total value of the items in the cart|\n|total_items_formatted|Total value of the items in the cart, formatted|\n|total_items_tax|The total tax amount on items in the cart|\n|total_items_tax_formatted|The total tax amount on items in the cart, formatted|\n|total_shipping|The total shipping amount|\n|total_shipping_formatted|The total shipping amount, formatted|\n|total_shipping_tax|The total tax amount on shipping|\n|total_shipping_tax_formatted|The total tax amount on shipping, formatted|\n|total_items_with_shipping|The total value of items and shipping combined|\n|total_items_with_shipping_formatted|The total value of items and shipping combined, formatted|\n|total_tax|The total amount of item and shipping tax combined|\n|total_tax_formatted|The total amount of item and shipping tax combined, formatted|\n|total_discounts|Total of discounts applied|\n|total_discounts_formatted|Total of discounts applied, formatted|\n|total_items_discount|The total value of discounts applied to items in the cart|\n|total_items_discount_formatted|The total value of discounts applied to items in the cart, formatted|\n|total_items_tax_discount|The total value of discounts applied to tax|\n|total_items_tax_discount_formatted|The total value of discounts applied to tax, formatted|\n|total_items_discounted|Total value of the items in the cart with discounts applied|\n|total_items_discounted_formatted|Total value of the items in the cart with discounts applied, formatted|\n|total_items_discounted_with_tax|Total value of the items in the cart with discounts and tax applied|\n|total_items_discounted_with_tax_formatted|Total value of the items in the cart with discounts and tax applied, formatted|\n|total_shipping_discount|Total value of discounts applied to shipping|\n|total_shipping_discount_formatted|Total value of discounts applied to shipping, formatted|\n|total_shipping_tax_discount|Total value of shipping with discounts applied|\n|total_shipping_tax_discount_formatted|Total value of shipping with discounts applied, formatted|\n|total_tax_discount|Total amount of discount applied to tax|\n|total_tax_discount_formatted|Total amount of discount applied to tax, formatted|\n|total_discounts_with_tax|Combined total of item, shipping and tax discounts|\n|total_discounts_with_tax_formatted|Combined total of item, shipping and tax discounts, formatted|\n|grand_total|Grand total - what your customer will pay|\n|grand_total_formatted|Grand total, formatted|\n|shipping_weight|Shipping weight|\n|currency_id|Currency ID for the currency used for this cart|\n|currency_code|Currency code|\n|currency_name|Currency name|\n|currency_symbol|Currency symbol|\n\n### Cart Item tags\n\n|Tag|Description|\n|-|-|\n|identifier|The unique ID of this entry in the cart|\n|id|Alias for `identifier`|\n|qty|The quantity of this item in the cart|\n|productID|The unique ID of the product|\n|is_variant|True or false, if the item is a variant|\n|variant_desc|The variant description of the item, if it is a variant|\n|sku|The product SKU|\n|title|Title of the product|\n|slug|Product slug based on the title|\n|brand|The product brand (use with `type=\"shop_brand\"`|\n|category|The product categories (use with `perch:categories` tags)|\n|catalog_only|True or false, if the product is available for online sale|\n|requires_shipping|True or false, requires physical shipping|\n|weight|The weight of the item|\n|width|The width of the item|\n|height|The height of the item|\n|depth|The depth of the item|\n|price|Item price (use with `type=\"shop_currency_value\"`)|\n|sale_price|Sale price (use with `type=\"shop_currency_value\"`)|\n|trade_price|Trade price (use with `type=\"shop_currency_value\"`)|\n|on_sale|True or false, if the item is currently discounted|\n|tax_group|The product's tax group (use with `type=\"shop_tax_group\"`)|\n|stock_level|The number of items in stock|\n|stock_status|The current stock status (use with `type=\"shop_stock_status\"`)|\n|max_in_cart|The maximum allowable quantity of this item per cart|\n|discount|The amount of discount applied to the item|\n|price_with_tax|The price with tax included|\n|price_with_tax_formatted|The price with tax included, formatted|\n|price_without_tax|The price without tax|\n|price_without_tax_formatted|The price without tax, formatted|\n|tax_discount|The about of discount applied to the tax|\n|tax_rate|The rate at which tax has been calculated|\n|total_tax|The amount of tax|\n|total_tax_formatted|The amount of tax, formatted|\n|total_with_tax|The line total including tax|\n|total_with_tax_formatted|The line total including tax, formatted|\n|total_without_tax|The line total excluding tax|\n|total_without_tax_formatted|The line total excluding tax, formatted|\n\n### Brand tags\n\n|Tag|Description|\n|-|-|\n|title|The name of the brand|\n|slug|The URL-safe slug version of `title`|\n|description|A description of the brand|\n|image|An image representing the brand|\n\n\n## Editing templates\n\nAs with all Perch Add-ons, Shop comes with some default templates. These are stored in `perch/addons/apps/perch_shop/templates/shop`. Inside that folder are subfolders for the different parts of Shop, for example for the Cart that is the folder `cart` which includes a simple `cart.html` template. This will be used if you do not specify your own template name when displaying the cart, and if there is no template with the same name in your custom templates folder at `perch/templates/shop`.\n\nYou should not edit the templates that are inside the app folder. Before making any changes copy the template you wish to change into its subfolder inside `perch/templates/shop/`  You can then make any changes you want and the changes will not be overwritten when you update the add-on.\n\nFor example, to edit the default product template, you would copy:\n\n```unix\nperch/addons/apps/perch_shop/templates/shop/products/product.html\n```\n\nto your local templates folder as:\n\n```unix\nperch/templates/shop/products/product.html\n```\n\nYour edited template will then be used in preference, and it won't be overwritten when you apply updates to the Shop app.","type":"templates"},{"title":"Shop PayPal App","permalink":"https://docs.grabaperch.com/templates/apps/shop-paypal/","id":"templates.apps.shop-paypal","excerpt":"**Tis add-on is deprecated. If creating a store look at the Perch Shop App.**","text":"**Tis add-on is deprecated. If creating a store look at the Perch Shop App.**\n\n## Namespaces\n\nThe Perch PayPal App uses the namespace `perch:shop`. This is the same as the other Shop Apps we have which means you may only use one at a time.\n\n## Master templates\n\n| Template | Used for |\n|-|-|\n| product.html | A product |\n\n\n## Template IDs\n\n| Value | Description |\n|-|-|\n|`productTitle` | |\n|`productCode` | |\n|`productPrice` | |\n|`productDescHTML` | |\n|`productOptions_html` | |\n|`productImage` | |\n\n## Editing templates\n\nTo modify templates copy the templates from `/perch/addons/apps/perch_shop_paypal/templates/shop` to\n`/perch/templates/shop` and then make your changes. If a template has\nthe same name in this folder as the template in the `perch_shop_paypal` folder it will be used rather than the default.\nYou can also create your own templates with any name you like and pass\nin the name of the template when using `perch_shop_custom`.\n\n### Adding fields to use in other templates\n\nBy default any field you add to the `product.html` template will appear on the page. If you just want to add a field so that it appears in admin\nand may be used by another template then add the variable `suppress` to the field. It will then appear in admin to be completed by the user but not display when `product.html` is used.","type":"templates"},{"title":"Twitter App","permalink":"https://docs.grabaperch.com/templates/apps/twitter/","id":"templates.apps.twitter","excerpt":"The Perch Twitter App uses the namespace `perch:twitter`.","text":"## Namespaces\n\nThe Perch Twitter App uses the namespace `perch:twitter`.\n\n## Master templates\n\nTweets are imported rather than input in the Control Panel so the Twitter App has no Master Template used for data entry.\n\n## Default templates\n\n| Template | Used for |\n|-|-|\n|tweet.html|Displaying a tweet|\n\n## Template IDs\n\n| Value | Description |\n|-|-|\n|tweetHTML| The HTML body of the tweet |\n|tweetUser| The Twitter user |\n|tweetTwitterID| The ID of the tweet on Twitter |\n|tweetUserRealName| The user's real name |\n|tweetUserAvatar| The user's avatar |\n|tweetDate| The date and time of the tweet |\n|tweetText| (use tweetHTML under normal circumstances) |\n\n## Editing Templates\n\nThe default templates are stored inside the `perch_twitter/templates` folder however you should not edit these directly.\n\nTo modify templates copy the templates from `/perch/addons/apps/perch_twitter/templates/twitter` to\n`/perch/templates/twitter` and then make your changes.\n\nIf a template has the same name in this folder as the template in the `perch_twitter` folder it will be used rather than the default. You can also create your own templates with any name you like and pass in the name of the template in the function’s options array.","type":"templates"},{"title":"Has Tag","permalink":"https://docs.grabaperch.com/templates/apps/members/has-tag/","id":"templates.apps.members.has-tag","excerpt":"You can test to see if the logged in member has a given tag.","text":"You can test to see if the logged in member has a given tag.\n\n```html\n<perch:member has-tag=\"parent\">\n    <p>You can access information for parents</p>\n<perch:else:member>\n    <p>Please contact the school administrator for access.</p>\n</perch:member>\n```","type":"templates"},{"title":"Members Data","permalink":"https://docs.grabaperch.com/templates/apps/members/data/","id":"templates.apps.members.data","excerpt":"You can output details of the current member in a template using the\n`<perch:member>` tag.","text":"You can output details of the current member in a template using the\n`<perch:member>` tag.\n\n```html\n <p>Welcome back, <perch:member id=\"first_name\"></p>\n```\n\nThe above would output the `first_name` property of the logged in\nmember, which would be a field in either the registration form or the\nprofile form.","type":"templates"},{"title":"Logged In Conditional","permalink":"https://docs.grabaperch.com/templates/apps/members/logged-in/","id":"templates.apps.members.logged-in","excerpt":"You can use a conditional tag to see if the current member is logged in.","text":"You can use a conditional tag to see if the current member is logged in.\n\n```html\n<perch:member logged-in=\"true\">\n     <p>You are logged in.</p>\n <perch:else:member>\n     <p>You are not logged in.</p>\n </perch:member>\n```","type":"templates"},{"title":"Cart","permalink":"https://docs.grabaperch.com/templates/apps/shop/cart/","id":"templates.apps.shop.cart","excerpt":"This page details the template tags available to you when creating a Cart template.","text":"This page details the template tags available to you when creating a Cart template.\n\n## Default templates\n\nAs with all Perch Add-ons, Shop comes with some default templates. Before editing any templates, please see the [notes on editing templates](/templates/apps/shop/#editing-templates) to make sure your changes are safe when you next update the app.\n\n|Purpose|Template|\n|-|-|\n|Cart display (master template)|cart/cart.html|\n|Order confirmation|cart/cart_static.html|\n\n## Creating your own templates\n\nYou can either edit the default `cart.html` or create your own. See [page functions](/functions/shop/cart/) for how to include a different template.\n\nThe cart is namespaced with `perch:shop` so any  template tags used should use this namespace. An exception is when dealing with the individual items in the cart. These are namespaced `perch:cartitem`.\n\n### Cart template tags\n\nThe following variables are exposed as tags. As an example if you want to display the total including tax, formatted with the symbol of the currency the customer is paying in you would use the tag:\n\n```html\n<perch:shop id=\"grand_total_formatted\">\n```\n\n|Tag|Description|\n|-|-|\n|product_count|Number of unique products in the cart|\n|item_count|Number of individual items in the cart|\n|shipping_id|Shipping ID for the shipping method in use for the cart|\n|shipping_method|The name of the shipping method being used|\n|shipping_weight|The combined weight of items being shipped|\n|shipping_tax|Tax paid on selected shipping method, defaults to 0|\n|shipping_tax_formatted|Formatted value for shipping tax|\n|shipping_tax_rate|Rate used for shipping tax|\n|shipping_with_tax|Shipping charge with tax added|\n|shipping_with_tax_formatted|Shipping charge with tax added, formatted|\n|shipping_without_tax|Cost of shipping without tax|\n|shipping_without_tax_formatted|Cost of shipping without tax, formatted|\n|total_items|Total value of the items in the cart|\n|total_items_formatted|Total value of the items in the cart, formatted|\n|total_items_tax|The total tax amount on items in the cart|\n|total_items_tax_formatted|The total tax amount on items in the cart, formatted|\n|total_shipping|The total shipping amount|\n|total_shipping_formatted|The total shipping amount, formatted|\n|total_shipping_tax|The total tax amount on shipping|\n|total_shipping_tax_formatted|The total tax amount on shipping, formatted|\n|total_items_with_shipping|The total value of items and shipping combined|\n|total_items_with_shipping_formatted|The total value of items and shipping combined, formatted|\n|total_tax|The total amount of item and shipping tax combined|\n|total_tax_formatted|The total amount of item and shipping tax combined, formatted|\n|total_discounts|Total of discounts applied|\n|total_discounts_formatted|Total of discounts applied, formatted|\n|total_items_discount|The total value of discounts applied to items in the cart|\n|total_items_discount_formatted|The total value of discounts applied to items in the cart, formatted|\n|total_items_tax_discount|The total value of discounts applied to tax|\n|total_items_tax_discount_formatted|The total value of discounts applied to tax, formatted|\n|total_items_discounted|Total value of the items in the cart with discounts applied|\n|total_items_discounted_formatted|Total value of the items in the cart with discounts applied, formatted|\n|total_items_discounted_with_tax|Total value of the items in the cart with discounts and tax applied|\n|total_items_discounted_with_tax_formatted|Total value of the items in the cart with discounts and tax applied, formatted|\n|total_shipping_discount|Total value of discounts applied to shipping|\n|total_shipping_discount_formatted|Total value of discounts applied to shipping, formatted|\n|total_shipping_tax_discount|Total value of shipping with discounts applied|\n|total_shipping_tax_discount_formatted|Total value of shipping with discounts applied, formatted|\n|total_tax_discount|Total amount of discount applied to tax|\n|total_tax_discount_formatted|Total amount of discount applied to tax, formatted|\n|total_discounts_with_tax|Combined total of item, shipping and tax discounts|\n|total_discounts_with_tax_formatted|Combined total of item, shipping and tax discounts, formatted|\n|grand_total|Grand total - what your customer will pay|\n|grand_total_formatted|Grand total, formatted|\n|shipping_weight|Shipping weight|\n|currency_id|Currency ID for the currency used for this cart|\n|currency_code|Currency code|\n|currency_name|Currency name|\n|currency_symbol|Currency symbol|\n\n\n### Cart Item tags\n\n|Tag|Description|\n|-|-|\n|identifier|The unique ID of this entry in the cart|\n|id|Alias for `identifier`|\n|qty|The quantity of this item in the cart|\n|productID|The unique ID of the product|\n|is_variant|True or false, if the item is a variant|\n|variant_desc|The variant description of the item, if it is a variant|\n|sku|The product SKU|\n|title|Title of the product|\n|slug|Product slug based on the title|\n|brand|The product brand (use with `type=\"shop_brand\"`|\n|category|The product categories (use with `perch:categories` tags)|\n|catalog_only|True or false, if the product is available for online sale|\n|requires_shipping|True or false, requires physical shipping|\n|weight|The weight of the item|\n|width|The width of the item|\n|height|The height of the item|\n|depth|The depth of the item|\n|price|Item price (use with `type=\"shop_currency_value\"`)|\n|sale_price|Sale price (use with `type=\"shop_currency_value\"`)|\n|trade_price|Trade price (use with `type=\"shop_currency_value\"`)|\n|on_sale|True or false, if the item is currently discounted|\n|tax_group|The product's tax group (use with `type=\"shop_tax_group\"`)|\n|stock_level|The number of items in stock|\n|stock_status|The current stock status (use with `type=\"shop_stock_status\"`)|\n|max_in_cart|The maximum allowable quantity of this item per cart|\n|discount|The amount of discount applied to the item|\n|price_with_tax|The price with tax included|\n|price_with_tax_formatted|The price with tax included, formatted|\n|price_without_tax|The price without tax|\n|price_without_tax_formatted|The price without tax, formatted|\n|tax_discount|The about of discount applied to the tax|\n|tax_rate|The rate at which tax has been calculated|\n|total_tax|The amount of tax|\n|total_tax_formatted|The amount of tax, formatted|\n|total_with_tax|The line total including tax|\n|total_with_tax_formatted|The line total including tax, formatted|\n|total_without_tax|The line total excluding tax|\n|total_without_tax_formatted|The line total excluding tax, formatted|\n\n### Remove from cart buttons\n\nYou can add a \"remove from cart\" button to provide a simpler way for a customer to remove the item than setting the quantity to zero.\n\nWithin your `<perch:cartitems>` section:\n\n```html\n<button type=\"submit\" name=\"del:<perch:cartitem id=\"identifier\">\" value=\"1\">\n  Remove from cart\n</button>\n```\n\nClicking the button will submit the form, sending along with it the `del:123` field. This causes item `123` to be removed from the cart. If doing this, it's important to take account of the default action that occurs when a browser submits a form using the <keyboard>Enter</keyboard> key. What normally happens, is that the browser will submit the form as if the first submit button in the form had been clicked. If your \"remove from cart\" button appears as the first submit button, pressing Enter will remove the first item from the cart. Your customer might find this to be surprising.\n\nTo account for this behaviour, it's a good idea to make sure that the first button is a standard update button. Usefully, it doesn't even need to be visible - you can hide it. Something like:\n\n```html\n<perch:input type=\"submit\" value=\"Update\" hidden=\"true\" aria-hidden=\"true\">\n```","type":"templates"},{"title":"Brands","permalink":"https://docs.grabaperch.com/templates/apps/shop/brands/","id":"templates.apps.shop.brands","excerpt":"This page lists the tags available to you when creating a Brand template.","text":"This page lists the tags available to you when creating a Brand template.\n\n## Default templates\n\nAs with all Perch Add-ons, Shop comes with some default templates. Before editing any templates, please see the [notes on editing templates](/templates/apps/shop/#editing-templates) to make sure your changes are safe when you next update the app.\n\n|Purpose|Template|\n|-|-|\n|Brand detail (master template)|brands/brand.html|\n|Listing|brands/list.html|\n\n## Creating your own templates\n\nYou can either edit the default `brand.html` or create your own. See [page functions](/functions/shop/products/) for how to include a different template.\n\nBrands are namespaced with `perch:shop` so any template tags used should use this namespace.\n\n### Cart template tags\n\nThe following variables are exposed as tags. As an example if you want to display the brand name you would use the tag:\n\n```html\n<perch:shop id=\"title\" type=\"text\">\n```\n\n|Tag|Description|\n|-|-|\n|title|The name of the brand|\n|slug|The URL-safe slug version of `title`|\n|description|A description of the brand|\n|image|An image representing the brand|","type":"templates"},{"title":"Orders","permalink":"https://docs.grabaperch.com/templates/apps/shop/orders/","id":"templates.apps.shop.orders","excerpt":"This page lists the tags available to you when creating an orders template.","text":"This page lists the tags available to you when creating an orders template.","type":"templates"},{"title":"Product Options","permalink":"https://docs.grabaperch.com/templates/apps/shop/product-options/","id":"templates.apps.shop.product-options","excerpt":"This page lists the tags available to you when creating product options.","text":"This page lists the tags available to you when creating product options.","type":"templates"},{"title":"Products","permalink":"https://docs.grabaperch.com/templates/apps/shop/products/","id":"templates.apps.shop.products","excerpt":"This page lists the tags available to you when creating a Product template.","text":"This page lists the tags available to you when creating a Product template.\n\n## Default templates\n\nAs with all Perch Add-ons, Shop comes with some default templates. Before editing any templates, please see the [notes on editing templates](/templates/apps/shop/#editing-templates) to make sure your changes are safe when you next update the app.\n\n|Purpose|Template|\n|-|-|\n|Product display (master template)|products/product.html|\n|Product listing|products/list.html|\n|Product variant (master template)|products/variant.html|\n|Variant listing|products/variant_list.html|\n\n## Default fields\n\nThe product master template contains a number of default fields with special field types that are required in order to make a product function correctly. It is quite possible, if not likely, that you don't want to include all of these fields when displaying a product. Rather than muddy the waters by editing an already complex template, you may find it better to create a custom template for your product display and leave the default `product.html` and `variant.html` templates as-is.\n\n## Listing variants\n\nIf a product has variants, you can list out the variants using the `perch:variants` tag pair:\n\n```html\n<perch:variants>\n\t<perch:variant id=\"productVariantDesc\" type=\"text\">\n\t<perch:variant id=\"price\" type=\"shop_currency_value\">\n</perch:variants>\n```\n\nLoading all possible variants into the template can be wasteful if they're not used. Therefore variants are opt-in, and need to be enabled:\n\n```php\nperch_shop_product('my-product', [\n    'variants' => true,\n]);\n```","type":"templates"},{"title":"perch:error","permalink":"https://docs.grabaperch.com/templates/form/error/","id":"templates.form.error","excerpt":"Perch forms allow for comprehensive and customizable error reporting using the `perch:error` tag.","text":"Perch forms allow for comprehensive and customizable error reporting using the `perch:error` tag.\n\nYou can have multiple perch:error tags for a perch:input field to cover different error states. For example one message to display in the case of a required field not being complete and a second error to display if the field is completed but the wrong format is used where you are validated email addresses for example.\n\nThe tags can be anywhere within your perch:form tags. So you can display errors adjacent to the relevant fields or at the top of the form as required by your design.\n\nIn the example below I have used a span with a class of error inside my tags – this html and the messages is completely in your control, anything inside the error tags will be displayed when an error occurs.\n\n## A simple example\n\nThe below shows an error to be displayed when a required field is not completed.\n\n```html\n<perch:error for=\"message\" type=\"required\">\n  <span class=\"error\">Please add a message.</span>\n</perch:error>\n```\n\n## Formatting errors\n\nMany of the form types require data to be submitted in a particular format. For example type=“email” required the input to be a valid email address. You can use perch:error with a type of format to catch these errors and show helpful error text.\n\nThe below catches an incorrectly formatted email address.\n\n```html\n<perch:error for=\"email\" type=\"format\">\n  <span class=\"error\">Please enter a valid email address.</span>\n</perch:error>\n```\n\nYou can have multiple perch:error tags per field, so you may want to have one to display when the field has not been completed and another to catch the incorrect format.\n\n## Catching incorrect file uploads\n\nPerch allows you to set which types of files may be uploaded. If a user tries to upload a filetype that is not allowed then you can catch this.\n\nThere is also a fileupload type which can be used to catch when a fileupload fails.\n\n```html\n<perch:error for=\"cv\" type=\"filetype\">\n  <span class=\"error\">File must be a PDF or Office document.</span>\n</perch:error>\n\n<perch:error for=\"cv\" type=\"fileupload\">\n  <span class=\"error\">Couldn't upload the file - could be too big.</span>\n</perch:error>\n```\n\n\n### perch:error attributes\n\n|Attribute|Description|\n|-|-|\n|for|Required: ID of a perch:input tag|\n|type|Required: the value should be one of the following: required, format, filetype or fileupload|\n\n## General error states\n\nSometimes it’s useful to display a general failure message if the form did not pass validation. For example, you might want to display a message at the top of a longer form to indicate to the users that they should scroll down and look for problems on individual fields.\n\nYou can do this with a ‘general’ error for all fields:\n\n```html\n<perch:error for=\"all\" type=\"general\">\n    Sorry, something went wrong and the form was not sent. Please see the messages below.\n</perch:error>\n```","type":"templates"},{"title":"perch:form","permalink":"https://docs.grabaperch.com/templates/form/form/","id":"templates.form.form","excerpt":"To create a form in Perch it must open and close with perch:form tags.","text":"To create a form in Perch it must open and close with perch:form tags.\n\n```html\n<perch:form id=\"contact\" method=\"post\" app=\"perch_forms\">\n\n</perch:form>\n```\n\n### perch:form attributes\n\n|Attribute|Description|\n|-|-|\n|id|Required. The id for this form|\n|method|Required. post or get|\n|action|Set action if you want to post to an external script (your form is not being handled by Perch)|\n|app|The name of the app or apps which should handle this form. For forms in content set this to perch_forms|\n|prefix|An optional value for a custom prefix for IDs or special value of none for no prefix.|\n\n## Sending a form to multiple apps\n\nMultiple apps can handle the form submission. This can be useful if you want to have more than one app perform an action based on the content of the form (e.g. create a member *and* add them to a mailing list).\n\nTo have multiple apps handle the form, set the `app` attribute to a space-separated list. The form will be passed to the apps in the order listed.\n\n```html\n<perch:form app=\"perch_forms custom_app1 custom_app2\" ..>\n```","type":"templates"},{"title":"perch:input","permalink":"https://docs.grabaperch.com/templates/form/input/","id":"templates.form.input","excerpt":"`perch:input` is a self-closing tag which creates an input element in your form.","text":"`perch:input` is a self-closing tag which creates an input element in your form.\n\nPerch enables you to use the HTML5 form input elements. Any user completing the form with a browser which supports these will get the additional validation and form input widgets in HTML5. These degrade to standard input elements in non-supporting browsers.\n\nThe following example will create an HTML textarea.\n\n```html\n<perch:input type=\"textarea\" id=\"message\" required label=\"Message\">\n```\n\n## Attributes for perch:input\n\n|Attribute|Description|\n|-|-|\n|id|Required. The id of the element. This will be prefixed unless the prefix attribute is set to none on the form tag|\n|name|Optional: if not specified the value of id will create the form name attribute|\n|type|Required. See the below table for list of available types|\n|label|This is used in the admin and email output of the field - not shown on the page|\n|required|sets the field as being required when the form is completed|\n|other html5 attributes|if you wish to set any other html5 attributes for example placeholder, these will be copied as is through to the rendered field|\n|class|if you set a class on a input tag this will be copied through into the mark-up|\n|antispam|One of name, email, url, body or honeypot. For sending values to an anti spam service such as Akismet.|\n\n\n## Values for the type attribute\n\nThe values that you select for the type attribute will change the way that fields are validated and, if you are using HTML5, may cause Perch to output a specific field type. For example there are HTML5 UI elements for number and range which will then display. If you simply want to use text input fields and validate them just as a string of text then simply use type=“text”.\n\nThe table below shows all possible values. Each one is detailed fully on the page for that type.\n\n### Possible values for the type attribute\n\n|Value|Description|\n|-|-|\n|type=\"text\"|Creates an input element of type text in your form|\n|type=\"email\"|Creates an input element of type email in your form|\n|type=\"url\"|Creates an input element of type url in your form. This wil validate to require a protocol.|\n|type=\"range\" and type=\"number\"|If using html5 these will display the HTML5 widgets for range and number. There are additional attributes to set for the validation: min - Minimum value allowed, max - maximum value allowed, step - increments|\n|type=\"date\"|this accepts a date in format YYYY-MM-DD|\n|type=\"datetime\"|this accepts date and time YYYY-MM-DD HH:MM (optionally :SS too)|\n|type=\"month\"|This accepts a year and month YYYY-MM|\n|type=\"week\"|This accepts a year and week number YYYY-WNN e.g. 2011-W23 (W is literal)|\n|type=\"color\"|This will accept a hex color e.g. #FFFFFF|\n|type=\"textarea\"|Creates a textarea|\n|type=\"select\"|A select list. If using type=\"select\" you also need an options attribute with a value which is a string of options.|\n|type=\"radio\"|Creates a set of radiobuttons. If using type=\"select\" you also need an options attribute with a value which is a string of options.|\n|type=\"checkbox\"|creates a checkbox field. The value set will become the checked value of the checkbox|\n|type=\"image\"|this will create a file upload field which accepts image formats. The allowed formats are detailed in: perch/config/filetypes.ini|\n|type=\"file\"|this will create a file upload field which accepts document formats using the accept attribute. The allowed formats are detailed in: perch/config/filetypes.ini|\n|type=\"hidden\"|creates a hidden field|\n|type=\"submit\"|creates a submit button, the value of this field becomes the text displayed on the button|","type":"templates"},{"title":"perch:label","permalink":"https://docs.grabaperch.com/templates/form/label/","id":"templates.form.label","excerpt":"The template tag `perch:label` is used to create a label element in a form that related to an input field.","text":"The template tag `perch:label` is used to create a label element in a form that related to an input field.\n\nThe below example creates a label for the form field that has an id of “message”.\n\n```html\n<perch:label for=\"message\">Message</perch:label>\n```\n\n### Attributes\n\n|Attribute|Description|\n|-|-|\n|for|Required: ID of a perch:input tag this label relates to|","type":"templates"},{"title":"perch:success","permalink":"https://docs.grabaperch.com/templates/form/success/","id":"templates.form.success","excerpt":"You can display a success message using the `perch:success` tag. Inside these tags can be any text, mark-up and also perch:content tags. So you can enable the administrator to update the success text.","text":"You can display a success message using the `perch:success` tag. Inside these tags can be any text, mark-up and also perch:content tags. So you can enable the administrator to update the success text.\n\nThis content will be shown when the form validates. It must be nested inside `perch:form` tags. If the success message is displayed then the rest of the form will not be displayed, unless the `show-form` attribute is set (see below).\n\n```html\n<perch:success>\n  <perch:content id=\"thankyou\" label=\"Success message\" type=\"textarea\" textile editor=\"markitup\">\n</perch:success>\n```\n\n## Showing the success message *and* the form\n\nYou can redisplay the form along with the success message by setting `show-form=\"true\"` on the `perch:success` tag. This is useful for things like edit forms.\n\n```html\n<perch:success show-form=\"true\"> ... </perch:success>\n```","type":"templates"},{"title":"Perch Form Template Tag perch:input type checkbox","permalink":"https://docs.grabaperch.com/templates/form/input/checkbox/","id":"templates.form.input.checkbox","excerpt":"Creates a checkbox field. The value set will become the checked value of the checkbox.","text":"Creates a checkbox field. The value set will become the checked value of the checkbox.\n\n```html\n<perch:input type=\"checkbox\" id=\"discount\" value=\"true\">\n```","type":"templates"},{"title":"Perch Form Template Tag perch:input type cms","permalink":"https://docs.grabaperch.com/templates/form/input/cms/","id":"templates.form.input.cms","excerpt":"When using a `type=\"submit\"` submit button, Perch also adds a hidden field to the form. This hidden field carries the information needed for Perch to be able to accurately handle the form submission.","text":"When using a `type=\"submit\"` submit button, Perch also adds a hidden field to the form. This hidden field carries the information needed for Perch to be able to accurately handle the form submission.\n\nIf your form uses some other method for submitted (e.g. a custom submit button) this hidden field isn’t added and your form won’t work.\n\nTo help, you can use a `type=\"cms\"` field to add the hidden field yourself.\n\n```html\n<perch:input type=\"cms\">\n```","type":"templates"},{"title":"Perch Form Template Tag perch:input type color","permalink":"https://docs.grabaperch.com/templates/form/input/color/","id":"templates.form.input.color","excerpt":"This input type will accept a hex color – for example `FFFFFF`.","text":"This input type will accept a hex color – for example `#FFFFFF`.\n\nBrowsers that support this fieldtype implement a colour picker widget, in all others it falls back to a text field. You could use a JavaScript widget in browsers that do not have support.\n\n```html\n<perch:input type=\"color\" id=\"favcolor\" required>\n```","type":"templates"},{"title":"Perch Form Template Tag perch:input type date","permalink":"https://docs.grabaperch.com/templates/form/input/date/","id":"templates.form.input.date","excerpt":"Using `type=“date”` will create a field that requires a date in format `YYYY-MM-DD`.","text":"Using `type=“date”` will create a field that requires a date in format `YYYY-MM-DD`.\n\nSome browsers have implemented a widget for this fieldtype, if not it falls back to text. It could be used along with a JavaScript datepicker in the absence of browser widgets.\n\n```html\n<perch:input type=\"date\" id=\"arrivaldate\" required>\n```","type":"templates"},{"title":"Perch Form Template Tag perch:input type datetime","permalink":"https://docs.grabaperch.com/templates/form/input/datetime/","id":"templates.form.input.datetime","excerpt":"Using `type=\"datetime\"` creates a field that accepts date and time `YYYY-MM-DD HH:MM` (optionally `:SS` too)","text":"Using `type=\"datetime\"` creates a field that accepts date and time `YYYY-MM-DD HH:MM` (optionally `:SS` too)\n\n```html\n<perch:input type=\"datetime\" id=\"start\" required>\n```","type":"templates"},{"title":"Perch Form Template Tag perch:input type email","permalink":"https://docs.grabaperch.com/templates/form/input/email/","id":"templates.form.input.email","excerpt":"Using `type=“email”` in a perch:input tag will create an email entry field if you are using HTML5 in Perch.","text":"Using `type=“email”` in a perch:input tag will create an email entry field if you are using HTML5 in Perch.\n\nPerch will validate this field to check that it is an email address. In browsers that support HTML5 validation for email you will also get a clientside validation if the user enters something other than an email address. In browsers that do not support the HTML5 fields yet, the field falls back to behaving as a standard text field and Perch will catch the error.\n\n```html\n<perch:input id=\"email\" type=\"email\" required label=\"Email address\">\n```","type":"templates"},{"title":"Perch Form Template Tag perch:input type file","permalink":"https://docs.grabaperch.com/templates/form/input/file/","id":"templates.form.input.file","excerpt":"This will create a file upload field that accepts file formats. The allowed formats are defined in the file `/perch/config/filetypes.ini`","text":"This will create a file upload field that accepts file formats. The allowed formats are defined in the file `/perch/config/filetypes.ini`\n\nWhen using `type=\"file\"` you should also use the attribute `accept` with a string of mime type groups from `filetypes.ini` that are acceptable to be uploaded.\n\n```html\n<perch:input type=\"file\" id=\"cv\" accept=\"pdf doc\">\n```\n\nRemember if using file inputs with the Forms app, you need to configure a file upload location within the form options.","type":"templates"},{"title":"Perch Form Template Tag perch:input type hidden","permalink":"https://docs.grabaperch.com/templates/form/input/hidden/","id":"templates.form.input.hidden","excerpt":"This creates a hidden field in your form.","text":"This creates a hidden field in your form.\n\n```html\n<perch:input type=\"hidden\" id=\"ref\" value=\"1234\">\n```","type":"templates"},{"title":"Perch Form Template Tag perch:input type image","permalink":"https://docs.grabaperch.com/templates/form/input/image/","id":"templates.form.input.image","excerpt":"This will create a file upload field that accepts image formats. The allowed formats are defined in the file `/perch/config/filetypes.ini`.","text":"This will create a file upload field that accepts image formats. The allowed formats are defined in the file `/perch/config/filetypes.ini`.\n\n```html\n<perch:input type=\"image\" id=\"avatar\">\n```\n\nRemember if using image inputs with the Forms app, you need to configure a file upload location within the form options.","type":"templates"},{"title":"Perch Form Template Tag perch:input type month","permalink":"https://docs.grabaperch.com/templates/form/input/month/","id":"templates.form.input.month","excerpt":"Using `type=\"month\"` creates a field that accepts a year and a month in the format `YYYY-MM`","text":"Using `type=\"month\"` creates a field that accepts a year and a month in the format `YYYY-MM`\n\n```html\n<perch:input type=\"month\" id=\"month\" required>\n```","type":"templates"},{"title":"Perch Form Template Tag perch:input type number","permalink":"https://docs.grabaperch.com/templates/form/input/number/","id":"templates.form.input.number","excerpt":"If using HTML5 this will display the HTML5 widget for number falling back to text in unsupporting browsers.","text":"If using HTML5 this will display the HTML5 widget for number falling back to text in unsupporting browsers.\n\nThere are additional attributes to set for the validation.\n\n## Additional attributes for perch:input when using number\n\n|Attribute|Description|\n|-|-|\n|min|Number. Minimum value allowed|\n|max|Number. Maximum value allowed|\n|step|increments. e.g. if step=\"2\" and min=\"1\" only odd numbers will validate|\n\n```html\n<perch:input type=\"number\" id=\"age\" min=\"5\" max=\"18\" step=\"1\">\n```","type":"templates"},{"title":"Perch Form Template Tag perch:input type radio","permalink":"https://docs.grabaperch.com/templates/form/input/radio/","id":"templates.form.input.radio","excerpt":"Creates a set of radio buttons.","text":"Creates a set of radio buttons.\n\n## Options\n\nIf using type=“radio” you also need an options attribute with a value which is a string of options. For example:\n\n```html\noptions=\"Small|small, Medium|medium, Large|large\"\n```\n\nOptions are comma delimited, and each option can have the displayed label for the option and the value of the form field delimited by a pipe character.\n\n## Wrap\n\nYou may also want to wrap each input/label pair with some html to enable you to style it for your site. You can do this using the wrap attribute.\n\n`wrap=\"div.radiowrapper\"` would create\n`<div class=\"radiowrapper\"> ... </div>` around each pair.\n\n```html\n<perch:input id=\"neol_davies\" type=\"radio\" options=\"red,blue,green\" wrap=\"div.radiowrapper\">\n```","type":"templates"},{"title":"Perch Form Template Tag perch:input type range","permalink":"https://docs.grabaperch.com/templates/form/input/range/","id":"templates.form.input.range","excerpt":"If using HTML5 this will display the HTML5 widget for range falling back to text in unsupporting browsers.","text":"If using HTML5 this will display the HTML5 widget for range falling back to text in unsupporting browsers.\n\nThere are additional attributes to set for the validation.\n\n### Additional attributes for perch:input when using range\n\n|Attribute|Description|\n|-|-|\n|min|Number. Minimum value allowed|\n|max|Number. Maximum value allowed|\n|step|increments. e.g. if step=\"2\" and min=\"1\" only odd numbers will validate|\n\n```html\n<perch:input type=\"range\" id=\"pricerange\" min=\"300\" max=\"10000\" step=\"100\">\n```","type":"templates"},{"title":"Perch Form Template Tag perch:input type select","permalink":"https://docs.grabaperch.com/templates/form/input/select/","id":"templates.form.input.select","excerpt":"Creates a select list.","text":"Creates a select list.\n\nIf using `type=\"select\"` you also need an options attribute with a value which is a string of options. For example:\n\n```html\noptions=\"Small|small, Medium|medium, Large|large\"\n```\n\nOptions are comma delimited, and each option can have the displayed label for the option and the value of the form field delimited by a pipe character.\n\nA simple select list using the same value for the value and label of the option:\n\n```html\n<perch:input type=\"select\" options=\"red,green,blue\" id=\"colours\">\n```\n\nA more complex options list, in the below example the text before the |\ncharacter will be displayed on the page as the text for that option, the text after the | character is the value that is submitted with the form.\n\n```html\n<perch:input type=\"select\" options=\"Small|s,Medium|m,Large|l\" id=\"sizes\">\n```\n\nIf the `options` attribute needs to contain a comma, you can escape it with a backslash:\n\n```html\n<perch:input type=\"select\" options=\"Zippy\\, George and Bungle, Rod\\, Jane and Freddy\" id=\"characters\">\n```","type":"templates"},{"title":"Perch Form Template Tag perch:input type text","permalink":"https://docs.grabaperch.com/templates/form/input/text/","id":"templates.form.input.text","excerpt":"To create a regular text input field in your form use type=“text” in your Perch input type. This will be validated as a string by Perch, if you need this to be a required field you should also set the required attribute to true.","text":"To create a regular text input field in your form use type=“text” in your Perch input type. This will be validated as a string by Perch, if you need this to be a required field you should also set the required attribute to true.\n\n```html \n<perch:input id=\"firstname\" type=\"text\" required label=\"First name\">\n```","type":"templates"},{"title":"Perch Form Template Tag perch:input type submit","permalink":"https://docs.grabaperch.com/templates/form/input/submit/","id":"templates.form.input.submit","excerpt":"**Required when using Perch Form** unless using [type=\"cms\"](/templates/form/input/cms).","text":"**Required when using Perch Form** unless using [type=\"cms\"](/templates/form/input/cms).\n\nThis creates a submit button. You must have a field of `type=\"submit\"` in your form.\n\nThe value of this field becomes the text displayed on the button.\n\n```html\n<perch:input type=\"submit\" id=\"submit\" value=\"Send message\">\n```","type":"templates"},{"title":"Perch Form Template Tag perch:input type textarea","permalink":"https://docs.grabaperch.com/templates/form/input/textarea/","id":"templates.form.input.textarea","excerpt":"Using input `type=\"textarea\"` creates a textarea field.","text":"Using input `type=\"textarea\"` creates a textarea field.\n\n```html\n<perch:input type=\"textarea\" id=\"message\" required>\n```\n\n### Additional attributes for perch:input when using textarea\n\n|Attribute|Description|\n|-|-|\n|rows|The value to set for the HTML rows attribute.|\n|cols|The value to set for the HTML cols attribute.|","type":"templates"},{"title":"Perch Form Template Tag perch:input type week","permalink":"https://docs.grabaperch.com/templates/form/input/week/","id":"templates.form.input.week","excerpt":"This accepts a year and a week number – YYYY-WNN.","text":"This accepts a year and a week number – YYYY-WNN.\n\nFor example 2012-W23.\n\n```html\n<perch:input type=\"week\" id=\"selectedweek\" required>\n```","type":"templates"},{"title":"Perch Form Template Tag perch:input type url","permalink":"https://docs.grabaperch.com/templates/form/input/url/","id":"templates.form.input.url","excerpt":"Using `type=\"url\"` in a perch:input tag will create an url entry field if you are using HTML5 in Perch.","text":"Using `type=\"url\"` in a perch:input tag will create an url entry field if you are using HTML5 in Perch.\n\nPerch will validate this field to check that it contains a protocol such as http://. In browsers that support HTML5 validation for url you will also get a clientside validation if the user enters something other than something that has a protocol. In browsers that do not support the HTML5 fields yet, the field falls back to behaving as a standard text field and Perch will catch the error.\n\n```html\n<perch:input id=\"website\" type=\"url\" required label=\"Website\">\n```","type":"templates"},{"title":"Apps","permalink":"https://docs.grabaperch.com/api/apps/","id":"api.apps","excerpt":"When it comes to adding more serious functionality to Perch, you need an app. Apps can be anything from just a couple of quick files to listen for events (see below) to full scale applications built on Perch, such as Perch Shop. They can add pages the control panel, add runtime functions to the page, define custom templates tags and more. They can be powerful and complex, or almost nothing at all. If you want to hook your own code into Perch, an app is usally the route to do it.","text":"When it comes to adding more serious functionality to Perch, you need an app. Apps can be anything from just a couple of quick files to listen for events (see below) to full scale applications built on Perch, such as Perch Shop. They can add pages the control panel, add runtime functions to the page, define custom templates tags and more. They can be powerful and complex, or almost nothing at all. If you want to hook your own code into Perch, an app is usally the route to do it.\n\n## App structure\n\nAn app is a folder inside the `perch/addons/apps` folder. Perch scans the file system for these folders and key files within them.\n\n|File|Purpose|\n|-|-|\n|admin.php|Registers and configures the app|\n|runtime.php|Provides page functions to your site pages|\n|scheduled_tasks.php|Registers tasks with the task scheduler|\n|help.php|Provides help text for the control panel Help page|\n|dashboard.php|Builds and renders dashboard widgets|\n\nBy convention, you'll often see some other common files\n\n|File|Purpose|\n|-|-|\n|index.php|The control panel entry point into your app|\n|activate.php|Creates database tables, privileges and setting defaults|\n|fieldtypes.php|Defines any field types used by the app|\n|events.php|Registers event listeners used by the app|\n\nTo get started building an app, create your folder inside the `perch/addons/apps` folder, and add an `admin.php` file. Then head over to [registering an app](/api/apps/registering) to find out how to register your app with the CMS.\n\n## Sample app\n\nThe best place to get started is to download our sample app and start hacking.\n\nThe sample app is called My Sample, with the app ID `my_sample`. That’s an app called Sample from a developer called My.\n\n[Download sample app](https://static.grabaperch.com/docs/api/my_sample_v2.1.zip)\n\n## Naming conventions \n\nIt’s important to think carefully how you name your app, to avoid clashes with other developers.\n\nYou should choose a developer prefix which will help your code carve out its own namespace. If you plan to develop multiple apps, this also will begin to act as a brand that users recognize, so choose wisely.\n\nOfficial Perch apps are prefixed with Perch. Our apps have IDs like `perch_pages` and `perch_events`. The sample app uses the prefix my_. You should pick your own prefix, even if you don’t intend to share your app – it will help avoid conflicts with any other developer’s apps that you might wish to use.\n\n### Folder name / App ID\n\nYour app lives in a folder within perch/apps. You should name the folder for your app with your chosen developer prefix, followed by an underscore, followed by a short name for your app, all in lower case.\n\nSo if My Company Inc chose to use the prefix myco and were to build a blog app, they would name the folder `myco_blog`. This becomes the app ID.\n\n### Classes\n\nAs Perch 2 supports PHP 5.3 and up, that includes versions before namespacing. Therefore we have to use slightly more long-winded class names to keep them unique.\n\nThe app myco\\_blog would prefix class names with `MycoBlog_`. So the class name for the Posts class would be `MycoBlog_Posts`\n\n### Page functions\n\nIf an app exposes functions to the page (via runtime.php) these should also be prefixed with the app ID. A function to get posts from the `myco_blog` app would be called `myco_blog_posts()`.\n\n### Database tables\n\nPrefix your database table names with your app ID. But wait, there’s more! The user also has a configured database table prefix value via the `PERCH_DB_PREFIX` constant. So you’ll need that too, first. More on `PERCH_DB_PREFIX` later.\n\nThe myco_blog app would call its blog posts table `myco_blog_posts`, prefixed with `PERCH_DB_PREFIX`. So with the default configuration, the resulting table name would be `perch_myco_blog_posts`.\n\n(Official apps cheat and drop the developer prefix i.e. perch_events instead of perch_perch_events – you can see why. Don’t hate us, but more importantly don’t copy us.)\n\nAs many Perch developers move between Windows and Unix environments when deploying their sites ensure all table names only use lowercase characters, as Windows lowercases table names on export.","type":"api"},{"title":"UI Customisations","permalink":"https://docs.grabaperch.com/api/custom-ui/","id":"api.custom-ui","excerpt":"The Perch control panel interface can be customised with your own CSS and JavaScript. This is useful if you want to make small tweaks to the way something behaves, or just to customise things to suit your client or project.","text":"The Perch control panel interface can be customised with your own CSS and JavaScript. This is useful if you want to make small tweaks to the way something behaves, or just to customise things to suit your client or project.\n\n## How to use\n\nUI customisations are made by placing your files in the `perch/addons/plugins/ui` folder. Depending on your installation, this folder may or may not exist. You can create it if it's not there.\n\nThis folder includes a special file `_config.inc`. This file gets included at the bottom of all Perch control panel pages, at a point where all existing JavaScript and CSS has already been applied. The jQuery JavaScript library is available.\n\nEdit the `_config.inc` file to add a link to your own files.\n\n```markup\n<link rel=\"stylesheet\" href=\"/perch/addons/plugins/ui/my_css_file.css\">\n<script src=\"/perch/addons/plugins/ui/my_javascript_file.js\"></script>\n```\n\nThis really just provides a mechanism to hook your own files into the interface without needing to edit any core Perch files. This means that your changes won’t need to be re-done each time you update Perch. However, be sure to test your changes after updating Perch in case anything that affects you has changed.\n\n(We appreciate that the end of the page is not the most super-ideal place to be adding new CSS files. If making big changes where this could be an issue, it may be betting to look at implementing your code with an app instead.)","type":"api"},{"title":"Authentication plugins","permalink":"https://docs.grabaperch.com/api/auth/","id":"api.auth","excerpt":"When you need to manage your user accounts in an external system, authentication plugins enable you to do just that.","text":"When you need to manage your user accounts in an external system, authentication plugins enable you to do just that.\n\n## How to use\n\nAn authentication plugin is a class that implements key methods such as `log_user_in` and `log_user_out`. It extends the `PerchAPI_AuthPlugin` class, and should be created in the `addons/plugins/auth` folder:\n\n```unix\n/perch/addons/plugins/auth/my_system/auth.php\n```\n\nIn your `perch/config.php` file, set:\n\n```unix\ndefine('PERCH_AUTH_PLUGIN', 'my_system');\n```\n\n## The plugin class\n\nAt a minimum, the plugin class should implement the `log_user_in`, `log_user_out` and `resume_session` methods.\n\nBoth `log_user_in` and `resume_session` should return an array with the user's email address (as an identifier) and the slug of the Perch user role that the user should be assigned.\n\n```php\nclass my_system_auth_plugin extends PerchAPI_AuthPlugin\n{\n    public function log_user_in($username, $password)\n    {\n        //make request to check username and password\n        return [\n            'email' => 'admin@example.com',\n            'role'  => 'admin',\n        ];\n    }\n\n    public function resume_session()\n    {\n        //make request to check username and password\n        return [\n            'email' => 'admin@example.com',\n            'role'  => 'admin',\n        ];\n    }\n\n    public function log_user_out()\n    {\n        return true;\n    }\n}\n```","type":"api"},{"title":"Editor plugins","permalink":"https://docs.grabaperch.com/api/editors/","id":"api.editors","excerpt":"Perch content editing forms can be extended using [field types](../feildtypes), offering a lot of flexibility over how content is structured at collected from the user. The existing `textarea` field type can be enhanced to use any number of WYSIWYG editors should you require.","text":"Perch content editing forms can be extended using [field types](../feildtypes), offering a lot of flexibility over how content is structured at collected from the user. The existing `textarea` field type can be enhanced to use any number of WYSIWYG editors should you require.\n\nJust about any WYSIWYG editor that progressively enhances (or can be made to progressively enhance) a basic HTML textarea can be used with Perch. To make things simple, a few popular editors are pre-packaged for easy installation.\n\n## Installing an existing editor plugin\n\nThe currently available editors can be found in the [add-ons](https://addons.perchcms.com/) section of the Perch website.\n\nTo install, unzip the folder and place the plugin into the `perch/addons/plugins/editors` folder. If you were installing the CKEditor plugin, for example, this would go into your site at:\n\n```unix\nperch/addons/plugins/editors/ckeditor\n```\n\nYou then use the plugin in the same way that the default markitup editor is used, by adding it to a template tag that has ty[e=\"textarea\"`. \n\nFor example, if I had installed and wanted to use TinyMCE I would use the following in my template.\n\n```markup\n<perch:content id=\"text\" type=\"textarea\" label=\"Text\" editor=\"tinymce\" html>\n```\n\nAs most editors create HTML you need to set `html` on your region in addition to adding the editor attribute.\n\n**Note**: If you are converting a default Perch template that uses the MarkItUp editor to use any of the other editor plugins – Redactor, TinyMCE or CKEditor you need to remove `markdown=“true”` from the tag and replace it with `html=“true”`.\n\nIf you are not sure how to edit Perch Templates then first watch the video on [Creating Templates](/video/creating-templates/)\n\n## Building a custom editor\n\nIf the editor you wish to use isn’t pre-packaged on our site, it should still be quite easy to install. Place your editor’s files in a folder within `perch/addons/plugins/editors`, for example,\n\n```unix\nperch/addons/plugins/editors/myeditor\n```\n\nWhen you specify `editor=\"myeditor\"` on a template tag, Perch will do two things\n\n1.  Add a class of `myeditor` to the `textarea` field in the edit form\n2.  Find the special file\n    `perch/addons/plugins/editors/myeditor/_config.json` and include any JS and CSS files specified in the page.\n\nThe `_config.json` file should use the following format:\n\n```javascript\n{\n  \"js\": [\n    \"PERCH_LOGINPATH/core/editors/myeditor/jquery.myeditor.js\",\n    \"PERCH_LOGINPATH/core/editors/myeditor/config.js\"\n  ],\n  \"css\": [\n    \"PERCH_LOGINPATH/core/editors/myeditor/css/myeditor.min.css\"\n  ]\n}\n```\n\nWithin `_config.json` you can use the special string `PERCH_LOGINPATH` as a placeholder to the path to the user’s Perch installation. This will be replaced with the real path as the file is output. This helps to make your plugin portable between installations.\n\nOne of the JavaScript files you include will be the code to bootstrap your editor. You should initialise your editor when the window loads, and also listen for the custom event `Perch_Init_Editors` on the `window` object. When this event is fired, you should initialise any new, uninitialised editors. It is called when a new block or repeater item is added.\n\nA typical bootstrapping JS file might look like this:\n\n```javascript\nvar set_up_my_editor = function(){\n  $('textarea.myeditor:not([data-init])').attr('data-init', true).myeditor();\n}\n\n$(window).on('Perch_Init_Editors', function(){\n  set_up_my_editor();\n});\n\nset_up_my_editor();\n```\n\nThe function is looking for any `textarea` with a class of `myeditor` that does not have the custom `data-init` attribute set. It then sets that attribute and initialises the editor for that textarea. The custom attribute is used as a flag to prevent the same textarea being initialised more than once.\n\nPerch uses the jQuery library on its pages, so if your editor has a jQuery adaptor or implementation, that’s the best version to use.\n\n## Editor configuration sets\n\nYou can pass configuration options from the template to the editor using the `editor-config` attribute on your template tag. The value of this attribute is substituted for the string `PERCH_EDITOR_CONFIG` in your `_config.inc` file.\n\n```markup\n<perch:content id=\"desc\" type=\"textarea\" editor=\"myeditor\" editor-config=\"headings links\">\n```\n\nIt's then up to your plugin code to parse the string and use it however you see fit to configure your plugin.\n\n*Note:* currently, as the configuration file is only include once per form, there is a limitation of the `editor-config` applying once. It's not possible to mix multiple editors with different configurations within the same form. You should probably think carefully about using multiple WYSIWYG  editors per form anyway, as they can be quite heavy.\n\n## Custom configurations for default editors\n\nPerch ships with three in-built editors: MarkItUp, SimpleMDE and Redactor. These are configured in a way that hooks them in with functionality provided by Perch such as Assets. You can, however, specify your own configuration. This is useful for adding additional toolbar plugins and so on.\n\nTo get started, enable custom configurations in your config file:\n\n```php\ndefine('PERCH_CUSTOM_EDITOR_CONFIGS', true);\n```\n\nWhen the editor is loaded, Perch looks for the file `addons/plugins/editors/config.js` and loads it.\n\nThis is an example for adding the `source` and `fontcolor` plugins for Redactor:\n\n```javascript\nPerch.UserConfig.redactor = function(){\n\n  var get = function(profile, config, field) {\n\n    if (config.plugins.indexOf('source') === -1) config.plugins.push('source');\n    if (config.plugins.indexOf('fontcolor') === -1) config.plugins.push('fontcolor');\n    \n    return config;\n  };\n\n  var load = function(cb) {\n    if (typeof jQuery.Redactor.prototype.source == 'undefined') {\n      jQuery.getScript(Perch.path+'/addons/plugins/editors/redactor-plugins/fontcolor.js', function(){\n        jQuery.getScript(Perch.path+'/addons/plugins/editors/redactor-plugins/source.js', cb);    \n      }); \n      \n    } else {\n      cb();\n    }\n  };\n\n  return  {\n    'get': get,\n    'load': load\n  }\n\n}();\n```\n\nYour code needs to define the `Perch.UserConfig.editorname` property as an object with two methods: `get()` and `load()`.\n\n### The `get()` method\n\nThe purpose of this method is to return the configuration object that is used to instanciate the editor. Three arguments are passed in: \n\n- `profile` is the value of the `editor-config` attribute on the field\n- `config` is the default configuration to reference or modify\n- `field` is the input field\n\nThe method should return a config object in whatever format the editor needs. It can do this by modifying the one given, or by creating its own. In either case, be sure to return your new config.\n\n### The `load()` method\n\nThe purpose of this method is to load in any files you need to support your configuration. In the case of a Redactor plugin, this method is loading in the plugin source file.\n\nIt takes one argument, a callback function, which you _must_ execute once your loading has completed.\n\nIf you don't have any files to load, just execute the callback and you're done.","type":"api"},{"title":"Event hooks","permalink":"https://docs.grabaperch.com/api/events/","id":"api.events","excerpt":"Perch uses a publisher/subscriber model of custom events to enable loose interaction between add-ons without each needing to know about the other. The control panel fires events as the system is used and is content updated. Your code can listen for these events and react to them. For example, you can listen for the `page.published` event and run some custom code (like clearing a cache) when a page is published. All without the page publishing code needing to know anything about your add-on.","text":"Perch uses a publisher/subscriber model of custom events to enable loose interaction between add-ons without each needing to know about the other. The control panel fires events as the system is used and is content updated. Your code can listen for these events and react to them. For example, you can listen for the `page.published` event and run some custom code (like clearing a cache) when a page is published. All without the page publishing code needing to know anything about your add-on.\n\nYou can also fire your own custom events for either your own code, or other people's code to be able to listen for. The Perch Shop app fires an event when an order is placed - you can write code to listen for that event and do something else accordingly.\n\n### Listening for an event\n\nThere are broadly two types of events. Control panel events are fired when something happens as a result of the user editing content and generally using the Perch control panel. Runtime events happen as a result of a visitor doing something on your site (such as buying a product in your store).\n\nBoth types take the same approach, but are just declared in different places.\n\nRegister your content panel event listeners in your app's `admin.php` file. Runtime events should go in your app's `runtime.php` file.\n\n```php\n$API = new PerchAPI(1.0, 'my_app');\n\n$API->on('region.publish', function(PerchSystemEvent $Event){\n\t// A region has been published!\n});\n```\n\nThe callback function is passed a `PerchSystemEvent` object containing the details of the event. In the above example, where the event is assigned as `$Event`, the following properties are available:\n\n|Property|Description|\n|-|-|\n|event |the name of the event called (`region.publish` in this example)|\n|subject |the item the event was called on. This will usually be an object such as a Region or a Page, depending on the event. The subject can be interrogated for details.|\n|args |an array of any subsequent arguments passed to the event|\n|user |a User object representing the logged in user (control panel events only)|\n\nYou can also listen for a special wildcard event name `'*'` which will be called for all events. Can be useful for logging, but be very careful as this code will be called very frequently.\n\n```php\n$API->on('*', function(PerchSystemEvent $Event){\n    // An event has been fired\n    // It was: $Event->event\n});\n```\n\n### Firing an event\n\nYou should only fire your own events, never someone else's.\n\n```php\n$API->event('my_app.did_something', $this);\n```\n\nThe `event()` method takes a variable number of arguments:\n\n1. Event name (_required_) see naming requirements below\n2. The subject of the event, e.g. `$this` from within a class\n3. Any number of additional arguments, which will be available as `PerchSystemEvent::$args`\n\n### Naming your event\n\n* Event names should contain only letters, numbers, underscores and dots.\n* Prefix the event name with the name of your app, followed by a dot \n* Use an active verb in preference to a past tense verb where possible, e.g. *post_create* not *post_created* (like a mouse event - *onclick* not *onclicked*)\n* Use underscores to separate words, and dots to create heirarchy\n* The entire event name must be max 64 chars\n\n**Examples:** \n\n```php\nmy_app.product.update\nmy_app.product.stock_level.reduce\nmy_app.feed.create\nmy_app.user.avatar.delete\n```","type":"api"},{"title":"Bucket handlers","permalink":"https://docs.grabaperch.com/api/buckets/","id":"api.buckets","excerpt":"Uploaded assets are stored in resource buckets, which are managed through the user's bucket list. Perch has support for buckets on the local file system, whereas Perch Runway adds support for buckets on Dropbox, Amazon S3, CloudFiles and so on. You can add support for alternative backends using a bucket handler.","text":"Uploaded assets are stored in resource buckets, which are managed through the user's bucket list. Perch has support for buckets on the local file system, whereas Perch Runway adds support for buckets on Dropbox, Amazon S3, CloudFiles and so on. You can add support for alternative backends using a bucket handler.\n\n## When to use\n\nYou would use a bucket handler when you wanted Runway to be able to store resources (assets, backups and so on) on a different type of storage backend. Runway can write to the local or network file system, and includes handlers for Dropbox, Cloudfiles and Amazon S3. If you wanted to add a new service, you'd need a bucket handler.\n\n## How to use\n\nInterally, Runway uses [PHP streams](http://php.net/manual/en/book.stream.php) to read and write to a wide variety of file systems. If the service you need to integrate with already has PHP stream wrappers available, then the process of making it available in Runway should be very simple. If stream wrappers aren't available, you may have to write one yourself, which isn't hard and is quite interesting.\n\nThere are a couple of steps to using a different bucket handler. The first is to add a bucket to your `config/buckets.php` file with your handler specifed as the `type`. The second is to define the handler with the `config/runway.php` file.\n\nFor this example, let's take an imaginary cloud storage service called CloudSquirrel. In the `config/runway.php` file, we'd add a definition for our template handler:\n\n```php\n'cloudsquirrel' => [\n\t'access_token' => 'abc123squirrel',\n\t'handler'      => 'CloudSquirrel_ResourceBucket',\n\t'handler_path' => PERCH_PATH.'/addons/apps/my_cloudsquirrel/CloudSquirrel_ResourceBucket.class.php',\n]\n```\n\nThis sets an access token, the name of the handler class, and the path to the handler on the file system. You can set any setting or credientials that are needed here and that vary from site to site.\n\n## The Resource Bucket class\n\nYou then need to add your class with the name and location specified in the configuration. The class needs to extend `PerchResourceBucket`.\n\nThe job of the resource bucket class is to represent a single instance of a resource bucket. When it is instantiated, it is passed the configuration details from the `buckets.php` file for the bucket it is supposed to represent.\n\nIf the service you're integrating with alreadt has a PHP SDK that includes stream wrappers, your class just needs to act as the glue to make sure the stream wrapper is configured and registered. This is best done in the contructor.\n\n```php\nclass CloudSquirrel_ResourceBucket extends PerchResourceBucket\n{\n\tpublic function __construct($details)\n\t{\n\t\tparent::__construct($details);\n\n\t\t// Get the config from the runway.php file\n\t\t$config = PerchConfig::get('cloudsquirrel');\n\n\t\t// Initialise the SDK you're using - this is pseudo code:\n\t\t$client = new CloudSquirrelSDK($config['access_token']);\n\t\t$client->register_stream_wrappers();\n\n\n\t\t// Update the file path for the bucket to use the right stream protocol\n\t\t$this->file_path = 'cloudsquirrel://'.$details['file_path'];\n\t}\n\n\tpublic function ready_to_write()\n\t{\n\t\treturn true;\n\t}\n}\n```\n\nThe `ready_to_write()` method can be implemented, but for remote file systems may involve too much overheader. We've found it's better to pretend to always be ready, and then let the error handling at the next stage deal with any issues.\n\nThe `PerchResourceBucket` class has lots of other methods for reading and writing files which you could overwrite in your class if necessary. However, the beauty of the stream wrapper system means that you shouldn't need to do so. It should all just work!","type":"api"},{"title":"Dashboard Widgets","permalink":"https://docs.grabaperch.com/api/dashboard/","id":"api.dashboard","excerpt":"Perch users have the option to switch on the Dashboard. This is an optional home screen when logging into Perch rather than seeing a list of pages.","text":"Perch users have the option to switch on the Dashboard. This is an optional home screen when logging into Perch rather than seeing a list of pages.\n\nApps can create a dashboard widget to display useful information or quick access into the app. It is also possible to create a Dashboard widget app that has no other screens.\n\nTo enable a Dashboard Widget in your app you need to place a minimum of 2 files directly inside your app folder.\n\n## How do I create a Dashboard Widget?\n\nWidgets can be created as part of an app, as with our official Perch Apps. However you can also create a standalone widget, that can contain anything from some simple HTML to more complex PHP. This solution shows you how to enable a very simple Widget of your own. All this Widget will do is output some HTML, and I’m going to use it to display my upcoming conferences by dropping in my Lanyrd JavaScript badge.\n\nYou should be running Perch version 2.8 or newer to follow this tutorial.\n\n## Create the files\n\nDashboard Widgets are really a Perch app. So you will need to create a folder in `perch/addons/apps` to store your widget. I would suggest following the naming conventions used for apps, which is `prefix_appname`. Our official apps are all `perch_appname`. This one is just for me so I’ll name it `rachel_lanyrd`.\n\nInside your folder you need two files. If you [download the files for this tutorial](https://static.grabaperch.com/docs/api/download-create-a-dashboard-widget.zip) you will see that I have created two starting point files for you. These are the minimum requirements for creating a Dashboard Widget and should be placed inside your folder.\n\n|File|Description|\n|-|-|\n|dashboard.php|The display code for your dashboard widget|\n|admin.php|Registers and activates the dashboard widget|\n\n### dashboard.php\n\nThis file contains the minimum mark-up required to enable an app. You should maintain this HTML as it ensures your Widget will work with the others on the Dashboard.\n\nUpdate the string “Title of your Widget” to whatever title you would like to display at the top of your panel on the Dashboard.\n\n```html\n    <div class=\"widget\">\n      <h2>\n      <?php echo $Lang->get('Title of your widget'); ?>\n      </h2>\n      <div class=\"bd\">\n\t      <p>Your content goes here.</p>\n      </div>\n    </div>\n```\n\n### admin.php\n\nThis file registers an app, it tells the Perch admin that a new app is present. You need this even if your app is just a Dashboard Widget. The first function registers the app with Perch and the second sets which version of Perch you need to be running to use this app.\n\n```php\n    <?php\n    if ($CurrentUser->logged_in()) {\n      $this->register_app('prefix_appname', 'App name', 1, 'App description', '1', false);\n      $this->require_version('prefix_appname', '2.0.8');\n    }\n    ?>\n```\n\nYou should update the parameters in the sample file to be correct for your Widget.\n\n* Your app ID (same as the folder your app is in)\n* A name/label for your app\n* The priority in which is should appear on the Perch tab bar\n* A brief description\n* A version number\n* Should the app show up in the admin menu – set to false for Widget only apps\n\nI have updated mine to look like the following:\n\n```php\n    <?php\n    if ($CurrentUser->logged_in()) {\n      $this->register_app('rachel_lanyrd', 'Lanyrd Conferences', 1, 'Panel to display my conferences', '1', false);\n      $this->require_version('rachel_lanyrd', '2.0.8');\n    }\n    ?>\n```\n\nSimply adding these two files to your folder and refreshing the Dashboard in Perch should make the new Widget show up – it just doesn’t have any content yet.\n\nI can now add some content. In this case all I am going to do is add the two lines of code that will display my Lanyrd badge. So my completed dashboard.php ends up looking like this:\n\n```html\n    <div class=\"widget\">\n      <h2>\n      <?php echo $Lang->get('My conferences'); ?>\n      </h2>\n      <div class=\"bd\">\n\t<div class=\"lanyrd-target-splat\"><a href=\"http://lanyrd.com/profile/rachelandrew/\"\n\t\tclass=\"lanyrd-splat lanyrd-type-speaking lanyrd-context-future\" rel=\"me\">\n        See my conferences on Lanyrd</a></div>\n\t      <script src=\"http://cdn.lanyrd.net/badges/person-v1.min.js\"></script>\n      </div>\n    </div>\n```\n\nThis is all you need to do to add a HTML-only Widget to your Dashboard. You could use these to display a message to your users, or include an iframe with content from elsewhere.\n\nBy using a little bit of PHP you can easily include other data from a feed or api – see the [official Widgets](https://grabaperch.com/add-ons/dashboard) for some examples.","type":"api"},{"title":"Feathers","permalink":"https://docs.grabaperch.com/api/feathers/","id":"api.feathers","excerpt":"Perch Feathers are a way to manage front-end assets such as CSS and JavaScript through Perch.","text":"Perch Feathers are a way to manage front-end assets such as CSS and JavaScript through Perch.\n\nA Feather is a folder placed into `perch/addons/feathers` that contains a runtime.php file that is just a PHP class. This class declares any functions available in your Feather. You can then add folders inside the folder for your feather to store any CSS, JavaScript or other assets. You can also include other PHP scripts as required.\n\nA simple Feather, that outputs a single CSS file, would have the following folder structure:\n\n```unix\nperch/myfeather/runtime.php\nperch/myfeather/css/styles.css\n```\n\nThe `runtime.php` would contain the following:\n\n```php\n<?php\nPerchSystem::register_feather('MyFeather');\n\nclass PerchFeather_MyFeather extends PerchFeather\n{\n  public function get_css($opts, $index, $count)\n    {   \n      return $this->_single_tag('link', array(\n        'rel'=>'stylesheet',\n        'href'=>$this->path.'/css/styles.css',\n        'type'=>'text/css'\n       ));\n      }\n}\n```\n\n## Functions within PerchFeather\n\nExtending PerchFeather gives you access to the following internal functions:\n\n-   _single_tag\n-   _link_tag\n-   _script_tag\n\nThese enable you to output accurate links to your CSS and JavaScript files to the page.","type":"api"},{"title":"Field Types","permalink":"https://docs.grabaperch.com/api/field-types/","id":"api.field-types","excerpt":"In Perch, every content template tag has a `type` attribute. This specifies which type of form field (or fields) are used to collect and process the data.","text":"In Perch, every content template tag has a `type` attribute. This specifies which type of form field (or fields) are used to collect and process the data.\n\nFrom text to textarea, checkbox to file, these all have different form controls and ways of handling the data. You can use the API to create your own field types.\n\n## Why create a Field Type?\n\nTake the map field type as an example. This goes beyond a basic form control. It asks for an address, and then uses the Google Maps geocoding API to turn it into a pin on a map. The map can then be zoomed and positioned to your needs. That’s just one example of how a field type can do a lot more than just collect some bare data and output it onto the page.\n\nPerch has several [core field types](/templates/field-types/) which are listed in the documentation, however these can also be created as an add-on, and this is a fairly simple way to introduce custom functionality to Perch and Runway.\n\nA field type is essentially just a PHP class. You must declare four main methods, then you are free to create whatever other functions you need for the custom functionality you are creating.\n\n## How do I create a Field Type?\n\nIn Perch, every content template tag has a `type` attribute. This specifies which type of field is used to collect and process the data. Creating a field type is a simple way to start extending Perch as all you need to create is one PHP class that defines the fields needed to collect the data and the code to process it. \n\nThe below example will show you how to create a simple field type that creates a list of the files you have uploaded to your Perch resources folder, enabling the editor to select one.\n\nYou can download a fully worked example below.\n\n[Filelist Field Type example](https://static.grabaperch.com/docs/api/download-create-a-field-type.zip)\n\nThe example field type has been commented to explain what the main elements of the field type do. \n\nTo use the field type open `perch/addons/fieldtypes` and put the folder `filelist` containing `filelist.class.php` into it. You can then use it like any other field type by specifying `type=\"filelist\"` on a template tag.\n\nAs explained in the [API reference for Field Type](/api/reference/fieldtype), the class has four main methods:\n\n|Method|Description|\n|-|-|\n|[render_inputs](/api/reference/fieldtype/render-inputs)| Renders the edit fields in the Perch control panel|\n|[get_raw](/api/reference/fieldtype/get-raw)|Reads in the form data when submitted and processes it|\n|[get_processed](/api/reference/fieldtype/get-processed)|Gets the data ready for templating|\n|[get_search_text](/api/reference/fieldtype/get-search-text)|Formats the field value for the search index so the content of this field can be searched|\n\nThe above methods are detailed in the [API reference for Field Type](/api/reference/fieldtype) and the example `filelist.class.php` is documented to show how they work in practice.\n\nThe example also has a function `_get_files()`, this function is to enable the functionality of the field type, it looks in the `perch/resources` folder and returns a list of all files (if a file extension has not been passed to it) or a list of just those files that have a particular extension.\n\nYou can add as many functions as you need in your class as long as you also have those that are required by Perch.\n\nYou will generally find that you can use the core field types that ship with Perch, or the example from this page and then start to tweak it for your own purposes.","type":"api"},{"title":"API Reference","permalink":"https://docs.grabaperch.com/api/reference/","id":"api.reference","excerpt":"|Class|Purpose|\n|-|-|\n|[PerchAPI](/api/reference/perchapi)|Root object for a new API instance.|\n|[HTML](/api/reference/html)|HTML helper class for creating markup and UI elements|\n|[Lang](/api/reference/lang)|Language translations|\n|[Template](/api/reference/template)|Templating engine|\n|[XMLTag](/api/reference/xmltag)|Parse and generate XML tags|","text":"|Class|Purpose|\n|-|-|\n|[PerchAPI](/api/reference/perchapi)|Root object for a new API instance.|\n|[HTML](/api/reference/html)|HTML helper class for creating markup and UI elements|\n|[Lang](/api/reference/lang)|Language translations|\n|[Template](/api/reference/template)|Templating engine|\n|[XMLTag](/api/reference/xmltag)|Parse and generate XML tags|","type":"api"},{"title":"Template filters","permalink":"https://docs.grabaperch.com/api/template-filters/","id":"api.template-filters","excerpt":"Template functionality can be extended with the use of filters. A filter takes the value of a field and processes it in some way. Multiple filters can be applied to the same field, and they're processed in order.","text":"Template functionality can be extended with the use of filters. A filter takes the value of a field and processes it in some way. Multiple filters can be applied to the same field, and they're processed in order.\n\n```markup\n<perch:content id=\"heading\" type=\"text\" filter=\"reverse\">\n``` \n\nIn this example, the value of the heading field is passed to the \"reverse\" filter. The content will then be templated using the result from that filter.\n\n## Enabling template filters\n\nTo save unecessary disk acccess, template filters are not enabled by default. To enable them on a site, set the `PERCH_TEMPLATE_FILTERS` config option.\n\n```php\ndefine('PERCH_TEMPLATE_FILTERS', true);\n```\n\n## Installing a filter\n\nPerch looks for template filters in the `addons/templates/filters.php` file. Filters need to be either declared in this file, or declared elsewhere and included here.\n\n## Creating a filter\n\nA filter is a PHP class that extends the `PerchTemplateFilter` class. There are two methods you can define\n\n- `filterBeforeProcessing`\n- `filterAfterProcessing`\n\nThe _processing_ here refers to the processing that the template engine performs on the string. Examples would be the application of the `format` attribute. If your filter needs to hook in before that processing, you'd add your logic to `filterBeforeProcessing`. If it can happen after, use `filterAfterProcessing`. You can use both if needed.\n\nOur example `reverse` filter would declare a class named `PerchTemplateFilter_reverse` that extends `PerchTemplateFilter`.\n\n```php\nclass PerchTemplateFilter_reverse extends PerchTemplateFilter \n{\n\tpublic function filterAfterProcessing($value, $valueIsMarkup = false)\n\t{\n\t\treturn strrev($value);\n\t}\n}\n```\n\nBoth methods are passed the current value of the field, and a boolean to indicate if the incoming value is HTML markup. This can be the case for something like a WYSIWYG field.\n\n### Registering the filter\n\nOnce a filter has been declared, it can then be registered for use by the template engine. To register a filter, call `register_template_filter` passing in the name for your filter and the name of its class. \n\n```php\nPerchSystem::register_template_filter('reverse', 'PerchTemplateFilter_reverse');\n```\n\nThe filter cannot be used until it is registered.\n\n### Returning markup\n\nIf your filter processes the value in such a way that it then needs to be treated as markup you can indicate that by setting the `$returns_markup` class property to `true`.\n\n```php\nclass PerchTemplateFilter_htmlify extends PerchTemplateFilter \n{\n\tpublic $returns_markup = true;\n\n\t/* ... */\n}\n```\n\nPerch will then know to treat the return value as markup with respect to how it is encoded and passed to subsequent filters.\n\n### Accessing the template tag\n\nA filter has access to the template tag from which it was called. This makes it simple for a filter to make use of custom attributes on the tag, and to inspect existing attributes to modify its behaviour. The template tag is available as `$this->Tag`.\n\n```php\nif ($this->Tag->type == 'select') {\n\t/* ... */\n} \n```\n\n### Accessing content\n\nSimilarly, a filter has access to the other content fields from the same template. This is available as `$this->content`.\n\n```php\nif (isset($this->content['heading'])) {\n\t/* ... */\n}\n```","type":"api"},{"title":"Importing Content","permalink":"https://docs.grabaperch.com/api/import/","id":"api.import","excerpt":"Perch Runway provides a number of APIs for importing content directly into the system and into supporting add-ons. This can be useful when migrating content from a different system or reading content from a file.","text":"Perch Runway provides a number of APIs for importing content directly into the system and into supporting add-ons. This can be useful when migrating content from a different system or reading content from a file.\n\nWhen migrating content between two systems, it's often easier to get data _out_ of the old system than to import that data into the new. That's not surprising, as content management systems are designed for outputting content. Reading content back in from a myriad of different formats can be quite a task.\n\nThis is the task we found ourselves facing when design the Runway import functionality. What file format should we teach Runway to interpret, and how should we able users to map that incoming data to where it needs to go inside Runway? Our first thought was if we supported one common data format, a developer needing to import content could first write the code to get their data into that format, and then import their file.\n\nThe more we thought about it, the less sense that made. Why write code to move your data to a file, and then have Runway read that file back and have you go through some other process of mapping the data to the right places? Why not just write code to push the data directly into Runway via an API? That way, if you can get access to your content in a PHP context you can push it directly into Runway, and if you can't, you just need to write the code to get that content into a format that _can_ be read back in a PHP context. Best case scenario is simpler, and worst case scenario is no worse.\n\nFor that reason we have these importer APIs rather than a single file importer.\n\nYou can import the following types of content:\n\n## Page content\n\n- [Collections](/api/import/collections/)\n- [Assets](/api/import/assets/)\n- [Categories](/api/import/categories/)\n\n## Perch Shop \n\n- [Products](/api/import/shop/products/)\n- Brands\n- Countries\n- Currencies","type":"api"},{"title":"Template handlers","permalink":"https://docs.grabaperch.com/api/templates/","id":"api.templates","excerpt":"Perch has a flexible tag-based templating language which can be augmented with custom tags. Template handlers can hook into each phase of template parsing to add custom functionality to templates. Template handlers are implemented with an app.","text":"Perch has a flexible tag-based templating language which can be augmented with custom tags. Template handlers can hook into each phase of template parsing to add custom functionality to templates. Template handlers are implemented with an app.\n\nA template handler is a PHP class that enxtends the `PerchAPI_TemplateHandler` base class. It specifies a mask for the tags it handles, and then a method to be called for each phase of parsing.\n\n## When to use\n\nYou don't need to use a template handler for basic content substitution - Perch will handle that for you. The case whereby you need a template handler is if you have tags that need to do something out of the ordinary. Examples would be\n\n1. Rendering tag pairs - that is a block with opening a closing tags that loops around the contents.\n2. Rendering tags outside the scope of your own app - handling a tag no matter if it appears in a blog template, a content template or wherever.\n\nRegular use - just substituting content within your own app - does not need a custom template handler. Perch will take care of that as standard.\n\n## Registering your template handler\n\nIn your app's `runtime.php` and `admin.php` files, register the name of your template handler class with:\n\n```php\nPerchSystem::register_template_handler('MyApp_Template');\n```\n\nWhen templates are parsed, the `MyApp_Template` class will be instantiated, so make sure the file is either included or handled by your apps autoloader.\n\n## The template handler class\n\nBy convension, your template handler should be within your app's folder and named `MyApp_Template.class.php`, according to your app's naming scheme. This is not a technical limitation - if for some reason you needed multiple handlers, you can name them and register them as needed.\n\nA boilerplate template handler class might look like the following. \n\n```php\nclass MyApp_Template extends PerchAPI_TemplateHandler\n{\n\tpublic $tag_mask = 'students|student';\n\n\tpublic function render($vars, $html, PerchTemplate $Template)\n\t{\n\t\treturn $html\n\t}\n\n\tpublic function render_runtime($html, PerchTemplate $Template)\n\t{\n\t\treturn $html;\n\t}\n\n}\n```\n\n## Tag mask\n\nThe handler specifies a _tag mask_ to signify which tags this handler is to be used for. The tags name are pipe-delimited. This is example, our templater hander declares the mask `'students|student'` to work with `perch:student` tags:\n\n```markup\n<perch:student ...>\n```\n\nand also `perch:students` tags:\n\n```markup\n<perch:students></perch:students>\n```\n\nThe tag mask is crucial to specify - without it the template engine won't know about your tags and so they'll get stripped out of the final output.\n\n## Phases of parsing\n\nThe template engine has two distinct parsing phases. The primary phase deals with the majority of substitutions and is considered deterministic. The given input will always result in the same output, and that output can be cached and used again freely.\n\nThe second phase is what we call _runtime_ parsing, and is always performed at runtime, even if the previous phase has been cached. Runtime parsing is used when the result is dependant on environmental factors such as user input or session state. \n\nForm tags are always parsed at runtime, as the state changes based on user input - at one load it might show an empty field, and a second load might display a validation message, for example. The Members app also renders exclusively during the runtime phase, as the results will be different depending on whether the user is currently logged in or not.\n\nThe primary parsing phase uses the `render()` method, and the runtime phase uses `render_runtime()`. Which to use depends on when you need your tags to be parsed. Keep in mind that while all tags could be parsed at runtime, to do so surrenders any opertunity for caching, so don't be lazy, try to pick the best phase for each use case.\n\n## Rendering your tags\n\nTemplates are tag-based, and are passed to both render methods as a chunk of code featuring a mix of (typically) HTML and other template tags. Some of those tags might be yours and some might not. Your job is to find your tags, process them and return the resulting code. Each handler is called in turn until all the tags are processed.\n\nInternally, Perch parses the code for tags using regular expressions. Fear not, you don't have to do this yourself - we have all sorts of built-in functionality to do it for you.\n\n### Be light\n\nAn important principal to remember is that your handler will be called many times during the rendering of a page. Sometimes it will have work to do and sometimes not. A simple, light string check for the presence of your tag before you start can save you doing any unnecessary processing.\n\n```php\nif (strpos($html, 'perch:student') !== false) {\n\t// our tag exists\n}\nreturn $html;\n```\nThis can make additional template handlers very inexpensive to include, adding minimal overhead when not needed.\n\n### Replacing a single tag\n\nIf you want to replace a single tag using your own content, you can do that using the passed in `$Template` instance:\n\n```php\n$my_content = ['first_name'=>'Joe'];\n$html = $Template->replace_content_tags('student', $my_content, $html);\n```\n\n### Replacing a tag pair\n\nA tag pair (opening and closing tag with something inbetween) is used in Perch templates when you need to loop around a section of the template. Parsing them requires a bit more work. Take our example tag:\n\n```markup\n<perch:students>\n    <li>\n    \t<perch:student id=\"first_name\">\n    </li>\n</perch:students>\n```\n\nHere we want to findn the `perch:students` tags so that we can loop around our set of students and write out their names.\n\n```php\n$tag_type          = 'students';\n$empty_opening_tag = true;\n$index_in_group    = null;\n$callback          = 'render_students';\n\n$html = $this->parse_paired_tags($tag_type, $empty_opening_tag, $html, $vars, $index_in_group, $callback)\n```\n\n- `$tag_type` is the name of the tag we're looking for - `students`.\n- `$empty_opening_tag` is an optimisation based on whether the opening tag of the pair has attributes or not. Our tag does not have attributes, so this is set to `true`.\n- `$index_in_group` can be used with a tag pair needs to know its position within a set. We don't need that, so it's set to `null`. \n- `$callback` is the name of a method within our handler class that will be called with the result when the tag pair is found. It's the callback that does the work.\n\nThe callback method might look like this:\n\n```php\nprivate function render_students($type, $opening_tag, $tag_contents, $exact_match, $html, $vars, $index_in_group=false)\n{\n\t$replacement = 'The modified result';\n\n\treturn str_replace($exact_match, $replacement, $html);\n}\n```\n\nThe difficult bit is what happens in between.\n\n### Working with a tag\n\nIn the callback method, one of the arguments passed is the opening tag of our tag pair. It's handed to us as a string. If we wanted to examine it to look at its attributes, we can turn it into a `PerchXMLTag` like so:\n\n```php\n$Tag = new PerchXMLTag($opening_tag);\n```\n\nYou can find out more about `PerchXMLTag` in [its reference section](/reference/xmltag).\n\n### Subtemplating\n\nIn order to loop through the matched contents, the simplest way to deal with it is to treat it as a subtemplate. Load up a new instance of the template engine, and load the contents in as a string.\n\nIf `$vars['students']` contained an array of the content we wanted to template:\n\n```php\n$ItemTemplate = $API->get('Template');\n$ItemTemplate->set_from_string($tag_contents, 'student');\n$replacement = $ItemTemplate->render_group($vars['students'], true);\n```","type":"api"},{"title":"Translations","permalink":"https://docs.grabaperch.com/api/translations/","id":"api.translations","excerpt":"As Perch supports multiple languages, apps too have the ability to do so. Language files are created in `perch/addons/apps/my_app/lang`.","text":"As Perch supports multiple languages, apps too have the ability to do so. Language files are created in `perch/addons/apps/my_app/lang`. \n\nDuring development of your app you should:\n\n- Make sure the lang folder inside your app is writable by PHP\n- Set the Perch language setting to match the default language your app’s interface instructions are written in\n\nAs you create your app, text strings from the interface will be added to a new translation file inside the lang folder.\n\nStrings passed through `PerchAPI_HTML` and `PerchAPI_Form` are automatically added to the translation. If you write anything to the page directly, you should pass the string through `PerchAPI_Lang::get()`.\n\n```php\n$Lang = $API->get('Lang');\necho $Lang->get('Welcome to my app');\n```\n\nThe [Lang API reference](/api/reference/lang) has full details of how the languages functions can be used.","type":"api"},{"title":"Form validators","permalink":"https://docs.grabaperch.com/api/validators/","id":"api.validators","excerpt":"The Perch public-facing forms have lots of basic built-in validation for common input types. When you need to apply custom logic to field validation, you can do that with a custom form validator. They enable you do to things like check an email address isn't already in use, or verify some input against an external API. Form validators are implemented with an app.","text":"The Perch public-facing forms have lots of basic built-in validation for common input types. When you need to apply custom logic to field validation, you can do that with a custom form validator. They enable you do to things like check an email address isn't already in use, or verify some input against an external API. Form validators are implemented with an app.\n\n## When to use\n\nYou don't need a custom validator for basic validations such as required fields, numbers and ranges, and the formats of common data types such as emails, or simple patterns. When they come into play is when you need to apply some logic such as comparing fields, testing against an external API, or looking something up in the database to see if it's valid.\n\n## How to use\n\nValidators don't need to be registered, you just need a class with a static method that can be called when the field is validated. The method gets passed the contents of the field as the first parameter. It needs to return `true` (acceptable value) or `false` (unacceptable).\n\nYou can use a single class for your validations, or just roll them in wherever they fit - it's up to you. The just need to be static methods, and the class needs to be either included, or known by your autoloader.\n\n```php\nclass MyApp_Validators\n{\n\tpublic static function check_email_in_use($email)\n\t{\n\t\t$API = new PerchAPI(1.0, 'myapp');\n\t\t$db\t = $API->get('DB');\n\n\t\t$sql = 'SELECT COUNT(*) FROM mytable WHERE userEmail='.$db->pdb($email);\n    \t$count = $db->get_count($sql);\n\n    \tif ($count===0) {\n    \t\treturn true;\n    \t}\n\n    \treturn false;\n\t}\n}\n```\n\nThis would then be invoked on a form input tag using the `helper` attribute.\n\n```markup\n<perch:input id=\"email\" type=\"email\" required helper=\"MyApp_Validators::check_email_in_use\">\n```\n\nYou can provide a customer error message for your validator, too.\n\n```markup\n<perch:error for=\"email\" type=\"helper\">\n\tSorry, that email address is already in use.\n</perch:error>\n```","type":"api"},{"title":"Shortcode providers","permalink":"https://docs.grabaperch.com/api/shortcodes/","id":"api.shortcodes","excerpt":"Shortcodes are text-based placeholders that can be entered into a text field, to be replaced out with something else later. A good example is the default Asset shortcodes provided by Perch. To include an asset in their content, and user can enter a shortcode such as:","text":"Shortcodes are text-based placeholders that can be entered into a text field, to be replaced out with something else later. A good example is the default Asset shortcodes provided by Perch. To include an asset in their content, and user can enter a shortcode such as:\n\n    [cms:asset 1234]\n\nShortcodes are processed by _shortcode providers_, which are registered to handle a specific set of shortcodes by an app.\n\n### Registering a provider\n\nShortcodes are handled with a PHP class, which should be registered in both the `admin.php` and `runtime.php` of your app:\n\n```php\nPerchSystem::register_shortcode_provider('MyApp_ShortcodeProvider');\n```\n\nThe provider class should extend `PerchShortcode_Provider`:\n\n```php\n<?php\n\nclass MyApp_ShortcodeProvider extends PerchShortcode_Provider \n{\n\tpublic $shortcodes = [];\n\n\tpublic function get_shortcode_replacement($Sortcode, $Tag)\n\t{\n\t\treturn '';\n\t}\n}\n\n```\n\nThe public `$shortcodes` property is an array of shortcode names handled by this provider.\n\nThe `get_shortcode_replacement()` method is called whenever a shortcode handled by this provider is encountered and needs replacing.\n\n## Example: Embedding Tweets\n\nThe Twitter app has a very simple shortcode provider for embedding Tweets using the Twitter oembed API. In its entirety, the provider looks like this:\n\n```php\n<?php\n\nclass PerchTwitter_ShortcodeProvider extends PerchShortcode_Provider\n{\n\tpublic $shortcodes = ['tweet'];\n\n\tpublic function get_shortcode_replacement($Sortcode, $Tag)\n\t{\n\t\t$id = $Sortcode->arg(0);\n\n\t\tif (!$id) return '';\n\n\t\t$API = new PerchAPI(1.0, 'perch_twitter');\n\t\t$HTTP = $API->get('HTTPClient');\n\n\t\t$response = $HTTP->get('https://publish.twitter.com/oembed?url=https://twitter.com/Interior/status/'.$id);\n\n\t\tif ($response) {\n\t\t\t$data = json_decode($response, true);\n\t\t\tif (isset($data['html'])) return $data['html'];\n\t\t}\n\n\t\treturn '';\n\t}\n}\n```\n\nFirstly, it declares itself the handler for `tweet`, so any shortcode formatted as `[cms:tweet ... ]` will be handed to this provider to replace.\n\nThe `get_shortcode_replacement()` method reads the first argument from the shortcode, which is expected to be the Tweet ID.\n\n    [cms:tweet 843945557659959296]\n\nIt then uses this to make a request to the Twitter API and returns the HTML for that Tweet.\n\n### Accessing arguments\n\nShortcode arguments can either be anonymous values (like the ID above) which are given an index number, or they can be named `attribute=value` pairs, which are accessed by name. You can mix both.\n\n    [cms:tweet 843945557659959296 lang=en]\n\nIn this case the ID would be accessed with `$Shortcode->arg(0)` as it's the first unnamed argument. The `lang` value would be accessed with `$Sortcode->arg('lang')`.\n\n### Accessing the template tag\n\nThe second argument to `get_shortcode_replacement()` is an object representing the template tag. This is an instance of [XMLTag](/api/reference/xmltag/), so the tag attributes can be accessed as methods on the object.\n\n## Example: Embedding Instagram Photos\n\nIn exactly the same way, we can create a very simple shortcode provider for embedding photos using the Instagram oembed API. In its entirety, the provider would look like this:\n\n```php\n<?php\n\nclass PerchInstagram_ShortcodeProvider extends PerchShortcode_Provider\n{\n\tpublic $shortcodes = ['instagram'];\n\n\tpublic function get_shortcode_replacement($Sortcode, $Tag)\n\t{\n\t\t$id = $Sortcode->arg(0);\n\n\t\t$API = new PerchAPI(1.0, 'perch_instagram');\n\t\t$HTTP = $API->get('HTTPClient');\n\n\t\t$response = $HTTP->get('https://api.instagram.com/oembed/?url='.urlencode('http://instagr.am/p/'.$id));\n\n\t\tif ($response) {\t\t\t\n\t\t\t$data = json_decode($response, true);\n\t\t\tif (isset($data['html'])) return $data['html'];\n\t\t}\n\n\t\treturn '';\n\t}\n}\n```\n\nAn Instagram photo could then be embedded by its ID like so:\n\n    [cms:instagram BTQ1omKl0DJ]\n\nThe same example becomes trivial to adapt for any oembed API, and can be built on for other types of API too.","type":"api"},{"title":"Search handlers","permalink":"https://docs.grabaperch.com/api/search/","id":"api.search","excerpt":"Perch and Runway implement basic full-text site search functionality. An app can include its data as part of the search by exposing a class which implements the `PerchAPI_SearchHandler` interface and registering it at runtime.","text":"Perch and Runway implement basic full-text site search functionality. An app can include its data as part of the search by exposing a class which implements the `PerchAPI_SearchHandler` interface and registering it at runtime.\n\n```php\nclass MyApp_SearchHandler implements PerchAPI_SearchHandler\n{\n    public static function get_search_sql($key)\n    {\n        ...\n    }\n    \n    public static function get_backup_search_sql($key)\n    {\n        ...\n    }\n    \n    public static function format_result($key, $opts, $result)\n    {\n        ...\n    }\n}\n```\n\nIn the app’s runtime.php:\n\n```php\nPerchSystem::register_search_handler('MyApp_SearchHandler');\n```\n\n## Methods\n\nThe interface has three static methods. Two which return an SQL fragment, and one which post-processes a result for display.\n\n### PerchAPI_SearchHandler::get_search_sql(string $key)\n\nGenerates and returns an SQL SELECT query for finding data matching the keyword $key. This SELECT is streamlined into a larger query by way of a UNION, and so the number and order of columns in the query matters significantly.\n\nYou must select 10 columns, with the first two being source and score.\n\n|Column|Description|\n|-|-|\n|source|The name of your SearchHandler class. It should be sufficient to use the PHP magic constant `__CLASS__`\n|score|A score value (e.g. fulltext index search score) to order the results by. This is going to be an inexact science, admittedly.|\n\nFollowing those, select up to 8 other columns that will be needed to format a search result listing item. Usually this will be a title, some way of forming a link, and something for an excerpt. If you don’t need 8 items, pad the end of the list with empty quotes items.\n\n```sql\nSELECT \"MyApp_SearchHandler\" AS source, MATCH(...) AS score, \n\titemTitle, itemSlug, itemDateTime, itemDescHTML, itemID, \"\", \"\", \"\"\nFROM my_table\n```\n\n### PerchAPI_SearchHandler::get_backup_search_sql(string $key)\n\nThis is exactly the same as the previous method, but is used if the previous returns no results. The reason is that most search will probably be implemented using MySQL fulltext indexes. These work well with large volumes of data, but behave badly when there’s not much content to search. They also do badly for keywords that are too common in the data, e.g. a company name on their own website.\n\nWhilst this isn’t usually a practical problem for the site visitor (who searches a company site for the company’s name?) it proves extremely confusing for clients and less technical web designers, and causes them to lose time on a project trying to figure out why something simple isn’t working. We don’t want to cause people that frustration, so the backup search sql should use a simpler search method less likely to run into those problems.\n\nWe’d recommend using a `REGEXP` query with word boundaries rather than a `LIKE`.\n\n```sql\nWHERE itemTitle REGEXP '[[:<:]]bananas[[:>:]]' \n```\n\n### PerchAPI_SearchHandler::format_result(string $key, array $opts, array $result)\n\nAfter the search query has been run, the search engine runs down the results and calls the format_result method of the handler for each line. This comes from the source column we specified in the SQL. \n\nThe method gets passed three arguments\n\n### Arguments\n\n|Argument|Value|\n|-|-|\n|key|the search keyword|\n|opts|An associative array of search options passed into the system by the page author|\n|result|An associative array representing the row selected by the search query|\n\nThe method processes the result into an array with the following keys and values.\n\n### Returned array\n\n|Key|Value|\n|-|-|\n|url|The URL within the site to link to in order to display the found item.|\n|title|The title of the found item|\n|excerpt|An HTML excerpt of length specified in opts.|\n|key|the keyword|","type":"api"},{"title":"List of events","permalink":"https://docs.grabaperch.com/api/events/list/","id":"api.events.list","excerpt":"Currently, Perch core fires the below events. Individual add-ons can also fire their own events, so if you're looking to integrate with a particular app, you should check the list of events included with that app's documentation.","text":"Currently, Perch core fires the below events. Individual add-ons can also fire their own events, so if you're looking to integrate with a particular app, you should check the list of events included with that app's documentation.\n\n## Regions\n\n|Event|Description|\n|-|-|\n|region.add_item|An item has been added to the region|\n|region.truncate|Items have been deleted from a region (such as converting a multi-item region to a single-item region)|\n|region.share|The region has been marked as shared|\n|region.unshare|Shared status has been removed from the region|\n|region.create_revision|A new revision of the region has been created|\n|region.publish|The region has been published|\n|region.index|The region has be reindexed|\n|region.undo|The undo function has been called to roll the region back to a prior state|\n|region.cleanup|The cleanup routine has been run on the region to identify and delete any unused assests|\n|region.update_permissions|Permissions have been updated on the region|\n|region.create|A region has been created|\n|region.delete|The region has been deleted|\n\n## Region items\n\n|Event|Description|\n|-|-|\n|item.delete|An item has been deleted|\n|item.clear_resources|The assets logged against this item have been unlogged (usually prior to deletion)|\n|item.log_resources|Assets for the item have been logged|\n\n## Collections\n\n|Event|Description|\n|-|-|\n|collection.add_item|A collection item has been created|\n|collection.create_item_revision|A new revision of the item has been created|\n|collection.publish_item|An item in the collection has been published|\n|collection.cleanup|The cleanup routine has been run on the collection to identify and delete any unused assests|\n|collection.publish|The entire collection has been published|\n\n\n## Pages\n\n|Event|Description|\n|-|-|\n|page.create|A page has been created|\n|page.update_permissions|Permissions on the page have been updated|\n|page.publish|The page has been published|\n|route.updated|A page route has been updated (Runway)|\n\n## Categories\n\n|Event|Description|\n|-|-|\n|category.create|A category has been created|\n|category.update|The category has been updated|\n\n## Assets\n\n|Event|Description|\n|-|-|\n|assets.upload_image|An image file has been uploaded|\n|assets.create_image|A new image variant has been created (e.g. a thumbnail based on the uploaded original)|\n\n\n## Email\n\n|Event|Description|\n|-|-|\n|email.send|An email has been sent|\n\n## Backup\n\n|Event|Description|\n|-|-|\n|backup.run|A backup has been run|\n\n## Users and Authentication\n\n|Event|Description|\n|-|-|\n|user.login|A Perch control panel user has logged in|\n\n\n## Runtime events\n\nThe following events are fired at page runtime, rather than by the control panel.\n\n|Event|Description|\n|-|-|\n|page.loaded|The page has been loaded|\n\nWe're always happy to add new events if there's something your code needs to listen for. Post a [suggestion to the forum](https://community.perchcms.com/forum/) with the event you'd like added, and your use-case for adding it and we'll do our best to help.","type":"api"},{"title":"Activation","permalink":"https://docs.grabaperch.com/api/apps/activating/","id":"api.apps.activating","excerpt":"Apps that store data need access to database tables. It’s best, if at all possible, to create these tables seamlessly without requiring the user to go through an installation procedure. We call the process of setting up your tables and any other related stuff your app needs to do in order to operate activation.","text":"Apps that store data need access to database tables. It’s best, if at all possible, to create these tables seamlessly without requiring the user to go through an installation procedure. We call the process of setting up your tables and any other related stuff your app needs to do in order to operate activation.\n\nActivation happens inside `perch/addons/apps/my_app/activate.php`. This script should create your tables, do what it needs to do, and then return true if it worked or false if it didn’t.\n\nIf you’ve built your classes on top of `PerchAPI_Factory`, the activation process is kicked off with a call to `PerchAPI_Factory::attempt_install()`. This checks for the existence of the table named in `PerchAPI_Factory::table`, and if it’s not there, runs your activation script.\n\nYou need to figure out the logic on when to attempt installation, as it would be wasteful to check on every page load. Usually, the front page of an app is a listing page. It’s our recommendation that if this listing returns no results, that would be the best time to attempt to install. Once the user has added data, then it’s clear everything is set up and there’s no need to try again.\n\nThe official Perch apps all contain activation scripts. These can be used as a template for your own.","type":"api"},{"title":"Field types","permalink":"https://docs.grabaperch.com/api/apps/field-types/","id":"api.apps.field-types","excerpt":"By convention, the `fieldtypes.php` file is a good location to include any field types that your app wishes to declare. You'd then include it from your `admin.php` file, and if necessary, from your `runtime.php` file too.","text":"By convention, the `fieldtypes.php` file is a good location to include any field types that your app wishes to declare. You'd then include it from your `admin.php` file, and if necessary, from your `runtime.php` file too.\n\n```php\n<?php\n\tclass PerchFieldType_bananas extends PerchFieldType {\n\t\t...\n\t}\n```","type":"api"},{"title":"Runtime functions","permalink":"https://docs.grabaperch.com/api/apps/runtime-functions/","id":"api.apps.runtime-functions","excerpt":"Apps that expose PHP functions to the user’s page should create a file at `perch/addons/apps/my_app/runtime.php`. Admin-only apps don’t need this file.","text":"Apps that expose PHP functions to the user’s page should create a file at `perch/addons/apps/my_app/runtime.php`. Admin-only apps don’t need this file.\n\nThis runtime.php file will be included in the user’s pages. You should declare your functions within it.\n\n## Including the file\n\nUnlike admin.php which is automatically included at edit time, the runtime file is not automatically included by Perch. This is to reduce overhead, as the process occurs for every page load. Searching for runtime files to include would be a waste.\n\nInstead, you need to add it to `perch/config/apps.php` – and will need to instruct users to do the same as part of the installation procedure if you intend to distribute the app. You can see examples of this in the installation documentation for our official apps.\n\n## Autoloading\n\nThe `runtime.php` file is also the place to add your app's autoloader for any classes needed by your page functions.\n\n```php\nspl_autoload_register(function($class_name){\n\tif (strpos($class_name, 'MyApp_')===0) {\n\t\tinclude(PERCH_PATH.'/addons/apps/my_app/lib/'.$class_name.'.class.php');\n\t\treturn true;\n\t}\n\treturn false;\n});\n```\n\n## Search handlers\n\nIf your app uses a [search handler](/api/search/), you can also register that in your `runtime.php` file.\n\n```php\nPerchSystem::register_search_handler('MyApp_SearchHandler');\n```\n\n## Template handers\n\nIf your app uses a [template handler](/api/templates/) for handling custom template tags, you can also register that in your `runtime.php` file.\n\n```php\nPerchSystem::register_template_handler('MyApp_Template');\n```\n\n## Form handler\n\nIf your app needs to handle forms, you can add a form handler function. Perch will call this function when a [Perch-templated form](/templates/form/) that specifies your app as the handler is submitted:\n\n```html\n<perch:form id=\"register\" app=\"my_app\" method=\"post\"></perch:form>\n```\n\nYour function must be called `{your_app_ID}_form_handler`:\n\n```php\nfunction my_app_form_handler($SubmittedForm) {}\n```\n\nThe form handler receives a [PerchAPI_SubmittedForm](/api/reference/perchapi-submittedform), which you can use to validate the submission and access the submitted data and uploaded files.","type":"api"},{"title":"Adding Settings","permalink":"https://docs.grabaperch.com/api/apps/settings/","id":"api.apps.settings","excerpt":"Apps sometimes need to offer the user configuration options, and for this purpose they can add items to the Perch Settings page.","text":"Apps sometimes need to offer the user configuration options, and for this purpose they can add items to the Perch Settings page.\n\nThis is done from within the `admin.php` file.\n\n## Adding a setting\n\n```php\n$this->add_setting('my_app_editorMayDeleteStuff', 'Editors may delete stuff', 'checkbox', false);\n```\n\nThe `add_setting()` method tags 6 arguments:\n\n|Argument|Type|Description|Example|\n|-|-|-|\n|Setting ID|String|A unique ID for the setting, prefixed with your app ID|my_app_editorMayDeleteStuff|\n|Label|String|A label for the setting, presented to the user|Editors may delete stuff|\n|Field type|String or callable|The type of form element to use for the setting, see below|text|\n|Default value|String, int, bool|The default value for the setting|true|\n|Options|Array|Optional, options for select fields|_See below_|\n|Hint text|String|Optional hint text for displaying next to the field||\n\n## Field types\n\nThere are four basic field types:\n\n-   text\n-   textarea\n-   checkbox\n-   select\n\nIf specifying a select box, you should also provide an options array.\nEach item in the array is an associative array with label and value keys. The label is displayed, the value returned.\n\n```php\n$opts = array();\n$opts[] = array('label'=>'Option 1', 'value'=>'1');\n$opts[] = array('label'=>'Option 2', 'value'=>'2');\n$opts[] = array('label'=>'Option 3', 'value'=>'3');\n```\n\nIf you need a more complex type of field, you can specify a callable anonymous function as the argument for the field type. The function is passed the following\n\n|Argument|Type|Description|\n|-|-|-|\n|Form|Object|An instance of `PerchAPI_Form`|\n|ID|String|The ID of the setting|\n|Details|Array|The current settings values|\n|Setting|Array|The details of this particular setting|\n\nIt is then your responsibility to return the HTML for the completed form field. For example, Perch Shop defines the following to provide the user with a list of currency options that are marked as active in the database:\n\n```php\n$this->add_setting('perch_shop_default_currency', 'Default currency', 'PerchShop_Currencies::get_settings_select_list', '');\n```\n\nThe `get_settings_select_list` function:\n\n```php\npublic static function get_settings_select_list($Form, $id, $details, $setting)\n{\n\t$opts = array();\n\t$opts[] = array('value'=>'', 'label'=>'');\n\t$c = __CLASS__;\n\t$Currencies = new $c;\n\t$currencies = $Currencies->get_by('currencyActive', '1');\n\tif (PerchUtil::count($currencies)) {\n\t\tforeach($currencies as $Currency) {\n\t\t\t$opts[] = array('value'=>$Currency->currencyID(), 'label'=>$Currency->currencyCode());\n\t\t}\n\t}\n    return $Form->select($id, $opts, $Form->get($details, $id, $setting['default'])); \n}\n```\n\n$Form, $id, $details, $setting\n\n## Reading your setting back\n\nOnce a setting is set, you need to be able to read it back. You do that like this:\n\n```php\n$Settings = $API->get('Settings');\n$Settings->get('my_app_editorMayDeleteStuff')->val();\n```","type":"api"},{"title":"Registering","permalink":"https://docs.grabaperch.com/api/apps/registering/","id":"api.apps.registering","excerpt":"If an app provides an interface via the Perch control panel, it must register itself with Perch. This is done in the `perch/addons/apps/my_app/admin.php file`.","text":"If an app provides an interface via the Perch control panel, it must register itself with Perch. This is done in the `perch/addons/apps/my_app/admin.php file`.\n\n```php\n    $this->register_app('my_app', 'My App', 5, 'An exciting app of goodness', '1.0');\n```\n\nThe register_app() method takes 6 arguments prior to this Perch version it took 5:\n\n|Type|Description|\n|-|-|\n|String|Your app ID|\n|String|A name/label for your app|\n|Int|The priority in which is should appear on the Perch tab bar|\n|String|A brief description (unused currently)|\n|String|A semantic versioning version number|\n|Bool|Whether the app should display in the app menu|\n\nThere’s no good way to determine the priority setting you should give. If your app does something administrative, it would make sense to give it a high number to shift it to the end of the line of tabs (Pages is always the first item). Really this is more to give the user control of the apps they have installed.\n\nOnce an app is registered, it appears on the tab bar.\n\n## Asserting a required version\n\nIf your app relies on a certain version of Perch to run (perhaps using features that an older install of Perch would not have available), you can assert that your app requires a minimum version:\n\n```php\n$this->require_version('my_app', '1.7.3');\n```\n\nIf the version of Perch is not greater than or equal to the number you state, Perch will throw an error preventing the user from continuing until they update or uninstall the app.\n\n## Autoloading\n\nThe `admin.php` file is also the place to add your app's autoloader so that your class files can be found. You'll do the same in your `runtime.php` file for any classes needed by page functions.\n\n```php\nspl_autoload_register(function($class_name){\n\tif (strpos($class_name, 'MyApp_')===0) {\n\t\tinclude(PERCH_PATH.'/addons/apps/my_app/lib/'.$class_name.'.class.php');\n\t\treturn true;\n\t}\n\treturn false;\n});\n```\n\n## Template handers\n\nIf your app uses a [template handler](/api/templates/) for handling custom template tags, you can also register that in your `admin.php` file.\n\n```php\nPerchSystem::register_template_handler('MyApp_Template');\n```","type":"api"},{"title":"Scheduled tasks","permalink":"https://docs.grabaperch.com/api/apps/scheduled-tasks/","id":"api.apps.scheduled-tasks","excerpt":"Perch includes a centralised system for scheduling tasks. Apps (and dashboard widgets) can make use of this by adding a `scheduled_tasks.php` file to their app folder.","text":"Perch includes a centralised system for scheduling tasks. Apps (and dashboard widgets) can make use of this by adding a `scheduled_tasks.php` file to their app folder.\n\n## Scheduling a task\n\nWhen the task scheduler runs, it looks through each app’s folder for a file called `scheduled_tasks.php`. An app can register one or more tasks with a call to `PerchScheduledTasks::register_task`\n\n```php\nPerchScheduledTasks::register_task('app_id', 'task_key', $minutes, 'function_to_run');\n```\n\n### register_task arguments\n\n|Argument|Value|\n|-|-|\n|app_id|The ID of your app.|\n|task_key|An identifier for this task. (e.g. update_tweets)|\n|minutes|Integer: the frequency, in minutes, of this task.|\n|function|A callable function to run, so either a function name as a string, or an array of object, method.|\n\n\nThe function is called with one argument – the date and time this task last ran.\n\n## Return values\n\nThe function you nominate to be called must return an associative array with the results of the task.\n\n### Return array\n\n|Key|Value|\n|-|-|\n|result|OK, WARNING or FAILED|\n|message|A human readable description of the result. This is displayed to the user in the Settings section, to help them fix problems. Max 256 chars.|\n\n\n## Example\n\nA basic example of a `scheduled_tasks.php` file might look like this.\n\n```php\n<?php\n    PerchScheduledTasks::register_task('my_app', 'download_rss', 60, 'my_app_download_rss');\n    function my_app_download_rss($last_run_date)\n    {\n        if (MyApp::download_rss()) {\n            return array(\n                'result'=>'OK',\n                'message'=>'RSS successfully fetched.'\n            );\n        }else{\n            return array(\n                'result'=>'FAILED',\n                'message'=>'RSS could not be fetched.'\n            );\n        }\n    }\n```","type":"api"},{"title":"Upgrading","permalink":"https://docs.grabaperch.com/api/apps/upgrading/","id":"api.apps.upgrading","excerpt":"If your app has been developed against an older version of the API, it may be necessary to upgrade it. Guides for doing so are listed in this section.","text":"If your app has been developed against an older version of the API, it may be necessary to upgrade it. Guides for doing so are listed in this section.","type":"api"},{"title":"Upgrading from Perch 1 to Perch 2","permalink":"https://docs.grabaperch.com/api/apps/upgrading/to-perch2/","id":"api.apps.upgrading.to-perch2","excerpt":"Due to both a reorganisation of the Perch folder structure, and a new user interface, there are a few changes required to move an app built for Perch 1 across to Perch 2.","text":"Due to both a reorganisation of the Perch folder structure, and a new user interface, there are a few changes required to move an app built for Perch 1 across to Perch 2.\n\n## Include paths\n\nWhereas apps used to live in `/perch/apps`, in Perch 2 they have moved to `/perch/addons/apps`. In addition, all core Perch files have moved into the `core` folder.\n\nThis means the include path to the API has changed. Where you have an include like this:\n\n```php\ninclude('../../../../inc/api.php');\n```\n\nYou need to add an extra level of `../` and the `core` folder:\n\n```php\ninclude('../../../../../core/inc/api.php');\n```\n\n## Top and bottom layout\n\nThe top and bottom layout files were previously included like this:\n\n```php\ninclude(PERCH_PATH . '/inc/top.php');\ninclude(PERCH_PATH . '/inc/bottom.php');\n```\n\nYou can update these by swapping the `PERCH_PATH` constant for\n`PERCH_CORE`\n\n```php\ninclude(PERCH_CORE . '/inc/top.php');\ninclude(PERCH_CORE . '/inc/bottom.php');\n```\n\n## Page structure\n\nIn Perch 2, the sidebar needs to appear in the HTML before your main\nheader. A Perch 1 page structure looked like this:\n\n```php\n# Title panel\necho $HTML->title_panel_start();\necho $HTML->heading1('My Page Heading');\necho $HTML->title_panel_end();\n\n# Side panel\necho $HTML->side_panel_start();\necho $HTML->side_panel_end();\n\n# Main panel\necho $HTML->main_panel_start(); \necho $HTML->main_panel_end();\n```\n\nIn Perch 2, the side panel comes first. The title panel is no longer\nrequired.\n\n```php\n# Side panel\necho $HTML->side_panel_start();\necho $HTML->side_panel_end();\n\n# Main panel\necho $HTML->main_panel_start(); \necho $HTML->heading1('My Page Heading');\necho $HTML->main_panel_end();\n```","type":"api"},{"title":"Upgrading from Perch 2 to Perch 3","permalink":"https://docs.grabaperch.com/api/apps/upgrading/to-perch3/","id":"api.apps.upgrading.to-perch3","excerpt":"Below is an overview of the steps required to update a Perch 2 app to work with the user interface changes and new APIs in Perch and Runway 3.","text":"Below is an overview of the steps required to update a Perch 2 app to work with the user interface changes and new APIs in Perch and Runway 3.\n\n## Your app's `admin.php` file\n\nUpdate minimum version to 3    \n\n```php\n$this->require_version('perch_blog', '3.0');\n```\n\n## Sub-navigation\n\nPerch 2 subnav (typically in a `modes/_subnav.php` file) looks like this:\n\n```php\necho $HTML->subnav($CurrentUser, array(\n\t\tarray(\n\t\t\t'page' => 'my_app',\n\t\t\t'label'=> 'Add/Edit'\n\t\t),\n\t));\n```\n\nUpdate with the new subnav API:\n\n```php\nPerchUI::set_subnav([\n\t\t[\n\t\t\t'page' => 'my_app',\n\t\t\t'label'=> 'Add/Edit'\n\t\t],\n\t], $CurrentUser);\n```\n\nThe array structure remains the same, it just needs to be passed to `PerchUI::set_subnav()` instead of `$HTML->subnav()`.\n\n## Your editing pages' `index.php` files\n\nDeclaring the subnav in the above new style won't output it directlyh like the old method did. For the subnav to be output in the sidebar (where we want it) you need to update your `index.php` pages. Before you include your `pre.php` file, include your subnav:\n\n```php\ninclude('modes/_subnav.php');\ninclude('modes/list.pre.php');\n```\n\nYou'll want to do that in all of your app's `index.php` files. Most pages will also need instances of the API, HTML, Lang and Paging classes, so it might be a good idea to add those to your `index.php` too.\n\n```php\n$API    = new PerchAPI(1.0, 'my_app');\n$HTML   = $API->get('HTML');\n$Lang   = $API->get('Lang');\n$Paging = $API->get('Paging');\n```\n\n## Each view's `post.php` file\n\nRemove `$HTML->side_panel_start()` and `$HTML->side_panel_end()` and everything in between them.\n\nRemove `$HTML->main_panel_start()` and `$HTML->main_panel_end()`.\n\nRemove any `_subnav.php` include.\n\n### Title panel\n\nThe title panel is the area encompassing the main heading and any “add new” button. If you have a main heading output with `$HTML->heading1()` and a button, you'll be replacing those with the new `$HTML->title_panel()` method.\n\n```php\necho $HTML->title_panel([\n\t'heading' => $Lang->get('My awesome app'),\n\t'button'  => [\n\t\t\t'text' => $Lang->get('Add new'),\n\t\t\t'link' => $API->app_nav().'/edit/',\n\t\t\t'icon' => 'core/plus',\n\t\t\t'priv' => 'my_app.create',\n\t\t],\n\t], $CurrentUser);\n```\n\n### Smartbar\n\nThere's a new API for smartbars. If you've got a manually constructed smartbar, or one using the old API, you'll need to move it over. The new API is much better and will enable more functionality.\n\n```php\n$Smartbar = new PerchSmartbar($CurrentUser, $HTML, $Lang);\n\n$Smartbar->add_item([\n\t'active' => true,\n\t'title' => 'Pizza',\n\t'link'  => '/addons/apps/my_app/pizza/',\n]);\n\necho $Smartbar->render();\n```\n\n### Listings\n\nManual listings can be replaced with the new admin listings API.\n\n```php\n$Listing = new PerchAdminListing($CurrentUser, $HTML, $Lang, $Paging);\n    $Listing->add_col([\n            'title'     => 'Role',\n            'value'     => 'roleTitle',\n            'sort'      => 'roleTitle',\n            'edit_link' => 'edit',\n        ]);\n    \n    $Listing->add_delete_action([\n            'priv'   => 'perch.users.roles.delete',\n            'inline' => true,\n            'path'   => 'delete',\n        ]);\n\n    echo $Listing->render($roles);\n```","type":"api"},{"title":"Importing Assets","permalink":"https://docs.grabaperch.com/api/import/assets/","id":"api.import.assets","excerpt":"Assets can be imported programmatically and then used within other content. To achieve this, you first need:","text":"Assets can be imported programmatically and then used within other content. To achieve this, you first need:\n\n1. A script that includes the Perch runtime (which could be a master page)\n2. One or more assets (such as image files) on the web server, but not yet in a resource bucket\n\n## Getting started\n\nIn your script, include the Perch runtime. If you're using a Runway master page, you can skip this, just set up the master page and point a route to it.\n\n```php\ninclude('/perch/runtime.php');\n```\n\nCreate an instance of the API, and a new `AssetImporter`. \n\n```php\n$API      = new PerchAPI(1.0, 'my_importer');\n$Importer = $API->get('AssetImporter');\n```\n\n## Importing\n\nAt this point you want to loop through your assets and add the items one at a time. The `add_item()` method will copy the file into your resource bucket and return you an array of details including its `id`. You'll want to keep this ID if you want to use the asset as part of another content import.\n\nIt's best to use a try/catch block:\n\n```php\ntry {\n\t$result = $Importer->add_item([\n\t\t\t'type'   => 'image',\n\t\t\t'bucket' => 'default',\n\t\t\t'path'   => __DIR__.'/images/0C7A1073.jpg',\n\t\t]);\n} catch (Exception $e) {\n\tdie('Error: '.$e->getMessage());\n}\n```\n\nIf you were to `print_r` the `$result` you'd have something like:\n\n```php\nArray\n(\n    [_default] => /perch/resources/0c7a1073-7.jpg\n    [path] => 0c7a1073-7.jpg\n    [size] => 7815378\n    [bucket] => default\n    [w] => 4096\n    [h] => 2731\n    [mime] => image/jpeg\n    [sizes] => Array\n        (\n            [thumb] => Array\n                (\n                    [w] => 150\n                    [h] => 100\n                    [target_w] => 150\n                    [target_h] => 150\n                    [density] => 2\n                    [path] => 0c7a1073-7-thumb@2x.jpg\n                    [size] => 28426\n                    [mime] => image/jpeg\n                )\n\n        )\n\n    [id] => 630\n)\n```\n\nOur asset ID is `630` in this case.\n\n## Using the asset\n\nTo use an asset with other content, you need to provide the asset ID. To do this, you need 2 array elements:\n1. set the ID of the asset field in your template to an empty string e.g. `'image' => ''`\n2. append `_assetID` to the field ID and provide this array element with the asset ID. e.g. `'image_assetID' => 630`\n \n\nSo to use asset 630 with a field called `image` in a collection item, we'd use:\n\n```php\n\t$Importer->add_item([\n\t\t'title'         => 'Breaking news!',\n\t\t'body'          => 'Some **exciting news** has _just_ broken...',\n\t\t'slug'          => 'breaking-news',\n\t\t'date'          => '2012-04-28 12:23:09',\n\t\t'category'      => ['articles/news', 'articles/flippin-exciting'],\n\t\t'image'         => '',\n\t\t'image_assetID' => 630,\n\t]);\t\n```","type":"api"},{"title":"Importing Categories","permalink":"https://docs.grabaperch.com/api/import/categories/","id":"api.import.categories","excerpt":"Content can be imported programmatically into a nominated Category Set. To achieve this, you first need:","text":"Content can be imported programmatically into a nominated Category Set. To achieve this, you first need:\n\n1. A script that includes the Perch runtime (which could be a master page)\n2. A category set\n3. A template for categories within the set that defines the content types\n4. A source of data\n\n## Getting started\n\nIn your script, include the Perch runtime. If you're using a Runway master page, you can skip this, just set up the master page and point a route to it.\n\n```php\ninclude('/perch/runtime.php');\n```\n\nCreate an instance of the API, and a new `CategoryImporter`. Tell the importer which category set to import into by specifying the set slug.\n\n```php\n$API      = new PerchAPI(1.0, 'my_importer');\n$Importer = $API->get('CategoryImporter');\n\n$Importer->set_set('topics');\n```\n\nThe importer uses a template to know how to process the incoming content. \n\n`PerchAPI_Template::set()` takes two arguments:\n\n1. The path to the template\n2. The tag namespace to use \n\n```php\n$Template = $API->get('Template');\n$Template->set('categories/category', 'category');\n\n$Importer->set_template($Template);\n```\n\nYou're now ready to start importing content. If your set is new and you want to clean out previous test imports, you can call `empty_set()`. \n\n```php\n$Importer->empty_set();\n```\n\n## Importing\n\nAt this point you want to loop through your data source (whatever that may be) and map your content to IDs from your category template. For each category you want to add, call `add_item()` with an associative array where the _keys_ are the IDs from your template, and the _values_ are the content you want to assign to that field.\n\nThe `add_item()` method validates required fields and will throw an exception if any item of content cannot be imported. For this reason, it's best to use a try/catch block:\n\n```php\ntry {\n\t$Importer->add_item([\n\t\t'catTitle' => 'Cookery',\n\t\t'catSlug' => '',\n\t]);\t\n} catch (Exception $e) {\n\tdie('Error: '.$e->getMessage());\n}\n```\n\nA successful call to `add_item()` will return the path of the newly added category, which can help when importing other content that uses the new category.","type":"api"},{"title":"Importing Collections","permalink":"https://docs.grabaperch.com/api/import/collections/","id":"api.import.collections","excerpt":"Content can be imported programmatically into a nominated Perch Runway Collection. To achieve this, you first need:","text":"Content can be imported programmatically into a nominated Perch Runway Collection. To achieve this, you first need:\n\n1. A script that includes the Perch runtime (which could be a master page)\n2. A collection\n3. A template for the collection that defines the content types\n4. A source of data\n\n## Getting started\n\nIn your script, include the Perch runtime. If you're using a Runway master page, you can skip this, just set up the master page and point a route to it.\n\n```php\ninclude('/perch/runtime.php');\n```\n\nCreate an instance of the API, and a new `CollectionImporter`. Tell the importer which collection to import into.\n\n```php\n$API      = new PerchAPI(1.0, 'my_importer');\n$Importer = $API->get('CollectionImporter');\n\n$Importer->set_collection('Articles');\n```\n\nThe importer uses a template to know how to process the incoming content. You might have a field called `publish_on`, but the importer only knows that the content should be processed as a date because it can look at the definition of `id=\"publish_on\"` in the supplied template.\n\n`PerchAPI_Template::set()` takes two arguments:\n\n1. The path to the template\n2. The tag namespace to use \n\n```php\n$Template = $API->get('Template');\n$Template->set('content/my_article', 'content');\n\n$Importer->set_template($Template);\n```\n\nYou're now ready to start importing content. If your collection is new and you want to clean out previous test imports, you can call `empty_collection()`. Don't do that on a collection with valuable content, it's a hard delete.\n\n```php\n$Importer->empty_collection();\n```\n\n## Importing\n\nAt this point you want to loop through your data source (whatever that may be) and map your content to IDs from your collection template. For each collection item you want to add, call `add_item()` with an associative array where the _keys_ are the IDs from your template, and the _values_ are the content you want to assign to that field.\n\nThe `add_item()` method validates required fields and will throw an exception if any item of content cannot be imported. For this reason, it's best to use a try/catch block:\n\n```php\ntry {\n\t$Importer->add_item([\n\t\t'title'    => 'Breaking news!',\n\t\t'body'     => 'Some **exciting news** has _just_ broken...',\n\t\t'slug'     => '',\n\t\t'date'     => '2012-04-28 12:23:09',\n\t\t'category' => ['articles/news', 'articles/flippin-exciting'],\n\t]);\t\n} catch (Exception $e) {\n\tdie('Error: '.$e->getMessage());\n}\n```\n\nThe corresponding template for this example might look like this:\n\n```html\n<perch:content id=\"title\" type=\"text\" label=\"Title\" required>\n<perch:content id=\"body\" type=\"textarea\" label=\"Body\" markdown>\n<perch:content id=\"slug\" type=\"slug\" for=\"title\" label=\"Slug\" required>\n<perch:content id=\"date\" type=\"date\" label=\"Date\" required format=\"d F Y H:i\">\n<perch:categories id=\"category\" set=\"articles\">\n\t<perch:category id=\"catTitle\">\n</perch:categories>\n```\n\nClearly not a very exciting template. I'm sure yours is much better.\n\n### Slug and composite fields\n\nThe importer will process slug and composite fields based on the content of other fields in the data set. The trick is to nudge the importer into action by specify those fields in your array.\n\n```php\n$Importer->add_item([\n\t'title'    => 'Breaking news!',\n\t'slug'     => '',\n]);\t\n```\n\nBecause the `slug` key is set, the importer will invoke the corresponding Slug field type from the tag in the template and generate a value.\n\n### Relationships\n\nRelationships can be created by specifying the IDs of the related items. The key should be the ID of the `perch:related` tag in your template.\n\n```php\ntry {\n\t$Importer->add_item([\n\t\t'title'  => 'Breaking news!',\n\t\t'author' => [12],\n\t]);\t\n} catch (Exception $e) {\n\tdie('Error: '.$e->getMessage());\n}\n```\n\nThe corresponding template for this example might look like this:\n\n```html\n<perch:content id=\"title\" type=\"text\" label=\"Title\" required>\n<perch:related id=\"author\" collection=\"Authors\">\n\t<perch:content id=\"name\" type=\"text\" label=\"Name\">\n</perch:related>\n```\n\nA successful call to `add_item()` will return the ID of the newly added item, which can help in importing relationships. For example in this case you could import the author, get the new author ID and then insert your news item using that author ID in the relationship.\n\n## Updating\n\nOnce content has already been imported, you can subsequently update it. This is a two-step process of finding the item (or items) and then updating.\n\nFirst you need to find an item (or items) to update. You use `find_items()` for this. It takes an options array just like you'd use to filter with `perch_collection()`.\n\n```php\n$items = $Importer->find_items([\n    'filter' => 'slug',\n    'value' => 'hello-world',\n]);\n```\n\nThis will always return an array of items - even if that's an array containing just one item. The crucial field you want from the result is `_id` - this is the item's ID for updating. You pass it as the first argument to `update_item()`. The second argument is an array of the fields you want to change.\n\n```php\nif (count($items)) {\n   foreach($items as $item) {\n      $Importer->update_item($item['_id'], [\n         'slug' => 'hello-george',\n      ]);\t\n   }\n}\n```\n\n## Deleting\n\nDeleting an item follows the same process as updating. First find the item, then call `delete_item()` to delete it.\n\n```php\n$items = $Importer->find_items([\n    'filter' => 'slug',\n    'value' => 'hello-world',\n]);\n\nif (count($items)) {\n   foreach($items as $item) {\n      $Importer->delete_item($item['_id']);\t\n   }\n}\n```","type":"api"},{"title":"Importing Products","permalink":"https://docs.grabaperch.com/api/import/shop/products/","id":"api.import.shop.products","excerpt":"Products can be imported programmatically into your shop. To achieve this, you first need:","text":"Products can be imported programmatically into your shop. To achieve this, you first need:\n\n1. A script that includes the Perch runtime (which could be a master page)\n2. A source of data\n\n## Getting started\n\nIn your script, include the Perch runtime. If you're using a Runway master page, you can skip this, just set up the master page and point a route to it.\n\n```php\ninclude('/perch/runtime.php');\n```\n\nCreate an instance of the API, and a new `PerchShopProductImporter`.\n\n```php\n$API      = new PerchAPI(1.0, 'my_importer');\n$Importer = $API->get('PerchShopProductImporter');\n\n```\n\nYou're now ready to start importing content. If your shop is new and you want to clean out previous test imports, you can call `empty_all()`. Don't do that on a shop with valuable content, it's a hard delete.\n\n```php\n$Importer->empty_all();\n```\n\n## Importing\n\nAt this point you want to loop through your data source (whatever that may be) and map your content to IDs from your product template. For each product item you want to add, call `add_item()` with an associative array where the _keys_ are the IDs from your product template, and the _values_ are the content you want to assign to that field.\n\nThe `add_item()` method validates required fields and will throw an exception if any item of content cannot be imported. For this reason, it's best to use a try/catch block:\n\n```php\ntry {\n\t$Importer->add_item([\n\t\t'sku'               => 'TSHIRT01',\n\t\t'title'             => 'My first t-shirt',\n\t\t'slug'              => 'my-first-t-shirt',\n\t\t'description'       => 'This is a really smashing t-shirt.',\n\t\t'image_assetID'     => 630,\n\t\t'img_desc'          => 'An image of the product',\n\t\t'status'            => true,\n\t\t'brand'             => 1,\n\t\t'category'          => 'products/clothes/',\n\t\t'catalog_only'      => false,\n\t\t'price'             => ['gbp' => 10, 'eur'=>12, 'usd'=>13],\n\t\t'sale_price'        => ['gbp' => 8,  'eur'=>10, 'usd'=>11],\n\t\t'trade_price'       => ['gbp' => 7,  'eur'=>9,  'usd'=>10],\n\t\t'on_sale'           => false,\n\t\t'tax_group'         => 1,\n\t\t'stock_status'      => '1',\n\t\t'stock_level'       => '199',\n\t\t'stock_location'    => true,\n\t\t'max_in_cart'       => 10,\n\t\t'requires_shipping' => true,\n\t\t'weight'            => 100,\n\t\t'width'             => 20,\n\t\t'height'            => 15,\n\t\t'depth'             => 30,\n\t]);\t\n} catch (Exception $e) {\n\tdie('Error: '.$e->getMessage());\n}\n```","type":"api"},{"title":"PerchAdminListing","permalink":"https://docs.grabaperch.com/api/reference/adminlisting/","id":"api.reference.adminlisting","excerpt":"The `PerchAdminListing` class provides a convenient way to produce data listings as a multi-column table.","text":"The `PerchAdminListing` class provides a convenient way to produce data listings as a multi-column table.\n\nTo create a listing, you first instantiate a new `PerchAdminListing`, define your columns and then render it using your data.\n\n```php\n$Listing = new PerchAdminListing($CurrentUser, $HTML, $Lang, $Paging);\n\n$Listing->add_col([\n\t/* ... */\t\n]);\n\n$Listing->add_col([\n\t/* ... */\t\n]);\n\n$Listing->add_col([\n\t/* ... */\t\n]);\n\necho $Listing->render($my_data);\n\n```\n\n## Constructor\n\nThe constructor requires instances of the following:\n\n- `PerchAuthenticatedUser`, which is normally available as `$CurrentUser`]\n- `PerchAPI_HTML`\n- `PerchAPI_Lang`\n- `PerchAPI_Paging`\n\n```php\n$Listing = new PerchAdminListing($CurrentUser, $HTML, $Lang, $Paging);\n```\n\n## Methods\n\nThe class exposes a number of methods.\n\n### add_col(array $column_definition)\n\nAdds a column to the listing.\n\nThe column definition is an associative array consisting of the following\n\n|Key|Value|\n|--|--|\n|title|The column heading|\n|sort|The ID of the data field to sort by if the column is sortable|\n|value|The ID of the data field to display as the value, or a callable returning the value|\n|edit_link|If the column has a link, the path to link to|\n|gravatar|ID of the email field to use for displaying a Gravatar|\n|icon|ID of the icon to use|\n\n\n### add_delete_action(array $column_definition)\n\nAdds a delete action button.\n\n|Key|Value|\n|--|--|\n|inline|If true, displays a confirmation modal dialog rather than linking through to the delete page|\n|path|Path to the delete page|\n|message|Text to display in the confirmation dialog|\n\n### enable_bulk_action(string $delete_path)\n\nEnables checkboxes against each list item to enable bulk deletion. This will likely be enhanced in future versions to be able to specify different bulk actions, at which point the first argument will become an array. The current behaviour will be maintained.\n\nPosts to the deletion page with an array of item IDs as GET options (`id[]=`).\n\n\n### render(array $data)\n\nTemplates the listing using the data provided. The data should be an array of instances of the `PerchAPI_Base` class, like those returned by the `PerchAPI_Factory::all()` method.","type":"api"},{"title":"FieldType","permalink":"https://docs.grabaperch.com/api/reference/fieldtype/","id":"api.reference.fieldtype","excerpt":"To create a new field type to handled, e.g. `type=\"foo\"` you would create a new PHP class at the following location:","text":"To create a new field type to handled, e.g. `type=\"foo\"` you would create a new PHP class at the following location:\n\n```unix\n/perch/addons/fieldtypes/foo/foo.class.php\n```\n\nYour class would be called `PerchFieldType_foo` and should extend `PerchAPI_FieldType`. Provided you stick to that naming convention for\nyour class file, you can put any related files your field type needs in your folder. Be that API libraries, CSS, JavaScript or what have you. Everything your field type needs should be contained in its folder.\n\nWithin the class, the following methods are defined. They are all optional - you only need to redeclare them when the behaviour of your field type differs from the basic functionality defined by `type=\"text\"`.\n\n|Method|Description|\n|-|-|\n|[render_inputs](/api/reference/fieldtype/render-inputs)| Renders the edit fields in the Perch control panel|\n|[get_raw](/api/reference/fieldtype/get-raw)|Reads in the form data when submitted and processes it|\n|[get_processed](/api/reference/fieldtype/get-processed)|Gets the data ready for templating|\n|[get_search_text](/api/reference/fieldtype/get-search-text)|Formats the field value for the search index so the content of this field can be searched|\n|[render_admin_listing](/api/reference/fieldtype/render-admin-listing)|Returns an HTML representation of the content for use in the list view of listdetail edit mode.|\n|[add_page_resources](/api/reference/fieldtype/add-page-resources)|Adds links for any JavaScript or CSS required by the field type.|\n\nYour class can contain any other functions needed for the tasks it needs to do.\n\n## Example\n\n```php\n  class PerchFieldType_foo extends PerchAPI_FieldType\n  {\n    public function render_inputs($details = array()) {\n    \n    }\n   \n    public function get_raw($post = false, $Item = false) {\n    \n    }\n    \n    public function get_processed($raw = false) {    \n    \n    }\n    \n    public function get_search_text($raw = false) {\n    \n    }\n\n    public function render_admin_listing($raw = false) {\n    \n    }\n  }\n```","type":"api"},{"title":"Lang","permalink":"https://docs.grabaperch.com/api/reference/lang/","id":"api.reference.lang","excerpt":"As Perch supports multiple languages, apps too have the ability to do so. Language files are created in `perch/addons/apps/my_app/lang`. During development of your app you should:","text":"As Perch supports multiple languages, apps too have the ability to do so. Language files are created in `perch/addons/apps/my_app/lang`. During development of your app you should:\n\n- Make sure the lang folder inside your app is writable by PHP\n- Set the Perch language setting to match the default language your app’s interface instructions are written in\n\nAs you create your app, text strings from the interface will be added to a new translation file inside the lang folder.\n\nStrings passed through `PerchAPI_HTML` and `PerchAPI_Form` are automatically added to the translation. If you write anything to the\npage directly, you should pass the string through `PerchAPI_Lang::get()`.\n\n```php\n$Lang = $API->get('Lang');\necho $Lang->get('Welcome to my app');\n```\n\n## Substitutions \n\nThe `get()` method acts a little like `sprintf()` (and in fact uses `sprintf()`) to enable string substitutions.\n\n```php\necho $Lang->get('Update the \"%s\" article', $Article->title());\n```\n\nYou should take advantage of this capability when needing to insert dynamic content or markup into translations rather than breaking the string into multiple translations, as it enables the translator to restructure the phrase easily.\n\n**Note**: it’s important that you don’t write raw strings to the page without pushing them through the translation system, as they won’t be\ntranslatable.","type":"api"},{"title":"PerchAPI_Base","permalink":"https://docs.grabaperch.com/api/reference/perchapi-base/","id":"api.reference.perchapi-base","excerpt":"Perch uses the factory pattern, a common design pattern for building object-oriented software. When you create an object using the [PerchAPI_Factory](/api/reference/perchapi-factory/) class, the resulting object is a `PerchAPI_Base` object.","text":"Perch uses the factory pattern, a common design pattern for building object-oriented software. When you create an object using the [PerchAPI_Factory](/api/reference/perchapi-factory/) class, the resulting object is a `PerchAPI_Base` object.\n\n```php\nclass Articles extends PerchAPI_Factory { }\nclass Article extends PerchAPI_Base { }\n```\n\n## Naming convention\n\nTry to keep your classes namespaced by prefixing your (company) name and app name. So if your company is called `Company` and your app is called `App`, you would use `CompanyApp_Article`:\n\n```php\nclass CompanyApp_Articles extends PerchAPI_Factory { }\nclass CompanyApp_Article extends PerchAPI_Base { }\n```\n\n## Properties\n\n| Property             | Description                                                                             | Default |\n| -------------------- | --------------------------------------------------------------------------------------- | ------- |\n| table                | The database table where the data of the objects created by the factory class is stored |         |\n| pk                   | The primary key for the database table                                                  |         |\n| index_table          | The index database table                                                                |         |\n| modified_date_column | The last modified date column                                                           | `false` |\n\n## Example\n\n```php\nclass CompanyApp_Article extends PerchAPI_Base {\n    protected $table = 'company_app_articles';\n    protected $pk = '_id';\n    protected $modified_date_column = 'updated';\n}\n```\n\nWe use the `PerchAPI_Factory` class to create a `PerchAPI_Base` object. See [create()](/api/reference/perchapi-factory/create/).","type":"api"},{"title":"PerchAPI_Factory","permalink":"https://docs.grabaperch.com/api/reference/perchapi-factory/","id":"api.reference.perchapi-factory","excerpt":"Perch uses the factory pattern, a common design pattern for building object-oriented software. When building Perch apps you can extend the `PerchAPI_Factory` class to define your own objects:","text":"Perch uses the factory pattern, a common design pattern for building object-oriented software. When building Perch apps you can extend the `PerchAPI_Factory` class to define your own objects:\n\n```php\nclass Articles extends PerchAPI_Factory { }\n```\n\nThe class comes with a number of useful methods for writing and fetching data to/from the database.\n\n## Naming convention\n\nTry to keep your classes namespaced by prefixing your (company) name and app name. So if your company is called `Company` and your app is called `App`, you would use `CompanyApp_Articles`:\n\n```php\nclass CompanyApp_Articles extends PerchAPI_Factory { }\n```\n\n## Properties\n\n| Property               | Description                                                                             | Default   |\n| ---------------------- | --------------------------------------------------------------------------------------- | --------- |\n| table                  | The database table where the data of the objects created by the factory class is stored |           |\n| pk                     | The primary key for the database table                                                  |           |\n| index_table            | The index database table                                                                | `false`   |\n| default_sort_column    | The default sort column for database queries                                            |           |\n| default_sort_direction | The default sort direction for database queries                                         | `ASC`     |\n| dynamic_fields_column  | The dynamic fields column                                                               | `false`   |\n| singular_classname     | The class name for a single `PerchAPI_Base` object                                      |           |\n| namespace              | The template namespace `perch:{namespace}`                                              | `content` |\n\n\n## Example\n\n```php\n  class CompanyApp_Articles extends PerchAPI_Factory {\n\t\tprotected $table = 'company_app_articles';\n\t\tprotected $pk = '_id';\n\t\tprotected $default_sort_column = 'publishedDate';\n\t\tprotected $default_sort_direction = 'DESC';\n\n\t\tprotected $namespace = 'blog';\n\t\tprotected $singular_classname = 'CompanyApp_Article';\n  }\n```","type":"api"},{"title":"PerchAPI_SubmittedForm","permalink":"https://docs.grabaperch.com/api/reference/perchapi-submittedform/","id":"api.reference.perchapi-submittedform","excerpt":"When a [Perch-templated form](/templates/form/) is submitted, Perch adds the submitted data along with other information to an instance of the `PerchAPI_SubmittedForm` class and use it as the function argument when calling the specified app's form handler function.","text":"When a [Perch-templated form](/templates/form/) is submitted, Perch adds the submitted data along with other information to an instance of the `PerchAPI_SubmittedForm` class and use it as the function argument when calling the specified app's form handler function.\n\n```html\n<perch:form id=\"comment\" app=\"company_app\" method=\"post\"></perch:form>\n```\n\nYour app's form handler function must be added as a [runtime function](/api/apps/runtime-functions/). It should be called `{your_app_ID}_form_handler`:\n\n```php\nfunction company_app_form_handler($SubmittedForm) {}\n```\n\n## Properties\n\n| Property        | Description                                                                  |\n| --------------- | ---------------------------------------------------------------------------- |\n| data            | The submitted data                                                           |\n| files           | The uploaded files                                                           |\n| form_attributes | The `perch:form` tag attributes                                              |\n| formID          | The form ID which is the value of the `id` attribute in the `perch:form` tag |\n| templatePath    | The Perch-templated form template path                                       |\n\n## Example\n\n```php\nfunction company_app_form_handler($SubmittedForm) {\n    if($SubmittedForm->validate()) {\n        switch($SubmittedForm->formID) {\n            case 'comment':\n            // submission came from <perch:form id=\"comment\" app=\"company_app\"></perch:form>\n            break;\n\n            case 'register':\n            // submission came from <perch:form id=\"register\" app=\"company_app\"></perch:form>\n            break;\n        }\n    }\n}\n```","type":"api"},{"title":"Perch API","permalink":"https://docs.grabaperch.com/api/reference/perchapi/","id":"api.reference.perchapi","excerpt":"The PerchAPI class is your starting point to the API. Instantiate it passing in the API version number (currently 1.0) and your app ID.","text":"The PerchAPI class is your starting point to the API. Instantiate it passing in the API version number (currently 1.0) and your app ID.\n\n```php\n$API  = new PerchAPI(1.0, 'my_sample');\n```\n\n## Methods\n\nPerchAPI exposes a number of methods.\n\n### PerchAPI::get(string $class)\n\nThis is a factory method for instantiating all the other API classes. Pass in the name of the class you wish to instantiate.\n\n```php\n$HTML = $API->get('HTML');\n```\n\n### PerchAPI::app_path()\n\nA utility method to return the web path to your app.\n\n```php\n$API  = new PerchAPI(1.0, 'my_sample');\necho $API->app_path(); // echos /perch/apps/my_sample\n```","type":"api"},{"title":"Settings","permalink":"https://docs.grabaperch.com/api/reference/settings/","id":"api.reference.settings","excerpt":"The Settings class enables you to get and set Perch settings.","text":"The Settings class enables you to get and set Perch settings.\n\n```php\n$Settings = $API->get('Settings');\n```\n\n## Methods\n\nThe PerchAPI_Settings class exposes a number of methods\n\n### PerchAPI_Settings::set(string $id, string \\value)\n\nSets the setting $id to the value \\value.\n\nIf you create your own settings within an app, you should prefix the ID\nwith your app ID.\n\n```php\n$Settings->set('my_sample_username', 'joesmith');\n```\n\n### PerchAPI_Settings::get(string $id)\n\nGets the setting $id. Returns a PerchSetting object.\n\n## PerchSetting Methods\n\nPerchAPI_Settings returns PerchSetting objects, which expose the\nfollowing methods.\n\n### PerchSetting::settingValue()\n\nReturns the value of the setting.\n\n```php\necho $Settings->get('my_sample_username')->settingValue();\n```","type":"api"},{"title":"Template","permalink":"https://docs.grabaperch.com/api/reference/template/","id":"api.reference.template","excerpt":"The Template class takes a template file and some data variables and merges them to create your final output.","text":"The Template class takes a template file and some data variables and merges them to create your final output.\n\n```php\n$Template = $API->get('Template');\n```\n\n## Methods\n\nThe PerchAPI_Template class exposes a number of methods.\n\n### PerchAPI_Template::set(string $file, string $namespace)\n\nSets the template file to use, and the tag namespace.\n\nThe template file is looked for first within the perch/templates folder, and then within the app’s own `perch/addons/apps/my_app/templates` folder. This enables apps to create default templates which users can then override by placing files of the same name within the common templates folder.\n\nThe tag namespace dictates the type of template tags to parse from. Set this to e.g. foo and the template class will parse tags. You should try and set this to match context, picking a namespace that fits with your app.\n\n```php\n$Template->set('blog/posts/detail.html', 'blog');\n```\n\n### PerchAPI_Template::render(array $data)\n\nTakes an associative array of content and merges it into the current template, returning the result.\n\n```php\n$data = array();\n$data['thingTitle'] = \"My Title\";\n$data['thingDescription'] = \"My Description\";\necho $Template->render($data);\n```\n\n### PerchAPI_Template::render_group(array $data [, boolean $implode])\n\nTakes an array of associative arrays of content and merges it into the current template, returning the result. By default returns an array of results, setting \\implode to true returns a single string.\n\n```php\n$data = array();\n$tmp = array();\n$tmp['thingTitle'] = \"My Title\";\n$tmp['thingDescription'] = \"My Description\";\n$data[] = $tmp;\n\n$tmp = array();\n$tmp['thingTitle'] = \"My Title 2\";\n$tmp['thingDesription'] = \"My Description 2\";\n$data[] = $tmp;\n\necho $Template->render_group($data, true);\n```","type":"api"},{"title":"PerchXMLTag","permalink":"https://docs.grabaperch.com/api/reference/xmltag/","id":"api.reference.xmltag","excerpt":"The `PerchXMLTag` class parses an XML tag as a string into a object that can be more usefully worked with.","text":"The `PerchXMLTag` class parses an XML tag as a string into a object that can be more usefully worked with.\n\n```php\n$Tag = new PerchXMLTag('<perch:content id=\"heading\" type=\"text\" label=\"Give it a title\">');\n```\n\nThe attributes can then be accessed as properties:\n\n```php\necho $Tag->id;  \t// heading\necho $Tag->type;\t// text\necho $Tag->label; \t// Give it a title\n```\n\n## Methods\n\nThere are a number of available methods\n\n### get_attributes\n\nGet the attributes as an array.\n\n```php\nprint_r($Tag->get_attributes());\n```\n\n### get_data_attribute_string()\n\nThis returns a string of all the `data-` attributes from the tag, ideal for passing straight through in a templating scenario.\n\n```php\necho $Tag->get_data_attribute_string();\n```\n\n### set\n\nAttributes can also be set:\n\n```php\nset($key=null, $val=false)\n```\n\nThis enables you to manipulate a tag before passing it on.\n\n### is_set\n\nTest if an attribute has been set:\n\n```php\nif ($Tag->is_set('id')) {\n\t// id has been set\n}\n```\n\n### tag_name\n\nGet the name of the tag\n\n```php\necho $Tag->tag_name(); // perch:content\n```\n\n### search_attributes_for\n\nIf you need to find attributes that begin with a certain prefix, you can do that with `search_attributes_for`\n\n```php\nprint_r($Tag->search_attributes_for('aria-'));\n```\n\n## Creating tags\n\nAs well as parsing a string to an object, you can do the reverse. `PerchXMLTag` can be used staticly to programatically generate a tag.\n\n```php\necho PerchXMLTag::create('img', 'single', [\n\t\t\t'src' => 'dog.jpg',\n\t\t\t'width' => '640',\n\t\t\t'height' => '480',\n\t\t]);\n```\n\nThe arguments are:\n\n1. Name of tag\n2. Type of tag - one of `opening`, `closing` or `single`\n3. An array of attributes","type":"api"},{"title":"Database","permalink":"https://docs.grabaperch.com/api/reference/db/","id":"api.reference.db","excerpt":"The core database class `PerchDB` provides a basic set of tools for getting data in and out of the database. It uses a single database connection, so you should use `PerchDB` when possible.","text":"The core database class `PerchDB` provides a basic set of tools for getting data in and out of the database. It uses a single database connection, so you should use `PerchDB` when possible.\n\nAn instance of `PerchDB` is available in the `db` property of both `PerchAPI_Factory` and `PerchAPI_Base`, so the preferred way of accessing is simply to use `$this->db` in a subclass of one of those two classes.\n\nIf you need to access `PerchDB` otherwise, you can get an instance:\n\n```php\n$DB = PerchDB::fetch();\n```\n\n## Methods\n\nThe class exposes a number of methods.\n\n### PerchDB::execute(string $sql)\n\nTakes a raw SQL string and executes it against the database.\n\n```php\n$this->db->execute('DROP my_table');\n```\n\n### PerchDB::get_rows(string $sql)\n\nTakes a SELECT statement and returns an array of associative arrays for each matching row.\n\n```php\n$this->db->get_rows('SELECT * FROM my_table');\n```\n\n### PerchDB::get_row(string $sql)\n\nTakes a SELECT statement designed to return a single row and returns an associative array of the matching row.\n\n```php\n$this->db->get_row('SELECT * FROM my_table WHERE articleID=1 LIMIT 1');\n```\n\n### PerchDB::get_value(string $sql)\n\nTakes a SELECT statement designed to return a single value and returns it.\n\n```php\n$this->db->get_value('SELECT articleTitle FROM my_table WHERE articleID=1 LIMIT 1');\n```\n\n### PerchDB::get_count(string $sql)\n\nTakes a SELECT COUNT statement and returns the count as an integer.\n\n```php\n$this->db->get_count('SELECT COUNT(*) FROM my_table');\n```\n\n### PerchDB::insert(string $table, array \\data)\n\nTakes an associative array with keys matching table column names and inserts into the given table. If the table uses an autonumbered primary key, returns the new ID.\n\n```php\n$data = array();\n$data['articleTitle'] = 'My article';\n$data['articleDate'] = date('Y-m-d');\n$newID = $this->db->insert('my_table', $data);\n```\n\n### PerchDB::update(string $table, array $data, string $column, string $id)\n\nTakes an associative array with keys matching table column names and updates the given table, where `$column` equals `$id`.\n\n```php\n$data = array();\n$data['articleTitle'] = 'My article';\n$data['articleDate'] = date('Y-m-d');\n$newID = $this->db->update('my_table', $data, 'articleID', '3');\n```\n\n### PerchDB::delete(string $table, string $column, string $id [, int $limit])\n\nDeletes from the given table, where `$column` equals `$id`. The number of rows to delete can be limited with `$limit`.\n\n```php\n$this->db->delete('my_table', 'articleID', '3');\n```\n\n### PerchDB::pdb(mixed $value)\n\nTakes a value and prepares it for use in an SQL statement by escaping any quotes and then wrapping it in quotes. Integers are left unwrapped.\n\n```php\n$sql = 'SELECT * FROM my_table WHERE articleID='.$this->db->pdb(3);\n// becomes:\nSELECT * FROM my_table WHERE articleID=3\n```\n\nAnd,\n\n```php\n$sql = 'SELECT * FROM my_table WHERE articleTitle='.$this->db->pdb('My article');\n// becomes:\nSELECT * FROM my_table WHERE articleTitle='My article'\n```\n\n### PerchDB::get_table_meta(string $table)\n\nReturns an associative array of meta information about the given table’s structure.","type":"api"},{"title":"HTML","permalink":"https://docs.grabaperch.com/api/reference/html/","id":"api.reference.html","excerpt":"The HTML class can be used for outputting bits of Perch user interface without needing to worry about what HTML or CSS to use. This makes it easy to have your app match the Perch UI.","text":"The HTML class can be used for outputting bits of Perch user interface without needing to worry about what HTML or CSS to use. This makes it easy to have your app match the Perch UI.\n\n```php\n$HTML = $API->get('HTML');\n```\n\nIn use:\n\n```php\n# Side panel\necho $HTML->side_panel_start();\necho $HTML->heading3('I am the sidebar');\necho $HTML->side_panel_end();\n\n# Main panel\necho $HTML->main_panel_start();\necho $HTML->heading1('Sample');\necho $HTML->heading2('This is my app');\necho $HTML->main_panel_end();\n```\n\n## Methods\n\nThe `PerchAPI_HTML` class exposes a number of methods.\n\n### PerchAPI_HTML::side_panel_start()\n\nReturns the HTML for the opening of the side panel down the right of the page.\n\n```php\necho $HTML->side_panel_start();\n...\necho $HTML->side_panel_end();\n```\n\n### PerchAPI_HTML::side_panel_end()\n\nReturns the HTML for the closing of the side panel down the right of the page.\n\n```php\necho $HTML->side_panel_start();\n...\necho $HTML->side_panel_end();\n```\n\n### PerchAPI_HTML::main_panel_start()\n\nReturns the HTML for the opening of the main content area of the page.\n\n```php\necho $HTML->main_panel_start();\n...\necho $HTML->main_panel_end();\n```\n\n### PerchAPI_HTML::main_panel_end()\n\nReturns the HTML for the closing of the main content area of the page.\n\n```php\necho $HTML->main_panel_start();\n...\necho $HTML->main_panel_end();\n```\n\n### PerchAPI_HTML::heading1(string $string)\n\nReturns an HTML `<h1>` tag. The string is translated. Takes additional arguments in the style of `printf`, so if parts of the string should not be translated, use a marker and the pass the non-translated portion as an argument.\n\n```php\necho $HTML->heading1('My heading');\necho $HTML->heading1('My %sheading%s', '<span>', '</span>');\n```\n\n### PerchAPI_HTML::heading2(string $string)\n\nReturns an HTML `<h2>` tag. The string is translated. Takes additional arguments in the style of `printf`, so if parts of the string should not be translated, use a marker and the pass the non-translated portion as an argument.\n\n```php\necho $HTML->heading2('My heading');\necho $HTML->heading2('My %sheading%s', '<span>', '</span>');\n```\n\n### PerchAPI_HTML::heading3(string $string)\n\nReturns an HTML `<h3>` tag. The string is translated. Takes additional arguments in the style of `printf`, so if parts of the string should not be translated, use a marker and the pass the non-translated portion as an argument.\n\n```php\necho $HTML->heading3('My heading');\necho $HTML->heading3('My %sheading%s', '<span>', '</span>);\n```\n\n### PerchAPI_HTML::heading4(string $string)\n\nReturns an HTML `<h4>` tag. The string is translated. Takes additional arguments in the style of `printf`, so if parts of the string should not be translated, use a marker and the pass the non-translated portion as an argument.\n\n```php\necho $HTML->heading4('My heading');\necho $HTML->heading4('My %sheading%s', '<span>', '</span>');\n```\n\n### PerchAPI_HTML::para(string $string)\n\nReturns an HTML `<p>` tag. The string is translated. Takes additional arguments in the style of `printf`, so if parts of the string should not be translated, use a marker and the pass the non-translated portion as an argument.\n\n```php\necho $HTML->para('You may edit your options here.');\necho $HTML->para('You may %sedit your options%s here.', '<a href=\"../options\">', '</a>);\n```\n\n### PerchAPI_HTML::warning_message(string $string)\n\nReturns the HTML for a warning message. The string is translated.\n\n```php\necho $HTML->warning_message('You have no content yet');\n```\n\n### PerchAPI_HTML::success_message(string $string)\n\nReturns the HTML for a success message. The string is translated.\n\n```php\necho $HTML->success_message('The item was successfully updated.');\n```\n\n### PerchAPI_HTML::failure_message(string $string)\n\nReturns the HTML for a failure message. The string is translated.\n\n```php\necho $HTML->failure_message('This item cannot be deleted.');\n```\n\n### PerchAPI_HTML::encode(string $string, bool $escape_quotes)\n\nReturns the HTML encoded version of the string\n\n```php\necho $HTML->encode('<script></script>');\n```\n\nWhen outputing into a quoted string (such as a tag attribute) you should use the second parameter to escape quotes:\n\n```php\necho '<div class=\"' . $HTML->encode($class_name, true) . '\">';\n```","type":"api"},{"title":"get_processed()","permalink":"https://docs.grabaperch.com/api/reference/fieldtype/get-processed/","id":"api.reference.fieldtype.get-processed","excerpt":"**Required Function: `get_processed($raw=false)`**","text":"**Required Function: `get_processed($raw=false)`**\n\n**Purpose:** to return processed or formatted content for use in a\ntemplate, based on any options given in the template tag.\n\nThis function takes the raw value and returns the processed version for\nuse in templates. This could mean returning the HTML version of a\nTextile field, or a YouTube video embed code instead of a video URL.\n\nNote, this function should be picking from data already prepared by\n`get_raw` as it is sometimes called at runtime. Don’t do any heavy\nprocessing here – just cherry-pick the data already processed to return.\n\nShould return a string.","type":"api"},{"title":"add_page_resources()","permalink":"https://docs.grabaperch.com/api/reference/fieldtype/add-page-resources/","id":"api.reference.fieldtype.add-page-resources","excerpt":"**Purpose:** to link in any JavaScript or CSS required by the field\ntype.","text":"**Purpose:** to link in any JavaScript or CSS required by the field\ntype.\n\nThis function is called once per field type per page, and can be used to\nset up any CSS or JavaScript needed by the field type. _It is optional_.","type":"api"},{"title":"get_search_text()","permalink":"https://docs.grabaperch.com/api/reference/fieldtype/get-search-text/","id":"api.reference.fieldtype.get-search-text","excerpt":"**Required Function: `get_search_text($raw=false)`**","text":"**Required Function: `get_search_text($raw=false)`**\n\n**Purpose:** to prepare a version of the field content for use in the\nsearch index.\n\nThis function should do whatever is needed to return a string of content\nsuitable for searching. For some field types, that may just mean\nstripping HTML tags, for others it might be selecting the appropriate\nparts of content and concatenating them into a single string. The map\nfield type, for example, returns the address of the pin, but nothing\nelse.\n\nThe string is used for search indexing only, and isn’t displayed to\nanywhere.","type":"api"},{"title":"get_raw()","permalink":"https://docs.grabaperch.com/api/reference/fieldtype/get-raw/","id":"api.reference.fieldtype.get-raw","excerpt":"The `get_raw()` method is used to capture any submitted content for the field type, process it and prepare it for storing in the database.","text":"The `get_raw()` method is used to capture any submitted content for the field type, process it and prepare it for storing in the database.\n\n## get_raw($post = false, $Item = false)\n\nThis method is responsible for reading the submitted values from the form data and preparing them to be stored. This usually means returning either a string, or an associative array for more complex types.\n\nThis function should do any processing required, as it only happens at edit time. So if you need to interact with web APIs etc, do it here and store the result to be used by `get_processed` later.","type":"api"},{"title":"render_admin_listing()","permalink":"https://docs.grabaperch.com/api/reference/fieldtype/render-admin-listing/","id":"api.reference.fieldtype.render-admin-listing","excerpt":"**Function: `render_admin_listing($raw=false)`","text":"**Function: `render_admin_listing($raw=false)`\n\n**Purpose:** to create an HTML string containing a representation of the\ncontent for use in the listdetail edit mode listing page.\n\nFor non-text content types, this is useful for customising the value\nthat is displayed in the listdetail edit most listing page. For example,\nthe default Image field type returns an HTML image tag with the preview\nthumbnail of an image, scaled down to 50% of its usual dimensions.\n\n_This function is only typically needed if your field type returns\nsomething that doesn’t work well as text in a listing._","type":"api"},{"title":"render_inputs()","permalink":"https://docs.grabaperch.com/api/reference/fieldtype/render-inputs/","id":"api.reference.fieldtype.render-inputs","excerpt":"The `render_inputs()` method creates and returns an HTML string containing the form field(s) used to edit a field type. These are then presented to the user in the control panel edit form.","text":"The `render_inputs()` method creates and returns an HTML string containing the form field(s) used to edit a field type. These are then presented to the user in the control panel edit form.\n\n## render_inputs($details = array())\n\nThe function `render_inputs` takes one parameter, an array. This array will be populated if we already have data for this field in order that we can redisplay the data for editing.\n\nThis function should return a string of HTML containing your form inputs.\n\n## Accessing the template tag\n\nYou can add attributes to the template tag and read these into your function using `$this->Tag`. For example if the template tag looks like\nthis:\n\n```html\n<perch:content id=\"filelist\" type=\"filelist\" label=\"Select a file\"\n required title extension=\"pdf\">\n```\n\nYou can get the value of the extension attribute by using:\n\n```php\n$ext = $this->Tag->extension();\n```","type":"api"},{"title":"index()","permalink":"https://docs.grabaperch.com/api/reference/perchapi-base/index-function/","id":"api.reference.perchapi-base.index-function","excerpt":"The `index()` method is used to update the item's data in the index table (if you have one).","text":"The `index()` method is used to update the item's data in the index table (if you have one).\n\n## Parameters\n\n| Type   | Description                                          |\n| ------ | ---------------------------------------------------- |\n| object | [PerchAPI_Template](/api/reference/template/) object |\n\n## Usage\n\n```php\n$API = new PerchAPI(1.0, 'company_app');\n$Articles = new CompanyApp_Articles($API);\n\n$Template   = $API->get('Template');\n$Template->set('path/to/template.html', 'namespace');\n\n\n$Article = $Articles->find(37);\n\nif( is_object($Article) ) {\n    // $Article is a PerchAPI_Base object\n    $Article->index($Template);\n}\n```","type":"api"},{"title":"to_array()","permalink":"https://docs.grabaperch.com/api/reference/perchapi-base/to-array/","id":"api.reference.perchapi-base.to-array","excerpt":"The `to_array()` method gets the item's data in an associative array. The method also JSON decodes the value of the dynamic fields column (if one exists) and includes the values in the returned array.","text":"The `to_array()` method gets the item's data in an associative array. The method also JSON decodes the value of the dynamic fields column (if one exists) and includes the values in the returned array.\n\nIf the `PerchAPI_Base` object's property `prefix_vars` is set to `true`, the method also includes a duplicate for each dynamic field with a key prefixed with `perch_`. This is useful for control panel edit forms that are handled with `PerchAPI_Form`.\n\n## Return\n\nArray\n\n## Usage\n\n```php\n$API = new PerchAPI(1.0, 'company_app');\n$Articles = new CompanyApp_Articles($API);\n\n$Template   = $API->get('Template');\n$Template->set('path/to/template.html', 'namespace');\n\n\n$Article = $Articles->find(37);\n\nif( is_object($Article) ) {\n    // $Article is a PerchAPI_Base object\n    $details = $Article->to_array();\n}\n```","type":"api"},{"title":"delete()","permalink":"https://docs.grabaperch.com/api/reference/perchapi-base/delete/","id":"api.reference.perchapi-base.delete","excerpt":"The `delete()` method deletes the item from the database.","text":"The `delete()` method deletes the item from the database.\n\n\n## Usage\n\n```php\n$API = new PerchAPI(1.0, 'company_app');\n$Articles = new CompanyApp_Articles($API);\n\n$Article = $Articles->get_one_by('title', 'Unicorns are real');\n\nif( is_object($Article) ) {\n    // $Article is a PerchAPI_Base object\n    $Article->delete();\n}\n```","type":"api"},{"title":"update()","permalink":"https://docs.grabaperch.com/api/reference/perchapi-base/update/","id":"api.reference.perchapi-base.update","excerpt":"The `update()` method is used to update an item's data in the database.","text":"The `update()` method is used to update an item's data in the database.\n\n## Parameters\n\n| Type  | Description                        |\n| ----- | ---------------------------------- |\n| Array | Data to be updated in the database |\n\n## Return\n\nBoolean\n\n## Usage\n\n```php\n$API = new PerchAPI(1.0, 'company_app');\n$Articles = new CompanyApp_Articles($API);\n\n$Article = $Articles->find(37);\n\nif( is_object($Article) ) {\n    // $Article is a PerchAPI_Base object\n    $result = $Article->update(['title' => 'Unicorns are real']);\n\n    if($result) {\n        // updated successfully\n    }\n}\n```","type":"api"},{"title":"id()","permalink":"https://docs.grabaperch.com/api/reference/perchapi-base/id/","id":"api.reference.perchapi-base.id","excerpt":"The `id()` method gets the item's unique ID (the value of the primary key column).","text":"The `id()` method gets the item's unique ID (the value of the primary key column).\n\n\n## Usage\n\n```php\n$API = new PerchAPI(1.0, 'company_app');\n$Articles = new CompanyApp_Articles($API);\n\n$Article = $Articles->get_one_by('title', 'Perch is amazing');\n\nif( is_object($Article) ) {\n    // $Article is a PerchAPI_Base object\n    $articleID = $Article->id();\n}\n```","type":"api"},{"title":"redispatch()","permalink":"https://docs.grabaperch.com/api/reference/perchapi-submittedform/redispatch/","id":"api.reference.perchapi-submittedform.redispatch","excerpt":"The `redispatch()` method calls a Perch app's form handler function.","text":"The `redispatch()` method calls a Perch app's form handler function.\n\n## Parameters\n\n```php\n$SubmittedForm->redispatch($appID);\n```\n\n| Type   | Description |\n| ------ | ----------- |\n| string | The app ID  |\n\n## Usage\n\n```php\n$SubmittedForm->redispatch('perch_forms');\n```","type":"api"},{"title":"validate()","permalink":"https://docs.grabaperch.com/api/reference/perchapi-submittedform/validate/","id":"api.reference.perchapi-submittedform.validate","excerpt":"The `validate()` method validates the submitted data against the Perch form fields in a Perch-templated form.","text":"The `validate()` method validates the submitted data against the Perch form fields in a Perch-templated form.\n\n## Return\n\nBoolean\n\n## Usage\n\n```php\nfunction company_app_form_handler($SubmittedForm) {\n    if($SubmittedForm->validate()) {\n        // valid\n    }\n}\n```","type":"api"},{"title":"throw_error()","permalink":"https://docs.grabaperch.com/api/reference/perchapi-submittedform/throw-error/","id":"api.reference.perchapi-submittedform.throw-error","excerpt":"The `throw_error()` method logs form errors with Perch. The method on its own does not stop the form processing; that's your responsibility as the developer.","text":"The `throw_error()` method logs form errors with Perch. The method on its own does not stop the form processing; that's your responsibility as the developer.\n\n## Parameters\n\n```php\n$SubmittedForm->throw_error($type, $field);\n```\n\n| Type   | Description                      | Default |\n| ------ | -------------------------------- | ------- |\n| string | The type of error. e.g. `format` |         |\n| string | The form field ID                | `all`   |\n\n## Usage\n\n```php\nfunction company_app_form_handler($SubmittedForm) {\n    if($SubmittedForm->validate()) {\n        switch($SubmittedForm->formID) {\n            case 'register':\n                if(!company_app_is_phone_valid($SubmittedForm->data['phone'])) {\n                    $SubmittedForm->throw_error('format', 'phone');\n                }\n            break;\n        }\n    }\n\n    // access logged errors\n    $Perch = Perch::fetch();\n    $form_errors = $Perch->get_form_errors($SubmittedForm->formID);\n\n    if(!$form_errors) {\n        // No errors logged! Do something like a redirect\n        PerchSystem::redirect('/thank-you');\n    }\n}\n```","type":"api"},{"title":"create()","permalink":"https://docs.grabaperch.com/api/reference/perchapi-factory/create/","id":"api.reference.perchapi-factory.create","excerpt":"The `create()` method is used for creating an item and writing the data to the database.","text":"The `create()` method is used for creating an item and writing the data to the database.\n\n## Parameters\n\n| Type  | Description                                          |\n| ----- | ---------------------------------------------------- |\n| Array | Data to be inserted into a row in the database table |\n\n## Return\n\nIf the method successfully creates a row, it returns a `PerchAPI_Base` object.\n\n## Usage\n\n```php\n$API = new PerchAPI(1.0, 'company_app');\n$Articles = new CompanyApp_Articles($API);\n\n$Article = $Articles->create([\n  'title' => 'Perch is amazing',\n  'publishedDate' => '2020-03-15 10:30:00',\n]);\n\nif( is_object($Article) ) {\n  // created successfully\n}\n```","type":"api"},{"title":"all()","permalink":"https://docs.grabaperch.com/api/reference/perchapi-factory/all/","id":"api.reference.perchapi-factory.all","excerpt":"The `all()` method returns all rows from the database table as an array of `PerchAPI_Base` objects.","text":"The `all()` method returns all rows from the database table as an array of `PerchAPI_Base` objects.\n\n## Parameters\n\n| Type   | Description          | Default |\n| ------ | -------------------- | ------- |\n| Paging | A PerchPaging object | `false` |\n\n## Return\n\nThe method returns an array of `PerchAPI_Base` objects.\n\n## Usage\n\n```php\n$API = new PerchAPI(1.0, 'company_app');\n$Articles = new CompanyApp_Articles($API);\n\n$Paging = $API->get('Paging');\n$Paging->set_per_page(12);\n\n$articles = $Articles->all($Paging);\n```","type":"api"},{"title":"find()","permalink":"https://docs.grabaperch.com/api/reference/perchapi-factory/find/","id":"api.reference.perchapi-factory.find","excerpt":"The `find()` method looks up a single row from the database table by querying a given value against the primary key column.","text":"The `find()` method looks up a single row from the database table by querying a given value against the primary key column.\n\n## Parameters\n\n| Type         | Description                                          |\n| ------------ | ---------------------------------------------------- |\n| String / int | A value to be checked against the primary key column |\n\n## Return\n\nIf a row is found, the method returns a `PerchAPI_Base` object. Otherwise it returns `false`.\n\n## Usage\n\n```php\n$API = new PerchAPI(1.0, 'company_app');\n$Articles = new CompanyApp_Articles($API);\n\n$Article = $Articles->find(37);\n\nif( is_object($Article) ) {\n  // found\n}\n```","type":"api"},{"title":"first()","permalink":"https://docs.grabaperch.com/api/reference/perchapi-factory/first/","id":"api.reference.perchapi-factory.first","excerpt":"The `first()` method returns the first row from the database table. If you have defined a default sort column and direction, the methord will apply them to the query. See the class [properties](/api/reference/perchapi_factory/index.htmlproperties).","text":"The `first()` method returns the first row from the database table. If you have defined a default sort column and direction, the methord will apply them to the query. See the class [properties](/api/reference/perchapi_factory/index.html#properties).\n\n\n## Return\n\nIf a row is found, the method returns a `PerchAPI_Base` object. Otherwise (i.e. if the table is empty), it returns `false`.\n\n## Usage\n\n```php\n$API = new PerchAPI(1.0, 'company_app');\n$Articles = new CompanyApp_Articles($API);\n\n$Article = $Articles->first();\n```","type":"api"},{"title":"get_by()","permalink":"https://docs.grabaperch.com/api/reference/perchapi-factory/get-by/","id":"api.reference.perchapi-factory.get-by","excerpt":"Get a collection of items where the given column matches the given value. e.g. `get_by('catID', 2)` would get all rows with `catID=2`. If the given value is an array, the method does a SQL WHERE IN().","text":"Get a collection of items where the given column matches the given value. e.g. `get_by('catID', 2)` would get all rows with `catID=2`. If the given value is an array, the method does a SQL WHERE IN().\n\n## Parameters\n\n```php\n$Factory->get_by($col, $val, $order_by_col, $Pagaing);\n```\n\n| Type   | Description        | Default |\n| ------ | ------------------ | ------- |\n| String | Column             |         |\n| String | Value              |         |\n| String | Column to sort by  | `false` |\n| Object | PerchPaging object | `false` |\n\n## Return\n\nThe method returns an array of `PerchAPI_Base` objects. If no matching rows found, it returns `false`.\n\n## Usage\n\n```php\n$API = new PerchAPI(1.0, 'company_app');\n$Articles = new CompanyApp_Articles($API);\n\n$articles = $Articles->get_by('status', 'published');\n```","type":"api"},{"title":"get_filtered_listing_from_index()","permalink":"https://docs.grabaperch.com/api/reference/perchapi-factory/get-filtered-listing-from-index/","id":"api.reference.perchapi-factory.get-filtered-listing-from-index","excerpt":"Get a filtered list of items from the index table. The parameters and usage of the method is identical to [get_filtered_listing](/api/reference/perchapi-factory/get-filtered-listing/).","text":"Get a filtered list of items from the index table. The parameters and usage of the method is identical to [get_filtered_listing](/api/reference/perchapi-factory/get-filtered-listing/).","type":"api"},{"title":"get_filtered_listing()","permalink":"https://docs.grabaperch.com/api/reference/perchapi-factory/get-filtered-listing/","id":"api.reference.perchapi-factory.get-filtered-listing","excerpt":"Get a filtered list of items.","text":"Get a filtered list of items.\n\n## Parameters\n\n```php\n$Factory->get_filtered_listing($opts, $where_callback, $pre_template_callback);\n```\n\n| Type     | Description                     | Default |\n| -------- | ------------------------------- | ------- |\n| Array    | Options array, see table below  |         |\n| Function | See where callback below        | `null`  |\n| Function | See pre-template callback below | `null`  |\n\n## Option array\n\n| Option | Value |\n| ------ | ----- |\n|template|The name of a template to use to display the content.|\n|sort|The ID of the field to sort on.|\n|sort-order|Either `ASC` (ascending), `DESC` (descending) or `RAND` (random).|\n|sort-type|Either `alpha` or `numeric`. Default is `alpha`.|\n|count|The number of items to display.|\n|start|The item number to start displaying from.|\n|filter|The ID of a field to filter the results by.|\n|match|Used with filter, see the below table for values|\n|value|Used with filter and match. The value to match. For `between` and `in`, takes a comma delimited string. For `regex` takes PCRE regular expression.|\n|category|Filter by one or more categories. See [Category filtering](/docs/categories/filtering/)|\n|category-match|Either `any` or `all`. See [Category filtering](/docs/categories/filtering/)|\n|skip-template|True or false. Bypass template processing and return the content in an associative array.|\n|return-html|True or false. For use with `skip-template`. Adds the HTML onto the end of the returned array with key `html`.|\n|split-items|True or false. Return an array of individually templated items.|\n|raw|True or false. Returns unprocessed content, for use alongside skip-template.|\n|paginate|True or false. Whether to use pagination.|\n|count|Integer. (When used with `paginate`) The number of items to show per page if pagination is being used.|\n|pagination-var|The URL query string parameter name to use for the page number. Defaults to page.|\n|page-links|True or false. Create numbered page links as well as previous and next links.|\n|page-link-template|The template to use (if not the default) to generate the page links.|\n|page-link-style|shortened or all. By default a shortened set of page links are generated. If you want a link for every page, set to all.|\n### Possible values for match\n\n| Value      | Aliases       | Description                                                         |\n| ---------- | ------------- | ------------------------------------------------------------------- |\n| eq         | `is`, `exact` | equal to                                                            |\n| neq        | `not`, `!eq`  | not equal to                                                        |\n| gt         |               | greater than                                                        |\n| gte        |               | greater than or equal to                                            |\n| lt         |               | less than                                                           |\n| lte        |               | less than or equal to                                               |\n| contains   |               | the value exists within the content (a simple search)               |\n| !contains  |               | opposite of `contains`: the value does not exist within the content |\n| regex      | `regexp`      | using a PCRE regular expression                                     |\n| between    |               | match between two values                                            |\n| !between   |               | opposite of `between`                                               |\n| eqbetween  |               | match between two values inclusively                                |\n| !eqbetween |               | opposite of `eqbetween`                                             |\n| in         | `within`      | match within a comma delimited content list (like a list of tags)   |\n| !in        | `!within`     | opposite of `in`                                                    |\n\n## Where callback\n\nA function that returns a `PerchQuery` object. The query is merged with the database query generated by the `get_filtered_listing()` method.\n\n```php\n$where_callback = function(PerchQuery $Query, $opts) {\n  return $Query;\n};\n```\n\n| Type   | Description                                            |\n| ------ | ------------------------------------------------------ |\n| Object | PerchQuery object                                      |\n| Array  | The options array passed from `get_filtered_listing()` |\n\n## Pre-template callback\n\nA function to apply to the returned rows before entering the templating phase.\n\n```php\n$pre_template_callback = function($rows, $opts) {\n  return $rows;\n};\n```\n\n| Type  | Description                                            |\n| ----- | ------------------------------------------------------ |\n| Array | An array of the returned rows                          |\n| Array | The options array passed from `get_filtered_listing()` |\n\n\n\n## Usage\n\n\n```php\n$API = new PerchAPI(1.0, 'company_app');\n$Articles = new CompanyApp_Articles($API);\n\n$Articles->get_filtered_listing([\n  'template' => $template,\n  'filter' => 'status',\n  'match' => 'eq',\n  'value' => 'published',\n]);\n```","type":"api"},{"title":"get_recent()","permalink":"https://docs.grabaperch.com/api/reference/perchapi-factory/get-recent/","id":"api.reference.perchapi-factory.get-recent","excerpt":"Gets recent items, sorted by date, limited by an int or PerchPaging class","text":"Gets recent items, sorted by date, limited by an int or PerchPaging class\n\n## Parameters\n\n```php\n$Factory->get_recent($Paging_or_limit, $use_modified_date);\n```\n\n| Type              | Description                                                                 | Default |\n| ----------------- | --------------------------------------------------------------------------- | ------- |\n| PerchPaging / int | Limit the number of returned items by PerchPaging or an int                 | 10      |\n| Boolean           | Use the value of the `modified_date_column` property as the order by column | `false` |\n\n## Return\n\nThe method returns an array of `PerchAPI_Base` objects. If no matching rows found, it returns `false`.\n\n## Usage\n\n```php\n$API = new PerchAPI(1.0, 'company_app');\n$Articles = new CompanyApp_Articles($API);\n\n$articles = $Articles->get_recent(20);\n```","type":"api"},{"title":"return_flattened_instance()","permalink":"https://docs.grabaperch.com/api/reference/perchapi-factory/return-flattened-instance/","id":"api.reference.perchapi-factory.return-flattened-instance","excerpt":"The method takes a single row and returns a `PerchAPI_Base` object's data in an array.","text":"The method takes a single row and returns a `PerchAPI_Base` object's data in an array.\n\n## Parameters\n\n| Type  | Description |\n| ----- | ----------- |\n| Array | Row         |\n\n## Return\n\nThe method returns an array. If the given row is empty, it returns `false`.\n\n## Usage\n\n```php\n$API = new PerchAPI(1.0, 'company_app');\n$Articles = new CompanyApp_Articles($API);\n$DB = $API->get('DB');\n\n$row = $DB->get_row(\"SELECT * FROM \" . $table . \" WHERE status=published LIMIT 1\");\n$Article = $Articles->return_flattened_instance($row);\n```","type":"api"},{"title":"return_flattened_instances()","permalink":"https://docs.grabaperch.com/api/reference/perchapi-factory/return-flattened-instances/","id":"api.reference.perchapi-factory.return-flattened-instances","excerpt":"The method takes an array of rows and returns an array of `PerchAPI_Base` objects data.","text":"The method takes an array of rows and returns an array of `PerchAPI_Base` objects data.\n\n## Parameters\n\n| Type  | Description |\n| ----- | ----------- |\n| Array | Rows        |\n\n## Return\n\nThe method returns an array. If the given rows are empty, it returns `false`.\n\n## Usage\n\n```php\n$API = new PerchAPI(1.0, 'company_app');\n$Articles = new CompanyApp_Articles($API);\n$DB = $API->get('DB');\n\n$rows = $DB->get_rows(\"SELECT * FROM \" . $table . \" WHERE status=published\");\n$articles = $Articles->return_flattened_instances($rows);\n```","type":"api"},{"title":"return_instance()","permalink":"https://docs.grabaperch.com/api/reference/perchapi-factory/return-instance/","id":"api.reference.perchapi-factory.return-instance","excerpt":"The method takes a single row and returns a `PerchAPI_Base` object.","text":"The method takes a single row and returns a `PerchAPI_Base` object.\n\n## Parameters\n\n| Type  | Description |\n| ----- | ----------- |\n| Array | Row         |\n\n## Return\n\nThe method returns a `PerchAPI_Base` object. If the given row is empty, it returns `false`.\n\n## Usage\n\n```php\n$API = new PerchAPI(1.0, 'company_app');\n$Articles = new CompanyApp_Articles($API);\n$DB = $API->get('DB');\n\n$row = $DB->get_row(\"SELECT * FROM \" . $table . \" WHERE status=published LIMIT 1\");\n$Article = $Articles->return_instance($row);\n```","type":"api"},{"title":"get_one_by()","permalink":"https://docs.grabaperch.com/api/reference/perchapi-factory/get-one-by/","id":"api.reference.perchapi-factory.get-one-by","excerpt":"Get one item by the specified column. e.g. `get_one_by('authorID', 232)` would select from this table where `authorID=232`.","text":"Get one item by the specified column. e.g. `get_one_by('authorID', 232)` would select from this table where `authorID=232`.\n\n## Parameters\n\n```php\n$Factory->get_one_by($col, $val, $order_by_col);\n```\n\n| Type   | Description        | Default |\n| ------ | ------------------ | ------- |\n| String | Column             |         |\n| String | Value              |         |\n| String | Column to sort by  | `false` |\n\n\n## Return\n\nThe method returns a `PerchAPI_Base` object. If no matching rows found, it returns `false`.\n\n## Usage\n\n```php\n$API = new PerchAPI(1.0, 'company_app');\n$Articles = new CompanyApp_Articles($API);\n\n$articles = $Articles->get_one_by('title', 'Perch is amazing');\n```","type":"api"},{"title":"return_instances()","permalink":"https://docs.grabaperch.com/api/reference/perchapi-factory/return-instances/","id":"api.reference.perchapi-factory.return-instances","excerpt":"The method takes an array of rows and returns an array of `PerchAPI_Base` objects.","text":"The method takes an array of rows and returns an array of `PerchAPI_Base` objects.\n\n## Parameters\n\n| Type  | Description |\n| ----- | ----------- |\n| Array | Rows        |\n\n## Return\n\nThe method returns an array of `PerchAPI_Base` objects. If the given rows are empty, it returns `false`.\n\n## Usage\n\n```php\n$API = new PerchAPI(1.0, 'company_app');\n$Articles = new CompanyApp_Articles($API);\n$DB = $API->get('DB');\n\n$rows = $DB->get_rows(\"SELECT * FROM \" . $table . \" WHERE status=published\");\n$articles = $Articles->return_instances($rows);\n```","type":"api"},{"title":"Caching","permalink":"https://docs.grabaperch.com/runway/caching/","id":"runway.caching","excerpt":"Perch Runway has support for caching mechanisms at various different levels between the database and the user's browser. Those are described in this section.","text":"Perch Runway has support for caching mechanisms at various different levels between the database and the user's browser. Those are described in this section.\n\n- Using [Varnish](/runway/caching/varnish/)","type":"runway"},{"title":"Collections","permalink":"https://docs.grabaperch.com/runway/collections/","id":"runway.collections","excerpt":"Collections are big repositories that hold one type of content. You might have a collection of Articles and a collection of Authors. You can then create relationships between collections, for example to relate an Author to an Article.","text":"Collections are big repositories that hold one type of content. You might have a collection of Articles and a collection of Authors. You can then create relationships between collections, for example to relate an Author to an Article.\n\nIn use, collections can be displayed in just the same way as basic content regions, but there are a few key differences.\n\n## Differences between Collections and Regions\n\n1. Regions are tied to a page or (for shared regions) to *every* page. Collections are not tied to any page.\n2. Version revisioning on collections is per *item*, whereas regions are versioned per *region*\n3. A link to manage a collection can be added to any number of your control panel pages, and to the sidebar where needed\n\n## Managing a collection from a page\n\nAdding a link to edit a collection from a page particular page in the control panel enables you to provide a logical editing experience for your client. You might have a collection of news articles, and also a News page that displays them. Make life easy for your client by linking the collection from the News page, which is where they'd probably expect to find it.\n\n1. Create a collection from the Collections section under Pages\n2. Find your page and go to the Page Options\n3. You should see your collection listed in the Collections section. Check the box to add it to this page, and save.\n\nWhen you go to edit the page, the collection should now be listed with the page's regions. Clicking on it jumps you through to the collection edit page.\n\n## Adding a collection to the sidebar\n\n1. Go to *Settings* and to the *Menu Manager*\n2. Select an existing menu or create a new one\n3. Create a new menu item\n4. Enter a title and choose your collection from the \"Link to Collection\" list, and save.\n\nYour collection will now appear in the choosen point in the sidebar menu.\n\n## Importing from a Region to a Collection\n\nWhen moving from a Perch site to Runway, or if restructuring a site because it's grown in ways you didn't expect, it can be useful to import one or more regions into a collection.\n\nTo do this, the structure of the region(s) and the collection must be compatible - their templates need to include the same IDs and types.\n\n1. Create your new collection\n2. In the collection, go to the Import tab\n3. Select the page the region is on, click next\n4. Select the region, click next\n5. You'll be asked to confirm your choices, click Import\n\n## Importing other data into a collection\n\nIf you need to import external data into a collection, that's possible too. To give the most flexibility, this is done by writing a script to import the data using an import API. You can [read about importing into a collection](/api/import/) in the API docs.\n\n## Displaying content from collection\n\nContent is displayed using the `perch_collection()` page function, which works in the same way as [perch_content_custom()](/functions/content/perch-content-custom/).\n\n```php\nperch_collection('Articles', [\n    'count' => 3,\n    'sort'  => '_date', \n    'sort-order' => 'DESC',\n]);\n```\n\n### perch_collection options\n\n|Option|Value|\n|-|-|\n|template|The name of a template to use to display the content.|\n|sort|The ID of the field to sort on.|\n|sort-order|Either `ASC` (ascending), `DESC` (descending) or `RAND` (random).|\n|sort-type|Either `alpha` or `numeric`. Default is `alpha`.|\n|count|The number of items to display.|\n|start|The item number to start displaying from.|\n|filter|The ID of a field to filter the results by.|\n|match|Used with filter, see the below table for values|\n|value|Used with filter and match. The value to match. For `between` and `in`, takes a comma delimited string. For `regex` takes PCRE regular expression.|\n|category|Filter by one or more categories. See [Category filtering](/docs/categories/filtering/)|\n|category-match|Either `any` or `all`. See [Category filtering](/docs/categories/filtering/)|\n|skip-template|True or false. Bypass template processing and return the content in an associative array.|\n|return-html|True or false. For use with `skip-template`. Adds the HTML onto the end of the returned array with key `html`.|\n|split-items|True or false. Return an array of individually templated items.|\n|raw|True or false. Returns unprocessed content, for use alongside skip-template.|\n|paginate|True or false. Whether to use pagination.|\n|count|Integer. (When used with `paginate`) The number of items to show per page if pagination is being used.|\n|pagination-var|The URL query string parameter name to use for the page number. Defaults to page.|\n|page-links|True or false. Create numbered page links as well as previous and next links.|\n|page-link-template|The template to use (if not the default) to generate the page links.|\n|page-link-style|shortened or all. By default a shortened set of page links are generated. If you want a link for every page, set to all.|\n### Possible values for match\n\n| Value      | Aliases       | Description                                                         |\n| ---------- | ------------- | ------------------------------------------------------------------- |\n| eq         | `is`, `exact` | equal to                                                            |\n| neq        | `not`, `!eq`  | not equal to                                                        |\n| gt         |               | greater than                                                        |\n| gte        |               | greater than or equal to                                            |\n| lt         |               | less than                                                           |\n| lte        |               | less than or equal to                                               |\n| contains   |               | the value exists within the content (a simple search)               |\n| !contains  |               | opposite of `contains`: the value does not exist within the content |\n| regex      | `regexp`      | using a PCRE regular expression                                     |\n| between    |               | match between two values                                            |\n| !between   |               | opposite of `between`                                               |\n| eqbetween  |               | match between two values inclusively                                |\n| !eqbetween |               | opposite of `eqbetween`                                             |\n| in         | `within`      | match within a comma delimited content list (like a list of tags)   |\n| !in        | `!within`     | opposite of `in`                                                    |","type":"runway"},{"title":"Cloud Storage","permalink":"https://docs.grabaperch.com/runway/cloud-storage/","id":"runway.cloud-storage","excerpt":"Those wishing to store assets on remote cloud storage systems such as Amazon S3 or Rackspace Cloud Files, and perhaps serve them through a CDN, can do so through Runway's extension to the [Perch Resource Buckets](/perch/resources/buckets/) system.","text":"Those wishing to store assets on remote cloud storage systems such as Amazon S3 or Rackspace Cloud Files, and perhaps serve them through a CDN, can do so through Runway's extension to the [Perch Resource Buckets](/perch/resources/buckets/) system.\n\nOnce a bucket is defined in your bucket list as using a cloud storage system, any files written to that bucket will be uploaded to the cloud storage system automatically.\n\n**Note:** when using cloud storage, assets must first be temporarily uploaded to your site before being transferred to storage, so your default resource bucket still needs to be configured and writable.\n\nBy default, Perch Runway has support for Dropbox, Amazon S3 and the OpenStack Object Storage API as used by Rackspace Cloud Files and others.\n\n- Using [Dropbox](/runway/cloud-storage/dropbox/)\n- Using [Amazon S3](/runway/cloud-storage/amazon/)\n- Using [OpenStack Object Storage](/runway/cloud-storage/openstack/) for services like Cloud Files","type":"runway"},{"title":"Configuration","permalink":"https://docs.grabaperch.com/runway/configuration/","id":"runway.configuration","excerpt":"As Perch Runway is built on top of Perch, the basic configuration options remain the same. These can be found in the [Perch Configuration](/perch/configuration/) section.","text":"As Perch Runway is built on top of Perch, the basic configuration options remain the same. These can be found in the [Perch Configuration](/perch/configuration/) section.\n\nIn addition to this, Perch Runway has a number of configuration settings that are made in its own `config/runway.php` file, including [routing tokens](/runway/routing/custom-tokens/) and [cloud storage settings](/runway/cloud-storage/).","type":"runway"},{"title":"Headless requests","permalink":"https://docs.grabaperch.com/runway/headless/","id":"runway.headless","excerpt":"The concept of a _headless_ CMS refers to a type of CMS where the system acts like a content API rather than serving pages. The presentation layer is completely skipped - no templates, no layouts, no real HTML like you'd expect from a web content management system. Instead, a headless system responds with pure data, often structured as JSON or XML.","text":"The concept of a _headless_ CMS refers to a type of CMS where the system acts like a content API rather than serving pages. The presentation layer is completely skipped - no templates, no layouts, no real HTML like you'd expect from a web content management system. Instead, a headless system responds with pure data, often structured as JSON or XML.\n\nPerch Runway 3 has the ability to respond to content queries in this way alongside it's regular operation serving web pages.\n\n\n## Add-on compatibility\n\nIndividual add-ons need to hook into the headless infrastructure Runway provides to be able serve their content. More capabilities will be added as add-ons are updated.\n\n|Add-on|Support|Capabilities|\n|-|-|-|\n|Blog|Yes|Posts, Comments|\n|Shop|Yes|Products, Basket|","type":"runway"},{"title":"Getting Started with Runway","permalink":"https://docs.grabaperch.com/runway/getting-started/","id":"runway.getting-started","excerpt":"This section of the Runway Documentation is your starting point if you are new to Perch Runway or haven't used the product for a while. It includes installation instructions and initial steps to get you started with your project.","text":"This section of the Runway Documentation is your starting point if you are new to Perch Runway or haven't used the product for a while. It includes installation instructions and initial steps to get you started with your project.\n\nAs Perch Runway is a superset of Perch functionality you will find that many details, in particular once you are working with templates are the same as Perch. So if you are already familiar with Perch the learning curve is very shallow! Runway typically gives you some extra functionality and options over that available in Perch.","type":"runway"},{"title":"Relationships","permalink":"https://docs.grabaperch.com/runway/relationships/","id":"runway.relationships","excerpt":"The `<perch:related>` template tag enables you to relate items of content around your site to the contents of a Collection.","text":"The `<perch:related>` template tag enables you to relate items of content around your site to the contents of a Collection.\n\n## Creating a relationship\n\nTake an example of articles and authors for those articles. Each article in the `Articles` collection may have one or more authors in the `Authors` collection. To create the relationship, we'd add a tag pair such as the following to the master template for the Articles collection, `article.html`.\n\n```html\n<perch:related id=\"author\" collection=\"Authors\" label=\"Author\">\n  <p>\n    <a href=\"/authors/<perch:content id=\"slug\" type=\"slug\">\">\n      <perch:content id=\"firstname\"> <perch:content id=\"lastname\">\n    </a>\n  </p>\n</perch:related>\n```\n\nThis creates a new field `author` which holds the detail of the relationship. `perch:related` has both an opening and a closing tag. The contents of the tag are used to display the related content. This is like a sub-template, as has its own before and after tags, counters and so on. If multiple related items (authors in this example) are selected, then the template effectively loops to display them all.\n\nThe opening tag takes the following attributes:\n\n|Attribute|Value|\n|-|-|\n|`id`|An ID of your choosing|\n|`collection`|The collection to use for the source of the related items|\n|`label`|A label for the field for use on the edit form|\n|`sort`|A special value of `custom` sorts the items in the order specified in the control panel.|\n|`count`|Integer. The number of related items to output. By default, outputs all.|\n|`max`|Integer. The maximum number of related items that can be selected when editing content. |\n|`scope-parent`| true or false. Bring the content variables outside of the related tag into scope within a `parent.` prefix.|\n\n*Note:* When displaying the edit field, Perch uses the _title_ of the related item. Make sure that the collection uses `title` on one or more fields.\n\n## Displaying related items\n\nThe related items can be displayed whenever the primary item is displayed by adding the `<perch:related>` tags to the template. Be sure to specify the same field `id` and `collection` attributes whenever you use the tag.\n\nFor example, in a listing of articles:\n\n```html\n<perch:before>\n<ul class=\"article-list\">\n</perch:before>\n  <li class=\"article\">\n    <a href=\"/article/<perch:content id=\"slug\" type=\"slug\">\">\n      <perch:content id=\"headline\" type=\"smarttext\">\n    </a>\n    <span class=\"byline\">\n    <perch:related id=\"author\" collection=\"Authors\">\n      - <perch:content id=\"firstname\" type=\"text\"> <perch:content id=\"lastname\" type=\"text\">\n    </perch:related>\n    </span>\n  </li>\n<perch:after>\n</ul>\n</perch:after>\n```\n\nIf we were expecting multiple authors to be associated with each article, we could adapt the template to display those more gracefully:\n\n```html\n<span class=\"byline\">\n<perch:related id=\"author\" collection=\"Authors\">\n  <perch:before> - </perch:before>\n  <perch:content id=\"firstname\" type=\"text\"> <perch:content id=\"lastname\" type=\"text\">\n  <perch:if exists=\"perch_item_last\">.<perch:else>, </perch:if>\n</perch:related>\n</span>\n```\n\n## Filtering by related items\n\nThe next thing you need to be able to do is to filter by a related item. For example, list all articles by a given author. To do so we use a dot syntax of `perch:related` field ID __dot__ ID of field in related item. In our example, the `perch:related` field has the ID `author` so if we wanted to filter on the author's `lastname` field, we'd use `author.lastname`.\n\nTo find all the articles written by an author with the last name \"Fry\":\n\n```php\n<?php\n  perch_collection('Articles', [\n    'filter' => 'author.lastname',\n    'match'  => 'eq',\n    'value'  => 'Fry',\n  ]);\n?>\n```","type":"runway"},{"title":"Routing","permalink":"https://docs.grabaperch.com/runway/routing/","id":"runway.routing","excerpt":"Runway uses your web server's ability to _rewrite_ incoming URLs and point those requests to a single entry point. This is sometimes called a _Front Controller_. For Runway, it's the `start.php` script that handles all page requests.","text":"Runway uses your web server's ability to _rewrite_ incoming URLs and point those requests to a single entry point. This is sometimes called a _Front Controller_. For Runway, it's the `start.php` script that handles all page requests.\n\nOnce Runway has received the request, it then decides which page to display. This is known as _routing_ - deciding which page will the incoming request be routed to.\n\nWhen you add a page in Runway, it has a URL. By default, this is used by the router, and any direct request of that page's URL will result in a direct match. For some sites, that's all you'll need.\n\nFor sites with more complex requirements, you can add additional pattern to match more complex URLs and route them through to your pages. For example, a blog might have URLs like this:\n\n```unix\n/blog/2014/my-post-title\n```\n\nNo page with that URL exists, as you don't have a new page for every blog post in the database. Instead, you'd create a route to match it and direct that request through to the page that displays blog posts. The URL pattern for the route might look like this:\n\n```unix\nblog/[year]/[slug]\n```\n\nThe `[bracketed]` items are placeholders, we call them tokens. The `[year]` token matches a four-digit year, and then `[slug]` token matches a lowercase letters, numbers and dashes sequence. There are tokens for numbers `[i]`, letters `[a]`, dates `[isodate]` and so on, for the common parts of a URL you might want to find.\n\n## Adding a route\n\nBy default, the router will map any incoming request to a page with the same URL. Adding an additional routes to the page is done through the Perch control panel.\n\nFind the page a click on *Page Options*. Find the *Routes* section, and add a new route at the bottom. Delete a route by clearing the field.\n\nWhen writing a pattern for the route, you don't need to include the opening or trailing slash, and Runway will strip those for you if you do.\n\n## Route matching order\n\nThe order in which routes are matched can be quite important. It's possible to create multiple patterns that could theoretically match the same URL, and the router will stop at the first that matches. It's therefore important to carefully manage the order.\n\nTo do this, go to the *Routes* section under *Pages*. The routes are listed in order, first to last. Select the *Reorder* option in the smartbar, and then drag and drop the routes to change the order. Select *Save Changes* when you're done.","type":"runway"},{"title":"Controlling site access","permalink":"https://docs.grabaperch.com/runway/site-access/","id":"runway.site-access","excerpt":"Runway has two features available for controlling access to your site; site behind login, and offline mode.","text":"Runway has two features available for controlling access to your site; site behind login, and offline mode.\n\n## Site behind login\n\nDesigned primarily for staging sites, _site behind login_ enables you to deny access to pages of your site to any user who is not logged in to the Runway control panel.\n\nThis is ideal for staging sites, as it means that pages are inaccessible to accidental visitors and search engines, but your clients and teammates can log in to Runway and then browse the site as normal.\n\nThe feature is enabled in your config file for the site:\n\n```php\ndefine('PERCH_SITE_BEHIND_LOGIN', true);\n```\n\nWhen `PERCH_SITE_BEHIND_LOGIN` is set to `true`, any page views that are not authenticated will receive an HTTP 403 response, and will be delivered the `templates/pages/errors/403.php` master page.\n\n(This is a config file option for best performance. Checking if the user is logged in is a small amount of work, but work that shouldn't be done unless it's needed. If the site is never behind a login, then all that work for every page load would be wasted.)\n\n\n## Offline mode\n\nAnother way to control access to your site is by setting it as offline. This might be useful for a new site about to launch, of for performing sweeping changes during which you would like to deny access.\n\nTo make a site offline, go to the Settings section and check the \"Make site offline\" checkbox, and save.\n\nWhen a site is offline any page views will receive an HTTP 503 response, and will be delivered the `templates/pages/errors/503.php` master page.","type":"runway"},{"title":"Upgrading to Runway 4","permalink":"https://docs.grabaperch.com/runway/upgrading/","id":"runway.upgrading","excerpt":"Perch Runway 4 is a new major version of Perch Runway with some big interface changes. A lot of the underlying structure is backwards compatible, so upgrading to Perch Runway 4 is not complex.","text":"Perch Runway 4 is a new major version of Perch Runway with some big interface changes. A lot of the underlying structure is backwards compatible, so upgrading to Perch Runway 4 is not complex. \n\n## Before you start\n\nFollow these instructions to help make your upgrade as smooth as possible.\n\n### 1. Make a backup\n\nBefore making any changes, make a backup of your files and your database. This means that come what may, you can always revert to your current position without doing any damage.\n\n### 2. Work on your dev or staging site\n\nWe don't recommend upgrading a live site in-place. Not because the upgrade process is risky, but because that's not the most sensible way to work for any website updates. Get your staging or dev site up to date (perhaps using the backup of the live site you've just made) and try the upgrade there first. If all is well, you can deploy those changes to the live site without worrying and with minimal disruption.\n\n## Upgrading\n\nWith that done, we should be ready to begin.\n\n### 1. Replace Perch core\n\n[Download](https://perchrunway.com/download) the latest version of Perch Runway and copy the new `perch/core` folder over your old `perch/core` folder.\n\n### 2. Check your apps file\n\nIf you have a very old install to upgrade, your `perch/config/config.apps` file might contain lots of `include()` statements. You need to update it or you'll get errors. A basic starting point `apps.php` file looks like this:\n\n```php\n<?php\n\t$apps_list = [ \n\t];\n```\n\nYou don't need the Content or Categories apps listed like in the past. Just add an entry to the list for any add-ons you need installed. For example, an install with Blog and Twitter apps would have:\n\n```php\n<?php\n\t$apps_list = [ \n\t\t'perch_blog',\n\t\t'perch_twitter',\n\t];\n```\n\n### 3. Remove unnecessary add-ons\n\nPerch Runway 4 contains the MarkItUp and Redactor edits as part of core, so you can remove:\n\n- `perch/addons/plugins/editors/markitup`\n- `perch/addons/plugins/editors/redactor`\n\nYou can remove the default apps, as they're now internal too:\n\n- `perch/addons/apps/perch_s3`\n- `perch/addons/apps/perch_openstack`\n- `perch/addons/apps/perch_varnish`\n- `perch/addons/apps/perch_dropbox`\n\nAnd update your `perch/config/runway.php` file to change the `handler_path` for those apps to begin with `PERCH_CORE.'/runway/apps/'` e.g.\n\n```php\n'handler_path' => PERCH_CORE.'/runway/apps/perch_dropbox/PerchDropbox_ResourceBucket.class.php',\n```\n\n### 4. Update your apps\n\nChanges in Runway 4 mean that your Runway 3 apps won't work without being updated. Therefore you need to download the latest versions of your apps from the new [add-ons site](https://addons.perchcms.com/).\n\n### 5. Log in\n\nWhen you log in to the control panel, the updater will run as usual and you should be all set to go.","type":"runway"},{"title":"Upgrading to Runway 3","permalink":"https://docs.grabaperch.com/runway/upgrading3/","id":"runway.upgrading3","excerpt":"Perch Runway 3 is a new major version of Perch Runway with some big interface changes. A lot of the underlying structure is backwards compatible, so upgrading to Perch Runway 3 is not complex.","text":"Perch Runway 3 is a new major version of Perch Runway with some big interface changes. A lot of the underlying structure is backwards compatible, so upgrading to Perch Runway 3 is not complex. \n\n## Before you start\n\nFollow these instructions to help make your upgrade as smooth as possible.\n\n### 1. Make a backup\n\nBefore making any changes, make a backup of your files and your database. This means that come what may, you can always revert to your current position without doing any damage.\n\n### 2. Work on your dev or staging site\n\nWe don't recommend upgrading a live site in-place. Not because the upgrade process is risky, but because that's not the most sensible way to work for any website updates. Get your staging or dev site up to date (perhaps using the backup of the live site you've just made) and try the upgrade there first. If all is well, you can deploy those changes to the live site without worrying and with minimal disruption.\n\n## Upgrading\n\nWith that done, we should be ready to begin.\n\n### 1. Replace Perch core\n\n[Download](https://perchrunway.com/download) the latest version of Perch Runway and copy the new `perch/core` folder over your old `perch/core` folder.\n\n### 2. Check your apps file\n\nIf you have a very old install to upgrade, your `perch/config/config.apps` file might contain lots of `include()` statements. You need to update it or you'll get errors. A basic starting point `apps.php` file looks like this:\n\n```php\n<?php\n\t$apps_list = [ \n\t];\n```\n\nYou don't need the Content or Categories apps listed like in the past. Just add an entry to the list for any add-ons you need installed. For example, an install with Blog and Twitter apps would have:\n\n```php\n<?php\n\t$apps_list = [ \n\t\t'perch_blog',\n\t\t'perch_twitter',\n\t];\n```\n\n### 3. Remove unnecessary add-ons\n\nPerch Runway 3 contains the MarkItUp and Redactor edits as part of core, so you can remove:\n\n- `perch/addons/plugins/editors/markitup`\n- `perch/addons/plugins/editors/redactor`\n\nYou can remove the default apps, as they're now internal too:\n\n- `perch/addons/apps/perch_s3`\n- `perch/addons/apps/perch_openstack`\n- `perch/addons/apps/perch_varnish`\n- `perch/addons/apps/perch_dropbox`\n\nAnd update your `perch/config/runway.php` file to change the `handler_path` for those apps to begin with `PERCH_CORE.'/runway/apps/'` e.g.\n\n```php\n'handler_path' => PERCH_CORE.'/runway/apps/perch_dropbox/PerchDropbox_ResourceBucket.class.php',\n```\n\n### 4. Update your apps\n\nChanges in Runway 3 mean that your Runway 2 apps won't work without being updated. Therefore you need to download the latest versions of your apps from the new [add-ons site](https://addons.perchcms.com/).\n\n### 5. Log in\n\nWhen you log in to the control panel, the updater will run as usual and you should be all set to go.","type":"runway"},{"title":"Varnish","permalink":"https://docs.grabaperch.com/runway/caching/varnish/","id":"runway.caching.varnish","excerpt":"[Varnish](https://www.varnish-cache.org) is a caching HTTP reverse proxy that you install infront of your website. perch Runway has the ability to tell your Varnish server when pages have changed so that they can be purged from the cache.","text":"[Varnish](https://www.varnish-cache.org) is a caching HTTP reverse proxy that you install infront of your website. perch Runway has the ability to tell your Varnish server when pages have changed so that they can be purged from the cache.\n\n## Configure\n\nOpen up your `perch/config/runway.php` file and look for the Varnish section. It looks like this:\n\n```html\n'varnish' => [\n    'enabled' => false,\n],\n```\n\nEnable Varnish support by setting `enabled` to `true`.\n\n## Configuring your Varnish VCL\n\nWhen a page is published, Runway will make an HTTP PURGE or BAN request to your Varnish server. You need to add rules to your VCL to respond to those requests.\n\nThe `PURGE` requests look like this:\n\n    http://example.com/about-us\n\nand the `BAN` requests contain a pattern, like this:\n\n    http://example.com/products/([a-z0-9\\-]+)/?$\n\nYou'll want to configure your Varnish server to only accept the PURGE and BAN requests from trusted sources. This is done by setting up an ACL.\n\nYour VCL might look something like this:\n\n```html\nacl purge {\n    \"localhost\";\n    \"192.168.55.0\"/24;\n}\n\nsub vcl_backend_response {\n\tset beresp.http.x-url = bereq.url;\n}\n\nsub vcl_deliver {\n\tunset resp.http.x-url; # Optional\n}\n\nsub vcl_recv {\n    # allow PURGE and BAN from localhost and 192.168.55...\n\n    if (req.method == \"PURGE\") {\n        if (!client.ip ~ purge) {\n                return(synth(405,\"Not allowed.\"));\n        }\n        return (purge);\n    }\n\n    if (req.method == \"BAN\") {\n    \tif (!client.ip ~ purge) {\n    \t        return(synth(405,\"Not allowed.\"));\n    \t}\n    \tban(\"obj.http.x-url ~ \" + req.url); # req.url is a regex\n    \treturn(synth(200, \"Ban added\"));\n    }\n}\n```\n\nNote: we're not 100% sure this is the optimal configuration. If you find problems or have improvements to suggest, we'd love to hear from you and make this documentation better.","type":"runway"},{"title":"Dropbox","permalink":"https://docs.grabaperch.com/runway/cloud-storage/dropbox/","id":"runway.cloud-storage.dropbox","excerpt":"Use the following procedure to configure a resource bucket for use with a Dropbox account. This is primarily useful for storing backups, as Dropbox isn't designed for serving files. Perch Runway stores backups in resource buckets, so configuring a Dropbox bucket is ideal for this purpose.","text":"Use the following procedure to configure a resource bucket for use with a Dropbox account. This is primarily useful for storing backups, as Dropbox isn't designed for serving files. Perch Runway stores backups in resource buckets, so configuring a Dropbox bucket is ideal for this purpose.\n\n## Setting up Dropbox\n\nGetting started with Dropbox takes a few steps, but should only need to be done once. We need to set up your Perch Runway site as an app that will use your Dropbox account. The process goes like this:\n\n1. Create an App on the Dropbox website\n2. Get an secret access token as a result\n3. Add the token to your Runway config file\n\n### Creating a Dropbox app\n\nFollow these steps using the Dropbox account you want to store the files in.\n\n1. Log into Dropbox and go to the [App Console](https://www.dropbox.com/developers/apps).\n2. Click the blue **Create app** button\n3. Select the **Dropbox API app** option\n    - You need to store **Files and datastores**\n    - **Yes**, your app **can be limited to its own folder**\n4. Give you app a name - we suggest using the name of your website. This will create a folder in your Dropbox account as `/Apps/YourAppName`. This is where your backups will go.\n5. Click **Create app** to submit the form\n\nThis creates the app, and you should now be looking at the *Settings* tab showing its details.\n\nThe next step is to get an access token. Find the **OAuth 2** section of the page.\n\n1. Under **Generate Access Token** click **Generate**\n2. You'll be given long string of random letters and numbers - this is your access token.\n3. Copy the token to your clipboard.\n\nNext, open up your `perch/config/runway.php` file and look for the Dropbox section. It looks like this:\n\n```php\n'dropbox' => [\n    'access_token' => '',\n    'handler'      => 'PerchDropbox_ResourceBucket',\n    'handler_path' => PERCH_CORE.'/runway/apps/perch_dropbox/PerchDropbox_ResourceBucket.class.php',\n],\n```\n\nAdd your new access token where indicated, and save the file. You should be set to go.\n\n## Add a resource bucket\n\nOpen up your `perch/config/buckets.php` file. By default it is empty. Create a new bucket - we'll call this one `backup`\n\n```php\n<?php\n    return [\n        'backup' => [\n                 'type'      => 'dropbox',\n                 'web_path'  => '',\n                 'file_path' => 'backups',\n         ],\n    ];\n```\n\nThe `file_path` should be the name of any subfolder you wish to store the files in. The `web_path` can be left empty. The `type` is always `dropbox`.","type":"runway"},{"title":"OpenStack Object Storage","permalink":"https://docs.grabaperch.com/runway/cloud-storage/openstack/","id":"runway.cloud-storage.openstack","excerpt":"Use the following procedure to configure a resource bucket for use with an OpenStack Object Storage compatible API such as Rackspace CloudFiles or Memset Memstore. Here we'll use the example of configuring a bucket for Rackspace Cloud Files.","text":"Use the following procedure to configure a resource bucket for use with an OpenStack Object Storage compatible API such as Rackspace CloudFiles or Memset Memstore. Here we'll use the example of configuring a bucket for Rackspace Cloud Files.\n\n## Configure\n\nOpen up your `perch/config/runway.php` file and look for the OpenStack Object Storage section. It looks like this:\n\n```php\n'openstack_object_storage' => [\n    'username'     => '',\n    'password'     => '',\n    'tenantid'     => '',\n    'endpoint'     => '',\n    'region'       => '',\n    'handler'      => 'PerchOpenStack_ResourceBucket',\n    'handler_path' => PERCH_PATH.'/addons/apps/perch_openstack/PerchOpenStack_ResourceBucket.class.php',\n],\n```\n\nAdd your configuration settings. For example for Rackspace, you'd use something like this\n\n\n|Setting|Value|Example|\n|-|-|\n|`username`|Rackspace user account username|`bridgetjones`|\n|`password`|Rackspace user account password (not an API key)|`abc-123-def-456`|\n|`tenantid`|Your Rackspace account number|`123456789`|\n|`endpoint`|Authentication service endpoint URL|`https://lon.identity.api.rackspacecloud.com/v2.0`|\n|`region`|Geographical region code|`LON`|\n\nFor Memset Memstore, you'd use settings like the below. Note, `tenantname` rather than `tenantid` in this case.\n\n|Setting|Value|Example|\n|-|-|\n|`username`|Memstore user account username|`bridgetjones`|\n|`password`|Memstore user account password|`abc-123-def-456`|\n|`tenantname`|Memstore account nane|`msjonesaa1`|\n|`endpoint`|Authentication service endpoint URL|`https://auth.storage.memset.com`|\n|`region`|Geographical region code|`reading`|\n\nObviously, being a broader API with lots of different implementations, getting the right incantation to authenticate with your provider of choice can take a little bit of experimentation.\n\n## Add a resource bucket\n\nNext, open up your `perch/config/buckets.php` file. By default it is empty. Create a new bucket - we'll call this one `images`\n\n```php\n<?php\n    return [\n        'images' => [\n                 'type'      => 'openstack_object_storage',\n                 'web_path'  => '',\n                 'file_path' => '',\n         ],\n    ]\n```\n\nThe `file_path` should be the name of the container you wish to store the files in. The `web_path` is the HTTP path to the container. The `type` is always `openstack_object_storage`.\n\n**Example defining two buckets**\n\n```php\n<?php\n    return [\n        'images' => [\n                 'type'      => 'openstack_object_storage',\n                 'web_path'  => 'http://abc123def456.r50.cf3.rackcdn.com',\n                 'file_path' => 'myproject.images',\n         ],\n         'press_releases' => [\n                  'type'      => 'openstack_object_storage',\n                  'web_path'  => 'http://efg123hij456.r50.cf3.rackcdn.com',\n                  'file_path' => 'myproject.press',\n          ],\n    ]\n```\n\n## Using a CDN\n\nIf serving page assets (images, fonts, JavaScript etc) from Object Storage, we'd recommend using the CDN service that is often paired with it. Set up the CDN service for the container you're sharing, and then update the `web_path` in your bucket list to use the new CDN domain name.","type":"runway"},{"title":"Amazon S3","permalink":"https://docs.grabaperch.com/runway/cloud-storage/amazon/","id":"runway.cloud-storage.amazon","excerpt":"Use the following procedure to configure a resource bucket for use with Amazon S3.","text":"Use the following procedure to configure a resource bucket for use with Amazon S3.\n\n## Configure\n\nOpen up your `perch/config/runway.php` file and look for the Amazon S3 section. It looks like this:\n\n```php\n'amazon_s3' => [\n    'access_key_id'     => '',\n    'secret_access_key' => '',\n    'handler'           => 'PerchS3_ResourceBucket',\n    'handler_path'      => PERCH_PATH.'/addons/apps/perch_s3/PerchS3_ResourceBucket.class.php',\n],\n```\n\nAdd your S3 Access Key ID and Secret Access Key to the file and save your changes.\n\n## Add a resource bucket\n\nNext, open up your `perch/config/buckets.php` file. By default it is empty. Create a new bucket - we'll call this one `images`\n\n```php\n<?php\n    return [\n        'images' => [\n                 'type'      => 'amazon_s3',\n                 'region'    => 'eu-central-1',\n                 'web_path'  => '',\n                 'file_path' => '',\n         ],\n    ]\n```\n\nThe `file_path` should be the name of the bucket you wish to use. The `web_path` is the HTTP path to the bucket. The `type` is always `amazon_s3`. The `region` is the [AWS data center](http://docs.aws.amazon.com/general/latest/gr/rande.html#s3_region) that the bucket resides in.\n\n**Example defining two buckets**\n\n```php\n<?php\n    return [\n        'images' => [\n                 'type'      => 'amazon_s3',\n                 'region'    => 'eu-central-1',\n                 'web_path'  => 'https://s3.amazonaws.com/myproject.images',\n                 'file_path' => 'myproject.images',\n         ],\n         'press_releases' => [\n                  'type'      => 'amazon_s3',\n                  'region'    => 'eu-central-1',\n                  'web_path'  => 'https://s3.amazonaws.com/myproject.press',\n                  'file_path' => 'myproject.press',\n          ],\n    ]\n```\n\n\n## Using the CloudFront CDN\n\nIf serving page assets (images, fonts, JavaScript etc) from S3, we'd recommend using the CloudFront CDN, as S3 is rather slow. Create a CloudFront distribution in your AWS management console, and then update the `web_path` in your bucket list to use the new CloudFront domain name:\n\n```php\n'images' => [\n      'type'      => 'amazon_s3',\n      'region'    => 'eu-central-1',\n      'web_path'  => 'http://abcdefghijk.cloudfront.net',\n      'file_path' => 'myproject.images',\n],\n```\n\nYou'll need to add a bucket policy on your S3 bucket to make sure that files added to the bucket are public by default.\n\n```javascript\n{\n  \"Version\":\"2008-10-17\",\n  \"Statement\":[{\n    \"Sid\":\"AllowPublicRead\",\n        \"Effect\":\"Allow\",\n      \"Principal\": {\n            \"AWS\": \"*\"\n         },\n      \"Action\":[\"s3:GetObject\"],\n      \"Resource\":[\"arn:aws:s3:::bucket/*\"\n      ]\n    }\n  ]\n}\n```\n\nReplace the `bucket` in `arn:aws:s3:::bucket/*` with the name of your S3 bucket.","type":"runway"},{"title":"Layouts","permalink":"https://docs.grabaperch.com/runway/core-tasks/layouts/","id":"runway.core-tasks.layouts","excerpt":"Master Pages can make use of Layouts for drawing in common reusable page fragments like headers, footers, sidebars and so on.","text":"Master Pages can make use of Layouts for drawing in common reusable page fragments like headers, footers, sidebars and so on.\n\nLayout files are PHP partials, rather than templates, and are designed to work as extensions to Master Pages for code reusability.\nThey are intended to be as flexible as possible in use, so your layout files can be structured in whatever way best suits your site.\n\nOften, this results in layouts being used for the structure of the page around your content (things like the opening `<html>` and `<head>` sections of a page, and the corresponding closing sections at the bottom), as well as reusable components within them (like navigation components, sidebar modules and the like).\n\nLayout variables enable you to pass parameters to a layout as it is called, in order to control content within it or change how it behaves.","type":"runway"},{"title":"Master Pages","permalink":"https://docs.grabaperch.com/runway/core-tasks/master-pages/","id":"runway.core-tasks.master-pages","excerpt":"In Perch Runway, every page request ends up at a Master Page. (This is in contrast to Perch, where every page in the site has a corresponding file in the site tree.)","text":"In Perch Runway, every page request ends up at a Master Page. (This is in contrast to Perch, where every page in the site has a corresponding file in the site tree.)\n\nIn Runway, every _type_ of page in your site is created as a Master Page. That means you'll end up with some which are unique (like a home page or blog listing) and others that are reused many times (like a general article page).\n\nThe Master Page is the blueprint for what appears on the page. It might include a certain layout, then perhaps an image slideshow followed by a news listing and a footer, for example.\n\nMaster Pages are created as `.php` files within the `perch/templates/pages` folder, and can be organised into subfolders.\n\nWhen creating a new page, you pick which Master Page it will use. Updating a Master Page updates all the pages based on it.\n\n## Example\n\n```php\n<?php\n    // output the top of the page\n    perch_layout('global/top', [\n    \t'page_title' => perch_page_title(true),\n    ]);\n\n    // main navigation\n    perch_pages_navigation([\n        'levels'   => 1,\n        'template' => 'main_nav.html',\n    ]);\n\n    // page-specific introduction content\n    perch_content('News introduction');\n\n    // a list of articles from the 'News' collection\n    perch_collection('News', [\n    \t'sort'       => 'published_on',\n    \t'sort-order' => 'DESC',\n    \t'count'      => 10,\n    ]);\n\n    // reusable sidebar containing the latest tweet\n    perch_layout('news/sidebar', [\n        'tweets' => perch_twitter_get_latest([\n                        'count' => 1,\n                    ], true),\n    ]);\n\n    // closing footer\n    perch_layout('global/footer');\n```","type":"runway"},{"title":"Templates","permalink":"https://docs.grabaperch.com/runway/core-tasks/templates/","id":"runway.core-tasks.templates","excerpt":"Runway shares the tag-based template language with Perch, with some extensions for Runway-specific features.","text":"Runway shares the tag-based template language with Perch, with some extensions for Runway-specific features.\n\nWhen a page function outputs content, it does so using a template. A template is a fragment of (usually) HTML that contains tags defining the different content fields in use.\n\n**Example**\n\n```html\n<h1>\n    <perch:content id=\"title\" type=\"text\" label=\"Title\">\n</h1>\n<p>\n    Published on:\n    <perch:content id=\"published_on\" type=\"date\" label=\"Date\" format=\"d F Y H:i\">\n</p>\n```\n\nEverything that is output from a page function is done so through a template. Templates are custom to your site and contain whatever markup your site needs. They are usually HTML, but can output any type of text format.\n\nVisit the [template reference](/templates/).","type":"runway"},{"title":"Callback Functions with each","permalink":"https://docs.grabaperch.com/runway/collections/callback-functions-with-each/","id":"runway.collections.callback-functions-with-each","excerpt":"Any of the `_custom` functions in Perch can take a callback which allows for some processing of the item before it is templated. In this example I create a Category listing and then use `each` to pass in templated Collection data.","text":"Any of the `_custom` functions in Perch can take a callback which allows for some processing of the item before it is templated. In this example I create a Category listing and then use `each` to pass in templated Collection data.\n\nWorking on a site for a course I created a listing of all of my lessons as a Perch Runway Collection. This gave me the ability to template the lesson with Blocks, adding code sections, video and text. I then used the Categories functionality to create top level categories for my courses with sub-categories to represent modules – groups of lessons.\n\n## Categories\n\nWith my categories created I could add a lesson to a module by selecting the category in the Perch Admin.\n\nTo display this information on the landing page for a course I then needed to loop through my categories, and display the name of that module with the lessons listed underneath.\n\nLooping through and displaying the categories was easy using the perch_categories function, passing in the name of the category Set. I’m also filtering on the top level category, in this case “css-basics” to get the sub-categories. These sub-categories are my modules.\n\n```php\n$currentPath = 'css-basics';\n$course = perch_categories([\n  'set' => 'courses',\n  'template' => 'course-module.html',\n  'filter' => [\n    [\n      'filter' => 'catPath',\n      'match' => 'contains',\n      'value' => $currentPath\n    ],\n    [\n      'filter' => 'catParentID',\n      'match' => 'gt',\n      'value' => '0'\n    ],\n  ],\n]);\n```\n\nThis gets me a list of all of the sub-categories of the category ‘css-basics’ output by a template course-module.html.\n\nThe template course-module.html is a standard category template saved in perch/templates/categories. I’ve added an additional field – a hidden field with an ID of lessons. I want to populate this field with the lessons that have been added to the current module as we go through the loop.\n\n```html\n<perch:before>\n  <div class=\"wrapper\">\n    <div class=\"page-listing\">\n      <ul>\n</perch:before>\n<li>\n  <h2><perch:category id=\"catTitle\" type=\"smarttext\" label=\"Title\" required></h2>\n  <perch:category id=\"catSlug\" type=\"slug\" for=\"catTitle\" suppress>\n  <perch:category id=\"desc\" type=\"textarea\" label=\"Description\" editor=\"markitup\" markdown size=\"s\">\n\n    <perch:category id=\"lessons\" type=\"hidden\" encode=\"false\">\n</li>\n<perch:after>\n    </ul>\n  </div>\n</div>\n</perch:after>\n```\n\nTo get my lessons from the Collection I add a key each to the array of options for the perch_categories function.\n\n```php\n$currentPath = 'css-basics';\n$course = perch_categories([\n  'set' => 'courses',\n  'template' => 'course-module.html',\n  'filter' => [\n    [\n      'filter' => 'catPath',\n      'match' => 'contains',\n      'value' => $currentPath\n    ],\n    [\n      'filter' => 'catParentID',\n      'match' => 'gt',\n      'value' => '0'\n    ],\n  ],\n  'each'  =>  function($item) {\n      $item['lessons'] = perch_collection('lessons',[\n        'category' => $item['catPath'],\n        'template' => 'lessons/lesson-excerpt.html'\n      ],true);\n\n      return $item;\n    },\n]);\n```\n\nThe value of each is a function, this function runs each time we go through the loop and returns the lessons for that category templates with my lesson-excerpt.html template. This then populates `$item['lessons']` which in turn populates the lessons template tag in my category template.\n\nThis functionality is documented on the [perch_collection page](/functions/collections/perch-collection/), but works wherever there is a custom function – so in many official Apps, Categories and Collections.","type":"runway"},{"title":"Social Sharing with Collections, Layout and Blog","permalink":"https://docs.grabaperch.com/runway/collections/social-sharing/","id":"runway.collections.social-sharing","excerpt":"Blog version 5 has built-in social sharing templates, in this post I show how to add that functionality to content that is part of a Runway Collection.","text":"Blog version 5 has built-in social sharing templates, in this post I show how to add that functionality to content that is part of a Runway Collection.\n\nIn the [documentation](/functions/blog/perch-blog-post-meta/) for `perch_blog_meta` we show you how to switch your layout to show your page title on regular pages and the Blog meta and social sharing information on blog posts. If you have followed that information you should have the following code in your global layout for the head of your site. I’ve also included the perch_page_attributes function which, using the default template included with a Perch Runway install, just outputs the page meta information.\n\n```html\n<head>\n<?php\n  if (perch_layout_has('blog-post')) {\n    perch_blog_post_meta(perch_get('s'));\n  }else{\n    echo '<title>' . perch_pages_title(true) . '</title>';\n  }\n?>\n<?php perch_page_attributes(); ?>\n</head>\n```\n\nYou may also however be using a Collection to display content in a list detail format. In my case I have a Collection of recipes with a recipe listing page clicking through to a recipe detail page.\n\n## Create a social attributes template\n\nThe first step is to create a social sharing attributes template. This needs to live in the perch/templates/pages/attributes/ folder. I called mine social.html and have essentially copied the one from the Blog templates folder. Note that the Perch template tags need to be perch:pages and not perch:blog.\n\n```html\n<meta property=\"og:site_name\" content=\"<perch:pages id=\"site_name\">\">\n<meta property=\"og:url\" name=\"twitter:url\" content=\"<perch:pages id=\"domain\"><perch:pages id=\"url\">\">\n<meta property=\"og:title\" name=\"twitter:title\" content=\"<perch:pages id=\"title\">\">\n<meta property=\"og:description\" name=\"twitter:description\" content=\"<perch:pages id=\"description\">\">\n<perch:if exists=\"og_image\">\n<meta property=\"og:image\" name=\"twitter:image\" content=\"<perch:pages id=\"domain\"><perch:pages id=\"og_image\" label=\"Image when shared\" help=\"Should be at least 1200x630\" type=\"image\" width=\"1200\">\">\n</perch:if>\n<perch:if exists=\"og_type\">\n  <meta property=\"og:type\" content=\"<perch:pages id=\"og_type\" label=\"Facebook type\" type=\"select\" options=\"article,book,profile,website,video,music\" allowempty>\">\n</perch:if>\n<meta name=\"twitter:card\" content=\"summary_large_image\">\n```\n\n## Edit the layout\n\nNow I have my template I need to include this when I display my recipe detail page. To do this I edit the header.\n\n```php\n<?php\nif (perch_layout_has('blog-post')) {\n  perch_blog_post_meta(perch_get('s'));\n} elseif (perch_layout_has('recipe-post')) {\n  echo '<title>'.perch_layout_var('title', true).'</title>';\n\n  perch_page_attributes_extend([\n    'description'   => perch_layout_var('description',true),\n    'title'         => perch_layout_var('title', true),\n    'domain'        => SITE_DOMAIN,\n    'site_name'     => SITE_NAME,\n    'og_image'      => perch_layout_var('og_image', true),\n    'url'           => $_SERVER['REQUEST_URI'],\n    'og_type'       => perch_layout_var('og_type', true),\n   ]\n );\n //add a new attribute template for social sharing\n perch_page_attributes([\n   'template' => 'social.html',\n ]);\n}else{\n  echo '<title>' . perch_pages_title(true) . '</title>';\n}\n?>\n<?php perch_page_attributes(); ?>\n```\n\nI am now checking for a variable called recipe-post in the same way I checked to see if I had a blog post. Then I use the `perch_page_attributes_extend` function to push values into Page Attributes. We’ll see where those values come from in a minute, but if you also look below that function you can see I am adding a new template to `perch_page_attributes`, that’s the template we just created.\n\n## Getting the values to the layout\n\nThe last part of the puzzle is to get the values from my recipe and pass them to the layout. Two of the values are essentially constants – the site name and domain. So I add these in the Perch Config file as constants.\n\n## Edit perch/config/config.php\n\n```php\ndefine('SITE_NAME','My lovely recipe site');\ndefine('SITE_DOMAIN','http://my-lovely-recipes.example.com');\n```\n\n## Edit the recipe template\n\nI also need to make sure I have the content to share and so I add to my recipe master template an additional field for a social sharing description and image.\n\n```html\n<perch:content id=\"description\" label=\"Short description\" type=\"textarea\" size=\"s\" suppress>\n<perch:content id=\"og_image\" type=\"image\" width=\"1200\" label=\"Image when shared\" help=\"Should be at least 1200x630\" suppress>\n```\n\n## Edit the recipe detail page\n\nI now need to edit my detail page. As a Collection detail page I was filtering on the recipe slug and displaying the content of the recipe using my master template.\n\n```php\n<?php\n// Include the header. You can find this in templates/layouts/global\nperch_layout('global/header', [\n  'body-class' => 'recipe'\n]);\nperch_layout('global/nav');\nperch_collection('Recipes', [\n  'template'   =>'collections/recipe.html',\n  'filter'    => 'slug',\n  'match'     => 'eq',\n  'value'     => perch_get('s')\n]);\n// Include the footer. You can find this in templates/layouts/global\nperch_layout('global/footer');\n```\n\nI need to change this slightly to get all of the Collection data back as an array, so I can pass the information to my layout. To do this I move the perch_collection function above my perch_layout function and set `skip-template` to true. This returns the data as an array.\n\nI also add return-html true as this will give me the rendered HTML to display on the page as before – it means I don’t need to do two calls to get my data.\n\nI then get the bits I need out of the array and pass them into my layout. Don’t forget that if you switch on Perch Debug mode you’ll be able to see what is being returned in the array – it makes this much easier!\n\nThe final step is to echo the recipe html so the recipe displays on the page as before.\n\n```php\n<?php\n$recipe = perch_collection('Recipes', [\n  'skip-template' => true,\n  'return-html'   => true,\n  'template'      =>'collections/recipe.html',\n  'filter'        => 'slug',\n  'match'\t  => 'eq',\n  'value'\t  => perch_get('s')\n  ]);\n\n  if(!isset($recipe[0])) {\n    // do whatever you do if no results\n    PerchSystem::redirect('/recipes');\n  }\n\n  $title = $recipe[0]['title'];\n  $description = $recipe[0]['description'];\n  $og_image = $recipe[0]['og_image'];\n\n  // Include the header. You can find this in templates/layouts/global\n  perch_layout('global/header', [\n    'body-class' => 'recipe',\n    'recipe-post' => true,\n    'title' => $title,\n    'description' => $description,\n    'og_image' => $og_image\n  ]);\n  perch_layout('global/nav');\n\n  //show the recipe\n  echo $recipe['html'];\n\n  // Include the footer. You can find this in templates/layouts/global\n  perch_layout('global/footer');\n```\n\nYou should now see Blog social sharing when on a Blog page, and custom social sharing on the Collection page. This could also be adapted for a list/detail setup using regular Perch Content or for any other scenario where you want to push data into a layout from content in Perch.","type":"runway"},{"title":"Relationships","permalink":"https://docs.grabaperch.com/runway/collections/relationships/","id":"runway.collections.relationships","excerpt":"The `<perch:related>` template tag enables you to relate items of content around your site to the contents of a Collection.","text":"The `<perch:related>` template tag enables you to relate items of content around your site to the contents of a Collection.\n\n## Creating a relationship\n\nTake an example of articles and authors for those articles. Each article in the `Articles` collection may have one or more authors in the `Authors` collection. To create the relationship, we'd add a tag pair such as the following to the master template for the Articles collection, `article.html`.\n\n```html\n<perch:related id=\"author\" collection=\"Authors\" label=\"Author\">\n  <p>\n    <a href=\"/authors/<perch:content id=\"slug\" type=\"slug\">\">\n      <perch:content id=\"firstname\"> <perch:content id=\"lastname\">\n    </a>\n  </p>\n</perch:related>\n```\n\nThis creates a new field `author` which holds the detail of the relationship. `perch:related` has both an opening and a closing tag. The contents of the tag are used to display the related content. This is like a sub-template, as has its own before and after tags, counters and so on. If multiple related items (authors in this example) are selected, then the template effectively loops to display them all.\n\nThe opening tag takes the following attributes:\n\n|Attribute|Value|\n|-|-|\n|`id`|An ID of your choosing|\n|`collection`|The collection to use for the source of the related items|\n|`label`|A label for the field for use on the edit form|\n|`scope-parent`| true or false. Bring the content variables outside of the related tag into scope within a `parent.` prefix.|\n\n*Note:* When displaying the edit field, Perch uses the _title_ of the related item. Make sure that the collection uses `title` on one or more fields.\n\n## Displaying related items\n\nThe related items can be displayed whenever the primary item is displayed by adding the `<perch:related>` tags to the template. Be sure to specify the same field `id` and `collection` attributes whenever you use the tag.\n\nFor example, in a listing of articles:\n\n```html\n<perch:before>\n<ul class=\"article-list\">\n</perch:before>\n  <li class=\"article\">\n    <a href=\"/article/<perch:content id=\"slug\" type=\"slug\">\">\n      <perch:content id=\"headline\" type=\"smarttext\">\n    </a>\n    <span class=\"byline\">\n    <perch:related id=\"author\" collection=\"Authors\">\n      - <perch:content id=\"firstname\" type=\"text\"> <perch:content id=\"lastname\" type=\"text\">\n    </perch:related>\n    </span>\n  </li>\n<perch:after>\n</ul>\n</perch:after>\n```\n\nIf we were expecting multiple authors to be associated with each article, we could adapt the template to display those more gracefully:\n\n```html\n<span class=\"byline\">\n<perch:related id=\"author\" collection=\"Authors\">\n  <perch:before> - </perch:before>\n  <perch:content id=\"firstname\" type=\"text\"> <perch:content id=\"lastname\" type=\"text\">\n  <perch:if exists=\"perch_item_last\">.<perch:else>, </perch:if>\n</perch:related>\n</span>\n```\n\n## Filtering by related items\n\nThe next thing you need to be able to do is to filter by a related item. For example, list all articles by a given author. To do so we use a dot syntax of `perch:related` field ID __dot__ ID of field in related item. In our example, the `perch:related` field has the ID `author` so if we wanted to filter on the author's `lastname` field, we'd use `author.lastname`.\n\nTo find all the articles written by an author with the last name \"Fry\":\n\n```php\n<?php\n  perch_collection('Articles', [\n    'filter' => 'author.lastname',\n    'match'  => 'eq',\n    'value'  => 'Fry',\n  ]);\n?>\n```","type":"runway"},{"title":"Tokens","permalink":"https://docs.grabaperch.com/runway/routing/tokens/","id":"runway.routing.tokens","excerpt":"Runway has a number of built in routing tokens, ready to use. They cover many common patterns. If your needs go beyond those, you can [define custom tokens](/runway/routing/custom-tokens/) with no performance overhead.","text":"Runway has a number of built in routing tokens, ready to use. They cover many common patterns. If your needs go beyond those, you can [define custom tokens](/runway/routing/custom-tokens/) with no performance overhead.\n\nThe default tokens have a bias towards a latin character set.\n\n|Token|Matches|Example|\n|-|-|\n|`*`|Anything||\n|`i`|Integers|`1000`|\n|`a`|Letters a-z|`m`|\n|`slug`|Letters a-z, numbers 0-9 and dashes|`olympic-games-2016`|\n|`year`|Four-digit year from 1000 to 2999|`2015`|\n|`isodate`|ISO date format|`2015-12-25`|","type":"runway"},{"title":"Custom Tokens","permalink":"https://docs.grabaperch.com/runway/routing/custom-tokens/","id":"runway.routing.custom-tokens","excerpt":"For most cases, the [supplied tokens](/runway/routing/tokens) can be used to match most common types of URL. We don't pretend to know exactly how your URLs will be formed and what sort of tokens you wish to match. For this reason, you can set up custom tokens in your `config/runway.php` configuration file.","text":"For most cases, the [supplied tokens](/runway/routing/tokens) can be used to match most common types of URL. We don't pretend to know exactly how your URLs will be formed and what sort of tokens you wish to match. For this reason, you can set up custom tokens in your `config/runway.php` configuration file.\n\nYou might need a custom token if:\n\n1. You need to match a very specific pattern within a segment\n2. You need to match a string that spans multiple URL segments\n3. You need to match segments in non-latin character sets not covered by the latin dafaults\n\nIf any of those cases is true, read on. Otherwise, you should be just fine with the defaults.\n\nOpen up `config/runway.php` and search for the `routing_tokens` section.\n\n```php\n'routing_tokens' => [\n\n],\n```\t\t\n\nThere's no getting away from the fact that you need to know regular expressions, unfortunately. The idea with custom tokens is that you can write and test your regular expression just once, and then use it by name from that point on. What's more, as you're matching just a small part of a URL with a token, they're simpler to write and can also be shared.\n\nAs an example, say you needed a token for a product SKU in the URL. The SKUs the client uses are 3 numbers followed by 3 letters, like `abc123`. Your custom token definition would look like this:\n\n```php\n'sku' => '[a-z]{3}[0-9]{3}'\n```\n\nAdded to the `runway.php` file like this:\n\n```php\n'routing_tokens' => [\n    'sku' => '[a-z]{3}[0-9]{3}',\n],\n```\n\nOnce that's been defined, you can use it in your routing patterns without needing to think about it again:\n\n```php\nproduct/[sku]/reviews\n```","type":"runway"},{"title":"Named Segments","permalink":"https://docs.grabaperch.com/runway/routing/named-segments/","id":"runway.routing.named-segments","excerpt":"Matching the URL is one thing, but the next logical step is that you want to use parts of that URL to do things in your page. In our blog post example, we'd want the slug in order to be able to look up the correct post.","text":"Matching the URL is one thing, but the next logical step is that you want to use parts of that URL to do things in your page. In our blog post example, we'd want the slug in order to be able to look up the correct post.\n\nTo do that, you just add the name to the token. Let's say I want to use the slug as `postslug` within my page. I'd modify the pattern to be:\n\n```php\nblog/[year]/[slug:postslug]\n```\n\nThe `[slug:postslug]` token means simply \"a slug named `postslug`\". You'd use it in your page with:\n\n```php\nperch_get('postslug')\n```\n\nIn your templates, we prefix the name with `url_` to avoid naming conflicts with your own template IDs:\n\n```html\n<perch:content id=\"url_postslug\">\n```\n\n## Advanced features\n\nYou can match from multiple options. The below would match `/product/view/1234` and `/product/order/1234` with the _view_ or _order_ being passed through as action and the product ID as `product_id`:\n\n```php\nusers/[view|order:action]/[i:[product_id]]\n```\n\nAnother example, to offer a report in XML, CSV or JSON format:\n\n```php\nreport.[xml|csv|json:format]\n```","type":"runway"},{"title":"Getting Started","permalink":"https://docs.grabaperch.com/runway/headless/getting-started/","id":"runway.headless.getting-started","excerpt":"By default, Runway serves your headless views from `/api`. This routes to the `perch/templates/api` folder, where you create a PHP file for any headless view you wish to make available.","text":"By default, Runway serves your headless views from `/api`. This routes to the `perch/templates/api` folder, where you create a PHP file for any headless view you wish to make available.\n\n## Example\n\nCreate a new PHP file as `perch/templates/api/news.php`. This will be a headless view that we'll configure to access a collection called News. (The file name is not significant, just convenient.)\n\nOnce complete, we'll be able to access our new headless view at the URL:\n\n    /api/news\n\nIn this file, open some `<?php` tags and create a new instance of the Headless API.\n\n```php\n<?php\n\t$Headless   = $API->get('HeadlessAPI');\n```\n\n### The Response\n\nCreating a headless view is all about building up the _response_. We find all the content we want to include, add it to the response, and then at the very end we call `respond()` and the result is sent to the client.\n\nSo to get started, create a new response:\n\n```php\n$Response   = $Headless->new_response();\n```\n\n### Sourcing the content\n\nFor this example, we're going to query some items from the News collection. To do that, we need to get an instance of `ContentCollections` and find our collection by name.\n\n```php\n$Collections = $API->get('ContentCollections');\n$Collection  = $Collections->find('News');\n```\n\nWe now have an instance of the News collection quick we can query for content. More on that in a moment.\n\n### Sets\n\nEach response is made up of one or more content sets. In a simple view like this one, there might just be one set containing our news items. On a more complex view, there could be multiple. For example, a blog post view might have a set containing the post, one containing the comments, and another containing related posts.\n\nIt's the ability to put multiple sets into a response that give the opportunity to build views that contain all the content you need for fetching with a single HTTP request. Of course, you don't _have_ to put multiple sets into a response, but the fact that you _can_ offers lots of flexibility.\n\nWhen you create a set, you give it a name to identify it in the response. We'll call this one `news`:\n\n```php\n$Set = $Headless->new_set('news');\n```\n\nWe then need to call the `add_items()` method on the set to pass in our content. We could do something like this:\n\n```php\n$Set->add_items([\n\t[\n\t\t'id' => 1,\n\t\t'title' => 'Hello',\n\t],\n\t[\n\t\t'id' => 2,\n\t\t'title' => 'World',\n\t],\n]);\n```\n\nMore realisically, that content needs to come form the CMS somewhere. It's here that we're going to query the News collection to get our items. To do that, we use the `query()` method, and pass it the same options we'd use for `perch_collection()`.\n\n```php\n$Set->add_items($Collection->query([\n\t\t\t'sort' => 'date',\n\t\t\t'sort-order' => 'DESC',\n\t\t]));\n```\n\nNow that the set has items, we can add it to the response.\n\n```php\n$Response->add_set($Set);\n```\n\n### Sending the response\n\nWe're all done, so send the response to the client:\n\n```php\n$Response->respond();\n```\n\n## Full example\n\nHere's the `perch/templates/api/news.php` view in full:\n\n```php\n<?php\n    $Headless   = $API->get('HeadlessAPI');\n\t$Response   = $Headless->new_response();\n\n\t$Collections = $API->get('ContentCollections');\n\t$Collection  = $Collections->find('News');\n\n\t$Set = $Headless->new_set('news');\n\n\t$Set->add_items($Collection->query([\n\t\t\t'sort' => 'date',\n\t\t\t'sort-order' => 'DESC',\n\t\t]));\n\n\t$Response->add_set($Set);\n\n\t$Response->respond();\n```","type":"runway"},{"title":"Blog Example","permalink":"https://docs.grabaperch.com/runway/headless/examples/blog/","id":"runway.headless.examples.blog","excerpt":"Creating a headless view for Blog content can be very straightforward. If you've not followed the Getting Started example for getting content from a collection, do that first. This is a follow-on example.","text":"Creating a headless view for Blog content can be very straightforward. If you've not followed the Getting Started example for getting content from a collection, do that first. This is a follow-on example.\n\nWe're going to create a view to find a blog post and its comments as two sets. The URL for our view will be \n\n    /api/blog/post?slug=1234-my-nice-post\n\nCreate a new PHP file at `perch/templates/api/blog/post.php`. As normal, you need to get an instance of the Headless API and create a new response.\n\n```php\n$Headless = $API->get('HeadlessAPI');\n$Response = $Headless->new_response();\n```\n\n### Sourcing Blog content\n\nThis is example, we'll use a URL slug to find a single post and the comments for that post. To do that we'll need instances of both `PerchBlogPosts` and `PerchBlogComments`.\n\n```php\n$Posts    = $API->get('PerchBlogPosts');\n$Comments = $API->get('PerchBlogComments');\n```\n\n### Finding the post\n\nWe'll create a new set for our post, and then query the posts to find the matching content. The set will be called `posts` - it's always best to use a plural name and to assume that a set contains multiple items, even when we expect there only to be one. It keeps things consistent.\n\n```php\n$Set = $Headless->new_set('posts');\n```\n\nThe `PerchBlogPosts::query()` method takes the same arguments as `perch_blog_custom()`.\n\n```php\n$Set->add_items($Posts->query([\n\t\t\t'filter' => 'postSlug',\n\t\t\t'value'  => perch_get('slug'),\n\t\t]));\n```\n\nThen assign the set to the response:\n\n```php\n$Response->add_set($Set);\n```\n\n### Finding the comments\n\nNext we can look for the comments. The `PerchBlogComments::query()` method takes the same arguments as `perch_blog_post_comments()` - so the first argument is a post slug, and the second is the options array.\n\nCreate a set, and the comments, and then add the set to the response:\n\n```php\n$Set = $Headless->new_set('comments');\n\n$Set->add_items($Comments->query(perch_get('slug'), [\n\t\t'sort' => 'commentDateTime',\n\t\t'sort-order' => 'DESC',\n\t]));\n\n$Response->add_set($Set);\n```\n\nAnd we're done, so send the response:\n\n```php\n$Response->respond();\n```\n\n## Full example\n\nHere's the `perch/templates/api/blog/post.php` view in full:\n\n```php\n<?php\n\n\t$Headless = $API->get('HeadlessAPI');\n\t$Response = $Headless->new_response();\n\t\n\t$Posts    = $API->get('PerchBlogPosts');\n\t$Comments = $API->get('PerchBlogComments');\n\n\t// Find the post\n\t$Set = $Headless->new_set('posts');\n\t\n\t$Set->add_items($Posts->query([\n\t\t\t'filter' => 'postSlug',\n\t\t\t'value'  => perch_get('slug'),\n\t\t]));\n\t\n\t$Response->add_set($Set);\t\n\t\t\n\t// Find the comments\n\t$Set = $Headless->new_set('comments');\n\t\n\t$Set->add_items($Comments->query(perch_get('slug'), [\n\t\t\t'sort' => 'commentDateTime',\n\t\t\t'sort-order' => 'DESC',\n\t\t]));\n\t\n\t$Response->add_set($Set);\n\n\t// Respond\n\t$Response->respond();\n```","type":"runway"},{"title":"Shop Example","permalink":"https://docs.grabaperch.com/runway/headless/examples/shop/","id":"runway.headless.examples.shop","excerpt":"Creating a headless view for Shop content can be very straightforward. If you've not followed the Getting Started example for getting content from a collection, do that first. This is a follow-on example.","text":"Creating a headless view for Shop content can be very straightforward. If you've not followed the Getting Started example for getting content from a collection, do that first. This is a follow-on example.\n\nWe're going to create one view to list products, and then a second to get the details of an individual product. The URLs for our views will be \n\n    /api/shop/products\n    /api/shop/product?slug=stripy-pyjamas\n\n## Product listing\n\nCreate a new PHP file at `perch/templates/api/shop/products.php`. As normal, you need to get an instance of the Headless API and create a new response.\n\n```php\n$Headless = $API->get('HeadlessAPI');\n$Response = $Headless->new_response();\n```\n\n### Finding Product content\n\nIn order to retrieve product content, we'll need an instance of `PerchShopProducts`.\n\n```php\n$Products = $API->get('PerchShopProducts');\n```\n\nWe'll create a new set for products, and then query to find the matching content. The set will be called `products` - it's always best to use a plural name and to assume that a set contains multiple items, even if there are circumstances where there will only be one result.\n\n```php\n$Set = $Headless->new_set('products');\n```\n\nThe `PerchShopProducts::query()` method takes the same arguments as `perch_shop_products()`. In this example, we'll get 10 products that are in the category _summer2017_ in the _promotions_ category set. You'll want to change the options to match your own data.\n\n```php\n$Set->add_items($Products->query([\n\t\t\t'count'    => 10,\n\t\t\t'category' => ['promotions/summer2017'], \n\t\t]));\n```\n\nThen assign the set to the response:\n\n```php\n$Response->add_set($Set);\n```\n\nand send it:\n\n```php\n$Response->respond();\n```\n\n### Full example\n\nHere's the `perch/templates/api/shop/products.php` view in full:\n\n```php\n<?php\n\n\t$Headless = $API->get('HeadlessAPI');\n\t$Response = $Headless->new_response();\n\t\n\t$Products = $API->get('PerchShopProducts');\n\n\t$Set = $Headless->new_set('products');\n\t\n\t$Set->add_items($Products->query([\n\t\t\t'count'    => 10,\n\t\t\t'category' => ['promotions/summer2017'], \n\t\t]));\n\t\n\t$Response->add_set($Set);\t\n\n\t$Response->respond();\n```\n\n## Single product detail\n\nCreate a new PHP file at `perch/templates/api/shop/product.php`. Again, get an instance of the Headless API and create a new response.\n\n```php\n$Headless = $API->get('HeadlessAPI');\n$Response = $Headless->new_response();\n```\n\nWe also need an instance of `PerchShopProducts`.\n\n```php\n$Products = $API->get('PerchShopProducts');\n```\n\nCreate a new set for products:\n\n```php\n$Set = $Headless->new_set('products');\n```\n\nWe'll again use `PerchShopProducts::query()` to find out content. This time we'll be filtering for the slug based on the value on the URL query string (fetched using `perch_get()`).\n\n```php\n$Set->add_items($Products->query([\n\t\t\t'filter'    => 'productSlug',\n\t\t\t'value' => perch_get('slug'), \n\t\t]));\n```\n\nThen assign the set to the response:\n\n```php\n$Response->add_set($Set);\n```\n\nand send it:\n\n```php\n$Response->respond();\n```\n\n### Full example\n\nHere's the `perch/templates/api/shop/product.php` view in full:\n\n```php\n<?php\n\n\t$Headless = $API->get('HeadlessAPI');\n\t$Response = $Headless->new_response();\n\t\n\t$Products = $API->get('PerchShopProducts');\n\n\t$Set = $Headless->new_set('products');\n\t\n\t$Set->add_items($Products->query([\n\t\t\t'filter' => 'productSlug',\n\t\t\t'value'  => perch_get('slug'), \n\t\t]));\n\t\n\t$Response->add_set($Set);\t\n\n\t$Response->respond();\n```\n\n## Basket\n\nCreate a new PHP file at `perch/templates/api/shop/basket.php`. Again, get an instance of the Headless API and create a new response.\n\n```php\n$Headless = $API->get('HeadlessAPI');\n$Response = $Headless->new_response();\n```\n\nWe also need an instance of `PerchShopCart`.\n\n```php\n$Products = $API->get('PerchShopCart');\n```\n\nCreate a new set for the cart:\n\n```php\n$Set = $Headless->new_set('cart');\n```\n\nWe'll again use `PerchShopCart::query()` to find our content.\n\n```php\n$Set->add_items($Cart->query());\n```\n\nThen assign the set to the response:\n\n```php\n$Response->add_set($Set);\n```\n\nand send it:\n\n```php\n$Response->respond();\n```\n\n### Full example\n\nHere's the `perch/templates/api/shop/product.php` view in full:\n\n```php\n<?php\n\n\t$Headless = $API->get('HeadlessAPI');\n\t$Response = $Headless->new_response();\n\t\n\t$Cart = $API->get('PerchShopCart');\n\n\t$Set = $Headless->new_set('cart');\n\t\n\t$Set->add_items($Cart->query());\n\t\n\t$Response->add_set($Set);\t\n\n\t$Response->respond();\n```","type":"runway"},{"title":"Backup","permalink":"https://docs.grabaperch.com/runway/getting-started/backup/","id":"runway.getting-started.backup","excerpt":"Perch Runway will use the [Scheduled Tasks](/runway/getting-started/installing/scheduled-tasks/) system to automatically run backups of your database and assets uploaded into Perch.","text":"Perch Runway will use the [Scheduled Tasks](/runway/getting-started/installing/scheduled-tasks/) system to automatically run backups of your database and assets uploaded into Perch.\n\nFor backups to work *you must have scheduled tasks configured*, and you must have at least one remote (cloud storage) bucket configured in your buckets list.\n\nYou must also set up a non-public folder for backup to use as a temporary working folder in your `config/runway.php` file. See the 'Environment' section in that file.\n\n## What gets backed up\n\nPerch Runway will back up content added through the Perch Control Panel and that is stored locally. That includes locally stored asset files and the database. It does not back up your site files, configuration, templates etc, as you should already be managing those with some sort of VCS like Git or Subversion. It also does not back up asset files that are already on a remote storage system.\n\nThe backup system is for backing up content changes that happen once your site has gone live.\n\n## Creating a backup plan\n\nBackups are managed from the Settings section, which you can find by clicking the cog icon in the sidebar in Perch Runway.\n\nUnder *Add plan* you can give your backup plan a title (e.g. \"Daily\") and then choose to backup either just the database, or the database and your asset files.\n\nSet the number of hours between each database backup. For a busy site with lots of editing activity, you might want this to be once a day or more. For less frequently updated sites, once a week (168 hours) or even once a month (720 hours) might be acceptable. We recommend backing up more frequently - it's always better to have a few too many backups than not enough.\n\nBackups are saved to a remote resource bucket. You'll need at least one bucket configured to use [cloud storage](/runway/cloud-storage/) to place your backups into. It should ideally be to a different, non-public storage folder than you use for storing assets.\n\n## Running a backup\n\nBackups run automatically, using the scheduled tasks system. The database will be backed up with the frequency you set, and asset files will be backed up on a rolling basis. (Asset files don't change, so they only need to be backed up once.)\n\n## Restoring a backup\n\nOnce the backup has run, you can choose any prior database snapshot and restore it from the list.\n\nAfter successfully restoring a backup, Perch will ask you to reauthenticate, as it needs to check your credentials against those now held in the newly restored database.\n\n## Restoring into a fresh installation\n\nIf you're setting up a new copy of a site, you can restore a backup from any remote bucket.\n\n1. Configure the remote bucket in your `perch/config/buckets.php` file. See [Resource Buckets](/docs/resources/buckets/).\n2. Under Settings > Backup, choose the Restore tab.\n3. Find your bucket in the list and choose _Find backups_\n4. Locate your backup and click _Restore_\n\nAfter successfully restoring a backup, Perch will ask you to reauthenticate, as it need to check your credentials against those now held in the newly restored database.","type":"runway"},{"title":"Installing Runway","permalink":"https://docs.grabaperch.com/runway/getting-started/installing/","id":"runway.getting-started.installing","excerpt":"The steps below walk you through the process of getting Perch Runway up and running on your server.","text":"The steps below walk you through the process of getting Perch Runway up and running on your server.\n\nBefore starting ensure that you have run the Runway Server Compatibility Test on your server and that it passed. Make a note of the database details that you used to pass the test as you will need these during install.\n\n## Step 1: Extract the Perch zip\n\nAfter purchasing Perch Runway you will be able to download the software. Save the zip file somewhere on your computer and unzip it. Inside you will find a folder named `perch` which is the Perch software.\n\n## Step 2: Put the perch folder into your website root folder\n\nCopy the `perch` folder into your top-level folder.\n\n## Step 3: Visit the setup page\n\nVisit `/perch/setup` in a web browser. You will see a form.\n\n-   The license key is the one from your account for this site.\n-   Your details will create the first admin account in Perch.\n-   The install location is the location of perch in your site. If you just copied the `perch` folder into the root of your site then `/perch` is correct. If you renamed the Perch folder or put it into a subdirectory you need to update this.\n-   The final section is database settings – use the database location, name, username and password that worked for the Server Compatibility Test.\n\nAfter completing this form, hit submit and Perch Runway will either write your configuration files for you _or_ display a block of configuration code on screen.\n\nIf you get the code, copy this code to your clipboard, then open the `perch` directory that you copied into your site earlier, then open the `config` folder and the file `config.php`.\n\nPaste the code into `config.php` using a **plain text editor** and save it. Repeat with the `config.local.php` file.\n\nBack in your browser click ‘I’ve done that’ and Runway will install. Otherwise, move onto the steps below.\n\n## Step 4: Configuring URL rewriting\n\nThe next step is to set up URL rewriting for Runway to handle incoming page requests. See the [information on configuring URL rewriting](/runway/getting-started/installing/rewrites/) for step-by-step instructions.\n\n## Step 5: Configuring scheduled tasks\n\nThe following step is to set up scheduled tasks. See [setting up Scheduled Tasks](/runway/getting-started/installing/scheduled-tasks/) for more information.\n\n## Final Steps\n\nYou should now be able to log into Runway using the username and password you entered in the previous step.\n\nDelete the setup folder from inside the `perch` folder.\n\nMake the `/perch/resources` folder writable by your webserver in order that files and images can be uploaded through Perch Runway. Check with your host how to do this.\n\nFor most users these steps will install Perch Runway without any problems. However there are some issues that we see reasonably regularly. These tend to be webhost specific.\n\n\n### After submitting the form at Step 3. Nothing happens.\n\nThis usually means **PHP Sessions** are not configured fully on your server. Ask your host if there is anything you need to do to get PHP Sessions working on your server.\n\nIf sessions are configured then the other possibility is that you have something causing a redirect on your server, for example in your `.htaccess` file.","type":"runway"},{"title":"Upgrading Perch to Runway","permalink":"https://docs.grabaperch.com/runway/getting-started/upgrading-perch-to-runway/","id":"runway.getting-started.upgrading-perch-to-runway","excerpt":"Upgrading a Perch site to Runway is a relatively straightforward process. Depending on the complexity of your Perch site, and how much of a conversion you want to do on existing content in may take a few steps.","text":"Upgrading a Perch site to Runway is a relatively straightforward process. Depending on the complexity of your Perch site, and how much of a conversion you want to do on existing content in may take a few steps.\n\nWe would not suggest that this is something you do on a live site. Instead make a copy of your site locally with a dump of your database. Then you can make sure that everything is working well before you deploy it live, and if something strange does happen you can just start over and ask for our help.\n\n## Buying and applying a license upgrade\n\nIf you currently have a Perch 2 license, the first thing you'll need to do is [purchase a license upgrade](https://grabaperch.com/buy/). Once you have an upgrade available in your account, it can be applied to the Perch 2 license you wish to upgrade.\n\nApplying an upgrade to a license does the following:\n\n1. Locks down the state of your Perch 2 license - your live site will continue to work with the Perch 2 license key, but you can't modify the domain details further.\n2. Replaces your Perch 2 license key with a Runway license key\n3. Makes the Runway files available to download\n\nThis enables you to keep your current Perch 2 site running with the old Perch 2 license key, while working on the Runway conversion in your development environment.\n\n## Upgrading to Perch Runway: The Steps\n\n1. Add your new Runway license key to the `perch/config/config.php` file\n2. Copy the `perch/core` folder across\n3. Copy the contents of `perch/addons/apps` across\n4. Configure your web server with the appropriate [rewrite rules](/runway/installing/rewrites/)\n5. Copy the `perch/config/runway.php` file to your `config` folder\n6. Add the following line to your `perch/config/config.php` file:\n\n    `define('PERCH_SITEPATH', '/server/path/to/your/site');`\n\n## In more detail\n\n### Edit the Config file\n\nOpen your `perch/config/config.php` file and replace your license key with the Runway key. Also in this file add the following line:\n\n    define('PERCH_SITEPATH', '/server/path/to/your/site');\n\nIf you have a [multiple server configuration file](http://solutions.grabaperch.com/development/multiple-server-config) add this into each site definition so it is accurate for that environment.\n\n### Replace Perch Core\n\nReplace the `perch/core` folder in your site with the one from the runway download files.\n\nCopy the contents of `perch/addons/apps` from the runway download files into your `perch/addons/apps` folder.\n\n### Edit your rewrite rules\n\nEdit your `.htaccess` file, or create one if you don’t already have one to add the [rules specified in the documentation](http://docs.grabaperch.com/runway/installing/rewrites/) for upgrading sites.\n\n### Run the upgrade!\n\nNow log into your Perch control panel.\n\nPerch will do the usual version update you should be familiar with and should tell you it has successfully updated.\n\nIf you have debug on and are updating from Perch to Perch Runway you will see all kinds of red “error” messages in the debug output below the continue button. Don’t worry about these, this is just where we are checking what is already there before creating things.\n\nClick Continue - you are now running Perch Runway!\n\nThis is a good point to check if your site still works before doing anything else. If pages aren’t loading or content seems missing the most likely cause is simply routing - the Runway rewrite rules perhaps conflicting with something you already have. If you can’t figure it out [post to the forum](https://community.perchcms.com/forum/) with details of your site architecture and existing rewrite rules and we’ll help you out.\n\nYou could leave your site at this point if you like. If your upgrade to Runway was for a feature such as CDN support, you don’t need to go though the next steps of moving a Perch site to a Runway architecture at this point.\n\nIf you do want to fully convert your site - read on!\n\n## Making your Perch site more Runway-like\n\nPerch Runway assumes a different architecture to standard Perch. In Perch you have lots of physical pages, either created by hand or created by Perch through the control panel.\n\nPerch Runway has a front controller pattern and creates pages by routing to a master page (which defines the layout) and populating it content stored in the database with no need for a physical file. Our upgraded site is in a bit of a half and half state right now. The first thing we might choose to do is turn physical pages into Runway style pages.\n\nThe steps to do this are as follows.\n\n1. Take a physical page\n2. If you do not have a master page for this layout save it into `perch/templates/pages`\n3. Delete the physical file\n4. Go to the page in the Perch admin and select the new master page or choose an existing one\n5. the page will now load using the master pages\n\nIf you are converting a site and have added the additional rewrite rule:\n\n    RewriteCond %{REQUEST_FILENAME} !-d\n\nYou will need to do this process a directory at a time. I’ve described my process of doing this on my own site below.\n\n### An example\n\nOn my site I have an about section. There is a physical folder `about` and in that is index.php which uses a layout only used by the about homepage, and biog.php and privacy.php which have the same layout and Perch Regions.\n\nI take `about/index.php` and save it as `/perch/templates/pages/about.php`.\n\nI take `about/biog.php` and save it as `/perch/templates/pages/simple.php` as that page layout is just my very basic layout if I want a simple page of content.\n\nI also need to remove the Perch Runtime include from the files as Runway includes it automatically.\n\nI then delete the about directory and pages from my site.\n\nI now log into Perch and set up my Master Page under Master Pages. Then find the pages in the Page Tree. As we didn’t remove these from Perch they will still appear - which is what we want. I go into my About page and set the path to `/about` and choose the Master page `About` then save the page.\n\nI go to Biog and set the path to `/about/biog` and the Master page to `simple`. I go to Privacy and set the path to `about/privacy` and the Master page to `simple`.\n\nIf I now go to my site my pages are loading with all the content that they had before.\n\nIf I make changes to my Master page `simple.php` I will find that any pages using that Master page update.\n\n## Next Steps\n\nYou can now take a look at the other features Perch Runway has - such as CDN support and Collections and see how they might help you enhance your site. In particular, if you have pages of your site being used simply to store content for reuse you might like to turn these into a Collection - [see the documentation here](/runway/collections/).","type":"runway"},{"title":"Using Runway","permalink":"https://docs.grabaperch.com/runway/getting-started/using-runway/","id":"runway.getting-started.using-runway","excerpt":"In order to get the most out of Perch Runway, it's important to understand the basic concepts and how to put them to use. This page describes those core concepts.","text":"In order to get the most out of Perch Runway, it's important to understand the basic concepts and how to put them to use. This page describes those core concepts.\n\n## 1. URL Rewriting and Routing\n\nRunway uses your web server's ability to _rewrite_ incoming URLs and point those requests to a single entry point. This is sometimes called a _Front Controller_. For Runway, it's the `start.php` script that handles all page requests.\n\nOnce Runway has received the request, it then decides which page to display. This is known as _routing_ - deciding which page will the incoming request be routed to.\n\nWhen you add a page in Runway, it has a URL. By default, this is used by the router, and any direct request of that page's URL will result in a direct match. For some sites, that's all you'll need.\n\nFor sites with more complex requirements, you can add additional pattern to match more complex URLs and route them through to your pages. For example, a blog might have URLs like this:\n\n    /blog/2014/my-post-title\n\nNo page with that URL exists, as you don't have a new page for every blog post in the database. Instead, you'd create a route to match it and direct that request through to the page that displays blog posts. The URL pattern for the route might look like this:\n\n    blog/[year]/[slug]\n\nYou can read more about [setting up URL rewriting](/runway/getting-started/installing/rewrites/) and [using the routing features](/runway/routing/).\n\n## 2. Master Pages\n\nIn Perch Runway, every page request ends up at a Master Page. (This is in contrast to Perch, where every page in the site has a corresponding file in the site tree.)\n\nIn Runway, every _type_ of page in your site is created as a Master Page. That means you'll end up with some which are unique (like a home page) and others that are reused many times (like a general article page).\n\nThe Master Page is the blueprint for what appears on the page. It might include a certain layout, then perhaps an image slideshow followed by a news listing and a footer, for example.\n\nMaster Pages are created as `.php` files within the `perch/templates/pages` folder, and can be organised into subfolders.\n\nWhen creating a new page, you pick which Master Page it will use. Updating a Master Page updates all the pages based on it.\n\n**Example**\n\n```php\n<?php\n    // output the top of the page\n    perch_layout('global/top', [\n    \t'page_title' => perch_page_title(true),\n    ]);\n\n    // main navigation\n    perch_pages_navigation([\n        'levels'   => 1,\n        'template' => 'main_nav.html',\n    ]);\n\n    // page-specific introduction content\n    perch_content('News introduction');\n\n    // a list of articles from the 'News' collection\n    perch_collection('News', [\n    \t'sort'       => 'published_on',\n    \t'sort-order' => 'DESC',\n    \t'count'      => 10,\n    ]);\n\n    // reusable sidebar containing the latest tweet\n    perch_layout('news/sidebar', [\n        'tweets' => perch_twitter_get_latest([\n                        'count' => 1,\n                    ], true),\n    ]);\n\n    // closing footer\n    perch_layout('global/footer');\n```\n\nRead [more about Master Pages](/runway/structure/master-pages/).\n\n## 3. Layouts\n\nMaster Pages can make use of Layouts for drawing in common reusable page fragments like headers, footers, sidebars and so on.\n\nLayout files are PHP partials, rather than templates, and are designed to work as extensions to Master Pages for code reusability.\nThey are intended to be as flexible as possible in use, so your layout files can be structured in whatever way best suites your site.\n\nOften, this results in layouts being used for the structure of the page around your content (things like the opening `<html>` and `<head>` sections of a page, and the corresponding closing sections at the bottom), as well as reusable components within them (like navigation components, sidebar modules and the like).\n\nLayout variables enable you to pass parameters to a layout as it is called, in order to control content within it or change how it behaves.\n\nRead [more about Layouts](/docs/layouts/) and [layout variables](/docs/layouts/variables/).\n\n## 4. Page functions\n\nWhen a Master Page needs to use some content, it makes use of a page function to request it. This could be anything from a simple `perch_content()` editable region, to a `perch_collection()` collection listing, or perhaps some functionally provided by an installed add-on.\n\nPage functions are how content is loaded up from the database and output to the page.\n\nIn the examples above, `perch_pages_navigation()`, `perch_content()`, `perch_collection()`, `perch_page_title()`, and `perch_twitter_get_latest()` are all examples of page functions that bring back some content from the system.\n\n**Example**\n\n```php\n<?php\n    perch_collection('News', [\n        'sort'       => 'published_on',\n        'sort-order' => 'DESC',\n        'count'      => 10,\n    ]);\n?>\n```\n\n## 5. Templates\n\nWhen a page function outputs content, it does so using a template. A template is a fragment of (usually) HTML that contains tags defining the different content fields in use.\n\n**Example**\n\n```html  \n<h1>\n    <perch:content id=\"title\" type=\"text\" label=\"Title\">\n</h1>\n<p>\n    Published on:\n    <perch:content id=\"published_on\" type=\"date\" label=\"Date\" format=\"d F Y H:i\">\n</p>\n```\n\nEverything that is output from a page function is done so through a template. Templates are custom to your site and contain whatever markup your site needs. They are usually HTML, but can output any type of text format.\n\nRead [more about templates](/docs/templates/).","type":"runway"},{"title":"Rewrite rules","permalink":"https://docs.grabaperch.com/runway/getting-started/installing/rewrites/","id":"runway.getting-started.installing.rewrites","excerpt":"Perch Runway uses your web server's URL rewriting capability to manage incoming page requests. This needs to be configured in order for Runway to serve pages and the URLs you choose.","text":"Perch Runway uses your web server's URL rewriting capability to manage incoming page requests. This needs to be configured in order for Runway to serve pages and the URLs you choose.\n\nDifferent types of web servers need configuring differently. Follow the instructions below for the type of web server you're running. If your web server isn't listed, there's a general set of instructions at the bottom.\n\n## Apache with mod_rewrite\n\nFor Apache with mod_rewrite, add the following rules to your web server configuration.\n\nIdeally this will form part of your server's virtualhost configuration. If you can't access the server config, a workaround is to use a simple `.htaccess` file in the root of the website. This isn't as good for performance, but is convenient in development and staging environments.\n\nWhen installing fresh:\n\n```html\n    # Perch Runway\n    RewriteEngine On\n    RewriteCond %{REQUEST_URI} !^/perch\n    RewriteCond %{REQUEST_FILENAME} !-f\n    RewriteRule .* /perch/core/runway/start.php [L]\n```\n\nOr when **upgrading a Perch 2 site** containing existing pages:\n\n```html\n    # Perch Runway\n    RewriteEngine On\n    RewriteCond %{REQUEST_URI} !^/perch\n    RewriteCond %{REQUEST_FILENAME} !-f\n    RewriteCond %{REQUEST_FILENAME} !-d\n    RewriteRule .* /perch/core/runway/start.php [L]\n```\n\nIf you installed into a folder other than `/perch`, update the rules accordingly.\n\n## Nginx  \n\nIf you're using nginx, add the following to your server configuration.\n\n```php\n    # Match just the homepage\n    location = / {\n        try_files $uri @runway;\n    }\n\n    # Match any other request\n    location / {\n        try_files $uri $uri/ @runway;\n    }\n\n    # Perch Runway\n    location @runway {\n        rewrite ^ /perch/core/runway/start.php last;\n    }\n```\n\nIf you installed into a folder other than `/perch`, update the rules accordingly.\n\n## Something else\n\nIf you're using a server other than those listed above, you need to configure rewriting to do the following:\n\n1. Ideally, ignore the `/perch` folder\n2. If the requested file doesn't exist, route the request to `/perch/core/runway/start.php`","type":"runway"},{"title":"Runway scheduled tasks","permalink":"https://docs.grabaperch.com/runway/getting-started/installing/scheduled-tasks/","id":"runway.getting-started.installing.scheduled-tasks","excerpt":"Tasks like running backups and deleting spam can be automatically run on a schedule. In order to do this, you need to configure your server to periodically run a script.","text":"Tasks like running backups and deleting spam can be automatically run on a schedule. In order to do this, you need to configure your server to periodically run a script.\n\nThe script should be set to run as frequently as your most frequent task, but ideally at least once per hour. If you wanted to update from Twitter every 15 minutes, your script should run at least every 15 minutes.\n\n## Setting up a secret\n\nTo prevent the scheduled tasks being run accidentally, you need to configure a ‘secret’ in your `perch/config/config.local.php` file. This should be lowercase letters and numbers, and no spaces. This will have been created automatically for you as part of the setup process.\n\n```php\ndefine('PERCH_SCHEDULE_SECRET', 'mysecret');\n```\n\n## Scheduling with cron\n\nYou can set up the script to run on the command line, or via a scheduling system like cron. Many hosting control panels will give you access to set this up.\n\n```php\nphp /path/to/site/perch/core/scheduled/run.php mysecret\n```\n\nIf you check the Scheduled Tasks page under Settings in Runway, you should see the full path you need to use.\n\nNote that some servers may require a path to the `php` command (perhaps something like `/usr/bin/env php` rather than just `php`) so check with your host.\n\n## Scheduling via a URL\n\nYou can also run the scheduled script via a URL in a browser (useful for remote scripts or Windows scheduled tasks).\n\n```php\nhttp://yoursite.com/perch/core/scheduled/run.php?secret=mysecret\n```\n\n## Task history\n\nYou can view a log of the tasks that have run from the Scheduled Tasks page under Settings in Perch. This log keeps the ten most recent runs of each individual task. Older log entries are purged automatically.","type":"runway"},{"title":"Announcements App","permalink":"https://docs.grabaperch.com/addons/announcements/","id":"addons.announcements","excerpt":"The Announcements App enables the addition of  announcements on your website. \nKeep your website viewers informed with real-time updates and important messages directly in your feed. Whether it’s news, events, or alerts, they will never miss a beat.","text":"The Announcements App enables the addition of  announcements on your website. \nKeep your website viewers informed with real-time updates and important messages directly in your feed. Whether it’s news, events, or alerts, they will never miss a beat.","type":"addons"},{"title":"Backup App","permalink":"https://docs.grabaperch.com/addons/backup/","id":"addons.backup","excerpt":"The Backup App enables a simple backup of files and resources from your site.","text":"The Backup App enables a simple backup of files and resources from your site.\n\n**This App is Perch only. Perch Runway has built-in comprehensive backup functionality, including scheduled backups**.\n\n## Requirements\n\nTo backup your database you need to be able to run `mysqldump` from PHP. Ask your host if you are able to run `mysqldump` from PHP and if so what the path to it is.\n\nTo backup large numbers of resources you will need to have enough available memory on your server.\n\n## Templates and functions\n\nThis App only appears in the Control Panel to enable the creation of a backup. It adds no additional functions or template tags for use on your site.\n\n## Limitations\n\nThe Backup app cannot be used for scheduled backups as it simply creates a zip and gives it to you to download, via the browser. If you have a large site that needs regular scheduled backups from Perch then we would suggest taking a look at upgrading to Perch Runway, which can backup your site to Dropbox or other cloud storage.","type":"addons"},{"title":"Blog App","permalink":"https://docs.grabaperch.com/addons/blog/","id":"addons.blog","excerpt":"The Blog App enables the addition of a blog or news section to your site.","text":"The Blog App enables the addition of a blog or news section to your site.\n\nPosts have a title, excerpt, body and date, and can be tagged and added to categories of your choosing. As is usual to Perch you can add custom fields to your templates. Content than then be displayed archived by month and year. An RSS feed of posts can be made available, and content can be filtered by category or tag.\n\n## Use of the Blog App for non-date ordered content\n\nWe sometimes see people trying to use the Blog App for things that are not a blog or news listing. This is not usually what you want to do. All of the filtering, sorting and category functionality is available in regular Perch Content. Try using that before attempting to turn Blog into something it isn't!","type":"addons"},{"title":"Comments App","permalink":"https://docs.grabaperch.com/addons/comments/","id":"addons.comments","excerpt":"The Comments app enables you to add comments to all sorts of content. It works in a similar way to the Comments included with the Blog App, but as a standalone App you can use it to add comments to Shop Products, a podcast episode or a regular page of content within Perch.","text":"The Comments app enables you to add comments to all sorts of content. It works in a similar way to the Comments included with the Blog App, but as a standalone App you can use it to add comments to Shop Products, a podcast episode or a regular page of content within Perch.","type":"addons"},{"title":"EmailOctopus App","permalink":"https://docs.grabaperch.com/addons/email_octopus/","id":"addons.email_octopus","excerpt":"The EmailOctopus app provides integration with EmailOctopus. You need to have a EmailOctopus account with one or more lists already created to use this app.","text":"The EmailOctopus app provides integration with EmailOctopus. You need to have a EmailOctopus account with one or more lists already created to use this app.\n\nThe app enables:\n\n-   Import of subscribers, lists and campaigns to a local copy within Perch\n-   Viewing of subscribers, lists and campaign listings from the Perch control panel\n-   Import of existing campaigns sent to your list, new campaigns will be added once they are sent via webhooks.\n-   Add subscribe forms on your website (so users do not need to leave your site to subscribe)\n\n## Additional Requirements\n\nThis app requires the PHP 8.2 and the cURL extension.","type":"addons"},{"title":"Events App","permalink":"https://docs.grabaperch.com/addons/events/","id":"addons.events","excerpt":"The Events app enables you to add date-based events or availability to your site.","text":"The Events app enables you to add date-based events or availability to your site.\n\nEvents have a title, date and time, description and one or more configurable categories. Past events can be automatically removed from your site.\n\nDefault display modes include a calendar, a monthly listing, as well as a custom function to search and filter events to display them however needed.\n\nAs with everything in Perch display is handled via templates (defaults are supplied, which you can copy and edit to make your own) and CSS. So the look and feel is very flexible.","type":"addons"},{"title":"Feathers","permalink":"https://docs.grabaperch.com/addons/feathers/","id":"addons.feathers","excerpt":"Perch Feathers is an optional way to manage front-end assets such as CSS, JavaScript and images through Perch. You don’t need to use Feathers when developing sites with Perch.","text":"Perch Feathers is an optional way to manage front-end assets such as CSS, JavaScript and images through Perch. You don’t need to use Feathers when developing sites with Perch.\n\n## What is a “feather”?\n\nA feather is a package of assets that you can include in Perch just like any other add-on. Download available official Feathers from the Perch website in the add-ons section.\n\n## Adding a Feather\n\nTo install a feather unzip the download and place the directory into `perch/addons/feathers`. So, if you downloaded our default Feather *Quill* you would put the `quill` folder directly into the `perch/addons/feathers` folder.\n\nThen add the Feather to your `perch/config/feathers.php` file. (If you don’t have this file, you can create it.)\n\n```php\n<?php\n    include(PERCH_PATH.'/addons/feathers/quill/runtime.php');\n?>\n```\n\n## Using a Feather\n\nOnce the Feather is installed you can use it by calling functions to get the CSS and JavaScript. The available functions will depend what is in the Feather, so check the documentation for the Feather you are using for full details, most Feathers will include CSS and/or JavaScript as shown below.\n\nTo insert any CSS that the Feather provides into your document add the following tag in the head of your document:\n\n```php\n<?php perch_get_css(); ?>\n```\n\nTo add any JavaScript required add the following:\n\n```php\n<?php perch_get_javascript(); ?>\n```\n\n## Creating your own Feather\n\nCreating a Feather is very simple and you can create Feathers to simplify parts of your development process by including assets that you use routinely. See the [Feathers documentation in the API](/api/feathers) section for more information.","type":"addons"},{"title":"Field Types","permalink":"https://docs.grabaperch.com/addons/field-types/","id":"addons.field-types","excerpt":"Field types are literally the _types of field_ that can be added to an edit form within the Perch control panel. The `text`, `date` and `image` types are all examples of this. Field types either provide a different set of input fields, a unique way of processing that input, or sometimes both.","text":"Field types are literally the _types of field_ that can be added to an edit form within the Perch control panel. The `text`, `date` and `image` types are all examples of this. Field types either provide a different set of input fields, a unique way of processing that input, or sometimes both.\n\nPerch ships with a wide range of default field types, but more can be created and implemented as add-ons. (If you're thinking about building your own field type, [check out the API](/api/field-types/).) Some of those field types are build as first-party add-ons, and are documented here.\n\n## Installing a field type\n\nAdding a field type to Perch is very easy. Field types live in the `perch/addons/fieldtypes` folder. When you download a field type, it will be in a folder. Place that folder into `perch/addons/fieldtypes`.\n\nEach individual field type may then have further steps needed to configure it, so you should follow the field type's dedicated instructions too.","type":"addons"},{"title":"Forms App","permalink":"https://docs.grabaperch.com/addons/forms/","id":"addons.forms","excerpt":"The Forms app works with the forms capability in Perch to give you an area where form options may be set and responses viewed. You require this app if you are using forms that will be processed by Perch. If you use forms that submit to external scripts then you do not need to install the Forms app.","text":"The Forms app works with the forms capability in Perch to give you an area where form options may be set and responses viewed. You require this app if you are using forms that will be processed by Perch. If you use forms that submit to external scripts then you do not need to install the Forms app.\n\n## Form templates\n\nDetails about how to create your forms using the Perch form template\ntags can be found under [Forms](/docs/form/template-tags/).\n\n## Please note\n\nThe forms app enables you to collect and store data within Perch. You should ensure that you comply with any legislation in your country regarding the storing of personal data. You should not use the forms app to store any particularly sensitive data – for example credit card details – as the information is not encrypted.\n\nIf you are allowing users to upload a file when they complete a form on your site, ensure that the file is uploaded to a location above the root of your site. This will ensure that users cannot upload a file that they are then able to run from a web browser. We have endeavored to develop the forms app to avoid as many security issues as possible however best practices should also be considered when developing your site.","type":"addons"},{"title":"Gallery App","permalink":"https://docs.grabaperch.com/addons/gallery/","id":"addons.gallery","excerpt":"The Gallery App gives you a way to add galleries of images to your webpages. This can also be achieved by regular Perch Content and in particular Runway Collections. Ask in support if you are not sure what best suits your use case.","text":"The Gallery App gives you a way to add galleries of images to your webpages. This can also be achieved by regular Perch Content and in particular Runway Collections. Ask in support if you are not sure what best suits your use case.","type":"addons"},{"title":"Kraken App","permalink":"https://docs.grabaperch.com/addons/kraken/","id":"addons.kraken","excerpt":"The Kraken app enables your site to automatically optimise image files using web services from [Kraken](https://kraken.io/?ref=5a608b00df18). This helps you save bandwidth and storage space, and can dramatically improve your site's load times.","text":"The Kraken app enables your site to automatically optimise image files using web services from [Kraken](https://kraken.io/?ref=5a608b00df18). This helps you save bandwidth and storage space, and can dramatically improve your site's load times.","type":"addons"},{"title":"Listings App","permalink":"https://docs.grabaperch.com/addons/listings/","id":"addons.listings","excerpt":"The Listings App enables the addition of  a property management website with our all-in-one listing management addon. Streamline your workflow by effortlessly managing, updating, and promoting the property listings .","text":"The Listings App enables the addition of  a property management website with our all-in-one listing management addon. Streamline your workflow by effortlessly managing, updating, and promoting the property listings .","type":"addons"},{"title":"Mailchimp App","permalink":"https://docs.grabaperch.com/addons/mailchimp/","id":"addons.mailchimp","excerpt":"The MailChimp app provides integration with MailChimp. You need to have a MailChimp account with one or more lists already created to use this app.","text":"The MailChimp app provides integration with MailChimp. You need to have a MailChimp account with one or more lists already created to use this app.\n\nThe app enables:\n\n-   Import of subscribers, lists and campaigns to a local copy within Perch\n-   Viewing of subscribers, lists and campaign listings from the Perch control panel\n-   The data in Perch is kept up to date using MailChimp webhooks\n-   Import of existing campaigns sent to your list, new campaigns will be added once they are sent via webhooks.\n-   Add subscribe forms on your website (so users do not need to leave your site to subscribe)\n-   Opt-in to list when completing another Perch form\n-   Display of archive and posts on your website, including search indexing\n\n## Additional Requirements\n\nThis app requires the PHP 5.4 and the cURL extension.","type":"addons"},{"title":"Members App","permalink":"https://docs.grabaperch.com/addons/members/","id":"addons.members","excerpt":"The Perch Members app provides the ability for users to register and log into an account on your website. This may be to gain access to secured content, or perhaps to maintain a profile. The app helps you manage members and gives you the tools to build member-based functionality into your site.","text":"The Perch Members app provides the ability for users to register and log into an account on your website. This may be to gain access to secured content, or perhaps to maintain a profile. The app helps you manage members and gives you the tools to build member-based functionality into your site.","type":"addons"},{"title":"Podcasts App","permalink":"https://docs.grabaperch.com/addons/podcasts/","id":"addons.podcasts","excerpt":"The Podcasts app enables you to publish one or more podcast shows from\nyour site. Podcasts are organized into Shows and Episodes. Each show can\nhave its own RSS feed, and each show download can be tracked and\nreported on.","text":"The Podcasts app enables you to publish one or more podcast shows from\nyour site. Podcasts are organized into Shows and Episodes. Each show can\nhave its own RSS feed, and each show download can be tracked and\nreported on.\n\nYou can add your own fields to either shows or episodes by editing the\nmaster templates, `show.html` and `episode.html`.","type":"addons"},{"title":"Poll App","permalink":"https://docs.grabaperch.com/addons/poll/","id":"addons.poll","excerpt":"The Poll app enables you to add date-based polls to your site.","text":"The Poll app enables you to add date-based polls to your site.\n\nPolls have questions and answers. Only polls with status Published can be viewed on your site.\n\nAs with everything in Perch display is handled via templates (defaults are supplied, which you can copy and edit to make your own) and CSS. So the look and feel is very flexible.","type":"addons"},{"title":"QRGenerator App","permalink":"https://docs.grabaperch.com/addons/qr/","id":"addons.qr","excerpt":"The QR Generator app enables you to add QR to your site.","text":"The QR Generator app enables you to add QR to your site.\n\n Only QR with status Published can be viewed on your site.\n\nAs with everything in Perch display is handled via templates (defaults are supplied, which you can copy and edit to make your own) and CSS. So the look and feel is very flexible.","type":"addons"},{"title":"Foxycart Shop App","permalink":"https://docs.grabaperch.com/addons/shop-foxycart/","id":"addons.shop-foxycart","excerpt":"**This app is now deprecated.** For new installations, please use the [Shop app](/addons/shop/) instead.","text":"**This app is now deprecated.** For new installations, please use the [Shop app](/addons/shop/) instead.\n\nThe FoxyShop app enables you to sell products from your site using the\nthird party cart and checkout service, FoxyCart. You need to set up an\naccount on [FoxyCart](http://www.foxycart.com/) to use this app.\n\nThe app provides the ability to add categories and products, with forms\nwhich submit to the cart on FoxyCart.\n\nThe shop manages inventory in a basic manner, each product has a\nquantity field and after purchase we use the xml datafeed from FoxyCart\nto decrease the available number.\n\nThe shop also allows you to set the FoxyCart category on each item which\nis how you manage taxes and delivery on items in FoxyCart, as well as\nalternative product types such as downloads.\n\nBefore using this app you should familiarize yourself with how FoxyCart\nworks, this is essentially a helper app to enable listing and stock\ncontrol of products sold via FoxyCart.","type":"addons"},{"title":"Shop App","permalink":"https://docs.grabaperch.com/addons/shop/","id":"addons.shop","excerpt":"The Shop app offers a full suite of e-commerce tools for selling physical and digital products and services from your website all managed within your Perch or Perch Runway control panel.","text":"The Shop app offers a full suite of e-commerce tools for selling physical and digital products and services from your website all managed within your Perch or Perch Runway control panel.\n\n## Products and inventory\n\nProducts can be added with unique SKUs, titles, descriptions, price, tax bands, stock status and levels, and shipping weights and dimensions.\n\nThey can be organised by brand and category, and can have a reduced sale price and dedicated trade prices.\n\nProducts can have options such as colour and size. Options can have their own prices and stock levels.\n\nWhen items are sold, inventory is decreased. Products can display as in stock or low, out of stock or more ordered.\n\nProducts have basic fields that can be supplemented by full Perch content management with repeaters, blocks, images, extended descriptions and so on.\n\nProducts can have files associated with them that are available to purchasers. These could be digital products, or just supplementary items.\n\n## Cart and promotions\n\nA full shopping cart is available. Items can be added and removed, quantities adjusted. The amount of tax and the total is displayed.\n\nThe cart is one available step - simpler customer flows can choose to omit it, or to simplify the display to just the total. It's all controlled by simple Perch templates.\n\nDiscount codes can be created add applied to a cart. These can include free shipping, fixed and percentage-based discounts. Discounts have date ranges, and can be limited by use, use-per-customer, and maximum discount value. They can have a trigger value and apply to shipping on not.\n\n## Customer management\n\nCustomer accounts and handled by the Members app. Customers can register with an email address, or log back in to their existing account. Billing and shipping address can be added.\n\nAll the features of the Members app such as welcome emails and password resets can be used.\n\nCustomers can be viewed and managed, along with information such as the total customer value.\n\n## Shipping and Payment\n\nMultiple shipping methods can be added, based on price and weight. Shipping rates can be adjusted by shipping location.\n\nMany payment providers are supported, including including many pay-page options that don't involve you needing to handle credit card numbers on your site.\n\n## Order management\n\nOrders pass through multiple customisable stages - unpaid, paid, processing, dispatched, refunded and so on. Orders can be viewed and updated, and invoices printed.","type":"addons"},{"title":"Twilio App","permalink":"https://docs.grabaperch.com/addons/twillio/","id":"addons.twillio","excerpt":"The Twilio App enables the addition of a two factor member authentication to your site.","text":"The Twilio App enables the addition of a two factor member authentication to your site.\n\nTwo-factor authentication (2FA) with Twilio adds an extra layer of security to a member site by requiring users to verify their identity through something they know (like a password) and something they have (like a mobile phone).\n## Use of the Twilio App for verify your members\n\n1.User Login Attempt: When a user tries to log in to the member site, they enter their username and password as usual.\n\n2.Twilio Sends Verification Code: After the user enters the correct credentials, the site triggers Twilio to send a one-time verification code via SMS to the user's registered phone number.\n\n3.User Enters Code: The user receives the code on their device and enters it into the site.\n\n4.Verification: The site checks the entered code against the one sent by Twilio. If the code matches and is within the valid time frame, the user is granted access.\n\n5.Access Granted: Upon successful verification, the user is logged into their account on the member site.","type":"addons"},{"title":"PayPal Shop App","permalink":"https://docs.grabaperch.com/addons/shop-paypal/","id":"addons.shop-paypal","excerpt":"**This app is now deprecated.** For new installations, please use the [Shop app](/addons/shop/) instead.","text":"**This app is now deprecated.** For new installations, please use the [Shop app](/addons/shop/) instead.\n\nThe PayPal Shop app enables you to sell products from your site using\nthe PayPal cart. You need an account on PayPal to use this app. The app\nuses the PayPal Shopping Cart – [read the documentation on\nPayPal](https://www.paypal.com/uk/cgi-bin/webscr?cmd=_pdn_cart_techview_outside).\n\nThe app provides the ability to add categories and products, with forms\nwhich submit to the cart on PayPal.\n\nThe shop manages inventory in a basic manner, each product has a\nquantity field and after purchase we use the ipn from PayPal to decrease\nthe available number. This should be considered a rudimentary\nimplementation as we cannot control how many items a visitor adds to\ntheir cart, we are limited by what PayPal provides.","type":"addons"},{"title":"Twitter App","permalink":"https://docs.grabaperch.com/addons/twitter/","id":"addons.twitter","excerpt":"The Twitter app enables you to cache and display Tweets and Favorites\nfrom Twitter on your site.","text":"The Twitter app enables you to cache and display Tweets and Favorites\nfrom Twitter on your site.\n\n## Additional server requirements\n\nThe Twitter app requires that your hosting has the PHP cURL\nfunctionality installed and also that cURL is not blocked at the\nfirewall.\n\nIf you wish tweets to update automatically you will also need the\nability to run a cron job or scheduled task on your server. Otherwise we\nhave no way to automatically update your tweets.","type":"addons"},{"title":"Usage","permalink":"https://docs.grabaperch.com/addons/backup/usage/","id":"addons.backup.usage","excerpt":"Perch Backup will show you what it is able to backup – with an indication in the sidebar. Everyone should be able to backup files, however if your hosting does not give you access to `mysqldump` or does not allow you to execute commands from PHP you will need to back your database up via your hosting control panel.","text":"Perch Backup will show you what it is able to backup – with an indication in the sidebar. Everyone should be able to backup files, however if your hosting does not give you access to `mysqldump` or does not allow you to execute commands from PHP you will need to back your database up via your hosting control panel.\n\nThere are 3 options for backup:\n\n- **Resources only** – this will back up the `/perch/resources` folder, so any images or files uploaded by users will be backed up.\n- **Resources and customizations** – this is useful if you are about to upgrade Perch. It will take a backup of resources, templates, apps, config and plugins.\n- **The entire Perch directory** – this may again be handy before upgrading as it would allow you to put Perch back, exactly as it is if there were any problems.\n\n## Important\n\nWe do not back up your site pages – these are outside the Perch directory. This includes the physical pages created by the Perch Pages App. You should periodically download these to your local copy.\n\nIf you backup MySQL this will download your entire MySQL database. If you have other tables as well as Perch tables in that database they will be downloaded as well, and will be available to any Perch user with access to this app.\n\n_Before relying on a backup please check everything is in there and you can open the ZIP and read the contents!_","type":"addons"},{"title":"Installation","permalink":"https://docs.grabaperch.com/addons/backup/installation/","id":"addons.backup.installation","excerpt":"Download the app checking that your installation of Perch is equal to or greater than the minimum version listed.","text":"Download the app checking that your installation of Perch is equal to or greater than the minimum version listed.\n\nUnzip the download and copy the perch_backup folder into\n\n`/perch/addons/apps/`\n\nAs this is an admin only app there is no runtime to include.\n\nThe app will then show up in the admin menu as Backup.\n\nInside the `perch_backup folder` is a folder named backup. Give this folder the same write permissions as your Perch resources folder. Perch Backup needs to be able to read and write to this directory.\n\n## Settings\n\nPerch Backup will add two settings to the Settings page in Perch. One is to hide backup from Editor users, the other to set your path to mysqldump (the MySQL utility for backing up a database) if it is not the default mysqldump.\n\nMAMP users on the Mac for example may find their path is:\n\n`/Applications/MAMP/Library/bin/mysqldump`\n\nTo gain the full functionality of backup you need to be able to run mysqldump. This is a MySQL utility that creates a copy (or ‘dump’) of your database structure and content.\n\nAsk your host whether it is possible to run mysqldump from PHP and what the path to it is.","type":"addons"},{"title":"YouTube","permalink":"https://docs.grabaperch.com/addons/field-types/youtube/","id":"addons.field-types.youtube","excerpt":"The YouTube field type makes it easy to embed a YouTube video into a page. The field type provides a single text input field, into which the user pastes the public URL of a video on YouTube. The field type then uses Google's YouTube API to fetch the details of the video for embedding in the page.","text":"The YouTube field type makes it easy to embed a YouTube video into a page. The field type provides a single text input field, into which the user pastes the public URL of a video on YouTube. The field type then uses Google's YouTube API to fetch the details of the video for embedding in the page.\n\n## Installation and configuration\n\nDownload and place the `youtube` folder within `perch/addons/fieldtypes`.\n\nDue to the way the Google API for YouTube works, there are a number of configuration steps required before you will be able to fetch video details from YouTube. These steps should only have to be followed once per site.\n\n1. Go to [console.developers.google.com](https://console.developers.google.com)\n2. Create a new project (e.g. _Jones Partners Website_)\n3. Go to _APIs & auth_ in the menu, then to the _APIs_ subitem and select _YouTube Data API_ from the big list\n4. Click _Enable API_\n5. Go to Credentials in the menu\n6. Click _Add Credentials_ and choose _API key_\n7. Create a _Server_ key. You are given the option to limit by IP address, but you can leave that box empty and proceed\n8. Copy the API key - this is what you're after\n9. In your `config/config.php` add the following, adding your nice new API key\n\n\n    `define('PERCH_YOUTUBE_API_KEY', 'your API key');`\n\n\n## Usage\n\nOnce installed, the field type can be used in a template by setting the `type` attribute to `youtube`:\n\n```html\n<perch:content id=\"video\" type=\"youtube\" label=\"YouTube URL\">\n```\n\nThe field type retrieves lots of information about the video from YouTube. You can select what information the tag should output using the `output` attribute. For example, the following would output the `iframe` embed code:\n\n```html\n<perch:content id=\"video\" type=\"youtube\" width=\"800\" label=\"YouTube URL\" output=\"embed\">\n```\n\nThe `width` and `height` attributes can be used to control the display size of the player.\n\nThere are a number of different `output` options you can use.\n\n|Ouput value|Description|\n|-|-|\n|url|The URL of the video on YouTube|\n|embed|An HTML `iframe` video player|\n|title|The title of the video|\n|description|The description of the video|\n|user_name|The name of the channel|\n|date|The date the video was published|\n|thumb|The URL of a thumbnail image|\n|thumb_w|The width of the thumbnail image|\n|thumb_h|The height of the thumbnail images|\n|width|The width of the video|\n|height|The height of the video|\n|likes|The number of likes (thumbs up) the video has received|\n|dislikes|The number of dislikes the video has received|\n|favorites|The number of times the video has been marked as a favorite|\n|comments|The number of numbskull comments left about the video|\n|views|The number of views the video has received|\n|duration|The duration of the video in `hours:minutes:seconds`|\n\n## Player parameters\n\nWhen embedding a player, there are a number of [player parameters](https://developers.google.com/youtube/player_parameters#Parameters) offered to customise the behaviour look of the player. If using the `output=\"embed\"` option, these parameters can be added as attributes on the template tag.\n\n```html\n<perch:content id=\"video\" type=\"youtube\" width=\"800\" label=\"YouTube URL\" output=\"embed\" autoplay=\"1\" modestbranding=\"1\">\n```","type":"addons"},{"title":"Changelog","permalink":"https://docs.grabaperch.com/addons/gallery/changelog/","id":"addons.gallery.changelog","excerpt":"All notable changes to Perch Gallery.","text":"All notable changes to Perch Gallery.\n\n## [2.8.6]\n\nAdds support for Blocks and Repeaters\n\n## [2.8.5]\n\nBug fixes\n\n## [2.8.4]\n\nFixes for failed uploads\n\n## [2.8.2]\n\nUpdate album counts on delete\n\n## [2.8]\n\nBug fixes\n\n## [2.8.1]\n\nAliased some badly named functions\n\n## [2.7]\n\nImproved upload handling\n\n## [2.6]\n\nBug fixes and improvements\n\n## [2.5.1]\n\nMinor bug fixes\n\n## [2.5]\n\nUpdated for Perch 2","type":"addons"},{"title":"Field Types","permalink":"https://docs.grabaperch.com/addons/gallery/fieldtypes/","id":"addons.gallery.fieldtypes","excerpt":"The Gallery app includes a field type called `albumlist`. This can be\nused in regular content templates and templates from other apps. It\ndisplays a select field containing all the albums, and returns the\n`albumSlug` as its value.","text":"The Gallery app includes a field type called `albumlist`. This can be\nused in regular content templates and templates from other apps. It\ndisplays a select field containing all the albums, and returns the\n`albumSlug` as its value.\n\nThe field type is activated by setting `type=\"albumlist\"` on a template\ntag.\n\n```html\n<perch:content id=\"album\" type=\"albumlist\" label=\"Album\">\n```\n\nAt its most basic, this can be used to form a link to an album. You can\nalso get the value back with `skip-template` and pass it to one of the\nalbum functions.\n\nSomething like the following:\n\n```php\n<?php\n    $album = perch_content_custom('My region', array('skip-template'=>true));\n    if (is_array($album)) {\n        // ['album'] is the ID of the field to get the slug from\n        $albumSlug = $album[0]['album'];\n        perch_gallery_album($albumSlug);\n    }\n?>\n```","type":"addons"},{"title":"Installation","permalink":"https://docs.grabaperch.com/addons/gallery/installation/","id":"addons.gallery.installation","excerpt":"Download the latest version of the Gallery App checking that the minimum version of Perch is the same or less than the version of Perch that you are running.","text":"Download the latest version of the Gallery App checking that the minimum version of Perch is the same or less than the version of Perch that you are running.\n\nUnzip the download where you will find the following folders.\n\n-   `gallery` – which contains example pages\n-   `addons/apps/perch_gallery` – which is the actual app\n-   `addons/fieldtypes/albumlist` – which is an optional album list field type\n\nCopy the `addons/apps/perch_gallery` folder into `perch/addons/apps/`\n\nIf you want to use the field type, copy the `addons/fieldtypes/albumlist` folder to `perch/addons/fieldtypes/`\n\nAdd `perch_gallery` [to your apps.php file](/perch/getting-started/installing/apps).\n\nOnce you have installed the app, log into the Perch admin. Perch will create all the tables needed by the app behind the scenes and you can now start to add albums and images.","type":"addons"},{"title":"Updating","permalink":"https://docs.grabaperch.com/addons/gallery/updating/","id":"addons.gallery.updating","excerpt":"Updating the Gallery App is usually a case of replacing the `perch_gallery` folder in `perch/addons/apps`. See the [Changelog](/addons/gallery/changelog) for details of what has changed between the version you are updating from and the latest.","text":"Updating the Gallery App is usually a case of replacing the `perch_gallery` folder in `perch/addons/apps`. See the [Changelog](/addons/gallery/changelog) for details of what has changed between the version you are updating from and the latest.","type":"addons"},{"title":"Changelog","permalink":"https://docs.grabaperch.com/addons/podcasts/changelog/","id":"addons.podcasts.changelog","excerpt":"All notable changes to Perch Podcasts.","text":"All notable changes to Perch Podcasts.\n\n## [1.2]\n\nFixes some minor bugs\n\n## [1.1]\n\nAdds support for Blocks and Repeaters\n\n## [1.0]\n\nInitial release","type":"addons"},{"title":"Installation","permalink":"https://docs.grabaperch.com/addons/podcasts/installation/","id":"addons.podcasts.installation","excerpt":"Download the latest version of the Podcasts app checking that the minimum version of Perch is the same or less than the version of Perch that you are running.","text":"Download the latest version of the Podcasts app checking that the minimum version of Perch is the same or less than the version of Perch that you are running.\n\nUnzip the download where you will find two folders.\n\n-   `podcasts` – which contains example pages\n-   `perch_podcasts` – which is the actual app\n\nCopy the `perch_podcasts` folder into `perch/addons/apps/`\n\nAdd `perch_podcasts` [to your apps.php file](/docs/installing-perch/installing-apps/).\n\nWhen you next log into the Perch admin the Podcasts install script will run behind the scenes to create the necessary tables. A new navigation item will appear in the apps menu.\n\n## URL rewriting\n\nThe tracking functionality is implemented using URL rewriting, and the `podcasts` folder includes an `.htaccess` file with Apache mod_rewrite rules in it. This is to facilitate the tracking URL ending in the correct file extension for publishing via iTunes.\n\nIf you don’t have mod_rewrite or other URL rewriting available on your server, you’ll need to find an alternative method of achieving the same.","type":"addons"},{"title":"Updating","permalink":"https://docs.grabaperch.com/addons/podcasts/updating/","id":"addons.podcasts.updating","excerpt":"Updating the Podcasts App is usually a case of replacing the `perch_podcasts` folder in `perch/addons/apps`. See the [Changelog](/addons/podcasts/changelog) for details of what has changed between the version you are updating from and the latest.","text":"Updating the Podcasts App is usually a case of replacing the `perch_podcasts` folder in `perch/addons/apps`. See the [Changelog](/addons/podcasts/changelog) for details of what has changed between the version you are updating from and the latest.","type":"addons"},{"title":"Creating an editor plugin","permalink":"https://docs.grabaperch.com/addons/plugins/creating/","id":"addons.plugins.creating","excerpt":"If the editor you wish to use isn’t pre-packaged on our site, it’s still very easy to install. Place your editor’s files in a folder within\n`perch/addons/plugins/editors`, for example,\n`perch/addons/plugins/editors/myeditor`.","text":"If the editor you wish to use isn’t pre-packaged on our site, it’s still very easy to install. Place your editor’s files in a folder within\n`perch/addons/plugins/editors`, for example,\n`perch/addons/plugins/editors/myeditor`.\n\nWhen you specify `editor=\"myeditor\"` on a template tag, Perch will do two things\n\n1.  Add a class of `myeditor` to the `textarea` field in the edit form\n2.  Include the special file\n    `perch/addons/plugins/editors/myeditor/_config.inc` at the end of the edit page.\n\nThe `_config.inc` file should include any HTML output needed to initialise your editor. Usually that will be links to its JavaScript and CSS files.\n\nWithin `_config.inc` you can use the special string `PERCH_LOGINPATH` as a placeholder to the path to the user’s Perch installation. This will be replaced with the real path automatically. This helps to make your plugin portable.\n\nYou should initialise your editor when the window loads, and also listen for the custom event `Perch_Init_Editors` on the `window` object. When this event is fired, you should initialise any new, uninitialised editors. It is called when a new block or repeater item is added.\n\nA typical `_config.inc` file might look like this:\n\n```html\n<script type=\"text/javascript\" src=\"PERCH_LOGINPATH/addons/plugins/editors/myeditor/myeditor.js\"></script>\n<script type=\"text/javascript\" charset=\"utf-8\">\n$(document).ready(function(){\n  // function to set up uninitialised textareas\n  var set_up_myeditor = function(){\n    $('textarea.myeditor:not([data-init])').attr('data-init', true).myeditor();\n  };\n\n  // run the function\n  set_up_myeditor();\n\n  // listen for when the function needs to be run again\n  $(window).on('Perch_Init_Editors', function(){\n    set_up_myeditor();\n  });\n});\n</script>\n```\n\nHere we are looking for any `textarea` with a class of `myeditor` that does not have the custom `data-init` attribute set. We then set that attribute and initialise the editor for that textarea. The custom attribute is used as a flag to prevent the same textarea being initialised more than once.\n\nPerch uses the jQuery library on its pages, so if your editor has a jQuery adaptor or implementation, that’s the best version to use.","type":"addons"},{"title":"Installing Editors","permalink":"https://docs.grabaperch.com/addons/plugins/installing/","id":"addons.plugins.installing","excerpt":"Just about any WYSIWYG editor that takes over a basic textarea can be used with Perch. To make things simple, a few popular editors are pre-packaged for easy installation.","text":"Just about any WYSIWYG editor that takes over a basic textarea can be used with Perch. To make things simple, a few popular editors are pre-packaged for easy installation.\n\nThe currently available editors can be found in the [add-ons](http://grabaperch.com/add-ons/plug-ins) section of the Perch website.\n\nTo install, unzip the folder and place the plugin into the\n`perch/addons/plugins/editors` folder. If you were installing the CKEditor plugin, for example, this would go into your site at:\n\n```\nperch/addons/plugins/editors/ckeditor\n```\n\nYou then use the plugin in the same way that the default markitup editor is used, by adding it to a Perch [template tag](/docs/content/template-tags/). For example, if I had installed and wanted to use TinyMCE I would use the following in my template.\n\n```html\n<perch:content id=\"text\" type=\"textarea\" label=\"Text\" editor=\"tinymce\" html>\n```\n\nAs most editors create HTML you need to set `html` on your region in addition to adding the editor attribute.\n\n**Note**: If you are converting a default Perch template that uses the MarkItUp editor to use any of the other editor plugins – Redactor, TinyMCE or CKEditor you need to remove textile=“true” from the tag and replace it with html=“true”.\n\nIf you are not sure how to edit Perch Templates then first watch the video on [Creating Templates](/video/creating-templates/)\n\n## Using a custom editor\n\nIf the editor you wish to use isn’t pre-packaged on our site, it’s still very easy to install. Place your editor’s files in a folder within\n`perch/addons/plugins/editors`, for example,\n`perch/addons/plugins/editors/myeditor`.\n\nWhen you specify `editor=\"myeditor\"` on a template tag, Perch will do two things\n\n1.  Add a class of `myeditor` to the `textarea` field in the edit form\n2.  Include the special file\n    `perch/addons/plugins/editors/myeditor/_config.inc` at the end of the edit page.\n\nThe `_config.inc` file should include any HTML output needed to initialise your editor. Usually that will be links to its JavaScript and CSS files.\n\nWithin `_config.inc` you can use the special string `PERCH_LOGINPATH` as a placeholder to the path to the user’s Perch installation. This will be replaced with the real path automatically. This helps to make your plugin portable.\n\nYou should initialise your editor when the window loads, and also listen for the custom event `Perch_Init_Editors` on the `window` object. When this event is fired, you should initialise any new, uninitialised editors. It is called when a new block or repeater item is added.\n\nA typical `_config.inc` file might look like this:\n\n```html\n<script type=\"text/javascript\" src=\"PERCH_LOGINPATH/addons/plugins/editors/myeditor/myeditor.js\"></script>\n<script type=\"text/javascript\" charset=\"utf-8\">\n$(document).ready(function(){\n  // function to set up uninitialised textareas\n  var set_up_myeditor = function(){\n    $('textarea.myeditor:not([data-init])').attr('data-init', true).myeditor();\n  };\n\n  // run the function\n  set_up_myeditor();\n\n  // listen for when the function needs to be run again\n  $(window).on('Perch_Init_Editors', function(){\n    set_up_myeditor();\n  });\n});\n</script>\n```\n\nHere we are looking for any `textarea` with a class of `myeditor` that does not have the custom `data-init` attribute set. We then set that attribute and initialise the editor for that textarea. The custom attribute is used as a flag to prevent the same textarea being initialised more than once.\n\nPerch uses the jQuery library on its pages, so if your editor has a jQuery adaptor or implementation, that’s the best version to use.","type":"addons"},{"title":"Installation","permalink":"https://docs.grabaperch.com/addons/kraken/installation/","id":"addons.kraken.installation","excerpt":"[Download the app](http://grabaperch.com/add-ons/apps/kraken) checking that your installation of Perch is equal to or greater than the minimum version listed.","text":"[Download the app](http://grabaperch.com/add-ons/apps/kraken) checking that your installation of Perch is equal to or greater than the minimum version listed.\n\nUnzip the download and copy the `addons/apps/perch_kraken` folder into\n\n```php\n/perch/addons/apps/\n```\n\nAs this is an admin only app there is no runtime to include. The app will then show up in the admin menu as Kraken.\n\n## Settings\n\nBefore you can use the service you need to [sign up](https://kraken.io/?ref=5a608b00df18) and get an API key. Free accounts are available so you can test the service before needing to pay.\n\nOnce you have your API key and secret, enter these on the Settings page and save.\n\nKraken works on a request and callback basis, so **your site needs to be online and publicly accessible** for the optimized images to be retrieved.","type":"addons"},{"title":"Updating","permalink":"https://docs.grabaperch.com/addons/kraken/updating/","id":"addons.kraken.updating","excerpt":"Updating the Kraken App is usually a case of replacing the `perch_kraken` folder in `perch/addons/apps`. See the [Changelog](/addons/kraken/changelog) for details of what has changed between the version you are updating from and the latest.","text":"Updating the Kraken App is usually a case of replacing the `perch_kraken` folder in `perch/addons/apps`. See the [Changelog](/addons/kraken/changelog) for details of what has changed between the version you are updating from and the latest.","type":"addons"},{"title":"Changelog","permalink":"https://docs.grabaperch.com/addons/kraken/changelog/","id":"addons.kraken.changelog","excerpt":"All notable changes to Perch Kraken","text":"All notable changes to Perch Kraken\n\n## [1.0]\n\nInitial release","type":"addons"},{"title":"Changelog","permalink":"https://docs.grabaperch.com/addons/shop-foxycart/changelog/","id":"addons.shop-foxycart.changelog","excerpt":"All notable changes to Perch Shop Foxycart","text":"All notable changes to Perch Shop Foxycart\n\n## Deprecated\n\nThis app is now deprecated and is not recommended for new projects.\n\n## [2.1]\n\nUpdated for Perch 2.8\n\n## [2.0]\n\nMultiple options and order management\n\n## [1.7]\n\nSupport for FoxyCart Store Version 1\n\n## [1.6]\n\nUpdated for FoxyCart API 1.0\n\n## [1.5.1]\n\nAddresses bug in callback script\n\n## [1.5]\n\nUpdated for Perch 2","type":"addons"},{"title":"Installation","permalink":"https://docs.grabaperch.com/addons/shop-foxycart/installation/","id":"addons.shop-foxycart.installation","excerpt":"Download the latest version of the Shop App checking that the minimum version of Perch is the same or less than the version of Perch that you are running.","text":"Download the latest version of the Shop App checking that the minimum version of Perch is the same or less than the version of Perch that you are running.\n\nUnzip the download where you will find three folders.\n\n`shop` – which contains example pages\\\n `perch_shop_foxycart` – which is the actual app\\\n `feathers` – which contains a Perch Feather to include the FoxyCart JavaScript includes and also our example CSS\n\nCopy the `perch_shop_foxycart` folder into `perch/addons/apps/`\n\nAdd `perch_shop_foxycart` [to your apps.php file](/docs/installing-perch/installing-apps/).\n\nSave this file. Next time you log into the Perch Admin you will see an additional menu option of Shop in the admin navigation. Visit this link and Perch will create the tables that the Shop App needs behind the scenes.\n\n## FoxyCart Configuration\n\nIn your FoxyCart account on the **FoxyCart website** you need to adjust\nsome settings.\n\nUnder Store > Advanced:\n\n1.  To use the xml datafeed to update your stock, check “Would you like\n    to enable your store datafeed?” then add the URL of the callback\n    script. This script is found in\n    `/perch/addons/apps/perch_shop_foxycart/callback/foxy_cart_callback.php`\n    so if your domain is `http://example.com` the script is at\n    `http://example.com/perch/addons/apps/perch_shop_foxycart/callback/foxy_cart_callback.php`.\n    If you have renamed the Perch folder then rename it here too.\n2.  If you want to use the security option to prevent tampering with\n    your cart variables check “Would you like to enable cart\n    validation?”\n3.  The API Key listed below these fields is a required setting for\n    Perch if you are using either the callback script or the validation,\n    so after saving this page copy it.\n\n**Note:** When enabling the cart validation security option, FoxyCart\ngenerates a new API key. If you change this option you also need to copy\nacross the new API key, otherwise you’ll get validation errors on adding\nsomething to your cart.\n\n## Perch Configuration\n\nOnce your shop is installed visit the Settings page in Perch and you\nshould see some new settings.\n\n1.  “Use FoxyCart Security” is if you wish to use the validation. We\n    would recommend this.\n2.  Add the API key that you copied.\n3.  Add the URL of your cart on FoxyCart, unless you are using a custom\n    domain this will be https://yourstore.foxycart.com/cart. Note the\n    https.\n\nCopy the `foxyshop` folder from inside `feathers` to\n`perch/addons/feathers`\n\nOpen `perch/config/feathers.php` and add the following include line\ninside `<?php` tags.\n\n{% highlight php %}\ninclude(PERCH_PATH.'/addons/feathers/foxyshop/runtime.php');\n{% endhighlight %}\n\nIf you wish to use our example CSS as a starting point you will also\nneed to download and install the [Perch Quill\nFeather](https://grabaperch.com/add-ons/feathers/quill).","type":"addons"},{"title":"Updating","permalink":"https://docs.grabaperch.com/addons/shop-foxycart/updating/","id":"addons.shop-foxycart.updating","excerpt":"Updating the Foxycart App is usually a case of replacing the `perch_shop` folder in `perch/addons/apps`. See the [Changelog](/addons/perch-foxycart/changelog) for details of what has changed between the version you are updating from and the latest.","text":"Updating the Foxycart App is usually a case of replacing the `perch_shop` folder in `perch/addons/apps`. See the [Changelog](/addons/perch-foxycart/changelog) for details of what has changed between the version you are updating from and the latest.","type":"addons"},{"title":"Installation","permalink":"https://docs.grabaperch.com/addons/shop-paypal/installation/","id":"addons.shop-paypal.installation","excerpt":"Download the latest version of the Shop App checking that the minimum\nversion of Perch is the same or less than the version of Perch that you\nare running.","text":"Download the latest version of the Shop App checking that the minimum\nversion of Perch is the same or less than the version of Perch that you\nare running.\n\nUnzip the download where you will find three folders.\n\n-   `shop` – which contains example pages\n-   `addons/apps/perch_shop_paypal` – which is the actual app\n-   `addons/feathers/paypalshop` – which contains a Perch Feather to\n    include the PayPal JavaScript includes and also our example CSS\n\nCopy the `perch_shop_paypal` folder into `perch/addons/apps/`\n\nAdd `perch_shop_paypal` [to your apps.php\nfile](/docs/installing-perch/installing-apps/).\n\nNext time you log into the Perch Admin you will see an additional menu\noption of Shop in the admin navigation. Visit this link and Perch will\ncreate the tables that the Shop App needs behind the scenes.\n\n## PayPal Configuration\n\nOnce your site is on a server that can be accessed via the Internet you\nwill need to set up the IPN script so that PayPal can post order details\nto it. To do this log into your PayPal account.\n\nUnder Profile \\> Selling Preferences find the link to update **Instant\nPayment Notifications**\n\nEnable the IPN and then add a link to the callback script on your\nserver. If you have not renamed the Perch folder and it is in the root\nof your site this will be:\n\n`http://yourdomain.com/perch/addons/apps/perch_shop_paypal/callback/ipn_callback.php`\n\n## Perch Configuration\n\nAfter installing the Shop app some new Settings will appear on your\nSettings page in admin. You need to add your PayPal email address here,\nand also check that the path to your product pages is correct then save\nthe form.\n\nCopy the `paypalshop` folder from inside feathers to\n`perch/addons/feathers`\n\nOpen `perch/config/feathers.php` and add the following include line\ninside `<?php` tags.\n\n{% highlight php startinline %}\ninclude(PERCH_PATH.'/addons/feathers/paypalshop/runtime.php');\n{% endhighlight %}\n\nIf you wish to use our example CSS as a starting point you will also\nneed to download and install the [Perch Quill\nFeather](https://grabaperch.com/add-ons/feathers/quill).\n\nIf quantities are not being updated after an order and/or orders are not\nappearing under the orders tab then this means your IPN script is\nfailing.\n\nMake sure you have configured this at PayPal and the URL pasted into\nPayPal is correct.\n\nWe create a log of IPN callbacks in a table (perch2_shop_log) in your\ndatabase. Viewing this directly should show what has been returned. If\nyou contact Perch support with IPN issues then we need to know what is\nbeing posted into this table after an order.","type":"addons"},{"title":"Changelog","permalink":"https://docs.grabaperch.com/addons/shop-paypal/changelog/","id":"addons.shop-paypal.changelog","excerpt":"All notable changes to Perch Shop PayPal","text":"All notable changes to Perch Shop PayPal\n\n## Deprecated\n\nThis app is now deprecated and is not recommended for new projects.\n\n## [1.2.3]\n\nFixes bug with product options\n\n## [1.2.2]\n\nUpdated for Perch 2.8\n\n## [1.2.1]\n\nFixes a bug with @skip-template@ in @perch_shop_custom()@\n\n## [1.2]\n\nNew PayPal minicart\n\n## [1.1.2]\n\nInstall fixes\n\n## [1.1.1]\n\nBug fixes\n\n## [1.1]\n\nFixes issues in IPN script\n\n## [1.0]\n\nInitial release","type":"addons"},{"title":"Updating","permalink":"https://docs.grabaperch.com/addons/shop-paypal/updating/","id":"addons.shop-paypal.updating","excerpt":"Updating the PayPal App is usually a case of replacing the `perch_paypal` folder in `perch/addons/apps`. See the [Changelog](/addons/paypal/changelog) for details of what has changed between the version you are updating from and the latest.","text":"Updating the PayPal App is usually a case of replacing the `perch_paypal` folder in `perch/addons/apps`. See the [Changelog](/addons/paypal/changelog) for details of what has changed between the version you are updating from and the latest.","type":"addons"},{"title":"Field Type","permalink":"https://docs.grabaperch.com/addons/twitter/field-type/","id":"addons.twitter.field-type","excerpt":"The Twitter add-on, as of version 3.3 includes a field type. This field type will let the content editor paste in a Tweet ID, or URL to a tweet from the Twitter website and display the tweet in templated form on your site.","text":"The Twitter add-on, as of version 3.3 includes a field type. This field type will let the content editor paste in a Tweet ID, or URL to a tweet from the Twitter website and display the tweet in templated form on your site.\n\nTo use the field type, set `type=\"tweet\"` in your content templates.\n\n```html\n<perch:content id=\"tweet\" type=\"tweet\" label=\"Tweet ID\" encode=\"false\">\n```\n\nThe field type requires that you have the Twitter app installed on your site and have setup your site with the Twitter API as explained in the app installation instructions.\n\n## Template\n\nThe default template is the same template `tweet.html` as used to display other tweets via the app. You can also pass in a custom template by specifying this in your template tag.\n\n```html\n<perch:content id=\"tweet\" type=\"tweet\" label=\"Tweet ID\" encode=\"false\" template=\"twitter/my_template.html\">\n```\n\nRemember that you need to ensure that you comply with the [Twitter Display Requirements](https://dev.twitter.com/overview/terms/display-requirements) when displaying Tweets on your website.","type":"addons"},{"title":"Changelog","permalink":"https://docs.grabaperch.com/addons/twitter/changelog/","id":"addons.twitter.changelog","excerpt":"All notable changes to Perch Twitter","text":"All notable changes to Perch Twitter\n\n## [4.0.0]\n\n- Adds support for 280 character tweets\n- Adds missing privileges for settings and scheduling\n- Adds shortcode provider for embedding tweets\n\n## [3.6.1]\n\nFixes for case-sensitivity issues\n\n## [3.6]\n\nAdds Cloudinary support for caching profile images\n\n## [3.5.1]\n\nFixes upgrade issue\n\n## [3.5]\n\nAdds tweet scheduling\n\n## [3.3.1]\n\nFixes installation bug\n\n## [3.3]\n\nAdds Tweet fieldtype\n\n## [3.2]\n\nTimezone support\n\n## [3.1.1]\n\nRepackage of 3.1\n\n## [3.1]\n\nSupport for media URLs\n\n## [3.0]\n\nOAuth and Twitter API v1.1\n\n## [2.0.4]\n\nSupport for scheduled tasks\n\n## [2.0.3]\n\nFix for new Twitter endpoint URLs\n\n## [2.0.2]\n\nCron script path changes\n\n## [2.0.1]\n\nMinor bug fixes\n\n## [2.0]\n\nUpdated for Perch 2","type":"addons"},{"title":"Profile Images","permalink":"https://docs.grabaperch.com/addons/twitter/profile-images/","id":"addons.twitter.profile-images","excerpt":"The Twitter API returns a URL to the user's profile image. Perch stores that URL, but if the user later updates their profile image the stored URL can become invalid and the link to the image breaks.","text":"The Twitter API returns a URL to the user's profile image. Perch stores that URL, but if the user later updates their profile image the stored URL can become invalid and the link to the image breaks.\n\nIn order to get the new URL and restore the link, Perch would need to go back to the Twitter API to fetch the updated URL. That only happens when an editor uses the Perch control panel, so can be a problem if an image breaks and nobody notices.\n\nA simple way around that is to not reference the URL Twitter gives back at all, but instead to use an intermediary cache that is designed to serve the most recent version without breaking.\n\n## Cloudinary\n\nThe online image management service [Cloudinary](http://cloudinary.com/invites/lpov9zyyucivvxsnalc5/uznblf3qtvfg1arzkway) provides one such intermediary service, and has free accounts that would be suitable for most uses. By caching and serving Twitter profile images from their CDN, you can be confident that you always have a recent profile image to display on your site, and you may well also see performance gains.\n\nTo use Cloudinary, you need to [sign up for a free account](http://cloudinary.com/invites/lpov9zyyucivvxsnalc5/uznblf3qtvfg1arzkway), whereby you'll be given a _cloud name_. Enter this cloud name in the field inside the Settings section of the Twitter app. For tweets added after that point, profile images will reference a Cloudinary URL instead of the original Twitter URL.","type":"addons"},{"title":"Installation","permalink":"https://docs.grabaperch.com/addons/twitter/installation/","id":"addons.twitter.installation","excerpt":"Download the latest version of the Twitter App checking that the minimum version of Perch is the same or less than the version of Perch that you are running.","text":"Download the latest version of the Twitter App checking that the minimum version of Perch is the same or less than the version of Perch that you are running.\n\nUnzip the download where you will find:\n\n- `addons/apps/perch_twitter`\n\nCopy the `perch_twitter` folder into `perch/addons/apps/`\n\nAdd `perch_twitter` [to your `apps.php` file](/docs/installing-perch/installing-apps/).\n\nOnce you have installed the app, log into the Perch control panel. The Twitter app will show up as a new option in your Apps menu. When you visit the app for the first time the app should install itself.\n\n## Registering a Twitter app\n\nTo get started, go to [dev.twitter.com/apps](https://dev.twitter.com/apps) and create a new Twitter app. Be sure to fill out the optional Callback URL field – the value doesn’t matter, you can use your homepage URL.\n\nCompleting this process will give you a Consumer Key and Consumer Secret. Back in the Perch Twitter app, enter these on the settings page. You should then be asked to authenticate with Twitter.\n\nThis cumbersome process is part of the Twitter OAuth requirements.\n\n## Downloading tweets\n\nTo start caching Tweets enter your Twitter username(s) on the Settings page. You can add as many names as you wish here.\n\nAfter submitting this form, go to the Tweets page and click Get Tweets. This will cause the app to download the latest posts made by the accounts added here, and also any tweets from other accounts that have been marked as favorites. Creating a favorites list is one way to display user feedback on your site as described in this blog post.\n\n## Updating the tweets\n\nThere are two ways to update the Tweets in the cache. The first is by clicking the Get Tweets button in the admin interface.\n\nThe second is to set up a [scheduled task](http://docs.grabaperch.com/docs/scheduled-tasks/).\n\n## Displaying tweets\n\nYou can get started displaying tweets very quickly. Add this to a page:\n\n```php\n<?php\n    perch_twitter_get_latest();\n    perch_twitter_widget_js();\n?>\n```\n\nThis will pull in the latest tweets (as listed in the control panel) and then add the JavaScript Twitter uses to turn the basic HTML into rich embedded tweets.","type":"addons"},{"title":"Shortcode","permalink":"https://docs.grabaperch.com/addons/twitter/shortcode/","id":"addons.twitter.shortcode","excerpt":"The Twitter add-on, as of version 4 includes a shortcode provider for embedding tweets into content such as textarea fields.","text":"The Twitter add-on, as of version 4 includes a shortcode provider for embedding tweets into content such as textarea fields.\n\nTo use the shortcode, you need the ID of the tweet (found in its URL).\n\n```\n[cms:tweet 393001738552504320]\n```\n\nThis will display the tweet inline at the point the shortcode is entered.","type":"addons"},{"title":"Updating","permalink":"https://docs.grabaperch.com/addons/twitter/updating/","id":"addons.twitter.updating","excerpt":"Updating the Twitter App is usually a case of replacing the `perch_twitter` folder in `perch/addons/apps`. See the [Changelog](/addons/twitter/changelog) for details of what has changed between the version you are updating from and the latest.","text":"Updating the Twitter App is usually a case of replacing the `perch_twitter` folder in `perch/addons/apps`. See the [Changelog](/addons/twitter/changelog) for details of what has changed between the version you are updating from and the latest.\n\n## Upgrade notes for older installations\n\n**Version 3** of this app includes some major changes due to new requirements from Twitter. These include OAuth authentication, version 1.1 of the Twitter API, and new visual display requirements. The Perch Twitter app is up-to-date with all these requirements.\n\nAs these changes were significant, we’ve taken the opportunity to also tidy up the way the app works to make it more consistent with some of our newer apps. If you used a previous version, you’ll need to make some changes in your pages.\n\nAs well as new templates and a Feather to meet display requirements, the two main page functions have changed to take option arrays rather than a long string of arguments.\n\n```php\n<?php\nperch_twitter_get_latest('screen_name', 'mine', 10, true, 'tweet.html');\n?>\n```\n\nbecomes:\n\n```php\n<?php\nperch_twitter_get_latest([\n\t'twitter_id'      => 'screen_name',\n\t'type'            => 'mine',\n\t'count'           => 10,\n\t'exclude_replies' => true,\n\t'template'        => 'tweet.html',\n]);\n?>\n```\n\nSee the [page functions documentation](/addons/twitter/page-functions/) for a full guide.\n\n**Version 3.6** updates and integrates the `tweet` field type into the app itself. This makes things simpler for new installs. If you're updating an older install, you need to remove the `addons/fieldtypes/tweet` folder that you may have added previously.\n\n**Version 4.0** brings the app in line with the Twitter guidelines for CMSs. As a result, the default `tweet.html` template is greatly simplified, falling back on more of Twitter's own widget code.","type":"addons"},{"title":"Changelog","permalink":"https://docs.grabaperch.com/addons/announcements/changelog/","id":"addons.announcements.changelog","excerpt":"All notable changes to Perch Announcements.","text":"All notable changes to Perch Announcements.\n\n\n## [1.0]\n\nInitial release\n\n- Available only for subscriptions under <a href=\"https://account.perchcms.com/runway-addons\">https://account.perchcms.com/runway-addons</a>","type":"addons"},{"title":"Examples","permalink":"https://docs.grabaperch.com/addons/announcements/examples/","id":"addons.announcements.examples","excerpt":"A worked example for listing announcements with the Announcements App.","text":"A worked example for listing announcements with the Announcements App.\n\n\n## Announcements\n\n- [Display Announcements in Page](/addons/announcements/examples/announcements)","type":"addons"},{"title":"Installation","permalink":"https://docs.grabaperch.com/addons/announcements/installation/","id":"addons.announcements.installation","excerpt":"Download the latest version of the Announcements app checking that the minimum version of Perch is the same or less than the version of Perch that you are running.","text":"Download the latest version of the Announcements app checking that the minimum version of Perch is the same or less than the version of Perch that you are running.\n\nUnzip the download where you will find two folders.\n\n-   `announcements` – which contains example page\n-   `perch_announcements` – which is the actual app\n\nCopy the `perch_announcements` folder into `perch/addons/apps/`\n\nAdd `perch_announcements` [to your apps.php file](/docs/installing-perch/installing-apps/).\n\nWhen you next log into the Perch admin the Announcements install script will run behind the scenes to create the necessary tables. A new navigation item will appear in the apps menu.","type":"addons"},{"title":"Display Announcements","permalink":"https://docs.grabaperch.com/addons/announcements/examples/announcements/","id":"addons.announcements.examples.announcements","excerpt":"To display the announcements (on your `/announcements` page perhaps), use:\n```php\n perch_announcements_custom(array(\n              'template' => 'announcements_in_list.html'\n          ));","text":"To display the announcements (on your `/announcements` page perhaps), use:\n```php\n perch_announcements_custom(array(\n              'template' => 'announcements_in_list.html'\n          ));\n\n```\n\n\nTo display a single announcement use:\n```php\nperch_by_announcement(perch_get('s'));\n\n```","type":"addons"},{"title":"Examples","permalink":"https://docs.grabaperch.com/addons/blog/examples/","id":"addons.blog.examples","excerpt":"Some worked examples and tutorials for achieving various things with the Blog App.","text":"Some worked examples and tutorials for achieving various things with the Blog App.","type":"addons"},{"title":"Importing Posts","permalink":"https://docs.grabaperch.com/addons/blog/importing/","id":"addons.blog.importing","excerpt":"The Blog app includes an importer to move your blog posts from another blog engine. Currently this includes an importer for WordPress and Posterous. If there is demand we can create other import scripts, let us know in the forum if this would be helpful for you.","text":"The Blog app includes an importer to move your blog posts from another blog engine. Currently this includes an importer for WordPress and Posterous. If there is demand we can create other import scripts, let us know in the forum if this would be helpful for you.\n\n-   [Instructions for WordPress](#wordpress)\n-   [Instructions for Posterous](#posterous)\n-   [Template guidelines and tips](#templates)\n\n## Importing WordPress posts {#wordpress}\n\nTo import your posts you will need to follow the following steps.\n\n1.  Export your posts from WordPress\n2.  Install the blog app into Perch\n3.  Import your posts into Perch\n4.  Create Perch templates for your posts\n5.  Update your .htaccess file if you wish to preserve your WordPress\n    URLs\n\nWe would strongly suggest you do this on a local or staging copy of your site. If you need help to understand how to set that up see [this solution](/solutions/development-guides/xampp-install/).\n\n### Export your posts\n\nLog into WordPress and select `Tools > Export`. Choose the radio button to export posts. Then click Download Export File to download an xml file of your posts.\n\n### Install the blog app\n\nOn the Perch website, download the blog app and install it as described in the installation instructions. You will then have an empty blog install.\n\nGo to the Settings Page in Perch and find the Blog section. Update the Slug Format setting to match how your posts are formatted in WordPress.\n\n### Import your posts\n\nTake the xml file that you downloaded from WordPress and put it into the folder `/perch/addons/apps/perch_blog/import_data`\n\nThen log into Perch admin and go to the Blog app. In the sidebar is a link to import posts. Click this. You should then see a form.\n\nUnder import file select your posts xml file.\n\nFile Type is WordPress.\n\nYou can choose to keep your posts as HTML or Textile. This choice depends a little on how your posts were authored in WordPress. If they were created as HTML (using TinyMCE, for example) you’ll need to continue to use HTML in Perch in order to maintain the formatting.\n\nPosts that were authored largely as plain text (common with older WordPress blogs, which used automatic line break conversion) then you may have some success converting to Textile.\n\nClick the Import button, the import may take a little while if you have many posts.\n\nYou should now find your posts and comments imported. Check by comparing the number of posts in Perch and WordPress.\n\n## Importing Posterous posts {#posterous}\n\nWhen Posterous announced it was closing in 2013, an export of content was made available. Unzip your data export, and you should have a folder called something along the lines of `space-12345678-sitename-abc123def456ghi789`. This is the folder you need to work with below.\n\n### Install the blog app\n\nOn the Perch website, download the blog app and install it as described in the installation instructions. You will then have an empty blog install.\n\nGo to the Settings Page in Perch and find the Blog section. Update the Slug Format setting to match how your posts are formatted in Posterous.\n\nCopy the `/perch/addons/apps/perch_blog/templates/post.html` file to `/perch/templates/blog/post.html` and update the main `postDescHTML` tag to remove `textile` and add `html`\n\n(You may find it easiest to use an editor like Redactor, as your posts will all be in HTML.)\n\n```html\n<perch:blog id=\"postDescHTML\" type=\"textarea\" editor=\"redactor\" html size=\"xxl\">\n```\n\n### Import your posts\n\nTake the `space-...` export folder and put it into the folder\n\n`/perch/addons/apps/perch_blog/import_data`\n\nThen log into Perch admin and go to the Blog app. In the sidebar is a link to import posts. Click this. You should then see a form.\n\nUnder import file select your `space-` folder from the list.\n\nFile Type is Posterous, and the format is HTML.\n\nClick the Import button, the import may take a little while if you have many posts.\n\nYou should now find your posts and comments imported. Check by comparing the number of posts in Perch and Posterous. Note that the Posterous export doesn’t always include all the files you uploaded. Double check for things like PDF files, as we’ve found that those are often not included.\n\n## Create Perch templates for your Blog {#templates}\n\nYou can now create your blog pages in Perch. In the blog download are some example pages and I would suggest using these as a basis for your new blog, copying in your design. We have a video that explains how to incorporate blog into your own design.\n\n### Things to note when creating templates\n\nIf you have converted your posts to Textile or Markdown these will still contain some html, so your Perch template tag will need to have an `encode=\"false\"` alongside the attribute `textile` or `markdown`. This prevents Perch from encoding the HTML entities. Our default blog template already has this in place.\n\nIf you have an automatically created excerpt in your WordPress post listing you can do this in Perch. Before editing the default blog templates remember to copy them to perch/templates/blog then look at `post_in_list.html`\n\nThis template assumes that you have added an excerpt when creating your blog post. You can change this to just use the first x words from your blog post by using the following tag.\n\n```html\n<perch:blog id=\"postDescHTML\" encode=\"false\" words=\"50\" append=\" [...]\">\n```\n\nIf you would like to be able to create excerpts (which tend to read more nicely than automatically generated ones) you can use a `perch:if` statement to show your added excerpt if it exists, and if not show your shortened version of the post. This means you won’t have to go through all of your old posts adding excerpts.\n\n```html\n<perch:if exists=\"excerpt\">\n  <perch:blog id=\"excerpt\" type=\"textarea\" textile>\n<perch:else>\n  <perch:blog id=\"postDescHTML\" encode=\"false\" words=\"50\" append=\" [...]\">\n</perch:if>\n```\n\n### Update the .htaccess file\n\nBy default Perch will link to posts with a querystring. This is because not all servers our Perchers use have mod_rewrite capability, mod_rewrite is what is used to create “friendly” or “SEO friendly” URLs.\n\nIf you have mod_rewrite then you can use it to rewrite your Perch URLs. For example to change your blog URLs from:\n\n    http://mysite.com/blog/post.php?s=2012/09/21/my-post-title\n\nto\n\n    http://mysite.com/blog/2012/09/21/my-post-title/\n\nYou would add the following line to your .htaccess file.\n\n```\nRewriteRule ^blog/([a-zA-Z0-9-/]+)$ /blog/post.php?s=$1 [L]\n```\n\nThen in Perch Settings, change your Blog Post Page Path to:\n\n    /blog/{postSlug}/\n\nThis will ensure that the links from your listing page are updated. Read more detail about [URL Rewriting for the Blog App](/addons/blog/installation/clean-urls/).\n\nImporting a lot of data can use lots of server memory and take a while to process. In some hosting environments, this can cause the PHP memory limit, or the maximum script time to be reached.\n\nThis can particularly be an issue with Posterous imports, and Perch reprocesses all the images. Processing images takes time and memory.\n\nOften, you can adjust the PHP memory limit and timeout. If you can’t do it on your live server, it may be better to run the import on your development server and then upload.\n\nIn your `perch/config/config.php` file, you can adjust the limits using\n\n```\nini_set('memory_limit', '256M');\nset_time_limit(90);\n```","type":"addons"},{"title":"Post types","permalink":"https://docs.grabaperch.com/addons/blog/post-types/","id":"addons.blog.post-types","excerpt":"Blog posts are based on the default post template for the blog. For Perch Runway users, that's whichever template is selected for a given blog. For Perch users, that's always `post.html`.","text":"Blog posts are based on the default post template for the blog. For Perch Runway users, that's whichever template is selected for a given blog. For Perch users, that's always `post.html`.\n\nIt is possible to have multiple different templates for different types of post. For example, you might templates for specific types of post with different field configurations such as a photo post, a video post and so on.\n\n## Creating and using post types\n\nThe template for each new post type goes into the `templates/blog/posts` folder. For example you might have `templates/blog/posts/news.html`.\n\nOnce new templates are added, the user will be prompted to select a post type when creating a new post.\n\nYou should carefully consider the fields you want to include in a new post template. For example, if you don't include a `postTitle` field it will be hard to find a post in the control panel. If you don't include a `postDateTime` date field, you won't be able to set a post to publish at a future date.\n\nAny field you intend to sort or filter your posts by should be included in all post templates, otherwise Perch won't be able to determine where in the result set a given post should belong.","type":"addons"},{"title":"Installation","permalink":"https://docs.grabaperch.com/addons/blog/installation/","id":"addons.blog.installation","excerpt":"Download the latest version of the Blog App checking that the minimum version of Perch is the same or less than the version of Perch that you are running.","text":"Download the latest version of the Blog App checking that the minimum version of Perch is the same or less than the version of Perch that you are running.\n\nUnzip the download where you will find two folders.\n\n-   `blog` – which contains example pages\n-   `perch_blog` – which is the actual app\n\nCopy the `perch_blog` folder into `perch/addons/apps/`\n\nAdd `perch_blog` [to your apps.php file](/docs/installing-perch/installing-apps/).\n\nWhen you next log into the Perch admin the Blog install script will run behind the scenes to create the necessary tables. A new blog navigation item will appear in the administration menu.","type":"addons"},{"title":"Runway","permalink":"https://docs.grabaperch.com/addons/blog/runway/","id":"addons.blog.runway","excerpt":"In most cases setting up a blog in Runway is the same as using the application in Perch. The key differences are:","text":"In most cases setting up a blog in Runway is the same as using the application in Perch. The key differences are:\n\n- in Runway you would typically create your pages as Master Pages rather than actual files in the root of your site.\n- Runway has routing which will need to be configured for your Blog URLs\n- in Runway you have the option of creating multiple blogs","type":"addons"},{"title":"Updating","permalink":"https://docs.grabaperch.com/addons/blog/updating/","id":"addons.blog.updating","excerpt":"Updating the Blog App is usually a case of replacing the `perch_blog` folder in `perch/addons/apps`. See the [Changelog](/addons/blog/changelog) for details of what has changed between the version you are updating from and the latest.","text":"Updating the Blog App is usually a case of replacing the `perch_blog` folder in `perch/addons/apps`. See the [Changelog](/addons/blog/changelog) for details of what has changed between the version you are updating from and the latest.\n\nIf you are updating from a version of Blog older than **Blog 4.5** read the below important information.\n\n## Updating from a version prior to 4.5\n\nWith Blog 4.0, the `post.html` master template changed to more fully control the post editing process. Prior to this, more of the logic was hard-coded into the app itself.\n\nIf updating from an older version of Blog, you’ll need to make sure your\n`post.html` template has a full set of attributes for each tag. Check that:\n\n-   All tags have `type` and `label` attributes\n-   Any processing options (like using Markdown, Textile or allowing\n    HTML in posts) are set correctly on the tag (Markdown is now the default previously it was Textile)\n-   The `order` attributes represent the order you would like the fields to appear\n-   Any fields in your post template that aren’t part of the edit form (like Author name) have `type=\"hidden\"` set\n\n**Blog 4.5 introduced further changes** to integrate the Categories functionality\n\n-   Make sure you have added the Categories app [to your apps.php file](/docs/installing-perch/installing-apps/)\n-   Update `post.html` with the below category field\n-   Update any category templates as detailed below\n\nCategories are now managed centrally. Your existing categories will be imported, but you need to add the following to your `post.html` template:\n\n```php\n<perch:categories id=\"categories\" set=\"blog\" label=\"Categories\" display-as=\"checkboxes\">\n  <a href=\"archive.php?cat=<perch:category id=\"catSlug\" type=\"slug\">\">\n    <perch:category id=\"catTitle\" type=\"text\">\n  </a>\n</perch:categories>\n```\n\nAs the categories system has been updated, you also need to update any blog templates that output categories:\n\n1. Convert the tags from `<perch:blog>` to `<perch:category>`\n2. Update the IDs from `id=\"categoryX\"` to `id=\"catX\"`, e.g. `categoryTitle` to the new, shorter `catTitle`\n3. Update count tags from `id=\"qty\"` to `id=\"count.blog.post\"`\n\nThe easiest way to do this might be to take the new default templates and re-customize it to fit your site.","type":"addons"},{"title":"Spam","permalink":"https://docs.grabaperch.com/addons/blog/spam/","id":"addons.blog.spam","excerpt":"Any form on the web is likely to receive some level of spam. The primary way to combat spam in blog comments is to use\n[Akismet](https://akismet.com/). Akismet is a web service that checks comments and determines if they are spam.","text":"Any form on the web is likely to receive some level of spam. The primary way to combat spam in blog comments is to use\n[Akismet](https://akismet.com/). Akismet is a web service that checks comments and determines if they are spam.\n\n## Using Akismet\n\nGetting up and running with Akismet is simple. First register with Akismet – it’s free for personal use, and inexpensive for businesses. You will be given an API key which you can enter on the Settings page, in the Blog section.\n\nIf you’re using the default blog templates, Perch will now check your comments for spam as they arrive.\n\n### Antispam template options\n\nIn order to pass your comments through to Akismet, Perch needs to know which of your fields contain which type of content. This is done with the `antispam` attribute on the\n[perch:input](/docs/form/template-tags/input/) tag.\n\n```php\n<perch:input type=\"url\" id=\"website\" antispam=\"url\">\n```\n\nOn the field containing your commenter’s name, add `antispam=\"name\"`\n\nOn the field containing your commenter’s email address, add\n`antispam=\"email\"`\n\nOn the field containing your commenter’s URL, add `antispam=\"url\"`\n\nAnd on any field that makes up the body of the message to be checked, add `antispam=\"body\"`.\n\nPerch will collect the data from these fields and pass it to Akismet for analysis.\n\n## Using a honeypot field\n\nAn alternative option is to use a honeypot field. Honeypot fields are included in a field but hidden from sight. Any regular user won’t see the field and won’t fill it out. An automated spambot will tend to complete all fields in a form and will therefore complete the honeypot field, too.\n\nIf the form is submitted with a value in the honeypot field, it is marked as spam.\n\nCreate a honeypot field by using a normal field, and set\n`antispam=\"honeypot\"` like so:\n\n```html\n<perch:input type=\"text\" id=\"banana\" antispam=\"honeypot\">\n```\n\nThe field can be of any type (although it won’t work if `type=\"hidden\"`) and can have any ID. It’s probably best not to call it anything obvious like `honeypot`!\n\nYou then need to make sure your users don’t fill it out. That usually means using CSS to hide the field in some way. Please consider all types of users – how will your honeypot field appear to screenreader users, for example? It might be a good idea to add a label telling the user to leave the field blank, and then hiding both the field and its label.\n\nPerch deliberately makes no effort to hide the honeypot field from view – it simply processes it differently on submission. You should choose a method to hide it that suits your site, audience and goals.\n\nIf you are finding that spam still gets through the honeypot method then you will need to use something more robust such as Akismet.","type":"addons"},{"title":"Webmentions","permalink":"https://docs.grabaperch.com/addons/blog/webmentions/","id":"addons.blog.webmentions","excerpt":"[Webmentions](https://webmention.net) are a way to notify another site that you've mentioned their content on your own site. Take an example:","text":"[Webmentions](https://webmention.net) are a way to notify another site that you've mentioned their content on your own site. Take an example:\n\n1. Sarah posts an article to her blog\n2. James reads this post and in response creates a post on his own site linking to Sarah's post\n3. James' blog software finds the link to Sarah's blog in the post and notifies Sarah's server of the link\n4. Sarah's blog software fetches James' post and adds a link to it along with the comments section under her post\n\nIn order for the process to work, both sides need to support webmentions. However, if one side doesn't there are no ill effects, the process will just quietly fail.\n\nThere are two sides to implementing webmentions - sending, where you can respond to a post on someone else's site, and receiving, where others can respond to you.\n\n## Sending webmentions\n\nIf sending is enabled, Blog will notify any sites you link to of your post when it goes live. As posts can go live on a schedule, this is done using [scheduled tasks](https://docs.grabaperch.com/perch/getting-started/installing/scheduled-tasks/).\n\nTo enable sending webmentions:\n\n1. Make sure your posts are marked up with microformats classes (see below)\n2. In Settings, check the \"Send webmentions\" box in the Blog section and save\n3. Make sure your scheduled tasks are being run frequently (probably at least once an hour, if not once a minute)\n4. Make sure your site is in production mode (`PERCH_PRODUCTION`). Webmentions are not sent in staging or dev environments\n5. Make sure your site is publicly accessible\n\nWhen a post goes live, Blog will find the links in your post and check each one to see if they have webmentions capability. If they do, it will notify them of your post.\n\n### Markup with microformats\n\nFor this to work well, you should use microformats to mark up your posts. Particularly [h-entry](http://microformats.org/wiki/h-entry) for the post and [h-card](http://microformats.org/wiki/h-card) for the author information.\n\n\n## Receiving webmentions\n\nWhen receiving is enabled, others will be able to mention one of your posts on their site and let you know about it. When a mention is successfully logged, it will appear in your comments moderation queue as a comment. You can then edit it or just publish.\n\nTo prevent a malicious actor overloading your server, mention notifications are processed in batches by the scheduled tasks.\n\nTo enable receiving webmentions:\n\n1. In Settings, check the \"Receive webmentions\" box in the Blog section and save\n2. Make sure your scheduled tasks are being run frequently\n3. Make sure your site is publicly accessible\n4. Add a call to `perch_blog_post_webmention_endpoint()` in the head of your single post template (see below)\n\n### Advertising your webmentions capabilities\n\nWhen a remove server checks your post to see if webmentions are enabled, it looks for either a special header, a link in the body, or a link tag in the `<head>` of the page. The last of these is by far the simplest.\n\nIn the `<head>` section of your template that displays a single post, add:\n\n```php\nperch_blog_post_webmention_endpoint('my-post-slug');\n```\n\nWhere `my-post-slug` is the slug for your post. In the example files, the slug is on the query string as `s` so that would make the code:\n\n```php\nperch_blog_post_webmention_endpoint(perch_get('s'));\n```\n\nThis advertises your webmentions _endpoint_ for the article, and Blog should start receiving notifications when they are sent.\n\n### Enabling manual pings\n\nIf someone writes a response to your post but doesn't have a webmentions-capable publishing system, you can provide them with a form to notify you manually of the URL. To do this, call:\n\n```php\nperch_blog_post_ping_form('my-post-slug');\n```\n\nere `my-post-slug` is the slug for your post. In the example files, the slug is on the query string as `s` so that would make the code:\n\n```php\nperch_blog_post_ping_form(perch_get('s'));\n```\n\n## Requirements\n\nIn order to parse the remote URLs for processing webmentions, you'll need the following PHP extensions installed and enabled on your server:\n\n- XML \n- mbstring\n- cURL\n\n## Troubleshooting\n\nWebmentions involve a few different moving parts. If things aren't working:\n\n1. Check your scheduled task list to see what the processes are reporting\n2. Check your error log for any errors relating to webmentions\n3. In the database, see what entries you have in `perch3_blog_webmention_queue`. If it's not clearing, do the IDs increase each time the scheduler runs?\n4. Post to the support forum with the above information and your diagnostic report and we'll see if we can help","type":"addons"},{"title":"Changelog","permalink":"https://docs.grabaperch.com/addons/blog/changelog/","id":"addons.blog.changelog","excerpt":"All notable changes to Perch Blog.\n [5.6.2] - 2023-05-25\n Fixed\n- Fixes for PHP 8.1 compatibility\n- Available only for subscriptions under <a href=\"https://account.perchcms.com/runway-addons\">https://account.perchcms.com/runway-addons</a>","text":"All notable changes to Perch Blog.\n## [5.6.2] - 2023-05-25\n### Fixed\n- Fixes for PHP 8.1 compatibility\n- Available only for subscriptions under <a href=\"https://account.perchcms.com/runway-addons\">https://account.perchcms.com/runway-addons</a>\n\n\n## [5.6]\n\nAdds support for webmentions\nFixes issue with items on meta & social tab not persisting\nFixes issue with categories\n\n## [5.5.1]\n\nFixes bugs found since Perch 3.0\n\n## [5.5]\n\nUpdates Blog for Perch and Runway 3.0\n\n## [5.0]\n\nAdds Facebook OG and Twitter card support and multiple blogs for Perch Runway \n\n## [4.6]\n\nAdds support for Blocks and Repeaters\n\n## [4.5.4]\n\nFixes bug with post category display\n\n## [4.5.3]\n\nAdds admin search handler for Perch Runway and fixes small bugs\n\n## [4.5.2]\n\nFixes WordPress import and minor indexing bugs\n\n## [4.5.1]\n\nFixes PHP 5.3 compatibility issue\n\n## [4.5]\n\nIntegrates Categories and makes all fields filterable\n\n## [4.1]\n\nAdds support for Perch 2.5 and fixes quote escaping issues\n\n## [4.0.3]\n\nFixes a number of very minor bugs\n\n## [4.0.2]\n\nFixes another bug with WordPress import\n\n## [4.0.1]\n\nFixes bug with tags and WordPress import\n\n## [4.0]\n\nAdds sections and more template control\n\n## [3.9]\n\nPaging improvements, date format fixes, comment count fixes\n\n## [3.8.2]\n\nAdds author post count, fixes bugs\n\n## [3.8.1]\n\nHoneypot bug fix\n\n## [3.8]\n\nAntispam honeypot, change authors, delete spam\n\n## [3.7.7]\n\nBug fixes\n\n## [3.7.6]\n\nSupport for pagination-var\n\n## [3.7.5]\n\nCategory editing fixes\n\n## [3.7.4]\n\nFiltering and sorting fixes\n\n## [3.7.3]\n\nFiltering fixes and options for all runtime functions\n\n## [3.7.2]\n\nFixes for updating older blogs\n\n## [3.7.1]\n\nFixes install bugs\n\n## [3.7]\n\nDynamic fields for Categories and Authors\n\n## [3.6.3]\n\nPosterous import\n\n## [3.6.2]\n\nWordPress import improvements\n\n## [3.6.1]\n\nMinor bug fixes\n\n## [3.6]\n\nDraft preview and comment notification\n\n## [3.5]\n\nAuthors, import and performance\n\n## [3.0.1]\n\nMinor bug fixes\n\n## [3.0]\n\nWith comments for Perch 2","type":"addons"},{"title":"Clean URLs in Perch","permalink":"https://docs.grabaperch.com/addons/blog/examples/clean-urls-perch/","id":"addons.blog.examples.clean-urls-perch","excerpt":"For Runway see the Runway configuration documentation under Routing.","text":"For Runway see the Runway configuration documentation under Routing.\n\nAs Perch runs on lots of different types of web server, the default examples don’t require any sort of URL rewriting to work. That’s fine, but if you do have URL rewriting available (such as mod_rewrite on Apache) it’s often desirable to clean up the URLs.\n\nThese instructions show you how to do that using mod\\_rewrite for Apache servers. SitePoint also has a great [mod_rewrite guide](http://www.sitepoint.com/guide-url-rewriting/) which may be useful to read if you’re new to URL rewriting.\n\n## Create an .htaccess file\n\nIf you don’t have one, create a file with the name `.htaccess` (staring with a dot, and no file extension) at the top level of your site. File names that begin with a dot are usually hidden, so you may need to enable your software’s setting to show hidden files.\n\nAdd the following to your file\n\n```php\n<IfModule mod_rewrite.c>  \n    RewriteEngine on  \n    # rules go here\n</IfModule>\n```\n\nNext, we going to add a series of rules to match incoming URLs and remap them to our real file paths. These will go at the point in the file I’ve marked `# rules go here`.\n\n## Rewriting post URLs\n\nIf you’re using our example pages, you post detail page will have a URL like this:\n\n```php\n/blog/post.php?s=2012-10-01-my-post-title\n```\n\nBut perhaps we’d rather have a URL like this:\n\n```php\n/blog/2012-10-01-my-post-title\n```\n\nTo do so, add the following rule to your file\n\n```php\nRewriteRule ^blog/([a-zA-Z0-9-/]+)$ /blog/post.php?s=$1 [L]\n```\n\nSave the file and your post should now be accessible from the new URL. You now need to update your site to make sure that the links point to this new URL.\n\nOn the Settings page in Perch, find “Blog post page path” in the Blog section. Set its value to:\n\n```php\n/blog/{postSlug}\n```\n\nIf using the Sections functionality, you might want to include the section slug\n\n```php\n/{sectionSlug}/{postSlug}\n```\n\nNow, wherever you use `<perch:blog id=\"postURL\">` in your templates, the new URL will be used.\n\n### Preview URLs\n\nOnce URLs are rewritten, draft post preview is achieved by adding `/preview` to the end of your URL, so remember to add a rule for that. You should rewrite it to add the query string argument `preview=all` to the URL.","type":"addons"},{"title":"Create AMP versions of your blog posts","permalink":"https://docs.grabaperch.com/addons/blog/examples/creating-amp-pages/","id":"addons.blog.examples.creating-amp-pages","excerpt":"AMP (Accelerated Mobile Pages) is a way to build versions of your pages optimized for speed. AMP pages are just another text format – like HTML or RSS. Perch is really great at editing any kind of text format, due to the fact we don’t spit out markup that you don’t ask for. That makes it a straightforward process for you to fully benefit from using AMP on your site. In this article I take a look.","text":"AMP (Accelerated Mobile Pages) is a way to build versions of your pages optimized for speed. AMP pages are just another text format – like HTML or RSS. Perch is really great at editing any kind of text format, due to the fact we don’t spit out markup that you don’t ask for. That makes it a straightforward process for you to fully benefit from using AMP on your site. In this article I take a look.\n\nI’m following the excellent [Getting Started Guide](https://www.ampproject.org/docs/get_started/create.html) for AMP. I’m going to create an AMP version of my blog posts, using Perch Blog.\n\n## Create a page\n\nYour blog will already have a page which acts as a container to pull in the blog post that you are currently displaying – if you used our default files for Blog that will be post.php. This page loads with the content for the current post. Create another page in the same location called amp.php – this will perform the same function but for AMP pages.\n\nIf you are using Perch Runway create this as a master page, then create a page at the same level as your post.php in the Perch control panel using this master page. When creating that page also create a route – similar to the one for your blog post.php – that references this AMP page.\n\nFor Perch just add the page to the same folder as your blog post page, and if you are rewriting URLs with an .htaccess file make sure that you add a rule for amp.php, in the same way you did for post.php. You should now be able to access that page in a browser.\n\nAs a test, access the page with one of your blog slugs on the querystring or as part of the URL. So if your blog post is at:\n\n```\nmysite.com/blog/my-nice-post\n```\n\nYou should be able to go to:\n\n```\nmysite.com/blog/amp/my-nice-post\n```\n\nand not get a 404 error. To check your routes or rewrite rules are working, you could try and read the value from the URL query string. For example if you (as in our example Blog files) rewrite to a query string that looks like:\n\n```\namp.php?s=my-nice-post\n```\n\nYou can check you can read that slug by adding to your new amp.php page:\n\n```php\n<?php echo perch_get('s'); ?>\n```\n\nYou should see the slug printed out to the page. (You can remove this once you’ve seen it working.)\n\nNow copy the boilerplate content from Create Your AMP Page into this page. We’ll get your Perch Blog content into this.\n\n## Tell Perch which article to load\n\nWe now need to do a similar job to that achieved by your post.php, we need to get the slug that identifies this post from the query string, and then get all of the post contents. However rather than use our default blog template, we’ll use a specific one with the AMP tags rather than HTML tags.\n\nTo pass in a different template we’ll use perch_blog_custom(). At the very top of your page, after the Perch runtime include (if you have one) add.\n\n```php\n<?php\n$post = perch_blog_custom(array(\n  'filter'        => 'postSlug',\n  'match'         => 'eq',\n  'value'         => perch_get('s'),\n  'skip-template' => true,\n  'return-html'   => true,\n));\n?>\n```\n\nI’m not immediately passing this into a Perch template, instead I am storing the contents in a variable called `$post`.\n\nIf you want to see what is in $post then enable debug in Perch or Runway and add the following line to your page:\n\n`<?php PerchUtil::debug($post); ?>`\n\nYou should then see the contents of this variable which should be an array of all of the information for the post referenced by this slug. Now we need to get this information into the AMP format.\n\n## The AMP header\n\nWe will start with the required information in the header. This is detailed in the Getting Started Guide and we can populate our AMP template with the data from our $post variable.\n\nInside the PHP tags, after the section we created above add the following.\n\n```php\n$domain = 'http://'.$_SERVER['HTTP_HOST'];\n$title  = $post[0]['postTitle'];\n$url    = $domain . $post[0]['postURL'];\n$date   = date('c', strtotime($post[0]['postDateTime']));\n$html   = $post['html'];\n```\n\nWhat I am doing here is writing the values from the array stored in $post to nice neat variables. You can then use these values to replace the placeholder content in the head of the AMP document. I’ve also created a variable called $html – we’ll come back to that later.\n\n```html\n<head>\n  <meta charset=\"utf-8\">\n  <title><?php echo PerchUtil::html($title); ?></title>\n  <link rel=\"canonical\" href=\"<?php echo PerchUtil::html($url, true); ?>\">\n  <meta name=\"viewport\" content=\"width=device-width,minimum-scale=1,initial-scale=1\">\n  <script type=\"application/ld+json\">\n      {\n        \"@context\": \"http://schema.org\",\n        \"@type\": \"NewsArticle\",\n        \"headline\": \"<?php echo PerchUtil::html($title, true); ?>\",\n        \"datePublished\": \"<?php echo PerchUtil::html($date, true); ?>\"\n      }\n  </script>\n  <style amp-boilerplate>body{-webkit-animation:-amp-start 8s steps(1,end) 0s 1 normal both;-moz-animation:-amp-start 8s steps(1,end) 0s 1 normal both;-ms-animation:-amp-start 8s steps(1,end) 0s 1 normal both;animation:-amp-start 8s steps(1,end) 0s 1 normal both}@-webkit-keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}@-moz-keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}@-ms-keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}@-o-keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}@keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}</style><noscript><style amp-boilerplate>body{-webkit-animation:none;-moz-animation:none;-ms-animation:none;animation:none}</style></noscript>\n  <script async src=\"https://cdn.ampproject.org/v0.js\"></script>\n</head>\n```\n\nThe final thing we need to do is to get the actual content of your post into an AMP template.\n\n## Create a template\n\nYour AMP template will need to contain all of the Perch template tags that you use to output a post – this might include Blocks, Repeaters or other elements. The easiest way to start is to take your Blog master template – post.html, save it as amp.html and start editing from there.\n\nYou may well want to simplify the markup as your AMP page can only use a limited subset of CSS and so markup you have added to enable styling of your page may not be relevant.\n\nKey things to check are that where you include images, video or iframes you change your HTML markup into AMP markup. There are also specific instructions for embedding third party content such as tweets.\n\nFor example, if you are including an image in your template instead of:\n\n```html\n<img src=\"<perch:blog id=\"image\" type=\"image\" width=\"320\" height=\"240\" crop label=\"Image\" order=\"4\">\" alt=\"<perch:blog id=\"postTitle\">\">\n```\n\nYou will need to use:\n\n```html\n<amp-img src=\"<perch:blog id=\"image\" type=\"image\" width=\"320\" height=\"240\" crop label=\"Image\" order=\"4\">\"\nalt=\"<perch:blog id=\"postTitle\">\" height=\"<perch:blog id=\"image\" type=\"image\" width=\"320\" height=\"240\" crop label=\"Image\" output=\"h\">\"\nwidth=\"<perch:blog id=\"image\" type=\"image\" width=\"320\" height=\"240\" crop label=\"Image\" output=\"w\">\">\n</amp-img>\n```\n\nNote that things need to have a size set in AMP so this includes your images. Perch has the sizes of the generated image so you can output the width and height, which you may not be doing in your regular HTML template. I have added these to the example above.\n\nIf you are using responsive images in Perch then check on the Getting Started site to find out how to change your markup in order that it will work for AMP. It really is just a case of modifying your templates. Perch gives you the ability to output various information about your images including the sizes.\n\n## Template the post\n\nGo back to the top of your page where we used perch_blog_custom() and add a final option to the array:\n\n```html\n<?php\n$post = perch_blog_custom(array(\n  'filter'        => 'postSlug',\n  'match'         => 'eq',\n  'value'         => perch_get('s'),\n  'skip-template' => true,\n  'return-html'   => true,\n  'template'      => 'blog/amp.html',\n));\n?>\n```\n\nAs the value of template pass in the template you just created. You can then simply output the value of html to your page between the `<body>` tags in the AMP document.\n\n`<?php echo $html; ?>`\n\nWe get this special rendered version of our post because we passed in return-html with a value of true when writing our post to a variable. This means we only need do one call to the database to get content as an array to play with plus our templated content to display.\n\n## View your page\n\nYou should now have an AMP version of your post and can work through the rest of the Getting Started Guide in terms of using CSS, and adding other features. When validating your page be sure to disable Perch debug as AMP won’t be so keen on that output.\n\nIf you have used media on your page you may find you need to make larger changes to your templates, however as long as you have used structured content in Perch it should be relatively straightforward to create AMP versions of any template and render using that.\n\nOnce you are ready to make your AMP pages live, don’t forget to add the link to the head of your regular blog post, so that devices know you have an AMP version.\n\n##Taking this further\n\nYour next step might be to create AMP versions of other content, if you are creating pages with regular Perch content then you would use perch_content_custom() to get and re-template the content, however the process is the same. If I were doing several different pages of content then I would probably create an AMP Perch Layout, and use layout variables to pass in the title, URL and so on in order to save repeating the same markup in each page.","type":"addons"},{"title":"Runway Configuration","permalink":"https://docs.grabaperch.com/addons/blog/runway/config/","id":"addons.blog.runway.config","excerpt":"The Blog add-on comes with a set of example pages to get Perch users up and running quickly with a blog. For Perch Runway sites, we imagine that most users will want to spend time designing and configuring their own Master Pages and templates, but the examples can still be used if desired.","text":"The Blog add-on comes with a set of example pages to get Perch users up and running quickly with a blog. For Perch Runway sites, we imagine that most users will want to spend time designing and configuring their own Master Pages and templates, but the examples can still be used if desired.\n\nThe following is a guide for getting those example pages and templates up and running within a Perch Runway site.\n\n## Copy the example pages\n\nIncluded in the Blog app zip file is a folder called `blog` containing example pages.\n\n1. Copy this folder into your `perch/templates/pages` folder\n2. Within each file, delete the Perch runtime include on the first line\n\nThese will now act as master pages to base your blog pages on.\n\n## Create the blog pages\n\nThis presumes that you're setting up a blog at the path `/blog` within your site. This is, of course, just an example. You can structure your site however you wish. This is just a guide.\n\nBelow are the pages you might wish to create.\n\n|Page|Path|Master page|Hide from nav|\n|-|-|-|-|\n|Blog|`/blog`|Blog / Index|No|\n|Post|`/blog/post`|Blog / Post|Yes|\n|Archive|`/blog/archive`|Blog / Archive|Yes|\n|RSS|`/blog/rss`|Blog / Rss|Yes|\n\n\n## Add routes for the pages\n\nNext, you want to set up routes for those pages so that they respond to the URLs you wish to use.\n\n### Post page routes\n\nThis page needs to display whenever a single post is viewed. Below is a [custom token](/runway/routing/custom-tokens/) you can use to match the default slug format:\n\n    'blogslug' => '[1-2][0-9]{3}\\-[0-9]{2}\\-[0-3][0-9]-[a-z0-9\\-]+',\n\nWith that in place, the Post page can then use this URL pattern:\n\n|Purpose|Pattern|Example URL|\n|-|-|-|\n|Single post page|`blog/[blogslug:s]`|`/blog/2014-12-01-christmas-is-near`|\n|Single draft preview|`blog/[blogslug:s]/[preview:preview]`|`/blog/2014-12-01-christmas-is-near/preview`|\n\n\n\n### Archive page routes\n\nThe archive page shows listings by year, month, category, tag and so on. You'll need to set up a few routes:\n\n|Purpose|Pattern|Example URL|\n|-|-|-|\n|Posts by year|`blog/[year:year]`|`/blog/2012`|\n|Posts by month|`blog/[year:year]/[i:month]`|`/blog/2012/10`|\n|Posts by category|`blog/category/[slug:cat]`|`/blog/category/cheese`|\n|Posts by tag|`blog/tag/[slug:tag]`|`/blog/tag/industrialism`|\n|Posts by author|`blog/author/[slug:author]`|`/blog/author/sid-james`|\n\n\n## Update links in the templates\n\nBy this point you should be almost set to go. The one remaining task is to update any link paths in the templates to use your new URLs.\n\nIf you've not done so already, copy the `perch_blog/templates/blog` folder to `perch/templates/blog` so that you've got a set of the default templates to edit.\n\nIn turn, edit each template and correct any link paths to use your new URLs. For example, `category.html` includes a link to the category:\n\n    href=\"archive.php?cat=<perch:category id=\"catSlug\" type=\"slug\" for=\"catTitle\" order=\"2\">\"\n\nThis would become:\n\n    href=\"/blog/category/<perch:category id=\"catSlug\" type=\"slug\" for=\"catTitle\" order=\"2\">\"\n\nA good way to find any links is to search for `archive.php`, as many of the links point there.","type":"addons"},{"title":"Multiple Blogs","permalink":"https://docs.grabaperch.com/addons/blog/runway/multiple-blogs/","id":"addons.blog.runway.multiple-blogs","excerpt":"Perch Runway users have the option of setting up multiple blogs. This is done from the Blogs navigation option within the Blog app.","text":"Perch Runway users have the option of setting up multiple blogs. This is done from the Blogs navigation option within the Blog app.\n\nA blog can have its own dedicated post template, category set, and additional fields can be added in the `blog/blog.html` template.\n\n## Displaying content from a blog\n\nBy default, the page functions will return posts and other content from across all your blogs. To restrict the output to just one blog, you can do so by providing the blog's slug as the `blog` option in any options array.\n\n```php\n<?php\n\tperch_blog_custom([\n\t    'count'      => 10,\n\t    'sort'       => 'postDateTime',\n\t    'sort-order' => 'DESC',\n\t    'blog'       => 'news',\n\t]);\n?>\n```","type":"addons"},{"title":"Changelog","permalink":"https://docs.grabaperch.com/addons/events/changelog/","id":"addons.events.changelog","excerpt":"All notable changes to Perch Events.\n [1.9.8]\nFixind deprecations for PHP 8.1\n- Available only for subscriptions under <a href=\"https://account.perchcms.com/runway-addons\">https://account.perchcms.com/runway-addons</a>\n \n [1.9.7]\nFixind deprecations for PHP 8\n- Available only for subscriptions under <a href=\"https://account.perchcms.com/runway-addons\">https://account.perchcms.com/runway-addons</a>","text":"All notable changes to Perch Events.\n## [1.9.8]\nFixind deprecations for PHP 8.1\n- Available only for subscriptions under <a href=\"https://account.perchcms.com/runway-addons\">https://account.perchcms.com/runway-addons</a>\n \n## [1.9.7]\nFixind deprecations for PHP 8\n- Available only for subscriptions under <a href=\"https://account.perchcms.com/runway-addons\">https://account.perchcms.com/runway-addons</a>\n\n## [1.9.6]\nAdd time slots and booking feature\n- Available only for subscriptions under <a href=\"https://account.perchcms.com/runway-addons\">https://account.perchcms.com/runway-addons</a>\n\n\n## [1.9.4] [1.9.5]\nFix for PHP 8 compatibility\n\n## [1.9.3]\n\nFix for bug with repeaters\n\n## [1.9.2]\n\nFix for editor plugins not loading\n\n## [1.9.1]\n\nAdds compatibility for Perch 2.8\n\n## [1.9]\n\nAdds compatibility for Perch 2.5\n\n## [1.8]\n\nAdds category listings\n\n## [1.7.1]\n\nBug fixes\n\n## [1.7]\n\nUpdated examples and bug fixes\n\n## [1.6.1]\n\nFixes a custom editor bug\n\n## [1.6]\n\nUpdated for Perch 2","type":"addons"},{"title":"Customers","permalink":"https://docs.grabaperch.com/addons/events/customers/","id":"addons.events.customers","excerpt":"Bookings keeps a record of each customer. Each customer has an associated Member account, which manages their account to log in to your site. When a new customer is created, the Member account is silently created in the background and tied to the customer.","text":"Bookings keeps a record of each customer. Each customer has an associated Member account, which manages their account to log in to your site. When a new customer is created, the Member account is silently created in the background and tied to the customer.\n\n## Customer examples\n\n- [Create a customer account](/addons/events/examples/create-account)","type":"addons"},{"title":"Bookings","permalink":"https://docs.grabaperch.com/addons/events/bookings/","id":"addons.events.bookings","excerpt":"This section of the documentation deals with the Page Functions that relate to listing and displaying Bookings made through your events.","text":"This section of the documentation deals with the Page Functions that relate to listing and displaying Bookings made through your events.\n\n## After an booking is placed\n\nOnce a successful booking is placed, we store the information about this Booking. This will appear in the Perch Control Panel under Bookings.\n\nYou can also display information about the Booking a Customer has made on your site. This enables the creation of a list of \"My Bookings\" in a Customer Account.","type":"addons"},{"title":"Examples","permalink":"https://docs.grabaperch.com/addons/events/examples/","id":"addons.events.examples","excerpt":"Some worked examples and tutorials for achieving various things with the Events App. These range from the simple to more complete tutorials.","text":"Some worked examples and tutorials for achieving various things with the Events App. These range from the simple to more complete tutorials.\n\n\n## Events\n\n- [Display Events in Calendar](/addons/events/examples/display-calendar)\n- [Display Events in Listing](/addons/events/examples/display-listing) \nIf you set timeslots will be showing as booking buttons\n\n## Booking\n\n- [Create a customer account](/addons/events/examples/create-account)","type":"addons"},{"title":"Installation","permalink":"https://docs.grabaperch.com/addons/events/installation/","id":"addons.events.installation","excerpt":"The Events with Booking Slots app requires a little more configuration and set-up than some of our simpler add-ons.  Events app uses Members to handle user accounts. All four apps are included in your download.","text":"The Events with Booking Slots app requires a little more configuration and set-up than some of our simpler add-ons.  Events app uses Members to handle user accounts. All four apps are included in your download.\n\n## Installation and Initial Setup\n\nFollow these steps to get started with your booking events slots. The order is important, so please take a moment to follow the steps with extra care.\n\n### Installation\n\n**Make sure  Perch Runway is up to date**. Events with Booking slots is a very new App and likely to receive rapid updates which will also rely on an updated Perch Core.\n\n#### Step 1. Add the Events Files {#files}\n\nUnzip the add-on and copy items in `addons/apps` to your `perch/addons/apps` folder. If you already have Members installed, the version you have downloaded is the latest and you should update to this if running an older version.\n\n#### Step 2. Edit your `apps.php` config file {#appsconfig}\n\nDownload the latest version of the Events App checking that the minimum version of Perch is the same or less than the version of Perch that you are running.\n\nUnzip the download where you will find two folders.\n\n-   events – which contains example pages\n-   perch_events – which is the actual app\n\nCopy the perch_events folder into perch/addons/apps/\n\nAdd `perch_events` [to your apps.php file](/perch/getting-started/installing/apps).\n\nEdit your `perch/config/apps.php` file to include an entry for `perch_members` and `perch_events`. The entry for `perch_members` should be *before* the entry for `perch_events`. For example:\n\n```php\n<?php\n    $apps_list = array(\n        'content',\n        'categories',\n        'perch_blog',\n        'perch_members',\n        'perch_events',\n    );\n?>\n```\n\nWhen you next log into the Perch admin the Events install script will run behind the scenes to create the necessary tables. A new events navigation item will appear in the administration menu.","type":"addons"},{"title":"Timeslots","permalink":"https://docs.grabaperch.com/addons/events/timeslots/","id":"addons.events.timeslots","excerpt":"Timeslots are managed in the Perch Control Panel from the Events App. Each timeslot has a  slot duration, start time, end time, list of week days.","text":"## Adding timeslots\n\nTimeslots are managed in the Perch Control Panel from the Events App. Each timeslot has a  slot duration, start time, end time, list of week days.\n\nOnce you added the time slots will be listed to Events Control page.\n\nFor each Event you apply one time slot.","type":"addons"},{"title":"Updating","permalink":"https://docs.grabaperch.com/addons/events/updating/","id":"addons.events.updating","excerpt":"Updating the Events App is usually a case of replacing the `perch_events` folder in `perch/addons/apps`. See the [Changelog](/addons/events/changelog) for details of what has changed between the version you are updating from and the latest.","text":"Updating the Events App is usually a case of replacing the `perch_events` folder in `perch/addons/apps`. See the [Changelog](/addons/events/changelog) for details of what has changed between the version you are updating from and the latest.","type":"addons"},{"title":"Create a customer account","permalink":"https://docs.grabaperch.com/addons/events/examples/create-account/","id":"addons.events.examples.create-account","excerpt":"To book, you need to know the customer's name . An example flow might look like the following. If a member is not logged in, we show both","text":"To book, you need to know the customer's name . An example flow might look like the following. If a member is not logged in, we show both\n\n1. a login form for returning customers, and\n2. a registration form for new customers\n\n```php\n<?php\n   if (!perch_member_logged_in()) {\n              // Returning customer login form\n              perch_event_login_form();\n  \n              // New customer sign up form\n              perch_event_registration_form();\n    }\n?>\n```\n\nIf you wanted to skip this step for logged in customers, you could redirect them to the next step at the top of your page:\n\n```php\n<?php\n\n if (perch_member_logged_in()) {\n    perch_events_calendar();\n }\n?>\n```\n\nOnce a customer is signed in, you can show them the events calendar/listing for booking.","type":"addons"},{"title":"Display Events with Calendar view","permalink":"https://docs.grabaperch.com/addons/events/examples/display-calendar/","id":"addons.events.examples.display-calendar","excerpt":"To display the events with a calendar view (on your `/events` page perhaps), use:","text":"To display the events with a calendar view (on your `/events` page perhaps), use:\n\n```php\nperch_events_calendar();\n```\n\nThis displays a full calendar layout. `/functions/events/perch-events-calendar/`\nYou can show specific category evets with:\n\n```php\nperch_events_calendar(array(\n\t\t\t    'past-events'=>true,\n\t\t\t    'category'=>array('one', 'two')\n));\n```\nIf the Event has set with time slots will also be displayed as booking buttons.","type":"addons"},{"title":"Display Events with Listing view","permalink":"https://docs.grabaperch.com/addons/events/examples/display-listing/","id":"addons.events.examples.display-listing","excerpt":"To display the events with a calendar view (on your `/events` page perhaps), use:","text":"To display the events with a calendar view (on your `/events` page perhaps), use:\n\n```php\nperch_events_listing();\n```\n\nThis displays a full listing layout. `/functions/events/perch-events-calendar/`\nYou can show specific category evets with:\n\n```php\nperch_events_listing(array(\n\t\t\t    'past-events'=>true,\n\t\t\t    'category'=>array('one', 'two')\n\t\t\t));\n```","type":"addons"},{"title":"Changelog","permalink":"https://docs.grabaperch.com/addons/comments/changelog/","id":"addons.comments.changelog","excerpt":"All notable changes to Perch Comments.","text":"All notable changes to Perch Comments.\n\n## [1.2]\n\nAdds \"Save & Moderate next\" option and scheduled spam deletion\n\n## [1.1.1]\n\nAdds Perch 2.8 compatibility\n\n## [1.1]\n\nFixes honeypot bug and adds support for Perch 2.5\n\n## [1.0.1]\n\nFixes for checkbox filtering\n\n## [1.0]\n\nInitial release","type":"addons"},{"title":"Updating","permalink":"https://docs.grabaperch.com/addons/comments/updating/","id":"addons.comments.updating","excerpt":"Updating the Comments App is usually a case of replacing the `perch_comments` folder in `perch/addons/apps`. See the [Changelog](/addons/comments/changelog) for details of what has changed between the version you are updating from and the latest.","text":"Updating the Comments App is usually a case of replacing the `perch_comments` folder in `perch/addons/apps`. See the [Changelog](/addons/comments/changelog) for details of what has changed between the version you are updating from and the latest.","type":"addons"},{"title":"Examples","permalink":"https://docs.grabaperch.com/addons/comments/examples/","id":"addons.comments.examples","excerpt":"Some worked examples and tutorials for achieving various things with the Comments App.","text":"Some worked examples and tutorials for achieving various things with the Comments App.","type":"addons"},{"title":"Installation","permalink":"https://docs.grabaperch.com/addons/comments/installation/","id":"addons.comments.installation","excerpt":"Download the latest version of the Events App checking that the minimum version of Perch is the same or less than the version of Perch that you are running.","text":"Download the latest version of the Events App checking that the minimum version of Perch is the same or less than the version of Perch that you are running.\n\nUnzip the download where you will find two folders.\n\n-   comments – which contains example pages\n-   perch_comments – which is the actual app\n\nCopy the perch_comments folder into `perch/addons/apps/`\n\nAdd `perch_comments` [to your apps.php file](/perch/getting-started/installing/apps).\n\nWhen you next log into the Perch admin the Comments install script will run behind the scenes to create the necessary tables. A new events navigation item will appear in the administration menu.","type":"addons"},{"title":"Identifying content","permalink":"https://docs.grabaperch.com/addons/comments/examples/identifying-content/","id":"addons.comments.examples.identifying-content","excerpt":"To add comments to an item, you need to be able to uniquely identify the thing the comments are about.","text":"To add comments to an item, you need to be able to uniquely identify the thing the comments are about.\n\nThat identifier might be with an existing ID for the item (like a product ID for a product, or an article ID for an article), or something you make up. The item ID is then used whenever you need to do anything with comments for that item, be that displaying comments, the comment form or getting the comment count.\n\nExisting database IDs are perfect for this – but as identifiers need to be unique within your site, we’d recommend prefixing a database ID with something to identify the sort of item it is. For example, a product might have a database ID of `123`, but for comments you should use `product123` to make it distinct from `post123` and `photo123`.\n\n```php\n<?php\n    perch_comments('product123');\n    perch_comments_form('product123', 'Elasticated garden yoga pants');\n?>\n```","type":"addons"},{"title":"Changelog","permalink":"https://docs.grabaperch.com/addons/forms/changelog/","id":"addons.forms.changelog","excerpt":"All notable changes to Perch Forms.","text":"All notable changes to Perch Forms.\n\n## [1.13]\nNew function for retrieve form responses based on specific field value\n\n## [1.8.3]\n\nFixes bug with var substitution and template selection\n\n## [1.8.2]\n\nFixes bug loading template IDs\n\n## [1.8.1]\n\nMinor bug fixes\n\n## [1.8]\n\nAdds templatable emails, reply-to header, autoresponder and logs the page\n\n## [1.7]\n\nAdds redirect on success option\n\n## [1.6]\n\nAdds honeypot field\n\n## [1.5.1]\n\nPrivilege fixes\n\n## [1.5]\n\nUpdated for Perch 2","type":"addons"},{"title":"Examples","permalink":"https://docs.grabaperch.com/addons/forms/examples/","id":"addons.forms.examples","excerpt":"Some worked examples and tutorials for achieving various things with the Forms App.","text":"Some worked examples and tutorials for achieving various things with the Forms App.","type":"addons"},{"title":"Installation","permalink":"https://docs.grabaperch.com/addons/forms/installation/","id":"addons.forms.installation","excerpt":"Download the latest version of the Forms App checking that the minimum version of Perch is the same or less than the version of Perch that you are running.","text":"Download the latest version of the Forms App checking that the minimum version of Perch is the same or less than the version of Perch that you are running.\n\nUnzip the download and copy the perch_forms folder into `perch/addons/apps/`\n\nAdd `perch_forms` [to your apps.php file](/perch/getting-started/installing/apps).\n\nWhen you next log into the Perch admin the Forms install script will run behind the scenes to create the necessary tables. A new forms navigation item will appear in the administration menu.\n\n## Configuring a Form\n\nThe forms app can manage multiple forms. To get started you need to create and successfully submit a form. You will then be able to configure that form instance in the Control Panel by clicking on the Form in the list and selecting **Form Options**.\n\n### Form Settings\n\nA name for this form can be added here.\n\n### Storing Responses\n\nIf you want to store the responses to this form in Perch, which will\nenable you to download them as a csv, check the box. If your form has\nthe ability to upload files (for example a job enquiry form where users\ncan upload a CV) set the path for uploads here. This path should be\noutside of your site root, so above your public\\_html or www folder.\n\nWhen storing data please remember this data is not encrypted. Please do\nnot store data such as credit card information or any sensitive data.\nThis would be a breach of your card processor agreement.\n\n### Sending email\n\nPerch can send the form responses including any attachments as an email. Check this box in order to send an email when the form is completed.\n\n|Option|Value|\n|-|-|\n|Email Template|Pick a template from those you have created or select Plain text only|\n|Email addresses|A comma separated string of addresses to send the response to|\n|Email subject line|The subject of the email|\n|Send from|A name the email will be from|\n|Send from address|A valid email address that you can send from|\n|Email address field|Select a field from the form that is a required field and validates as an email address|\n|Email introduction text|Any text you would like to display before the information completed in the form|\n\n### Autoresponse\n\nIf you check this box Perch will send an email to the person who completed the form as long as you have selected an *Email address field* in the *Sending email* Settings. The email can be plain text or use a template in the same way as the email to the site owner.\n\n### Spam prevention\n\nWe would suggest using Akismet for spam prevention. You will need an Akismet account if you wish to do this, you can then enter your API Key here.\n\n### Redirection\n\nThe default behaviour of forms is to remain on the same page and show your thankyou message. If you would prefer the user be sent to a separate thankyou page, enter the URL here.","type":"addons"},{"title":"Updating","permalink":"https://docs.grabaperch.com/addons/forms/updating/","id":"addons.forms.updating","excerpt":"Updating the Forms App is usually a case of replacing the `perch_forms` folder in `perch/addons/apps`. See the [Changelog](/addons/forms/changelog) for details of what has changed between the version you are updating from and the latest.","text":"Updating the Forms App is usually a case of replacing the `perch_forms` folder in `perch/addons/apps`. See the [Changelog](/addons/forms/changelog) for details of what has changed between the version you are updating from and the latest.","type":"addons"},{"title":"Example Form Template","permalink":"https://docs.grabaperch.com/addons/forms/examples/form-templates/","id":"addons.forms.examples.form-templates","excerpt":"The following is a basic example of a contact form with fields for name, email address and a message.","text":"The following is a basic example of a contact form with fields for name, email address and a message.\n\nIt can be used as a regular content template, with fields for both an introduction and a success message. It submits to the Forms app.\n\n```html\n<perch:form id=\"contact\" method=\"post\" app=\"perch_forms\">\n\n    <perch:content id=\"intro\" type=\"textarea\" label=\"Intro\" textile editor=\"markitup\" size=\"m\">\n\n    <div>\n        <perch:label for=\"name\">Name</perch:label>\n        <perch:input type=\"text\" id=\"name\" required label=\"Name\">\n        <perch:error for=\"name\" type=\"required\">Please add your name</perch:error>\n    </div>\n\n    <div>\n        <perch:label for=\"email\">Email</perch:label>\n        <perch:input type=\"email\" id=\"email\" required label=\"Email\" placeholder=\"you@company.com\">\n        <perch:error for=\"email\" type=\"required\">Please add your email address</perch:error>\n        <perch:error for=\"email\" type=\"format\">Please check your email address</perch:error>\n    </div>\n\n    <div>\n        <perch:label for=\"message\">Message</perch:label>\n        <perch:input type=\"textarea\" id=\"message\" required label=\"Message\">\n        <perch:error for=\"message\" type=\"required\">Please add a message</perch:error>\n    </div>\n\n    <div>\n        <perch:input type=\"submit\" id=\"submit\" value=\"Send\">\n    </div>\n\n    <perch:success>\n        <perch:content id=\"success\" type=\"textarea\" label=\"Thank you message\" textile editor=\"markitup\">\n    </perch:success>\n</perch:form>\n```","type":"addons"},{"title":"Example Email Template","permalink":"https://docs.grabaperch.com/addons/forms/examples/email-templates/","id":"addons.forms.examples.email-templates","excerpt":"The Forms app has the option to send templated HTML emails. If using this option, you need to create a template that outputs the fields you are collecting.","text":"The Forms app has the option to send templated HTML emails. If using this option, you need to create a template that outputs the fields you are collecting.\n\nForm email templates live in the folder `perch/templates/forms/emails` and should have `.html` file extensions.\n\n## Creating a template\n\nThe template should be a complete HTML page containing Perch template tags wherever you need to output content. A very barebones example would be as follows.\n\n```html\n<html>\n<head>\n\t<title><perch:email id=\"email_subject\"></title>\n</head>\n<body>\n  <h1>A message from your website</h1>\n  <p><perch:email id=\"email_message\" encode=\"false\"></p>\n  <table>\n    <tr>\n      <th>Name</th>\n      <td><perch:email id=\"name\"></td>\n\t</tr>\n    <tr>\n      <th>Email</th>\n      <td><perch:email id=\"email\"></td>\n\t</tr>\n    <tr>\n      <th>Message</th>\n      <td><perch:email id=\"message\" encode=\"false\"></td>\n\t</tr>\n  </table>\n</body>\n</html>\n```\n\nUse `<perch:email>` tags to output your content, with an ID to match the ID in your form template.\n\nTwo special values are defined:\n\n|Name|Value|\n|-|-|\n|email_subject|The email subject line. |\n|email_message|The introduction message defined in the form options.|","type":"addons"},{"title":"Troubleshooting","permalink":"https://docs.grabaperch.com/addons/forms/examples/troubleshooting/","id":"addons.forms.examples.troubleshooting","excerpt":"When dealing with forms there are various places where problems can arise. A logical approach to troubleshooting will help you work through the likely causes.","text":"When dealing with forms there are various places where problems can arise. A logical approach to troubleshooting will help you work through the likely causes.\n\n## My form doesn't display in admin\n\nFirst, check that you have correctly added the app to your `config/apps.php` file as described in the installation documentation.\n\nIf your form does not appear in admin make sure that you have successfully submitted it and **seen the success message**.\n\nA common reason for a form not appearing is that you have a required field without an error message so your form does not submit successfully.\n\n### Create a reduced example\n\nA complicated form can very easily have a syntax error, causing it not to submit properly. If you cannot get your form to show up in admin reduced it right down to a single text input field and submit that. That will help you isolate whether the issue is an installation problem with the Forms App or an issue with your template.\n\n## Emails are not being sent\n\nWith any mail problem your webhost should be your first contact after following these steps, there is a not a lot we can do in Perch Support to help. If you don't understand what you are advised my your host then do post to the forum, but for us to be able to help you need to get past the point of this being a mystery!\n\nThe following troubleshooting steps should be followed:\n\nFirst, confirm that email can be sent from the email test under Settings. If this does not work then Perch cannot send email **at all**. Get your email working before moving on to troubleshoot your form.\n\nIf email is generally working:\n\n- Ensure you have set a Send from address\n- If you have selected a value for \"Email address field\" in the Form Options, make sure this is a field that will validate as an email address.\n- Configure your site to send email via Mailtrap and see if mail is being received. If the Mail shows up in Mailtrap it demonstrates the site is sending email and the issue is after the email is sent.\n- If emails are being sent and not received then either the email is being caught as spam OR there is a routing problem meaning that mail sent by the server is no leaving the server.\n- If you have access to your server email logs check to see if there are any errors. Routing issues may well show up there.\n\nSomething we have seen on certain cPanel installs is that mail sent **to the same domain** as the site is hosted on gets delivered internally rather than to an external mailserver that has been configured using an MX record. For example your site is at `http://example.com` and the form email address is `client@example.com` the server routes it to some internal mailbox. You can test this by using a different email address or setting up Mailtrap and seeing the delivery works.\n\nIf this is happening contact your host and explain the issue and that you think mail may be routed internally.","type":"addons"},{"title":"Example Form with Recaptcha Template","permalink":"https://docs.grabaperch.com/addons/forms/examples/form-withRecaptcha-templates/","id":"addons.forms.examples.form-withRecaptcha-templates","excerpt":"The recaptcha field requires to have Perch version 4.5 and above.","text":"The recaptcha field requires to have Perch version 4.5 and above.\n\nThe following is a basic example of a contact form with fields for name, email address and a message and a captcha formula.\n\nIt can be used as a regular content template, with fields for both an introduction and a success message. It submits to the Forms app.\n\nDue to the way the Google reCAPTCHA works, there are a number of configuration steps required before you will be able to fetch THE RECAPTCHA formula. These steps should only have to be followed once per site.\n\n1. Go to [reCAPTCHA Admin console](https://www.google.com/recaptcha/admin/create)\n2. Choose reCAPTCHA v2 type\n3. Fill up your project details\n4. Click _Submit_\n5. Generates a _Secret_ key and a  _Site_ key \n8. Copy the two keys - this is what you're after\n9. In your `config/config.php` add the following, adding your nice new SITE key and SECRET key\n\n    `define('PERCH_reCAPTCHA_SITE_KEY', 'your SITE key');\n    define('PERCH_reCAPTCHA_SECRET_KEY', 'your SECRET key');\n    `\n```html\n<perch:form id=\"contact\" method=\"post\" app=\"perch_forms\">\n\n    <perch:content id=\"intro\" type=\"textarea\" label=\"Intro\" textile editor=\"markitup\" size=\"m\">\n\n    <div>\n        <perch:label for=\"name\">Name</perch:label>\n        <perch:input type=\"text\" id=\"name\" required label=\"Name\">\n        <perch:error for=\"name\" type=\"required\">Please add your name</perch:error>\n    </div>\n\n    <div>\n        <perch:label for=\"email\">Email</perch:label>\n        <perch:input type=\"email\" id=\"email\" required label=\"Email\" placeholder=\"you@company.com\">\n        <perch:error for=\"email\" type=\"required\">Please add your email address</perch:error>\n        <perch:error for=\"email\" type=\"format\">Please check your email address</perch:error>\n    </div>\n\n    <div>\n        <perch:label for=\"message\">Message</perch:label>\n        <perch:input type=\"textarea\" id=\"message\" required label=\"Message\">\n        <perch:error for=\"message\" type=\"required\">Please add a message</perch:error>\n    </div>\n\n    <div>\n        <perch:input type=\"submit\" id=\"submit\" value=\"Send\">\n\t\t<perch:input type=\"reCAPTCHA\" id=\"reCAPTCHA\"  ></perch:input>\n\t\t<perch:error class=\"submit-error\" for=\"submit\" type=\"helper\" >Check re-CAPTCHA</perch:error>\n\n    </div>\n\n    <perch:success>\n        <perch:content id=\"success\" type=\"textarea\" label=\"Thank you message\" textile editor=\"markitup\">\n    </perch:success>\n</perch:form>\n```","type":"addons"},{"title":"Changelog","permalink":"https://docs.grabaperch.com/addons/mailchimp/changelog/","id":"addons.mailchimp.changelog","excerpt":"All notable changes to Perch MailChimp.","text":"All notable changes to Perch MailChimp.\n\n## [3.0.1]\n\nFixes bug with merge_vars being required\n\n## [3.0]\n\nReimplemented to use the MailChimp v3 API\n\n## [2.0.2]\n\nFixes SSL support bug\n\n## [2.0.1]\n\nFixes webhook bug\n\n## [2.0]\n\nFrom dashboard widget to full app\n\n## [1.0.1]\n\nFixes show/hide privilege\n\n## [1.0]\n\nInitial release","type":"addons"},{"title":"Examples","permalink":"https://docs.grabaperch.com/addons/mailchimp/examples/","id":"addons.mailchimp.examples","excerpt":"Some worked examples and tutorials for achieving various things with the Mailchimp App.","text":"Some worked examples and tutorials for achieving various things with the Mailchimp App.","type":"addons"},{"title":"Installation","permalink":"https://docs.grabaperch.com/addons/mailchimp/installation/","id":"addons.mailchimp.installation","excerpt":"Download the latest version of the MailChimp app checking that the minimum version of Perch is the same or less than the version of Perch that you are running.","text":"Download the latest version of the MailChimp app checking that the minimum version of Perch is the same or less than the version of Perch that you are running.\n\nUnzip the download where you will find two folders.\n\n-   `addons/apps/perch_mailchimp` – the actual app\n-   `mailchimp` - containing a few example pages\n\nCopy the `perch_mailchimp` folder into `perch/addons/apps/` in your own site/\n\nAdd `perch_mailchimp` [to your `config/apps.php` file](/perch/getting-started/installing/apps).\n\nLog into the Perch control panel and visit the App by selecting it from your Apps menu. This will trigger an install of the app.\n\n## Set up your list\n\nIn Perch go to the Settings Page. You will see a new MailChimp section which asks for your MailChimp API Key. You need to get these from MailChimp.\n\nLog into your MailChimp account.\n\nYour API Key can be found under `Account > Extras > API Keys`. If you have already created a key copy it from here, or create a key and then copy it. Paste that into the API Key box on the Perch Settings page, and save the form.\n\n## Initial Import\n\nYou can now import your list data for the first time.\n\nGo back to the MailChimp app, which will now start to pull your lists down from MailChimp. If your list is large or you have a lot of Campaigns then this will take a while.\n\nTo avoid swamping both your server and the MailChimp API servers (and making the monkey cross), data is pulled down in batches. For lists themselves, it's most likely that those will all be retrieved in one go, but subscribers and campaigns might take longer. If you visit the Subscribers section, the first batch will be downloaded. If you refresh the page, or click the Next pagination button, the next batch is downloaded, and so on until all the data is available.\n\nIf you have a lot of data, you probably don't want to sit there clicking Next for hours, so this can be automated by making sure [scheduled tasks](/docs/scheduled-tasks/) are configured. The task scheduler will keep downloading every minute until all the data has been retrieved.\n\nOnce the import has finished you should be able to view subscribers and campaigns from within Perch.\n\n## Set up webhooks\n\n**This action will only work on a website that is live on the internet**\n\nOnce you install the app on a live site and have imported data you should configure webhooks, by selecting Webhooks from the toolbar and then clicking Sync.\n\nIf you run this on a local site MailChimp will not be able to validate the URL and the action will fail.\n\n## Important!\n\nWhen making your site live you need to run the import and set up of webhooks again, this will ensure your data matches the list on MailChimp so the webhooks can then do their job of keeping it up to date. In that sense, it's not really worth downloading all the data into your dev copy - just grab enough to see it working and then leave that job for live.","type":"addons"},{"title":"Updating","permalink":"https://docs.grabaperch.com/addons/mailchimp/updating/","id":"addons.mailchimp.updating","excerpt":"Updating the Mailchimp App is usually a case of replacing the `perch_mailchimp` folder in `perch/addons/apps`. See the [Changelog](/addons/mailchimp/changelog) for details of what has changed between the version you are updating from and the latest.","text":"Updating the Mailchimp App is usually a case of replacing the `perch_mailchimp` folder in `perch/addons/apps`. See the [Changelog](/addons/mailchimp/changelog) for details of what has changed between the version you are updating from and the latest.\n\nIf you are updating from a version of the App older than **version 3.0** read the below important information.\n\nThe new version has a different database layout to work with the new MailChimp API. You should remove the old app and the old tables from your database and then install this new version fresh. You won't lose any data as the App syncs up with Mailchimp.","type":"addons"},{"title":"Subscription form","permalink":"https://docs.grabaperch.com/addons/mailchimp/examples/subscription-form/","id":"addons.mailchimp.examples.subscription-form","excerpt":"One you have connected the app with your lists, you may want to add a form to your site to enable site visitors to subscribe. To do this, you need to create a form template.","text":"One you have connected the app with your lists, you may want to add a form to your site to enable site visitors to subscribe. To do this, you need to create a form template.\n\nIf it doesn't exist, create the template `templates/mailchimp/forms/subscribe.html` with something like the following:\n\n```html\n<perch:form id=\"subscribe\" app=\"perch_mailchimp\" double-optin=\"true\">\n\t<perch:success>\n\t\t<p>Thank you!</p>\n\t</perch:success>\n\t<div>\n\t\t<perch:label for=\"email\">Email</perch:label>\n\t\t<perch:input id=\"email\" required type=\"email\" mailer=\"email\">\n\t\t<perch:error type=\"required\" for=\"email\">Required</perch:error>\n\t</div>\n\t<div>\n\t\t<perch:label for=\"firstname\">First name</perch:label>\n\t\t<perch:input id=\"firstname\" required type=\"text\" mailer=\"FNAME\">\n\t\t<perch:error type=\"required\" for=\"firstname\">Required</perch:error>\n\t</div>\n\t<div>\n\t\t<perch:label for=\"lastname\">Last name</perch:label>\n\t\t<perch:input id=\"lastname\" required type=\"text\" mailer=\"LNAME\">\n\t\t<perch:error type=\"required\" for=\"lastname\">Required</perch:error>\n\t</div>\n\t<div>\n\t\t<perch:input type=\"submit\" value=\"Submit\" id=\"btnsubmit\">\n\t\t<perch:input type=\"hidden\" value=\"1\" id=\"confirm\" mailer=\"confirm_subscribe\">\n\t\t<perch:input type=\"hidden\" id=\"list\" value=\"your list ID goes here\" mailer=\"list\">\n\t</div>\n</perch:form>\n```\n\nAn important point is that the opening form tag has `app=\"perch_mailchimp\"` - this indicates to Perch that the content from this form should be directed to the MailChimp app to process.\n\n### Setting `mailer` attributes\n\nUse the `mailer` attribute on form fields to indicate to the MailChimp app which field in your form you want to serve which purpose.\n\n|`mailer` value|Purpose|\n|--|--|\n|`list`|The ID of the list to subscribe to|\n|`email`|The field containing the user's email address (required)|\n|`FNAME`|The user's first name.|\n|`LNAME`|The user's last name.|\n|`confirm_subscribe`|The field indicating that the user has opted in.|\n|`interests`|The MailChimp groups to assign (see below)|\n\n\n\n### Setting which list to subscribe to\n\nAt the bottom of the template is a hidden field with the ID `list`. The value of this field needs to be the ID value you can find listed under Lists within the MailChimp app in the Perch control panel. This is how we know which list to subscribe the user to.\n\nIf you wish to give the user the option of subscribing to multiple lists, you can do that with checkboxes, for example:\n\n```html\n<div>\n\t<perch:label for=\"list-newsletter\">Newsletter</perch:label>\n\t<perch:input id=\"list-newsletter\" type=\"checkbox\" value=\"abc123\" mailer=\"list\">\n</div>\n<div>\n\t<perch:label for=\"list-offers\">Special offers</perch:label>\n\t<perch:input id=\"list-offers\" type=\"checkbox\" value=\"def456\" mailer=\"list\">\n</div>\n```\n\nHere we give each checkbox field its own ID as usual. The `value` attribute of each checkbox should be its list ID from the control panel, and you should set the `mailer=\"list\"` attribute.\n\nNote that MailChimp generally discourages the use of multiple lists to segment users. They recomment that it's better to have one list and use tools like groups to segment within that list.\n\n### Confirming the subscription\n\nMany territories require you to ask the user to actively opt-in to receiving emails. This is done using the `confirm_subscribe` field. If you don't need this functionality, you can leave it as a hidden field:\n\n```html\n<perch:input type=\"hidden\" value=\"1\" id=\"confirm\" mailer=\"confirm_subscribe\">\n```\n\nIf you do want it, turn it into a checkbox instead:\n\n```html\n<perch:input type=\"checkbox\" value=\"1\" id=\"confirm\" mailer=\"confirm_subscribe\">\n```\n\nUnless the `confirm_subscribe` field is sent with a positive value, the app won't attempt to subscribe the user to the list.\n\n### Double opt-in\n\nMailChimp offers a double opt-in feature, where the user must click through from a confirmation email to their address before joining the list. This is an extra step for the user, but helps ensure the quality of the list, and avoids malicious sign-ups.\n\nYou can enable double opt-in by adding the following attribute on the opening `perch:form` tag:\n\n    double-optin=\"true\"\n\n### Interests / Groups\n\n_Experimental feature!_\n\nLists can be segmented with the use of _interests_ or _groups_ (MailChimp refers to this feature in two different ways). To offer a list of groups for the user to categorise themselves with, you need to know the ID of the group. At the moment the only way to get that is through the MailChimp [API Playground](https://us1.api.mailchimp.com/playground/). If you have the IDs for your groups, you can add them to the template like so:\n\n```html\n<perch:input type=\"hidden\" id=\"cheese\" value=\"a375f7a461\" mailer=\"interests\">\n<perch:input type=\"hidden\" id=\"cake\" value=\"85d9005e29\" mailer=\"interests\">\n```\n\nEach option should have its own ID as normal. The `value` should be the ID of the interest, and the `mailer` attribute should be set to `interests`.\n\nNote that interests are specific to a list, so the interest IDs need to match up with the list ID you use. This means that if you use interests, your form should only attempt to subscribe to one list.\n\nWe would ideally like to improve this feature in a future update, potentially listing the IDs in the control panel or even giving an automated way to add them to the template. If that's of interest to you, please let us know by posting to the [the forum](https://community.perchcms.com/forum/).\n\n\n## Displaying your form\n\nOnce you have the form template all set up, it's just a case of adding it to your page:\n\n```php\n<?php perch_mailchimp_form('forms/subscribe'); ?>\n```\n\n## Subscribing from other forms\n\nYou don't need to use a dedicated form just to subscribe users to your list. You can add the functionality to an existing form, such as a contact form. To do that, make sure you've added the appropriate `list` and `mailer` values to the template, and then update the form's `app` attribute to also send the value to MailChimp:\n\n```html\n<perch:form id=\"contact\" app=\"perch_mailchimp perch_forms\">\n   ...\n</perch:form>\n```\n\nThe apps will execute in order so if you are doing a redirect then put the perch_mailchimp app first in the list so that processing happens before your form kicks in.","type":"addons"},{"title":"Examples","permalink":"https://docs.grabaperch.com/addons/members/examples/","id":"addons.members.examples","excerpt":"Some worked examples and tutorials for achieving various things with the Members App.","text":"Some worked examples and tutorials for achieving various things with the Members App.","type":"addons"},{"title":"Installation","permalink":"https://docs.grabaperch.com/addons/members/installation/","id":"addons.members.installation","excerpt":"Download the latest version of the Members App checking that the minimum version of Perch is the same or less than the version of Perch that you are running.","text":"Download the latest version of the Members App checking that the minimum version of Perch is the same or less than the version of Perch that you are running.\n\nUnzip the download where you will find two folders.\n\n-   members – which contains example pages\n-   perch_members – which is the actual app\n\nCopy the perch_members folder into perch/addons/apps/\n\nAdd `perch_members` [to your apps.php file](/perch/getting-started/installing/apps).\n\nWhen you next log into the Perch admin the Members install script will run behind the scenes to create the necessary tables. A new members navigation item will appear in the administration menu.","type":"addons"},{"title":"Updating","permalink":"https://docs.grabaperch.com/addons/members/updating/","id":"addons.members.updating","excerpt":"Updating the Members App is usually a case of replacing the `perch_members` folder in `perch/addons/apps`. See the [Changelog](/addons/members/changelog) for details of what has changed between the version you are updating from and the latest.","text":"Updating the Members App is usually a case of replacing the `perch_members` folder in `perch/addons/apps`. See the [Changelog](/addons/members/changelog) for details of what has changed between the version you are updating from and the latest.","type":"addons"},{"title":"Changelog","permalink":"https://docs.grabaperch.com/addons/members/changelog/","id":"addons.members.changelog","excerpt":"All notable changes to Perch Members.\n 1.6.6\n- Fixes for warnings","text":"All notable changes to Perch Members.\n## 1.6.6\n- Fixes for warnings\n\n## 1.6.5\n- New Filtering for Members you can search members by Name, Email, Registered Date, and Status.\n- New Feature  `Download CSV​` , user can download a list of Members from the  Perch Control Panel\n- New Feature `Notes` capturing for each member on Perch Control Panel, logs the date added and by which user.\n- New Feature `Documents` admin can upload any Document that wishes to save for the member\n- Available only for subscriptions under <a href=\"https://account.perchcms.com/runway-addons\">https://account.perchcms.com/runway-addons</a>\n\n\n\n## 1.4\n\n- Improves support for access restriction on routed pages in Perch Runway\n\n## 1.3\n\n- Adds new `force_download` switch to disable the HTTP headers which force the browser to save rather than display a file\n- Automatically logs users in after successfully registering when moderation is not in place\n- Allows for account creation without a password\n\n## 1.2\n\n- Fixes bug with `perch_member_remove_tag()`\n- Adds compability for Perch and Perch Runway 2.8\n\n## 1.1\n\n- Add the `member.html` master template used for editing members from the control panel\n- Adds `perch_member_remove_tag()` page function\n- Modifies `perch_member_add_tag()` to update when the tag has already been set\n- Form default tags can now have an expiry, e.g. `subscriber|+3 months`\n- Rewrites the members template handler to use less memory\n\n## 1.0 - 1.0.3\n\n- Initial release, pre changelog.","type":"addons"},{"title":"Secure Downloads","permalink":"https://docs.grabaperch.com/addons/members/examples/downloads/","id":"addons.members.examples.downloads","excerpt":"Downloads can be restricted using [resource buckets](/docs/resources/).","text":"Downloads can be restricted using [resource buckets](/docs/resources/).\n\nIf, for example, you had a members site for a club or sports team, you\ncould have a secure resource bucket into which anything for members only\nwould be uploaded (AGM minutes, newsletters etc).\n\nYou’d then use a short download script to deliver those files to the\nbrowser, and that script would check that the member has permission to\naccess that bucket.\n\n## Setting up the resource bucket\n\nFirst, you’ll need to create a new bucket that stores its files outside\nthe web root. If you don’t have a `perch/config/buckets.php` file,\ncreate one like the example below. The `secure` folder should be above\nthe `public_html` folder, i.e. outside of your web root.\n\n```php\n<?php\nreturn array(\n    'secure' => array(\n        'web_path'  => '/members/download.php?file=',\n        'file_path' => '/path/to/sites/secure',\n    ),\n);\n?>\n```\n\nThen you’d need a template for uploading the files in the normal way.\nOur bucket is called `secure`, so we use that in our template tag:\n\n```html\n<a href=\"<perch:content id=\"file\" type=\"file\" label=\"File\" order=\"2\" bucket=\"secure\">\">\n      <perch:content type=\"text\" id=\"desc\" label=\"Title\" order=\"1\" required title>\n  </a>\n```\n\nOn the front end of you site, this will produce a link to something like\n\n\n    /members/download.php?file=/members_contact_details.pdf\n\nThe `download.php` example file included with the app checks that the\nmember is logged in before streaming the file. You could also check for\na tag, for example. See the source of the `download.php` for an example.","type":"addons"},{"title":"Member Registration","permalink":"https://docs.grabaperch.com/addons/members/examples/registration/","id":"addons.members.examples.registration","excerpt":"Members can register for the site through a registration form. You can\nhave one or more of these forms. It can collect any information you need\nby adding inputs to the registration form template – all we require is\nan email address and password.","text":"Members can register for the site through a registration form. You can\nhave one or more of these forms. It can collect any information you need\nby adding inputs to the registration form template – all we require is\nan email address and password.\n\n```php\n<?php perch_member_form('register.html'); ?>\n```\n\n## Registration form templates\n\nThe registration form templates live in `perch/templates/members/forms`\n– the default set are in the app at\n`perch/addons/perch_members/templates/members/forms`, you can copy these\nto your own templates folder to modify them.\n\nThere are three important attributes on the `<perch:form>` tag to make a\nregistration form work properly:\n\n-   The `app` attribute must be set `app=\"perch_members\"`\n-   The `id` attribute must be `id=\"register\"` so the app knows its the\n    registration form\n-   The `type` attribute is set to a value to identify what *type* of\n    member is signing up, e.g `type=\"parent\"`\n\n## An example registration template:\n\n```html\n<perch:form id=\"register\" method=\"post\" app=\"perch_members\" type=\"default\">\n\n  <div>\n        <perch:label for=\"first_name\">First name</perch:label>\n        <perch:input type=\"text\" id=\"first_name\" required label=\"First name\">\n        <perch:error for=\"first_name\" type=\"required\">Please add your name</perch:error>\n    </div>\n\n  <div>\n        <perch:label for=\"last_name\">Last name</perch:label>\n        <perch:input type=\"text\" id=\"last_name\" required label=\"Last name\">\n        <perch:error for=\"last_name\" type=\"required\">Please add your name</perch:error>\n    </div>\n\n  <div>\n        <perch:label for=\"email\">Email</perch:label>\n        <perch:input type=\"email\" id=\"email\" required placeholder=\"you@company.com\" helper=\"PerchMembers_Members::check_email\">\n        <perch:error for=\"email\" type=\"required\">Please add your email address</perch:error>\n        <perch:error for=\"email\" type=\"helper\">That email address is already in use</perch:error>\n    </div>\n\n  <div>\n        <perch:label for=\"password\">Password</perch:label>\n        <perch:input type=\"password\" id=\"password\" required match-with=\"password2\">\n        <perch:error for=\"password\" type=\"required\">Please add a password</perch:error>\n        <perch:error for=\"password\" type=\"match\">Passwords do not match</perch:error>\n    </div>\n\n  <div>\n        <perch:label for=\"password2\">Password again</perch:label>\n        <perch:input type=\"password\" id=\"password2\" required>\n        <perch:error for=\"password2\" type=\"required\">Please repeat your password</perch:error>\n    </div>\n\n  <div>\n        <perch:input type=\"submit\" value=\"Register\">\n    </div>\n\n  <perch:success>\n        <p>Thanks!</p>\n    </perch:success>\n\n</perch:form>\n```\n\nAfter a registration form has been submitted for the first time, it\nshows up under Forms inside the Members app. You can configure what\nhappens when a member registers. You can specify if the member needs to\nbe approved, and who to notify when someone registers. You can specify\nthe default set of tags (permissions) the member is given.\n\nDifferent registration forms can collect different information, and\nassign different tags to determin which permissions the member is given.\nEach different `type` of registration form gets its own entry under\nForms in the Members app. So a form with `type=\"parent\"` can have\ndifferent settings to a form with `type=\"customer\"` or\n`type=\"boardmember\"`.\n\n## Passwordless registration\n\nIf you wish to allow users to register without a password (e.g. when used with the Shop app to allow account creation in the background without the customer needing to know they've got an account) you can set the `password` field to the special value `__auto__`.\n\nWhen this value is set, Perch will automatically generate a random password for the account. In order to log into the account again, the recovery route is for the user to then reset their password.\n\n```html\n<perch:input type=\"hidden\" id=\"password\" value=\"__auto__\">\n```","type":"addons"},{"title":"Member Tags","permalink":"https://docs.grabaperch.com/addons/members/examples/tags/","id":"addons.members.examples.tags","excerpt":"Members’ ability to do things once logged in is controlled by tags. Tags\ncan be used to control access, group or segment members, or to tie in\nwith offline systems.","text":"Members’ ability to do things once logged in is controlled by tags. Tags\ncan be used to control access, group or segment members, or to tie in\nwith offline systems.\n\nA member can be tagged, and then access is controlled by those tags.\n(e.g. “This page is only visible to members tagged with *staff* “.) The\ndefault set of tags a user has is determined by their registration form,\nand can be changed afterwards by an administrator or from within your\ncode.\n\nOnce the Members app is installed, pages can be restricted by tag from\nthe normal page options (a new option appears).\n\nTags can be assigned to members with an expiry date, so you could be\ngiven a tag for 12 months and it be automatically removed after that.\n\nParts of a page can be restricted by tag:\n\n```php\n<?php if (perch_member_has_tag('boardmember')) {\n    perch_content('Financial reports');\n};\n?>\n```\n\nParts of a template can also be restricted by tag:\n\n```html\n<perch:member has-tag=\"boardmember\">\n    <p>Contact Bill for more information (direct line: 01234 5667890)</p>\n<perch:else:member>\n    <p>Please email for more information.</p>\n</perch:member>\n```","type":"addons"},{"title":"Installation","permalink":"https://docs.grabaperch.com/addons/email_octopus/installation/","id":"addons.email_octopus.installation","excerpt":"Download the latest version of the Email Octopus app checking that the minimum version of Perch is the same or less than the version of Perch that you are running.","text":"Download the latest version of the Email Octopus app checking that the minimum version of Perch is the same or less than the version of Perch that you are running.\n\nUnzip the download where you will find two folders.\n\n-   `addons/apps/perch_emailoctopus` – the actual app\n-   `emailoctopus` - containing a few example pages\n\nCopy the `perch_emailoctopus` folder into `perch/addons/apps/` in your own site/\n\nAdd `perch_emailoctopus` [to your `config/apps.php` file](/perch/getting-started/installing/apps).\n\nLog into the Perch control panel and visit the App by selecting it from your Apps menu. This will trigger an install of the app.\n\n## Set up your list\n\nIn Perch go to the Settings Page. You will see a new EmailOctopus section which asks for your EmailOctopus API Key. You need to get these from EmailOctopus.\n\nLog into your EmailOctopus account.\n\nYour API Key can be found under `Account > Extras > API Keys`. If you have already created a key copy it from here, or create a key and then copy it. Paste that into the API Key box on the Perch Settings page, and save the form.\n\n## Initial Import\n\nYou can now import your list data for the first time.\n\nGo back to the Email octopus app, which will now start to pull your lists down from EmailOctopus. If your list is large or you have a lot of Campaigns then this will take a while.\n\nTo avoid swamping both your server and the Email octopus **** API servers (and making the monkey cross), data is pulled down in batches. For lists themselves, it's most likely that those will all be retrieved in one go, but subscribers and campaigns might take longer. If you visit the Subscribers section, the first batch will be downloaded. If you refresh the page, or click the Next pagination button, the next batch is downloaded, and so on until all the data is available.\n\nIf you have a lot of data, you probably don't want to sit there clicking Next for hours, so this can be automated by making sure [scheduled tasks](/docs/scheduled-tasks/) are configured. The task scheduler will keep downloading every minute until all the data has been retrieved.\n\nOnce the import has finished you should be able to view subscribers and campaigns from within Perch.\n\n## Set up webhooks\n\n**This action will only work on a website that is live on the internet**\n\nOnce you install the app on a live site and have imported data you should configure webhooks, by selecting Webhooks from the toolbar and then clicking Sync.\n\nIf you run this on a local site EmailOctopus will not be able to validate the URL and the action will fail.\n\n## Important!\n\nWhen making your site live you need to run the import and set up of webhooks again, this will ensure your data matches the list on EmailOctopus so the webhooks can then do their job of keeping it up to date. In that sense, it's not really worth downloading all the data into your dev copy - just grab enough to see it working and then leave that job for live.","type":"addons"},{"title":"Examples","permalink":"https://docs.grabaperch.com/addons/email_octopus/examples/","id":"addons.email_octopus.examples","excerpt":"Some worked examples and tutorials for achieving various things with the Email Octopus App.","text":"Some worked examples and tutorials for achieving various things with the Email Octopus App.","type":"addons"},{"title":"Subscription form","permalink":"https://docs.grabaperch.com/addons/email_octopus/examples/subscription-form/","id":"addons.email_octopus.examples.subscription-form","excerpt":"One you have connected the app with your lists, you may want to add a form to your site to enable site visitors to subscribe. To do this, you need to create a form template.","text":"One you have connected the app with your lists, you may want to add a form to your site to enable site visitors to subscribe. To do this, you need to create a form template.\n\nIf it doesn't exist, create the template `templates/emailoctopus/forms/subscribe.html` with something like the following:\n\n```html\n<perch:form id=\"subscribe\" app=\"perch_emailoctopus\" double-optin=\"true\">\n\t<perch:success>\n\t\t<p>Thank you!</p>\n\t</perch:success>\n\t<div>\n\t\t<perch:label for=\"email\">Email</perch:label>\n\t\t<perch:input id=\"email\" required type=\"email\" mailer=\"email\">\n\t\t<perch:error type=\"required\" for=\"email\">Required</perch:error>\n\t</div>\n\t<div>\n\t\t<perch:label for=\"firstname\">First name</perch:label>\n\t\t<perch:input id=\"firstname\" required type=\"text\" mailer=\"FNAME\">\n\t\t<perch:error type=\"required\" for=\"firstname\">Required</perch:error>\n\t</div>\n\t<div>\n\t\t<perch:label for=\"lastname\">Last name</perch:label>\n\t\t<perch:input id=\"lastname\" required type=\"text\" mailer=\"LNAME\">\n\t\t<perch:error type=\"required\" for=\"lastname\">Required</perch:error>\n\t</div>\n\t<div>\n\t\t<perch:input type=\"submit\" value=\"Submit\" id=\"btnsubmit\">\n\t\t<perch:input type=\"hidden\" value=\"1\" id=\"confirm\" mailer=\"confirm_subscribe\">\n\t\t<perch:input type=\"hidden\" id=\"list\" value=\"your list ID goes here\" mailer=\"list\">\n\t</div>\n</perch:form>\n```\n\nAn important point is that the opening form tag has `app=\"perch_emailoctopus\"` - this indicates to Perch that the content from this form should be directed to the Emailoctopus app to process.\n\n### Setting `mailer` attributes\n\nUse the `mailer` attribute on form fields to indicate to the EmailOctopus app which field in your form you want to serve which purpose.\n\n|`mailer` value|Purpose|\n|--|--|\n|`list`|The ID of the list to subscribe to|\n|`email`|The field containing the user's email address (required)|\n|`FNAME`|The user's first name.|\n|`LNAME`|The user's last name.|\n|`confirm_subscribe`|The field indicating that the user has opted in.|\n\n\n\n\n### Setting which list to subscribe to\n\nAt the bottom of the template is a hidden field with the ID `list`. The value of this field needs to be the ID value you can find listed under Lists within the Email Octopus app in the Perch control panel. This is how we know which list to subscribe the user to.\n\nIf you wish to give the user the option of subscribing to multiple lists, you can do that with checkboxes, for example:\n\n```html\n<div>\n\t<perch:label for=\"list-newsletter\">Newsletter</perch:label>\n\t<perch:input id=\"list-newsletter\" type=\"checkbox\" value=\"abc123\" mailer=\"list\">\n</div>\n<div>\n\t<perch:label for=\"list-offers\">Special offers</perch:label>\n\t<perch:input id=\"list-offers\" type=\"checkbox\" value=\"def456\" mailer=\"list\">\n</div>\n```\n\nHere we give each checkbox field its own ID as usual. The `value` attribute of each checkbox should be its list ID from the control panel, and you should set the `mailer=\"list\"` attribute.\n\nNote that Email Octopus generally discourages the use of multiple lists to segment users. They recomment that it's better to have one list and use tools like groups to segment within that list.\n\n### Confirming the subscription\n\nMany territories require you to ask the user to actively opt-in to receiving emails. This is done using the `confirm_subscribe` field. If you don't need this functionality, you can leave it as a hidden field:\n\n```html\n<perch:input type=\"hidden\" value=\"1\" id=\"confirm\" mailer=\"confirm_subscribe\">\n```\n\nIf you do want it, turn it into a checkbox instead:\n\n```html\n<perch:input type=\"checkbox\" value=\"1\" id=\"confirm\" mailer=\"confirm_subscribe\">\n```\n\nUnless the `confirm_subscribe` field is sent with a positive value, the app won't attempt to subscribe the user to the list.\n\n\n\n## Displaying your form\n\nOnce you have the form template all set up, it's just a case of adding it to your page:\n\n```php\n<?php perch_emailoctopus_form('forms/subscribe'); ?>\n```\n\n## Subscribing from other forms\n\nYou don't need to use a dedicated form just to subscribe users to your list. You can add the functionality to an existing form, such as a contact form. To do that, make sure you've added the appropriate `list` and `mailer` values to the template, and then update the form's `app` attribute to also send the value to Email Octopus:\n\n```html\n<perch:form id=\"contact\" app=\"perch_emailoctopus perch_forms\">\n   ...\n</perch:form>\n```\n\nThe apps will execute in order so if you are doing a redirect then put the perch_emailoctopus app first in the list so that processing happens before your form kicks in.","type":"addons"},{"title":"Changelog","permalink":"https://docs.grabaperch.com/addons/poll/changelog/","id":"addons.poll.changelog","excerpt":"All notable changes to Perch Poll.","text":"All notable changes to Perch Poll.\n\n\n## [1.0]\n\nInitial release\n\n- Available only for subscriptions under <a href=\"https://account.perchcms.com/runway-addons\">https://account.perchcms.com/runway-addons</a>","type":"addons"},{"title":"Examples","permalink":"https://docs.grabaperch.com/addons/poll/examples/","id":"addons.poll.examples","excerpt":"A worked example for listing a poll with the Poll App.","text":"A worked example for listing a poll with the Poll App.\n\n\n## Poll\n\n- [Display Poll in Page](/addons/poll/examples/poll)","type":"addons"},{"title":"Installation","permalink":"https://docs.grabaperch.com/addons/poll/installation/","id":"addons.poll.installation","excerpt":"Download the latest version of the Poll app checking that the minimum version of Perch is the same or less than the version of Perch that you are running.","text":"Download the latest version of the Poll app checking that the minimum version of Perch is the same or less than the version of Perch that you are running.\n\nUnzip the download where you will find two folders.\n\n-   `poll` – which contains example page\n-   `perch_podll` – which is the actual app\n\nCopy the `perch_poll` folder into `perch/addons/apps/`\n\nAdd `perch_poll` [to your apps.php file](/docs/installing-perch/installing-apps/).\n\nWhen you next log into the Perch admin the Poll install script will run behind the scenes to create the necessary tables. A new navigation item will appear in the apps menu.","type":"addons"},{"title":"Questions","permalink":"https://docs.grabaperch.com/addons/poll/questions/","id":"addons.poll.questions","excerpt":"Questions are managed in the Perch Control Panel from the Poll App. Each question has many answers.","text":"## Adding questions\n\nQuestions are managed in the Perch Control Panel from the Poll App. Each question has many answers.\n\nOnce you added the questions will be listed to Poll Control page.\n\nFor each Poll you apply as many questions as you wish.","type":"addons"},{"title":"Display Poll","permalink":"https://docs.grabaperch.com/addons/poll/examples/poll/","id":"addons.poll.examples.poll","excerpt":"To display the poll (on your `/poll` page perhaps), use:\nYou need to specify the pollID\n```php\nperch_poll_view(1);\n```","text":"To display the poll (on your `/poll` page perhaps), use:\nYou need to specify the pollID\n```php\nperch_poll_view(1);\n```\n\n\nIf the Poll has set as status Published will be fetch to your page.","type":"addons"},{"title":"Changelog","permalink":"https://docs.grabaperch.com/addons/twillio/changelog/","id":"addons.twillio.changelog","excerpt":"All notable changes to Perch Twillio.","text":"All notable changes to Perch Twillio.\n\n\n## [1.0]\n\nInitial release\n\n- Available only for subscriptions under <a href=\"https://account.perchcms.com/runway-addons\">https://account.perchcms.com/runway-addons</a>","type":"addons"},{"title":"Examples","permalink":"https://docs.grabaperch.com/addons/twillio/examples/","id":"addons.twillio.examples","excerpt":"Some worked examples and tutorials for achieving various things with the Twillio App.","text":"Some worked examples and tutorials for achieving various things with the Twillio App.","type":"addons"},{"title":"Installation","permalink":"https://docs.grabaperch.com/addons/twillio/installation/","id":"addons.twillio.installation","excerpt":"Download the latest version of the Twillio App .\nUnzip the download where you will find two folders.","text":"Download the latest version of the Twillio App .\nUnzip the download where you will find two folders.\n\n-   `twillio` – which contains example pages\n-   `perch_twillio` – which is the actual app\n\nCopy the `perch_twillio` folder into `perch/addons/apps/`\n\nAdd `perch_twillio` [to your apps.php file](/docs/installing-perch/installing-apps/).\n\n## Getting your Twilio  credentials\n\nWhen you next log into the Perch admin the Twillio install script will run behind the scenes to create the necessary tables. A new Twillio navigation item will appear in the administration menu.\n###  Sign Up for Twilio\n1. **Create an account** on Twilio's website.\n2. **Verify your phone number**.\n3. **Get your Account SID and Auth Token** from the Twilio Console.\n\nIn your `perch/config/config.php` file, add your Auth Token settings for Twilio .\n\n`define('PERCH_TWILLIO_AUTHTOKEN', \"b9b26a...\");`\n\nIn the Setting page of your admin panel add in the Twilio section the From Number and the SID.\n\n### Notes:\n**Twilio Sandbox**: Initially, you might need to use the Twilio Sandbox  to test sending messages.","type":"addons"},{"title":"Member Verifies Phone","permalink":"https://docs.grabaperch.com/addons/twillio/examples/verify_phone/","id":"addons.twillio.examples.verify_phone","excerpt":"After the member submits the form to verify their phone, they are redirected to a form for entering the verification code received via SMS on their phone.","text":"After the member submits the form to verify their phone, they are redirected to a form for entering the verification code received via SMS on their phone.\n\n\n\n\n\n```php\n<?php if(!perch_twillio_customer_verified()){\nverify_customer_from_form();\n}else{\necho \"phone is verified!\";\n}\n\n ?>```","type":"addons"},{"title":"Member Completes Phone","permalink":"https://docs.grabaperch.com/addons/twillio/examples/register_phone_for_members/","id":"addons.twillio.examples.register_phone_for_members","excerpt":"Members need to be logged in.\nIf not, display the login form or a registration form if they are a new member.\nWhen a member is logged in, check if their phone has been registered. \nIf not, display the Twilio form to complete or verify the member's phone. \nWhen the member submits their phone number, they will receive a verification code through SMS.","text":"Members need to be logged in.\nIf not, display the login form or a registration form if they are a new member.\nWhen a member is logged in, check if their phone has been registered. \nIf not, display the Twilio form to complete or verify the member's phone. \nWhen the member submits their phone number, they will receive a verification code through SMS.\n\n\n\n\n\n\n\n\n```php\n<?php\n $return_url = '/twillio/verify_phonecode.php';\n if(!perch_member_logged_in() ){\n\n      perch_twillio_login_form();\n\n      // New customer sign up form\n     perch_member_form('register.html');\n\n\n }else{\n      if(!perch_twillio_is_customerphone_registered()){\n\n       perch_twillio_registration_form();\n\n\n        }else{\n        perch_twillio_customer_confirmPhone_form(  [\n                                                       'return_url' => $return_url\n\n                                                     ]);\n        }\n      }\n\n  ?>\n```","type":"addons"},{"title":"Examples","permalink":"https://docs.grabaperch.com/addons/qr/examples/","id":"addons.qr.examples","excerpt":"A worked example for listing a QR with the QRGenerator App.","text":"A worked example for listing a QR with the QRGenerator App.\n\n\n## QR Generator\n\n- [Display QR in Page](/addons/qr/examples/qr)","type":"addons"},{"title":"Changelog","permalink":"https://docs.grabaperch.com/addons/qr/changelog/","id":"addons.qr.changelog","excerpt":"All notable changes to Perch QRGenerator.","text":"All notable changes to Perch QRGenerator.\n\n\n## [1.0]\n\nInitial release\n\n- Available only for subscriptions under <a href=\"https://account.perchcms.com/runway-addons\">https://account.perchcms.com/runway-addons</a>","type":"addons"},{"title":"Installation","permalink":"https://docs.grabaperch.com/addons/qr/installation/","id":"addons.qr.installation","excerpt":"Download the latest version of the QRGenerator app checking that the minimum version of Perch is the same or less than the version of Perch that you are running.","text":"Download the latest version of the QRGenerator app checking that the minimum version of Perch is the same or less than the version of Perch that you are running.\n\nUnzip the download where you will find two folders.\n\n-   `qr` – which contains example page\n-   `perch_qrgenerator` – which is the actual app\n\nCopy the `perch_qrgenerator` folder into `perch/addons/apps/`\n\nAdd `perch_qrgenerator` [to your apps.php file](/docs/installing-perch/installing-apps/).\n\nWhen you next log into the Perch admin the QRGenerator install script will run behind the scenes to create the necessary tables. A new navigation item will appear in the apps menu.","type":"addons"},{"title":"Display QR","permalink":"https://docs.grabaperch.com/addons/qr/examples/qr/","id":"addons.qr.examples.qr","excerpt":"To display the QR (on your `/qr` page perhaps), use:\nYou need to specify the QRGeneratorID\n```php\nperch_QRGenerator_view(1);\n```","text":"To display the QR (on your `/qr` page perhaps), use:\nYou need to specify the QRGeneratorID\n```php\nperch_QRGenerator_view(1);\n```\n\n\nIf the QR has set as status Published will be fetch to your page.","type":"addons"},{"title":"Examples","permalink":"https://docs.grabaperch.com/addons/listings/examples/","id":"addons.listings.examples","excerpt":"Some worked examples and tutorials for achieving various things with the Listings App.","text":"Some worked examples and tutorials for achieving various things with the Listings App.","type":"addons"},{"title":"Installation","permalink":"https://docs.grabaperch.com/addons/listings/installation/","id":"addons.listings.installation","excerpt":"Download the latest version of the Listings App checking that the minimum version of Perch is the same or less than the version of Perch that you are running.","text":"Download the latest version of the Listings App checking that the minimum version of Perch is the same or less than the version of Perch that you are running.\n\nUnzip the download where you will find two folders.\n\n-   `listings` – which contains example pages\n-   `perch_listings` – which is the actual app\n\nCopy the `perch_listings` folder into `perch/addons/apps/`\n\nAdd `perch_listings` [to your apps.php file](/docs/installing-perch/installing-apps/).\n\nWhen you next log into the Perch admin the Listings install script will run behind the scenes to create the necessary tables. A new listings navigation item will appear in the administration menu.","type":"addons"},{"title":"Changelog","permalink":"https://docs.grabaperch.com/addons/listings/changelog/","id":"addons.listings.changelog","excerpt":"All notable changes to Perch Listings.","text":"All notable changes to Perch Listings.\n\n\n## [1.0]\n\nInitial release\n\n- Available only for subscriptions under <a href=\"https://account.perchcms.com/runway-addons\">https://account.perchcms.com/runway-addons</a>","type":"addons"},{"title":"Display Listings","permalink":"https://docs.grabaperch.com/addons/listings/examples/listings/","id":"addons.listings.examples.listings","excerpt":"To display the listings (on your `/listings` page perhaps), use:\nList the latest added listings\n```php\nperch_listings_recent_created();\n```","text":"To display the listings (on your `/listings` page perhaps), use:\nList the latest added listings\n```php\nperch_listings_recent_created();\n```\n\nList the filtered listings based  on location,price,size\n```php\nperch_listings_custom(array(\n    'filter' =>array( 'listingLocation' => $location,'listingPrice'=>array( $minPrice,$maxPrice),'listingSize'=>array( $minSize,$maxSize)),\n    'category' => array('apartment','plot'),\n    'template' => 'listings_in_list.html'\n));\n```\nDisplay specific listing\n```php\n if(isset($_GET['s'])){\n \n       perch_listing_listing(perch_get('s'));\n       \n  }\n```","type":"addons"},{"title":"The Cart","permalink":"https://docs.grabaperch.com/addons/shop/cart/","id":"addons.shop.cart","excerpt":"The Cart is where products are logged as a customer moves around your store. Therefore every Shop has a Cart. If you want to display a list of what the customer is about to order, you display the Cart. However, you do not need to display this like a traditional e-commerce shopping cart. As with anything in Perch the way things look is up to you.","text":"The Cart is where products are logged as a customer moves around your store. Therefore every Shop has a Cart. If you want to display a list of what the customer is about to order, you display the Cart. However, you do not need to display this like a traditional e-commerce shopping cart. As with anything in Perch the way things look is up to you.\n\n## Cart Template Tags & Functions\n\nThe template tags used to display items in the cart can be found in the template reference. If you do not create your own template then the default template installed with the App will be used.\n\nThere are also a number of helper functions to use to interact with the cart and build up your cart page\n\n## Cart examples\n\nWe have some example snippets for common scenarios. See the Examples section for more.\n\n- [Add an item to the Cart](/addons/shop/examples/simple-add-to-cart-form) with the simplest form example\n- [Programmatically add an item to the cart](/addons/shop/examples/add-to-cart-php) from your PHP page\n- [Add to Cart form with Product Options](/addons/shop/examples/add-to-cart-options) is a more complete add to cart form\n- [Empty the Cart](/addons/shop/examples/empty-cart)\n- [Display the Cart on a page](/addons/shop/examples/display-cart)\n- [Creating a no-cart checkout](/addons/shop/examples/no-cart) shows how to create a process that doesn't an obvious cart step","type":"addons"},{"title":"Changelog","permalink":"https://docs.grabaperch.com/addons/shop/changelog/","id":"addons.shop.changelog","excerpt":"All notable changes to Perch Shop.\n [1.3.5] - 2025-01-14\n Fixed\n- Fixes for PHP 8.2 compatibility","text":"All notable changes to Perch Shop.\n## [1.3.5] - 2025-01-14\n### Fixed\n- Fixes for PHP 8.2 compatibility\n\n### Added\nKlarna new integration\n\n- Available only for subscriptions under <a href=\"https://account.perchcms.com/runway-addons\">https://account.perchcms.com/runway-addons</a>\n\n\n## [1.3.4] - 2024-12-14\n### Fixed\n- Fixes for PHP 8.2 compatibility\n\n### Added\nPaypal new integration\n\n- Available only for subscriptions under <a href=\"https://account.perchcms.com/runway-addons\">https://account.perchcms.com/runway-addons</a>\n\n## [1.3.0] - 2023-02-14\n### Fixed\n- Update library for Stripe Sca\n- Fixes for PHP 8.1 compatibility\n- Available only for subscriptions under <a href=\"https://account.perchcms.com/runway-addons\">https://account.perchcms.com/runway-addons</a>\n\n\n## [1.2.9] - 2022-09-02\n### Fixed\n- Fixes for PHP compatibility\n- Available only for subscriptions under <a href=\"https://account.perchcms.com/runway-addons\">https://account.perchcms.com/runway-addons</a>\n\n\n## [1.2.8] - 2022-06-21\n### Added\n- PDF Invoice generator new functionality\n- Available only for subscriptions under <a href=\"https://account.perchcms.com/runway-addons\">https://account.perchcms.com/runway-addons</a>\n\n## [1.2.7] - 2022-04-27\n### Added\n- New SCA Stripe integration\n- Available only for subscriptions under <a href=\"https://account.perchcms.com/runway-addons\">https://account.perchcms.com/runway-addons</a>\n\n\n## [1.2.6] - 2020-06-21\n### Fixed\n- Fixes for PHP 8 compatibility\n\n## [1.2.5] - 2017-09-21\n### Added\n- Adds search indexing for lookup fields\n\n### Fixed\n- Dixes some small bugs with type coercion in the cart.\n\n## [1.2.4] - 2017-08-15\n### Added\n- Adds Promotion details to the Orders export\n\n### Fixed\n- Fixes some small bugs found in 1.2.3\n\n## [1.2.3] - 2017-07-17\n### Added\n- Added tax ID to order detail\n\n### Fixed\n- Fixes a bug with updating countries\n- Improves error handling in cart\n\n## [1.2.1] - 2017-06-05\n### Fixed\n- Fixes an issue with cart pricing when sale prices are implemented\n\n## [1.2] - 2017-05-04\n### Added\n- Added fixed sales periods as part of Promotions\n- Added \"use sale price\" promotion type\n- Added country management\n- Adds API events to all shop entity types\n\n### Fixed\n- Fixes bug with order items not being processed in emails when triggered from control panel\n- Adds missing `perch_shop.emails.edit` privilege\n- Resets environment after logout\n- Fixed a bug with creating a promotion using multiple shipping methods\n\n## [1.1] - 2017-03-27\n### Fixed\n- Updated UI for Perch Runway 3\n\n## [1.0.12] - 2017-01-25\n### Fixed\n- Makes some optimisations to generating variants to make the process faster\n- Fixes bug that prevented custom fields in Customer master template from being added to a customer\n- Fixes bug with deleted addresses still being listed\n\n## [1.0.11] - 2017-01-07\n### Fixed\n- Fixes bug with disabling promotions (small template update)\n- Fixes bug with `perch_shop_product_variants()` not returning expected results\n\n## [1.0.10] - 2016-11-18\n### Fixed\n- Fixes bug where deleted brands were not filtered out of the listings\n- Improves performance of product selection queries for larger sites\n- More fixes for strict MySQL configurations\n\n### Added\n- Adds `perch_shop_set_tax_location()` runtime function. Takes a tax location ID\n- Adds `perch_shop_delete_adddress()` runtime function. Takes an address ID\n\n## [1.0.9] - 2016-10-09\n### Fixed\n- Sets more default values for stricter database server configurations\n- Prices in templates can now be compared against the default currency using `perch:if`\n\n### Added\n- Adds `perch:variants` tag pair to product templates\n- Adds `perch_shop_product_variants()` runtime function\n\n## [1.0.8] - 2016-08-17\n### Fixed\n- Fixes problem with default values for decimal characters on new installations\n- Corrects labelling on promotion trigger values\n- Fixes a bug in the customer edit form when a customer changes their email address\n- Fixes a bug in the customer edit form when a customer doesn't change their email address\n\n## [1.0.7] - 2016-08-11\n### Fixed\n- Fixes a bug with `perch_shop_set_discount_code()`\n- Fixes a bug where inactive products were being returned in search results\n- Fixes a bug where a product is incorrectly listed as having variants after all variants have been deleted\n- Fixes a bug with `perch_shop_location_selected()` not working at all\n\n### Added\n- Adds the `output` attribute to a number of different Shop field types to enable e.g. `output=\"slug\"` on a `shop_brand` field\n- Adds `perch_shop_set_cart_property()` runtime function\n- Adds support for WorldPay gateway\n- Adds decimal point and thousand separator character options to currencies\n\n## [1.0.6] - 2016-06-22\n### Fixed\n- Fixes a bug with the installer\n\n## [1.0.5] - 2016-06-21\n### Fixed\n- Fixes a bug with role privileges not being created\n\n### Added\n- Adds a 'priority' option for setting the order of shipping methods\n\n## [1.0.4] - 2016-06-13\n### Fixed\n- Fixes a potential issue when buying a product that has never been edited\n- Fixes a bug with Braintree orders >1000 currency units\n- Fixes a bug with Braintree test card numbers with no country set\n- Fixes a bug with cart tax location not being set automatically for returning customers\n\n## [1.0.3] - 2016-06-04\n### Fixed\n- Brands are now correctly indexed against a product to enable listing products by brand\n- Fixes an install bug with creating countries\n\n## [1.0.2] - 2016-05-13\n### Fixed\n- Fixed a bug with duplicate customer addresses being listed\n- Fixed a bug with cart properties registering as set if passed an empty string\n- Fixed a couple of typos in country names\n- Fixed some hard-coded database prefixes in variant generation that should have been using `PERCH_DB_PREFIX`\n\n### Added\n- Added Vatican City and Saint Kitts and Nevis to the countries list\n- Added `total_items_discounted_with_tax` cart value\n\n## [1.0.1] - 2016-04-24\n### Fixed\n- Fixed a fatal error when changing an order status to dispatched\n- Fixed a bug with tax evidence not being logged due to change in order status events\n- Fixed spelling of 'persistent'.\n\n## [1.0] - 2016-04-11\n- Initial public release","type":"addons"},{"title":"Checkout","permalink":"https://docs.grabaperch.com/addons/shop/checkout/","id":"addons.shop.checkout","excerpt":"To check out you need to configure a [payment gateway](/addons/shop/gateways/). You can do this in the `perch/config/shop.php` file that should have been created for you. Note the Slug used by your gateway, as you need to add that to your code below.","text":"To check out you need to configure a [payment gateway](/addons/shop/gateways/). You can do this in the `perch/config/shop.php` file that should have been created for you. Note the Slug used by your gateway, as you need to add that to your code below.\n\nThe specific documentation for each [gateway](/addons/shop/gateways/) has an example configuration and details of the payment flow you need to follow.\n\n```php\n<?php\n  return [\n    'gateways' => [\n      'stripe' => [\n        'enabled'   => true,\n        'test_mode' => true,\n        'live' => [\n          'secret_key'      => 'sk_live_ABC123',\n          'publishable_key' => 'pk_live_ABC123',\n        ],\n        'test' => [\n          'secret_key'      => 'sk_test_ABC123',\n          'publishable_key' => 'pk_test_ABC123',\n        ],\n      ],\n    ],\n  ];\n?>\n```\n\nOnce you're ready to check out, you need to call the `perch_shop_checkout()` function. Depending on the gateway you're using the flow might look a little different.\n\nSee the [Payment Gateways](/addons/shop/gateways/) page for information and payment flows for the available gateways.","type":"addons"},{"title":"Customers","permalink":"https://docs.grabaperch.com/addons/shop/customers/","id":"addons.shop.customers","excerpt":"Shop keeps a record of each customer, along with their billing and shipping addresses. Each customer has an associated Member account, which manages their account to log in to your site. When a new customer is created, the Member account is silently created in the background and tied to the customer.","text":"Shop keeps a record of each customer, along with their billing and shipping addresses. Each customer has an associated Member account, which manages their account to log in to your site. When a new customer is created, the Member account is silently created in the background and tied to the customer.\n\n## Customer examples\n\n- [Create a customer account](/addons/shop/examples/create-account)\n- [Managing addresses](/addons/shop/examples/managing-addresses)","type":"addons"},{"title":"Examples","permalink":"https://docs.grabaperch.com/addons/shop/examples/","id":"addons.shop.examples","excerpt":"Some worked examples and tutorials for achieving various things with the Shop App. These range from the simple to more complete tutorials.","text":"Some worked examples and tutorials for achieving various things with the Shop App. These range from the simple to more complete tutorials.\n\n## Products\n\n- [Selling digital downloads](/addons/shop/examples/digital-downloads) details the steps for selling files such as music, software and ebooks.\n\n## Cart\n\n- [Add an item to the Cart](/addons/shop/examples/simple-add-to-cart-form) with the simplest form example\n- [Programmatically add an item to the cart](/addons/shop/examples/add-to-cart-php) from your PHP page\n- [Add to Cart form with Product Options](/addons/shop/examples/add-to-cart-options) is a more complete add to cart form\n- [Empty the Cart](/addons/shop/examples/empty-cart)\n- [Display the Cart on a page](/addons/shop/examples/display-cart)\n- [Creating a no-cart checkout](/addons/shop/examples/no-cart) shows how to create a process that doesn't an obvious cart step\n\n## Checkout\n\n- [Create a customer account](/addons/shop/examples/create-account)\n- [Managing addresses](/addons/shop/examples/managing-addresses)\n- [Adding an order confirmation step](/addons/shop/examples/order-confirmation) describes ways to add a final confirmation step to your checkout before going to payment.\n- [Handling payment results](/addons/shop/examples/payment-result) shows how to display success and failure messages to the customer after payment.\n- [Creating a no-account checkout](/addons/shop/examples/no-account) shows how to skip setting passwords for an account","type":"addons"},{"title":"Payment Gateways","permalink":"https://docs.grabaperch.com/addons/shop/gateways/","id":"addons.shop.gateways","excerpt":"Instructions are available for the following gateways:","text":"Instructions are available for the following gateways:\n\n| Gateway                                                 |Supported|Seen working|Tax evidence collection|Recurring payments|\n|---------------------------------------------------------|--|--|--|--|\n| [Braintree](/addons/shop/gateways/braintree/)           |![Yes](/assets/svg/check.svg)|![Yes](/assets/svg/check.svg)|![Yes](/assets/svg/check.svg)||\n| [Manual](/addons/shop/gateways/manual/)                 |![Yes](/assets/svg/check.svg)|![Yes](/assets/svg/check.svg)|N/A||\n| [PayPal Express](/addons/shop/gateways/paypal-express/) |![Yes](/assets/svg/check.svg)|![Yes](/assets/svg/check.svg)|![Yes](/assets/svg/check.svg)||\n| [PayPal](/addons/shop/gateways/paypal/)                 |![Yes](/assets/svg/check.svg)|![Yes](/assets/svg/check.svg)|![Yes](/assets/svg/check.svg)||\n| [Stripe](/addons/shop/gateways/stripe/)                 |![Yes](/assets/svg/check.svg)|![Yes](/assets/svg/check.svg)|![Yes](/assets/svg/check.svg)||\n| [StripeSCA](/addons/shop/gateways/stripe-sca/)          |![Yes](/assets/svg/check.svg)|![Yes](/assets/svg/check.svg)|![Yes](/assets/svg/check.svg)||\n| [Worldpay](/addons/shop/gateways/worldpay/)             |![Yes](/assets/svg/check.svg)|![Yes](/assets/svg/check.svg)||||\n| [Revolut](/addons/shop/gateways/revolut/)               |![Yes](/assets/svg/check.svg)|![Yes](/assets/svg/check.svg)||||\n| [Klarna](/addons/shop/gateways/klarna/)                 |![Yes](/assets/svg/check.svg)|![Yes](/assets/svg/check.svg)||||\n\nTax evidence collection happens for all transactions, but only some gateways enable us to retrieve the country the payment card is registered to.\n\nPerch Shop uses the [Omnipay](http://omnipay.thephpleague.com) library for some payment gatways. That means that any gateway that has a driver for Omnipay has the potential to work just fine with Perch Shop. Omnipay has a long list of [official](http://omnipay.thephpleague.com/gateways/official/) and [third party](http://omnipay.thephpleague.com/gateways/third-party/) gateways that are supported. It's also possible for a PHP developer to add support for an unlisted gateway.\n\nWhile this very comprehensive list of gateways should be possible to use with Perch Shop, we're not going to list a gateway here until we've worked on it and seen it working in action. That way, you can know that when a gateway is listed here it should be simple to start using without any developer knowledge.\n\nIf you have a gateway you need to get working with Perch Shop, we can help you do that. To do that, we need\n\n1. For there to be an official or third-party Omnipay driver for the gateway\n2. A test account so that we can try it and see it working\n\nIf you'd like help doing that, [send us an email](mailto:support@grabaperch.com) and we'll take a look and see what's going to be possible. It's best to start this process as early into a project as is possible.\n\nIf your requirement is urgent, or your gateway does not have an Omnipay driver we may be able to provide development expertise in order to prioritize implementation and testing of a gateway as a [sponsored feature](https://shop.perchcms.com/roadmap).","type":"addons"},{"title":"Installation","permalink":"https://docs.grabaperch.com/addons/shop/installation/","id":"addons.shop.installation","excerpt":"The Shop app requires a little more configuration and set-up than some of our simpler add-ons. There are three apps - Shop, Products and Orders, and uses Members to handle user accounts. All four apps are included in your download.","text":"The Shop app requires a little more configuration and set-up than some of our simpler add-ons. There are three apps - Shop, Products and Orders, and uses Members to handle user accounts. All four apps are included in your download.\n\n## Installation and Initial Setup\n\nFollow these steps to get started with your store. The order is important, so please take a moment to follow the steps with extra care.\n\n### Installation\n\n**Make sure Perch or Perch Runway is up to date**. Shop is a very new App and likely to receive rapid updates which will also rely on an updated Perch Core.\n\n#### Step 1. Add the Shop Files {#files}\n\nUnzip the add-on and copy items in `addons/apps` to your `perch/addons/apps` folder. If you already have Members installed, the version you have downloaded is the latest and you should update to this if running an older version.\n\n#### Step 2. Edit your `apps.php` config file {#appsconfig}\n\nEdit your `perch/config/apps.php` file to include an entry for `perch_members` and `perch_shop`. The entry for `perch_members` should be *before* the entry for `perch_shop`. For example:\n\n```php\n<?php\n    $apps_list = array(\n        'content',\n        'categories',\n        'perch_blog',\n        'perch_members',\n        'perch_shop',\n    );\n?>\n```\n\nThe rest of the installation and setup happens inside the Perch Control Panel. Log in there to continue. Perch will create the required database tables as you move through setup.\n\n### Initial Configuration\n\nBefore you can add your first product, you need to perform some configuration such as setting up supporting items like tax locations, shipping options, categories and brands.\n\nIn some stores not all of these will be necessary for what you're selling, so feel free to create entries with names like \"Default\", \"Global\" or \"Free\" etc, so that you can set them and move on. Remember you don't need to display things on the page that you don't need, so these don't matter too much - they just need to be in place.\n\n#### Step 3. Create Categories {#categories}\n\nSelect **Categories** from the Apps menu, and create a new empty Set to act as the primary category set for organizing your store. A good name might be `Products`. Create some categories as needed for your products. If products are not going to be displayed in Categories you could just use a single category of `default`.\n\n#### Step 4. Currency Setup {#currency}\n\nSelect the **Shop** app from the Apps menu and go to **Currencies**. Enable and disable the currencies you wish to sell in by clicking on the currency name and selecting or deselecting the checkbox.\n\n**Which currencies can I use?**\n\nYour payment provider needs to support the currency you wish to sell in. Providers such as Stripe and PayPal offer a wide range of currencies. Traditional merchant accounts may limit you to your home currency.\n\nAssuming your payment provider supports multiple currencies, if you are using **Perch Runway** with Shop then you can sell in multiple currencies which would mean your customer can choose the currency to pay in. Standard Perch is limited to a single currency. If you are using Perch and enable a currency, all others will be disabled.\n\n#### Step 5. Pricing and Tax {#tax}\n\nPerch Shop includes a complete Location Based Tax system. You can [find out more about how tax works here](/addons/shop/tax/), however the choices you make around tax should be checked with the store owner.\n\nGo to the general **Perch Settings** page. You will see that a section has appeared here for Shop. Check the value of the \"Prices are entered as\" setting. Usually this will be Tax Exclusive, but change it if you need to. Set the Default and Reporting currencies. *Save the settings if you made changes or not*.\n\nSelect the **Shop** app from the Apps menu and go to **Tax**. Go to **Locations** and add a new entry for the _home location_ of your store. Check the box to make it the home location.\n\nStaying within **Tax**, go to **Groups** and add a new tax group for the type of things you need to charge different rates of tax for. Examples might be \"Digital products\", \"Children's clothing\" or \"Shipping\". If everything has the same rate of tax you could create a single group named **Standard** or similar.\n\nIf all items are taxed according to the home location of the store, and all customers no matter their location pay this tax, this is all you need to do. See the [tax documentation](/addons/shop/tax/) if you have more complex requirements.\n\n#### Step 6. Shipping  {#shipping}\n\nYou need a Shipping Zone and Method even if you are selling digital items that don't need to be \"shipped\".\n\nStaying within the **Shop** App, go to **Shipping** then **Zones** and add at least one shipping zone. This is where you would create zones such as \"UK\", \"Europe\" and \"Rest of World\" for example, in order that you can add the different prices for Shipping. You can then select the countries that are part of the zone. Make sure that one zone is set as the catch-all (usually your \"Rest of World\").\n\nIf you are only selling Digital Products or everything will be shipped at a flat rate no matter where it goes to, create a single Zone called \"Global\" or similar. Then check the checkbox to mark this as a catch-all.\n\nStaying in **Shipping** go to **Methods** and create at least one Shipping Method. Shipping Methods can be very specific. You can specify different methods based on location, weight, size or order value. You can always update this later, you need at least one method to be able to test Shop functionality however.\n\nIf you are selling Digital Products then you can create a Method named `digital` that has no price attached, select the Global location you created in the last step and you are good to go.\n\nFor more details on Shipping Zones and Methods and how to use them in Perch Shop, see the [Shipping documentation](/addons/shop/shipping/).\n\n#### Step 7. Brands and Products {#brands}\n\nSelect the **Products** App from the App Menu and go to **Brands**, add at least one brand. This can be `default` or similar, it becomes useful for stores selling a range of items from different brands.\n\nYou're now ready to [add a product](/addons/shop/products/)! Phew.\n\nRemember, everything we have set up here can be changed later. Much of it you will want to show the Shop Owner how to update and change, so they can add new Shipping Options and update tax rates and so on. These steps will get you into good shape to begin building your Shop.","type":"addons"},{"title":"Orders","permalink":"https://docs.grabaperch.com/addons/shop/orders/","id":"addons.shop.orders","excerpt":"This section of the documentation deals with the Page Functions and Template Tags that relate to listing and displaying Orders made through your shop. As with everything in Perch this information is fully templateable so you can display invoices, payment receipts and other information about the orders that a customer has made.","text":"This section of the documentation deals with the Page Functions and Template Tags that relate to listing and displaying Orders made through your shop. As with everything in Perch this information is fully templateable so you can display invoices, payment receipts and other information about the orders that a customer has made.\n\n## After an order is placed\n\nOnce a successful order is placed, we store the information about this Order. This will appear in the Perch Control Panel under Orders.\n\nYou can also display information about the Orders a Customer has made on your site. This enables the creation of a list of \"My Orders\" in a Customer Account, right through to the display of full tax invoices. See our section on [Tax](/addons/shop/tax) for important details about dealing with official tax and VAT invoices.","type":"addons"},{"title":"Requirements","permalink":"https://docs.grabaperch.com/addons/shop/requirements/","id":"addons.shop.requirements","excerpt":"The Shop app has its own set of technical requirements in addition to those of Perch itself.","text":"The Shop app has its own set of technical requirements in addition to those of Perch itself.\n\n* Perch Runway (recommended) or Perch 2.8.29 or above\n* PHP 5.4 or above, PHP 7 recommended\n* PHP cURL extension for communicating with gateways\n* PHP database connection with PDO\n\nThe Shop app is ideally suited to use with Perch Runway, and that's what we'd recommend for any store with more than a handful or products. Runway includes automated off-site backup functionality which is strongly recommended - you wouldn't want a server failure to result in the loss of trading history and customer data. For added a few light sales to a smaller site, the app will also work with Perch.\n\nAlthough PHP 5.4 is the technical lower limit for compatibility, this version of PHP has been end-of-lifed and no longer receives security updates. This is obviously a concern when building an ecommerce site. **We strongly recommend you use an actively maintained version of PHP, such as 5.5 or above.** Switching to PHP 7 would offer your site large performance improvements.","type":"addons"},{"title":"Products","permalink":"https://docs.grabaperch.com/addons/shop/products/","id":"addons.shop.products","excerpt":"These pages document the page functions and template tags specific to working with Perch Shop **Products** and **Brands**. On this page we have an overview of some of the functionality that is associated with Products and Brands to point you in the right direction when implementing your site.","text":"These pages document the page functions and template tags specific to working with Perch Shop **Products** and **Brands**. On this page we have an overview of some of the functionality that is associated with Products and Brands to point you in the right direction when implementing your site.\n\n## Adding products\n\nProducts are managed in the Perch Control Panel from the Products App. Each product has an SKU (a unique stock code - literally a _Stock Keeping Unit_), title, brand, one or more categories, a price, tax group, optional shipping dimensions.\n\n## Managing Product Data\n\nAs with everything in Perch you are in control of how the product is displayed on your site and can add additional fields and information to each product. This happens by adding fields to the **Product Master Template**. You can then create multiple additional templates to show part of that data in listings and in other places around your site.\n\nThe Master Template contains basic HTML markup as well as all of the required fields for creating a Product. This gives you a quick way of displaying a product on your site. Remember that you don't need to use any of the mark-up and can hide from displaying any fields you do not need to show.\n\nFind out more in the [Product Template docs](/templates/apps/shop/).\n\n### Product Options, Variants and Variant SKU Codes\n\nA product can have *options*. For a product like a t-shirt, these are things like size or colour. A product plus a option results in a *variant* of your product - a *large, blue* t-shirt.\n\nEach variation gets its own SKU, based on the product's SKU. Our t-shirt with the code `TSH101` might have small, medium and large variants in blue: `TSH101_S_BL`, `TSH101_M_BL`, `TSH101_L_BL` and in red: `TSH101_S_RE`, `TSH101_M_RE`, `TSH101_L_RE`.\n\nIt's worth taking a moment to consider the format of your SKU codes, as you'll ideally stick with them for the lifetime of your store.\n\n### Product Files\n\nProducts can be completely digital - for example an e-book - or a combination of physical and digital. An example of such a combination product would be a physical book that also has a PDF version, or a product that has an instruction manual available as a download.\n\nAfter creating a product you have the option to upload any files that are the product or part of the product.\n\nWhen a customer has bought a product that has one or more files attached, you can get a list of those files with [perch_shop_purchased_files()](/addons/shop/products/functions/perch-shop-purchased-files/). Normally the files will be access-restricted, so you can't just link to them to download. To download a restricted file, use [perch_shop_download_file()](/addons/shop/products/functions/perch-shop-download-file/).\n\n### Product Tags\n\nPerch Shop is tightly integrated with the Perch Members App. A Customer of your Shop is a Member in that system. Perch Members uses Tags in order that you can Tag members then check to see if a member has a certain tag before giving them access to content.\n\nYou can take advantage of this by adding a tag to your customer on successful purchase. This may just be so you can identify which customers own which products - however you can also use this to sell content \"behind a paywall\". You can create a Product that is access to part of your site, restrict that part of the Site by tag and then apply that tag to anyone who buys the Product.\n\n## Displaying products\n\nOnce you have some products added, you can display them on your page.\n\nUse [perch_shop_products()](/addons/shop/products/functions/perch-shop-products/) to display a list of products. This enables you to filter products by category, brand and so on. It's the main tool for displaying multiple products at once.\n\nWhen it comes to showing the details of a single product, use [perch_shop_product()](/addons/shop/products/functions/perch-shop-product/). This takes the _slug_ of the product as an argument - this will usually be part of the URL from your listing page.","type":"addons"},{"title":"Shipping","permalink":"https://docs.grabaperch.com/addons/shop/shipping/","id":"addons.shop.shipping","excerpt":"When a customer orders a physical product from your store, you need a way to deliver that product to them. Usually there's a cost involved in doing so depending on the method used to send the order and the location you're sending it to.","text":"When a customer orders a physical product from your store, you need a way to deliver that product to them. Usually there's a cost involved in doing so depending on the method used to send the order and the location you're sending it to.\n\nThis is what shipping methods and zones are for. You can configure them within the Shop app, under\n\n## Shipping zones\n\nShipping zones enable you to charge customers different amounts for delivering their order to different locations around the globe. By default, you must have at least one shipping zone if you intend to ship physical goods.\n\nShipping zones have a **title** and **slug** and a **description** for displaying on your site. When the **status** is set to active, the zone will be available for use.\n\nYou should always configure one **default zone**. This is the zone that's used when none of your other zones prove to be a more specific match for the customer's shipping location. The most basic configuration would have one zone, set to be the default. The default zone doesn't need to pick any countries from the list.\n\nTo create a more specific zone (e.g. *Mainland Europe*) select the countries from the list (France, Germany, Spain and so on).\n\nTo find a matching shipping zone for an order, Shop will look for a zone with the matching country, and if none is found will then use the default zone.\n\n## Shipping methods\n\nThe service your store offers to ship an order to a customer is known as a _shipping method_. Examples might include \"Free standard delivery\", \"Next day\" and so on.\n\nShipping methods can optionally apply to each of the shipping zones. For example, you might offer free standard postal delivery to local customers, but need to charge for a commercial parcel courier to deliver to a different country.\n\nNot all shipping methods are available for all orders. The contents of the cart and the location of the customer are examined to find which shipping methods will be available for any given order. This is based on the customer's shipping zone, along with value, weight and dimesion triggers set up on the method itself.\n\nA shipping method has a **title**, **slug** and **description**.\n\nThe **provider** is an optional field to describe which company is fulfilling that service. For example, for a \"Next day\" shipping method, the provider might be \"UPS\".\n\n### Prices\n\nIn the **Price to customer** section, you can specify the price the customer is charged for the shipping method according to the shipping zone. Each shipping zone is listed, along with an **available** checkbox to activate and deactivate the shipping method for the specified zone.\n\nThe **tax group** setting enables you to pick which tax group applies to shipping charges. You may want to create a tax group called \"Shipping\" to keep this distinct from your products, depending on the complexity of your local tax laws.\n\n### Value triggers\n\nIn the **Order value** section, you can set trigger values for the shipping method.\n\nThe **max order value** is the upper limit on the order value for this shipping method to apply. For example, if this limit was set at $100 and the order total came to $101, this shipping method would not be one of the available options.\n\nSimilarly, the **min order value** sets the lower limit. If this was set to $50, this shipping method would not be available for an order valued at $49, but would be for an order valued at one dollar more.\n\nThese value triggers are useful for setting up different shipping prices based on the value goods ordered.\n\n### Weight triggers\n\nUnder **applicable weights** the minimum and maximum weights can be set. Product weights are summed to determin if the weight limit applies.\n\nIf your provider charges differently based on item weight, you can use the **min weight** and **max weight** options to make different shipping methods available for different weights of order. Or you may be able to offer free shipping up to a certain weight, but then need to charge for a more expensive method after that point.\n\nThe units used for weights are up to you. You should be sure to use consistant units across your products and shipping methods. Values are summed without respect to the type of units they might represent.\n\n### Size triggers\n\nIn the **applicable dimensions** section, you can set the **max width**, **height** and **depth** for a product. Again, the units are up to you.\n\nNo attempt is made to try and combine mutliple products into boxes of a given size - the dimensions are simply a maximum and are triggered by the largest product in any dimesion within the order. If an order contains an item that is 2000mm wide and the max width is set as 1500mm, the shipping method will no be available to choose.","type":"addons"},{"title":"Tax","permalink":"https://docs.grabaperch.com/addons/shop/tax/","id":"addons.shop.tax","excerpt":"_N.B. Any examples included are for illustrative purposes and do not constitute tax advice._","text":"_N.B. Any examples included are for illustrative purposes and do not constitute tax advice._\n\nPerch Shop implements a comprehensive location based tax system. We give you the tools to comply with a variety of VAT and sales tax situations. None of what we provide should be considered tax advice or \"out of the box\" compliance as what you need to do varies with the types of products sold and the location your company is based. In this section of the documentation we will explain some typical scenarios and how to deal with them in Perch Shop as a basis for your implementation.\n\nIf you find that Perch Shop does not enable compliance with a particular tax requirement let us know. We want to make sure you have the tools you need to be confident in the solutions you build.\n\nYou can find the options for configuring tax in the Shop app under Tax.\n\n## List of tax-related features\n\nA short list of things that enable tax compliance in Perch Shop.\n\n- **Location based tax system**: charge VAT based on the location of your Buyer, rather than the location of the Store.\n- **Tax \"evidence collection\"**: we store location evidence for customers. Schemes such as the EU VAT MOSS require you can prove you charged the correct amount of VAT based on Buyer Location.\n- **Sequential invoice numbering**: invoice numbers not linked to database ID.\n- **Multiple tax rates and locations in one order**: Sell and digital download AND a physical product. Different rates may apply and one product may be charged at the home location or the store and another at the Buyer location. We can do that.\n- **Show tax amount in reporting currency** - even if you take payment in another currency.\n- **Enter prices tax inclusive or tax exclusive** - depending on how you wish to show and charge taxes.\n\n## Tax Locations\n\nSome tax systems require you to charge customers different rates of tax based on their location in the world. To deal with this we have **tax locations**.\n\nA tax location has a **title** and consists of a country and a number of **tax rates**. These rates should reflect the different rates of tax that are payable in that location. For example, in the UK we charge customers _value added tax_ (VAT) at a standard rate of 20%. For some types of goods such as children's car seats there is a reduced rate of 5%. Other items such as books are taxed at 0%.\n\nTo mimic this in my tax location, I'd set the **country** to United Kingdom and set up rates as follows:\n\n|Title|Rate %|\n|--|--|\n|Standard|20|\n|Reduced|5|\n|Exempt|0|\n\n\nIf the tax location represents the location the shop trades from, check the **home location** box. If the tax location should be used when no more specific matches are found (e.g. a \"rest of world\" location), check the **default location** box.\n\nA minimal configuration would be to create one tax location and set it as both home and default locations.\n\n\n## Tax Groups\n\nDifferent types of products and services are taxed in different ways. For example, in the EU we have to charge tax on digital products and services according to a different set of rules than physical products and services. A music album sold as an MP3 would have different tax rules applied to it than the same album sold as a CD.\n\nTo make these different types of rules easy to work with, we have Tax Groups. You'd create a group to group together all the things that are taxed in the same way. When adding a product, you pick which group it belongs to and it gets that set of rules applied. When selling music, you might create a group called \"Physical goods\" and one called \"Digital goods\". The CD would go in the former and the MP3 in the latter.\n\nEach tax group has a **title** to identify it, and you choose whether **tax is charged at** the buyer's rate (based on the customer's location) or the seller's rate (based on your store location). To use our music example, the physical CD might be charged at the seller's rate, but the MP3 could be charged at the buyer's rate.\n\nIn the **location tax rates** section you can set which rate of tax applies to the group for each of your tax locations. For example, an item such as an ebook might be charged at the standard rate in one country, but at a reduced rate in another. You can set that here.","type":"addons"},{"title":"Updating","permalink":"https://docs.grabaperch.com/addons/shop/updating/","id":"addons.shop.updating","excerpt":"Updating the Shop App is usually a case of replacing the four apps used by shop - `perch_shop`, `perch_members`, `perch_products` and `perch_orders` in `perch/addons/apps`. See the [Changelog](/addons/shop/changelog) for details of what has changed between the version you are updating from and the latest.","text":"Updating the Shop App is usually a case of replacing the four apps used by shop - `perch_shop`, `perch_members`, `perch_products` and `perch_orders` in `perch/addons/apps`. See the [Changelog](/addons/shop/changelog) for details of what has changed between the version you are updating from and the latest.","type":"addons"},{"title":"Add to Cart with Options","permalink":"https://docs.grabaperch.com/addons/shop/examples/add-to-cart-options/","id":"addons.shop.examples.add-to-cart-options","excerpt":"In this example we have a more complex form, including product option tags to create a selection for the user to choose their options before adding the item to the cart.","text":"In this example we have a more complex form, including product option tags to create a selection for the user to choose their options before adding the item to the cart.\n\n```html\n<perch:if id=\"catalog_only\" value=\"0\">\n  <perch:form id=\"add_to_cart\" app=\"perch_shop\" action=\"/cart\">\n    <perch:if exists=\"has_variants\">\n      <perch:productopts>\n        <h3><perch:productopt id=\"title\"></h3>\n        <perch:productvalues>\n          <perch:before><ul></perch:before>\n            <li>\n              <label>\n                <perch:input id=\"options\" name=\"opt-<perch:productvalue id=\"optionID\">[]\"\n                  value=\"<perch:productvalue id=\"valueID\">\" type=\"radio\" required=\"required\">\n                <perch:productvalue id=\"valueTitle\">\n              </label>\n            </li>\n          <perch:after></ul></perch:after>\n        </perch:productvalues>\n      </perch:productopts>\n    </perch:if>\n    <perch:input id=\"product\" type=\"hidden\" value=\"<perch:shop id=\"productID\" type=\"hidden\" env-autofill=\"false\">\">\n    <perch:input type=\"submit\" value=\"Add to cart\">\n  </perch:form>\n<perch:else>\n  <p>This item is available in-store only.</p>\n</perch:if>\n```","type":"addons"},{"title":"Add to Cart Function","permalink":"https://docs.grabaperch.com/addons/shop/examples/add-to-cart-php/","id":"addons.shop.examples.add-to-cart-php","excerpt":"You can add an item to the cart programmatically using the `perch_shop_add_to_cart()` function:","text":"You can add an item to the cart programmatically using the `perch_shop_add_to_cart()` function:\n\n```php\nperch_shop_add_to_cart(1234);\n```\n\nThis can be useful if you're not intending to expose the cart functionality to your users. For example, for a single product store you could automatically add your item and direct the user immediately into the checkout flow without them ever needing to know about a cart.","type":"addons"},{"title":"Selling digital downloads","permalink":"https://docs.grabaperch.com/addons/shop/examples/digital-downloads/","id":"addons.shop.examples.digital-downloads","excerpt":"If you are selling digital products, you will need to offer the customer some way to see and download their purchases after checkout. You may even want to make this part of an account area where customers can return and access products they've purchased in the past.","text":"If you are selling digital products, you will need to offer the customer some way to see and download their purchases after checkout. You may even want to make this part of an account area where customers can return and access products they've purchased in the past.\n\n## Listing the files the customer has purchased\n\nYou can use the `perch_shop_purchased_files()` function to output a list of files the customer has purchased, sorted by product the files belong two. (For example, if the use has purchased an ebook, they might have available files in Epub and Mobi format.)\n\n```php\n<?php\n  perch_shop_purchased_files();\n?>\n```\n\nThe default template used for the listing is `shop/products/files_list.html`. You can copy and edit this template, or specify your own.\n\n```php\n<?php\n  perch_shop_purchased_files([\n    'template' => 'my_template.html',\n  ]);\n?>\n```\n\n## Setting up the resource bucket\n\nYou;ll need to create a new bucket that stores its files outside the web root. If you don’t have a `perch/config/buckets.php` file, create one like the example below. The `secure` folder (or whatever you choose to call it) should be above the `public_html` folder, i.e. outside of your web root, so that customers can't download the file without paying.\n\n```php\n<?php\n  return [\n    'secure' => [\n      'web_path'  => '/shop/deliver/',\n      'file_path' => '/path/to/sites/secure',\n    ],\n  ];\n?>\n```\n\nOne your bucket is configured, update your copy of the `shop/products/file.html` template to add your bucket to the file upload field\n\n```html\n<perch:shop id=\"file\" label=\"File\" type=\"file\" order=\"2\" bucket=\"secure\">\n```\n\nThe items in the listing will typically link to a special page for delivering the secure download.\n\n```html\n<a href=\"/shop/deliver/1234\">Download</a>\n```\n\n## The secure download page\n\nYour download page needs to read in the file ID from the URL, check that the customer has permission to access the file, and then deliver it.\n\nFor example, if your page route is `shop/deliver/[i:file]` then the following would be all that is required.\n\n```php\n<?php\n  // config\n  $url_param \t = 'file';\n\n  // Check a member is logged in and has purchased the file\n  if (perch_member_logged_in()) {\n    if (perch_shop_customer_has_purchased_file(perch_get($url_param))) {\n      perch_shop_download_file(perch_get($url_param));\n    }\n  }\n\n  exit;\n```","type":"addons"},{"title":"Display the Cart","permalink":"https://docs.grabaperch.com/addons/shop/examples/display-cart/","id":"addons.shop.examples.display-cart","excerpt":"To display the cart (on your `/cart` page perhaps), use:","text":"To display the cart (on your `/cart` page perhaps), use:\n\n```php\nperch_shop_cart();\n```\n\nThis displays a full traditional cart layout, based on the `shop/cart/cart.html` template. You can customize this to display whatever information you like, in whatever format you need it. That could be stripped down to basics, or embellished with more. Don't be constrained by the default, it's not very creative and just exists to get you off the starting blocks.\n\nAs ever, a template would be specified with:\n\n```php\nperch_shop_cart([\n    'template' => 'cart/mini-cart.html',\n]);\n```\n\nYou might use a full cart template to display the complete cart, and then pass in a small template for a mini cart dropdown just showing how many items the customer has in their cart. It really is up to you.","type":"addons"},{"title":"Empty the Cart","permalink":"https://docs.grabaperch.com/addons/shop/examples/empty-cart/","id":"addons.shop.examples.empty-cart","excerpt":"You can empty the cart with:","text":"You can empty the cart with:\n\n```php\nperch_shop_empty_cart();\n```\n\nThis can be used in the shopping process to let the user empty their cart.\n\nYou will also want to call this function after a successful payment has been made in order to remove the purchased items from the cart.","type":"addons"},{"title":"Managing addresses","permalink":"https://docs.grabaperch.com/addons/shop/examples/managing-addresses/","id":"addons.shop.examples.managing-addresses","excerpt":"When a customer checks out, they add at least one address (billing address) against their account. You can provide address book-like functionality, enabling customers to manage the addresses they have on file with you.","text":"When a customer checks out, they add at least one address (billing address) against their account. You can provide address book-like functionality, enabling customers to manage the addresses they have on file with you.\n\nTo show a customer a list of their addresses:\n\n```php\n<?php\n  perch_shop_customer_addresses();\n?>\n```\n\nFrom this list, you can link to a page to edit an address. For example, if your edit page was\n\n`/address/edit/123`\n\nwith a Runway route of\n\n`address/edit/[i:addressID]`\n\nYou could produce an edit form using:\n\n```php\n<?php\n  perch_shop_edit_address_form(perch_get('addressID'));\n?>\n```\n\n## Asking a customer to choose an address\n\nDuring checkout, you may want to ask the customer to nominate a billing and shipping address from their address book.\n\n```php\n<?php\n  if (!perch_shop_addresses_set()) {\n    perch_shop_order_address_form();\n  }\n?>\n```\n\nIf an address hasn't been set for the order, this will display a list of the customer's addresses for them to be able to pick addresses to use for this order.","type":"addons"},{"title":"Paying without creating an account","permalink":"https://docs.grabaperch.com/addons/shop/examples/no-account/","id":"addons.shop.examples.no-account","excerpt":"Although an account is always created when a new customer buys from your store, you don't need to present any evidence of it to them. The information needed for an account is the same as needed for processing a payment (name, email address and postal address), with the exception of a password.","text":"Although an account is always created when a new customer buys from your store, you don't need to present any evidence of it to them. The information needed for an account is the same as needed for processing a payment (name, email address and postal address), with the exception of a password.\n\nIf you wish to allow users to register without a password you can set the password field to the special value `__auto__`.\n\nWhen this value is set, Perch will automatically generate a random password for the account. In order to log into the account again, the recovery route is for the user to then reset their password.\n\n```html\n<perch:input type=\"hidden\" id=\"password\" value=\"__auto__\">\n```\n\nShop comes with a default `customer_create_passwordless.html` template that does this:\n\n```php\n<?php\n  perch_shop_registration_form([\n    'template' => 'checkout/customer_create_passwordless.html'\n  ]);\n?>\n```\n\n## Setting a password later\n\nAfter checkout, you might want to encourage the customer to 'adopt' their account by setting a password. This will save them time in the future, as well as helping you keep track of customers and keep your user accounts clean, so it's well worth it.\n\nTo do so, present the customer with a form:\n\n```php\n<?php\n\tif (perch_member_is_passwordless()) {\n\t\tperch_member_form('set_password');\n\t}\n?>\n```\n\nIn the `templates/members/forms` folder, create `set_password.html` something like this::\n\n```html\n<perch:form id=\"password\" method=\"post\" app=\"perch_members\">\n\t<div>\n\t\t<perch:label for=\"password\">Password</perch:label>\n\t\t<perch:input type=\"password\" id=\"password\" required match-with=\"password2\">\n\t\t<perch:error for=\"password\" type=\"required\">Please enter a new password</perch:error>\n\t\t<perch:error for=\"password\" type=\"match\">Passwords do not match</perch:error>\n\t</div>\n\t<div>\n\t\t<perch:label for=\"password2\">Repeat your password</perch:label>\n\t\t<perch:input type=\"password\" id=\"password2\" required>\n\t\t<perch:error for=\"password2\" type=\"required\">Please repeat your password</perch:error>\n\t</div>\n\t<div>\n\t\t<perch:input type=\"submit\" value=\"Create my account\">\n\t\t<perch:input type=\"hidden\" id=\"token\">\n\t\t<perch:input type=\"hidden\" id=\"old_password\" value=\"__auto__\">\n\t</div>\n</perch:form>\n```\n\nThe key part here is making sure you declare the old password as `__auto__`, as normally you'd ask a user for their current password when setting a new one. This bypasses that, as long as the current password stored in the database is not set.\n\n```html\n<perch:input type=\"hidden\" id=\"old_password\" value=\"__auto__\">\n```","type":"addons"},{"title":"Creating a checkout without a cart","permalink":"https://docs.grabaperch.com/addons/shop/examples/no-cart/","id":"addons.shop.examples.no-cart","excerpt":"While bigger stores will usually make use of a full shopping cart, small stores selling only a few items might want to skip this step.","text":"While bigger stores will usually make use of a full shopping cart, small stores selling only a few items might want to skip this step.\n\nTruth be told, Perch Shop always needs a cart. Items, tax, shipping and discounts are always collected together in a cart before that cart is converted into something that can be paid for. The trick here is that none of this needs to be revealed to the customer. Your site can leave the cart in the background as a concept that never makes it onto the page in a way the customer would recognise as a cart.\n\n## Adding a buy now button\n\nThe main way a cartless process works is to have some sort of simple \"buy now\" button that starts the checkout process right from the product page.\n\nIn your product template (often `shop/products/product.html`):\n\n```html\n<perch:form id=\"add_to_cart\" app=\"perch_shop\" action=\"/checkout\">\n    <perch:input id=\"product\" type=\"hidden\" env-autofill=\"false\"\n        value=\"<perch:shop id=\"productID\" type=\"hidden\">\">\n    <perch:input type=\"submit\" value=\"Buy now\">\n</perch:form>\n```\n\nThis is basically a standard add-to-cart form, the crucial differences being:\n\n1. We've changed the messaging to say \"Buy now\" rather than \"Add to cart\"\n2. The form `action` is set to post to the URL of the next page in your checkout process, rather than a cart page\n\nThe cart will still happen in the background, but there's no need to display it.\n\nIf your products have options (like MP3 or CD format for a music album) then you'll need to include a way for the customer to pick the option they need:\n\n```html\n<perch:form id=\"add_to_cart\" app=\"perch_shop\" action=\"/checkout\">\n  <perch:productopts>\n    <perch:productvalues>\n      <perch:before><ul></perch:before>\n      <li>\n          <label>\n              <perch:input id=\"options\" name=\"opt-<perch:productvalue id=\"optionID\">[]\"\n                value=\"<perch:productvalue id=\"valueID\">\" type=\"radio\" required=\"required\">\n              <perch:productvalue id=\"valueTitle\">\n          </label>\n      </li>\n      <perch:after></ul></perch:after>\n    </perch:productvalues>\n  </perch:productopts>\n  <perch:input id=\"product\" type=\"hidden\" env-autofill=\"false\"\n    value=\"<perch:shop id=\"productID\" type=\"hidden\" env-autofill=\"false\">\">\n  <perch:input type=\"submit\" value=\"Buy now\">\n</perch:form>\n```\n\n## Next steps\n\nUsually your next step will be collect the customer's details such as name and address in order to be able to calculate tax and shipping. You may want to offer the option to [checkout without an account](/addons/shop/examples/no-account) to streamline the process.\n\nAfter that point you'll probably need to [reconfirm the details of the order](/addons/shop/examples/order-confirmation) to the customer so that they can see the final amount they need to pay. If that's the case, remember that what you show doesn't need to look like a cart, and you can display as much or as little information as your situation demands.","type":"addons"},{"title":"Handling payment results","permalink":"https://docs.grabaperch.com/addons/shop/examples/payment-result/","id":"addons.shop.examples.payment-result","excerpt":"When the customer returns from the payment provider, it's useful to show a response indicating that their payment has been successful, or to provide instructions if it has not.","text":"When the customer returns from the payment provider, it's useful to show a response indicating that their payment has been successful, or to provide instructions if it has not.\n\nAll this happens on the page you set as the `return_url` option when making a call to `perch_shop_checkout()`. There may be more you need to do on this page depending on your gateway, so be sure to check the specific [gateway documentation](/addons/shop/gateways/) for whichever system you're using.\n\nThis example deals with displaying feedback to the customer only.\n\n```php\n<?php\n// Has the order been succcessfully placed?\nif (perch_shop_order_successful()) {\n\n    // Yes! Show a success message\n    perch_content('Order successful');\n\n    // Redisplay the details of the order\n    perch_shop_order_items(\n        perch_shop_successful_order_id()\n    );\n\n}else{\n\n    // Payment problem! Show instructions to the customer\n    perch_content('Payment not successful');\n}\n?>\n```\n\nThis example uses standard `perch_content()` regions to make the content editable. This is a good idea as it enables whoever manages the shop to be able to respond to any problems they see with clearer messaging.","type":"addons"},{"title":"Creating an order confirmation step","permalink":"https://docs.grabaperch.com/addons/shop/examples/order-confirmation/","id":"addons.shop.examples.order-confirmation","excerpt":"This describes ways to add a final confirmation step to your checkout before going to payment.","text":"This describes ways to add a final confirmation step to your checkout before going to payment.\n\n## Displaying details of the final order\n\nIn the most basic instance, it's useful to reconfirm the order items, shipping, tax, total payment and the addresses being used. You can do this by redisplaying the cart using a different template. This template would replace the interactive parts (like the quantity fields) with just normal text.\n\nThere's a default template included for this, `cart/cart_static.html`.\n\n```php\n<?php\n    // Show the cart with a non-interactive template\n    perch_shop_cart([\n        'template'=>'cart/cart_static.html'\n    ]);\n\n    // Show the order addresses\n    perch_shop_order_addresses();\n\n\n    // Show the payment form\n    perch_shop_payment_form('stripe');\n?>\n```\n\nThere's nothing special about the template - you can create your own, replacing the fields with text.\n\n## Agreeing to Terms and Conditions\n\nSometimes you want to ask the customer to agree to a set of Terms and Conditions before accepting the order. This is easy to do using _cart properties_, and an example set of templates are included with the app for this purpose.\n\nThe principal in this example is that our option to proceed on to payment with (in this case) Stripe is withheld until a form with a checkbox has been submitted and validated.\n\n```php\n<?php\n// Have T&Cs been agreed to?\nif (!perch_shop_cart_has_property('terms_agreed')) {\n\n    // Show the cart with a non-interactive template\n    perch_shop_cart([\n        'template'=>'cart/cart_static.html'\n    ]);\n\n    // Show the order addresses\n    perch_shop_order_addresses();\n\n    // Display the form with the T&Cs checkbox\n    perch_shop_form('checkout/confirm.html');\n\n}else{\n\n    // T&Cs are agreed, so on to the payment step!\n    perch_shop_payment_form('stripe');\n}\n?>\n```\n\nThe form in the `checkout/confirm.html` template contains a checkbox with the `cart-property=\"terms_agreed\"` attribute:\n\n```html\n<perch:input type=\"checkbox\" value=\"true\" id=\"terms\" cart-property=\"terms_agreed\" required>\n```\n\nThis means that the value of the field will be stored in the cart property `terms_agreed`, which we can test for with:\n\n```php\n<?php\nif (perch_shop_cart_has_property('terms_agreed')) {\n    # the terms_agreed property has been set.\n}\n?>\n```","type":"addons"},{"title":"Create a customer account","permalink":"https://docs.grabaperch.com/addons/shop/examples/create-account/","id":"addons.shop.examples.create-account","excerpt":"To check out, you need to know the customer's name and address. An example flow might look like the following. If a member is not logged in, we show both","text":"To check out, you need to know the customer's name and address. An example flow might look like the following. If a member is not logged in, we show both\n\n1. a login form for returning customers, and\n2. a registration form for new customers\n\n```php\n<?php\n  if (!perch_member_logged_in()) {\n    // Returning customer login form\n    perch_shop_login_form();\n\n    // New customer sign up form\n    perch_shop_registration_form();\n  }\n?>\n```\n\nIf you wanted to skip this step for logged in customers, you could redirect them to the next step at the top of your page:\n\n```php\n<?php\n  if (perch_member_logged_in()) {\n    PerchSystem::redirect('/next/checkout/step');\n  }\n?>\n```\n\nOnce a customer is signed in, you can send them to your payment step.","type":"addons"},{"title":"Simple Add to Cart Form","permalink":"https://docs.grabaperch.com/addons/shop/examples/simple-add-to-cart-form/","id":"addons.shop.examples.simple-add-to-cart-form","excerpt":"The majority of the time you will give your customer the ability to add a product to their cart by way of displaying a form along with the product, using a template.","text":"The majority of the time you will give your customer the ability to add a product to their cart by way of displaying a form along with the product, using a template.\n\n```html\n<perch:form id=\"add_to_cart\" app=\"perch_shop\" action=\"/cart\">\n  <perch:input id=\"product\" type=\"hidden\" value=\"<perch:shop id=\"productID\" type=\"hidden\">\">\n  <perch:input type=\"submit\" value=\"Add to cart\">\n</perch:form>\n```\n\nThis will add the product (with `productID`) to your cart. The form has `action=\"/cart\"` set, so the user will be taken to the URL `/cart` where presumably there is a cart to show. You can change this to suit your needs.","type":"addons"},{"title":"Sell content behind a paywall","permalink":"https://docs.grabaperch.com/addons/shop/examples/sell-content-behind-a-paywall/","id":"addons.shop.examples.sell-content-behind-a-paywall","excerpt":"The Members App is key in Shop. Your store Customers become Members so you get all of the expected Account creation tools – creating and resetting passwords, updating addresses and so on. Using the Members App as part of Shop also makes selling access to content via Shop incredibly easy.","text":"The Members App is key in Shop. Your store Customers become Members so you get all of the expected Account creation tools – creating and resetting passwords, updating addresses and so on. Using the Members App as part of Shop also makes selling access to content via Shop incredibly easy.\n\n## Securing content\n\nTo get set up you need to secure your content. There are a few ways you can do this. If you want to secure entire pages then you go into the Page Options and in the Details section of that Page you will see an option to “Restrict Access to Members with Tags”. Here you can add a tag or tags that a Member needs to have to see the content.\n\n## Securing a page\n\nThere are also Members App Page Functions and Template Tags to help you secure content or just parts of content in Regions and in Runway Collections. For example you can check to see if a Member has the tag ‘paidcontent’ using a function in your page.\n\n```php\nif (perch_member_has_tag(‘paidcontent’)) {\n  // do some stuff here\n}\n```\n\nOr you can restrict parts of the content in a Region or Collection via your template with Template Tags.\n\n```html\n<perch:member has-tag=\"paidcontent\">\n  <p>You can download your content here.</p>\n<perch:else:member>\n  <p>You need to be a subscriber to see this!</p>\n</perch:member>\n```\n\nTake a look at the documentation to see what else you can do with these Member Tags and Functions.\n\n## Downloadable products\n\nThe Perch Members App can also secure downloads. Check out the documentation for details. You could list available downloads on a page, and use the Template Tags to check if the logged in Member has access to download each one.\n\n## Assigning access on payment\n\nYou then need to assign a tag to the customer on payment. Set up the paid access as a Product in Perch Shop. In the Products App in the Perch Control Panel, select Tags in the Smart Bar and you can now add tags to apply when that product is purchased.\n\n## Adding tags to a product\n\nThese tags can persist indefinitely or you can set them to expire (if the person is buying access for a certain period).\n\nWhen this product is successfully purchased, Perch will apply the tag to the Member and they will then be able to see the secured content.\n\nThat’s it! You can now sell access to your download, e-book, video or articles.","type":"addons"},{"title":"Tax Invoices","permalink":"https://docs.grabaperch.com/addons/shop/tax/tax-invoices/","id":"addons.shop.tax.tax-invoices","excerpt":"Different tax regimes have different rules for invoicing. In particular the rules on VAT invoicing within the EU are complex. We cannot advise as to whether any particular invoice is a correct VAT invoice (you should check this with your accountant) but we believe we have the tools available to create correct invoices.","text":"Different tax regimes have different rules for invoicing. In particular the rules on VAT invoicing within the EU are complex. We cannot advise as to whether any particular invoice is a correct VAT invoice (you should check this with your accountant) but we believe we have the tools available to create correct invoices.\n\nIf you are building a site for a client it is worth finding out if they need the system to display full tax invoices. Sometimes they may prefer to just display a payment receipt and allow people to request a full VAT invoice if they need it (especially if you are mostly selling to consumers). This would allow you to send and/or display simpler invoices.\n\nThe following are some ways in which Perch Shop can help you create tax invoices.\n\n## Displaying tax in your home currency\n\nIf you take payment in a currency that is not the currency you report your tax in, then you may be obligated to display the tax amount in your home currency on invoices.\n\nThis is the case within the European Union (EU) for VAT. If you are based in the UK but price your products in USD you will still need to display the amount of VAT charged in GBP.\n\nUnder Settings in Perch you can set your Reporting Currency. This is the currency you use for tax reporting and can be different from your default currency - for example a UK store selling software to a global audience may decide to price in USD.\n\nWhen you set up a Currency under Shop > Currencies you can then set an exchange rate there for this currency to use. This can be displayed in the invoice to meet any obligation to do so.\n\n```html\n    <div class=\"conversion-rates\">\n      <div class=\"rate\"><strong>GBP Equivalent Conversion</strong>\n      <br>1 GBP = <perch:shop id=\"exchange_rate\"> USD</div>\n      <table>\n        <tr>\n          <th>VAT Rate</th>\n          <th>Net Amount</th>\n          <th>VAT</th>\n        </tr>\n        <perch:taxrates>\n        <tr>\n          <td><perch:taxrate id=\"tax_rate_formatted\"></td>\n          <td><perch:taxrate id=\"reporting_value_formatted\"></td>\n          <td><perch:taxrate id=\"reporting_tax_formatted\"></td>\n        </tr>\n        </perch:taxrates>\n      </table>\n    </div>\n```html\n\n### Choosing a currency rate\n\nYour tax authority will give you guidance on allowable sources of currency rates. For example HMRC publishes the [UK rates here](https://www.gov.uk/government/publications/hmrc-exchange-rates-for-2016-monthly). You or your customer would need to ensure your exchange rates are updated.\n\nIt is possible to use a \"live\" rate from elsewhere. We are currently able to get the rate used when Stripe converts a payment in an alternate currency to your bank account currency, so you could use this in your invoicing however if you do so you or your client must get official approval from the tax authority to do so. **Check with your accountant**.\n\n## Displaying the amount of tax taken at each tax rate\n\nTypically purchase tax includes tax at different rates. A Standard Rate, a Reduced Rate and then items that are Zero rated. A mixed order could include items from more than one tax rate and on your invoice you would need to show the amount of tax charged at each rate. Perch Shop can cope with this requirement, and the `<perch:taxrates></perch:taxrates>` tags will enable you to loop through the tax rates applicable to your order and display each item. For example, assuming I had collected 5.80 at 20% and 2.20 at 5.5%. The following code would output two table rows, one row for each tax percentage.\n\n```html\n    <perch:taxrates>\n      <tr>\n        <th>Total VAT <perch:taxrate id=\"tax_rate_formatted\"></th>\n        <td><perch:taxrate id=\"total_tax\"></td>\n      </tr>\n    </perch:taxrates>\n```\n\nFor more details on the tags you can use to display an invoice or purchase receipt see Orders > Template Tags.\n\n## Sequential Invoice Numbers\n\nIn order to comply with sequential invoice numbers we create an invoice number only on a successful order (rather than you needing to use the database ID that may include failed or abandoned orders). You can choose a prefix or suffix for the invoice number by editing the value in Perch Settings, Invoice Number Format. The `%d` is the sequential number. You can add in there any other string you like.","type":"addons"},{"title":"Tax Setup","permalink":"https://docs.grabaperch.com/addons/shop/tax/setup/","id":"addons.shop.tax.setup","excerpt":"Much of the tax configuration is done via the Perch Control Panel in order that the store owner can update tax rates in future without needing to do anything in the code. The initial setup can take a little time but once set up it should just be a case of updating tax rates if they change.","text":"Much of the tax configuration is done via the Perch Control Panel in order that the store owner can update tax rates in future without needing to do anything in the code. The initial setup can take a little time but once set up it should just be a case of updating tax rates if they change.\n\n## In Settings\n\nUnder Settings, and check the value of the \"Prices are entered as\" setting. Usually this will be Tax Exclusive, but change it if you need to. Save the settings if you made changes or not.\n\nAlso in Settings ensure the Reporting Currency is set as the currency you need to report for tax in. You should already have set up your currencies before doing this.\n\n## Shop App > Tax\n\nSelect the Shop app from the Apps menu and go to Tax. Here we can set up tax groups and locations.\n\n### Tax Locations\n\nGo to Locations and add a new entry for the home location of your store. Check the box to make it the home location.\n\nIf you know that you need to charge tax at the rate of the buyer as opposed to the rate in the home location of the store you will also need to set up a Location here for each country you sell to. This situation is that which applies to anyone selling digital products within the EU and needing to submit VAT MOSS returns.\n\n**IMPORTANT:** Make sure that after setting up tax locations you go and save the form under Tax Groups. This will ensure the group and location data is linked in the database.\n\n### Tax Groups\n\nStaying within Tax, go to Groups and add a new tax group for the type of things you need to charge different rates of tax for. Examples might be \"Digital products\", \"Children's clothing\" or \"Shipping\". Most sales tax regimes have different tax charged on different things. For example in the UK we have items that VAT applies to, items that have a reduced rate of VAT and items that do not have VAT added.\n\nFor each group you can set whether tax is charged at the Buyer's Rate or the Seller's (Shop location) rate. You can also set the level of tax that group has applied and do this on a location by location basis.\n\n## A worked example\n\nMy home location is the United Kingdom and I am registered for VAT in the UK. My store sells e-books (a digital product), books (a zero-rated physical product) and t-shirts (a physical product). The e-books and t-shirts attract standard rate VAT in the UK, physical books however are zero-rated.\n\nIn Settings I chose to enter prices as tax exclusive and set my Reporting Currency as GBP.\n\nUnder locations I set up United Kingdom as my home location and configure two VAT rates - standard at 20% and zero-rated at 0.\n\nI also want to sell to France and Germany. So I setup France and Germany as Locations and add their VAT rates. I get the rates from the [VAT Live website](http://www.vatlive.com/vat-rates/european-vat-rates/eu-vat-rates/) and I can see that France has a rate of 5.5% on Books, other products being charged at 20%. Germany has a rate of 7% on Books and 19% on other goods and services.\n\nNote that e-books are typically classed as a Service in the world of EU VAT and so attract the standard and NOT the reduced VAT rate.\n\nUnder groups I add three groups:\n\n- Digital Products\n- Physical Products\n- Books\n\nDigital Products are my e-books. Due to the EU VAT rules these are taxed at the Buyer's Rate and I choose the Standard Rate of VAT for all three locations.\n\nPhysical Products are my t-shirts. These are taxed within the EU at the home location of the store. So I set these to Seller's Rate.\n\nBooks and treated differently. They are taxed at the Seller's Location so that means they are zero-rated in my case even if bought by someone in France or Germany.","type":"addons"},{"title":"Braintree","permalink":"https://docs.grabaperch.com/addons/shop/gateways/braintree/","id":"addons.shop.gateways.braintree","excerpt":"*Gateway slug:* `braintree`","text":"*Gateway slug:* `braintree`\n\nThese are instructions for Braintree token-based payment using the Drop-in Payment UI route.\n\n## Settings\n\nIn your `perch/config/shop.php` file, add your settings for Braintree.\n\n```php\n<?php\n  return [\n    'gateways' => [\n      'braintree' => [\n        'enabled'   => true,\n        'test_mode' => true,\n        'live' => [\n          'merchantId'  => 'abc123',\n          'publicKey'   => 'def456',\n          'privateKey'  => 'efghijklmnop987654321',\n        ],\n        'test' => [\n          'merchantId'  => 'abc123',\n          'publicKey'   => 'def456',\n          'privateKey'  => 'efghijklmnop987654321',\n        ],\n      ],\n    ],\n  ];\n?>\n```\n\n## Payment flow\n\nThe process for Braintree involves adding the Braintree JavaScript to the page in a step before calling `perch_shop_checkout()`. This enables you to collect the Braintree payment token and pass it as the option for payment.\n\n```php\n<?php\nif (perch_member_logged_in() && perch_post('payment_method_nonce')) {\n\n  // your 'success' return URL\n  $return_url = 'http://mysite.com/payment/braintree';\n\n  perch_shop_checkout('braintree', [\n    'return_url' => $return_url,\n    'token'      => perch_post('payment_method_nonce')\n  ]);\n}\n?>\n```\n\nAnd then collect the token on the page with `braintree.js`:\n\n```php\n<?php\n  perch_shop_payment_form('braintree');\n?>\n```\n\nWhen the form is posted back to the same page, the token will be set and so the checkout process will kick in.","type":"addons"},{"title":"Klarna","permalink":"https://docs.grabaperch.com/addons/shop/gateways/klarna/","id":"addons.shop.gateways.klarna","excerpt":"*Gateway slug:* `klarna`","text":"*Gateway slug:* `klarna`\n\nThese are instructions for Klarna payments.\n\n## Settings\n\nKlarna is available to the following countries:\n```\nAustralia, Austria,Belgium, Canada,Czech Republic,Denmark\",Finland,France,Germany,Greece,Hungary,Ireland (Republic of Ireland)\n,Italy,Mexico,Netherlands,New Zealand,Norway,Poland,Portugal,Romania,Slovakia,Spain, Sweden,  Switzerland,United Kingdom, United States\n```\nIn your `perch/config/shop.php` file, add your settings for Klarna.\n\n```php\n<?php\n  return [\n    'gateways' => [\n      'klarna' => [\n        'enabled'   => true,\n        'test_mode' => true,\n        'live' => [\n            'secret_key'      => 'klarna_api_secret',\n             'publishable_key' => 'klarna_api_key',\n             'merchantId' =>  'klarna_api_merchant_id',\n\n        ],\n        'test' => [\n         \n            'secret_key'      => 'klarna_api_secret',\n             'publishable_key' => 'klarna_api_key',\n             'merchantId' =>  'klarna_api_merchant_id',\n\n        ],\n      ],\n    ],\n  ];\n?>\n```\n\n\n## Getting your Klarna test credentials\n\nTo start testing with klarna, you need to create an account in the Klarna Playground, and then get API credentials for that account. These go into your Shop config file.\n\nOnce you’ve registered your Klarna Merchant Account, you can get test credentials by following these steps:\n\n1.Log in to your Klarna Merchant Portal.\n\n2.Navigate to the API or Integration section (it may be called \"Developers\" or similar).\n\n3.You will see a section for API credentials where you can find your test credentials.\nTypically, these test credentials consist of:\n\n-API Key  – A unique key used to authenticate API requests.\n-Secret Key – The secret key used to sign API requests.\n-Merchant ID – A unique ID for your Klarna Merchant account.\n\n\nCopy that api key , Secret and Merchant ID into the `test` section of the Shop config file.\n\nWhen you’re [ready to go live](https://developer.paypal.com/docs/classic/lifecycle/goingLive/), your client can log into the Klarna account money is to be paid into and obtain a set of [live credentials](https://www.paypal.com/us/cgi-bin/webscr?cmd=_profile-api-signature) directly from PayPal.\n\n## Payment flow\n\nThe process for Klarna goes like this:\n\n1. You call `perch_shop_checkout()` and the user gets sent to Klarna to make the payment\n2. The user gets sent back to a page on your site with a `klarna_order_id` in the URL\n3. You need to then call `perch_shop_klarna_confirm_payment()` to take that klarna_order_id and complete the payment (the user says on your page)\n\n### Step 1: Initiating checkout\n\n```php\n<?php\nif (perch_member_logged_in()) {\n\n\n //URL for the terms and conditions page of the merchant. \n //The URL will be displayed inside the Klarna Checkout iFrame.\n $terms_url = 'https://yourstore.com/terms';\n \n //URL for the checkout page of the merchant.\n $checkout_url = 'https://yourstore.com/checkout';\n \n //URL of the merchant confirmation page. klarna_order_id placeholder is mandatory!\n $confirmation_url = 'https://yourstore.com/payment?klarna_order_id={checkout.order.id}';\n\n  perch_shop_checkout('klarna', [\n    'terms_url' => $terms_url,\n    'checkout_url' => $checkout_url,\n    'confirmation_url'=> $confirmation_url,\n  ]);\n}\n?>\n```\n\n\n### Step 2: The user goes off to Klarna\n\n\nIf the payment is authorised at Klarna, the user will be returned to the `confirmation_url` - your 'payment' page.\n\n### Step 3: Confirm payment\nThe user will be redirected back to the `confirmation_url` page if the authorization is successful after the customer clicks on the ‘Place Order’ button inside checkout.\n Perch Shop will pick up the order id automatically - all you need to do is call `perch_shop_klarna_confirm_payment()` .\n\n```php\n<?php\n  \n $success_url= '/payment/success';\n $cancel_url = '/payment/went/wrong';\n\nperch_shop_klarna_confirm_payment([\n   'success_url' => $success_url,\n      'cancel_url'=> $cancel_url   ]);\n?>\n```\n\n## Troubleshooting\n\n### Failed payments\n\nWhile getting your shop set up, it's likely you might see some issues processing payments until everything is configured just right. \nShop outputs any payment gateway errors into its debug console. Turning on debug mode will enable you to see this output.\n\nOne issue you may need to combat is the payment process redirecting the browser before you can see the debug console. To solve that, we have instruct Perch to hold any redirects.\n\n1. [Enabled debug](/docs/installing-perch/configuration/debug/) for your page.\n2. Before your call to `perch_shop_checkout()` add: `PerchUtil::hold_redirects();`\n\nYou should then be able to see any error messages. \nThey may be verbose! Often the part of the message that is most useful is in red near the end.\n\nAlso on merchant portal Developer logs capture each step.","type":"addons"},{"title":"Manual","permalink":"https://docs.grabaperch.com/addons/shop/gateways/manual/","id":"addons.shop.gateways.manual","excerpt":"*Gateway slug:* `manual`","text":"*Gateway slug:* `manual`\n\nThe manual gateway is for use when payment is taken offline by cash, cheque, PO or what have you. The manual gateway simply approves all payments.\n\n## Payment flow\n\nThe process for Manual gateway goes like this:\n\n1. You call `perch_shop_checkout()` and the user gets sent to your success page.\n\n### Step 1: Initiating checkout\n\n```php\n<?php\nif (perch_member_logged_in()) {\n\n  // your 'success' return URL\n  $return_url = 'http://mysite.com/payment';\n  $cancel_url = 'http://mysite.com/';\n\n  perch_shop_checkout('manual', [\n    'return_url' => $return_url,\n    'cancel_url' => $cancel_url,\n  ]);\n}\n?>\n```\n\nThe order is always successful - the manual gateway approves all orders.\n\n```php\n<?php\n  if (perch_shop_order_successful()) {\n      echo '<h1>Thank you for your order!</h1>';\n    }else{\n      echo '<h1>Sorry!</h1>';\n    }\n?>\n```","type":"addons"},{"title":"PayPal Express","permalink":"https://docs.grabaperch.com/addons/shop/gateways/paypal-express/","id":"addons.shop.gateways.paypal-express","excerpt":"*Gateway slug:* `paypal-express`","text":"*Gateway slug:* `paypal-express`\n\nThese are instructions for PayPal Express payments.\n\n## Settings\n\nIn your `perch/config/shop.php` file, add your settings for PayPal Express.\n\n```php\n<?php\n  return [\n    'gateways' => [\n      'paypal-express' => [\n        'enabled'   => true,\n        'test_mode' => true,\n        'live' => [\n          'username'  => 'paypal_api_username',\n          'password'  => 'paypal_api_password',\n          'signature' => 'paypal_api_signature',\n        ],\n        'test' => [\n          'username'  => 'paypal_api_username',\n          'password'  => 'paypal_api_password',\n          'signature' => 'paypal_api_signature',\n        ],\n      ],\n    ],\n  ];\n?>\n```\n\n**Note:** these are _not_ your regular PayPal account details - see below.\n\n## Getting your PayPal test credentials\n\nTo start testing with PayPal, you need to create an account in the PayPal Sandbox, and then get API credentials for that account. These go into your Shop config file.\n\n1. Go to [https://developer.paypal.com/](https://developer.paypal.com/)\n2. Log in using your regular PayPal account\n3. Go to Dashboard\n4. Under Sandbox to go Accounts\n5. Either create a new Merchant (seller) Business account, or select one from the list\n6. To to Profile and then API Credentials\n7. Your Username, Password and Signature are displayed\n\nCopy that username, password and signature into the `test` section of the Shop config file.\n\nWhen you’re [ready to go live](https://developer.paypal.com/docs/classic/lifecycle/goingLive/), your client can log into the PayPal account money is to be paid into and obtain a set of [live credentials](https://www.paypal.com/us/cgi-bin/webscr?cmd=_profile-api-signature) directly from PayPal.\n\n## Payment flow\n\nThe process for PayPal Express goes like this:\n\n1. You call `perch_shop_checkout()` and the user gets sent to PayPal to make the payment\n2. The user gets sent back to a page on your site with a `token` in the URL\n3. You need to then call `perch_shop_complete_payment()` to take that token and complete the payment (the user says on your page)\n\n### Step 1: Initiating checkout\n\n```php\n<?php\nif (perch_member_logged_in()) {\n\n  // your 'success' return URL\n  $return_url = 'http://mysite.com/payment';\n  $cancel_url = 'http://mysite.com/';\n\n  perch_shop_checkout('paypal-express', [\n    'return_url' => $return_url,\n    'cancel_url' => $cancel_url,\n  ]);\n}\n?>\n```\n\n\n### Step 2: The user goes off to PayPal\n\nThe user will be sent to PayPal. If they cancel, they'll be sent to the `cancel_url` URL - you don't really need to do anything.\n\nIf the payment is authorised at PayPal, the user will be returned to the `return_url` - your 'payment' page.\n\n### Step 3: Confirm payment\n\nThe user gets sent back to your `return_url` page with a token in the URL. Perch Shop will pick up the token automatically - all you need to do is call `perch_shop_complete_payment()` and let it know that you're using `paypal-express` as the gateway.\n\n```php\n<?php\n  perch_shop_complete_payment('paypal-express');\n\n  if (perch_shop_order_successful()) {\n      echo '<h1>Thank you for your order!</h1>';\n    }else{\n      echo '<h1>Sorry!</h1>';\n    }\n?>\n```\n\n## Troubleshooting\n\n### Failed payments\n\nWhile getting your shop set up, it's likely you might see some issues processing payments until everything is configured just right. Shop outputs any payment gateway errors into its debug console. Turning on debug mode will enable you to see this output.\n\nOne issue you may need to combat is the payment process redirecting the browser before you can see the debug console. To solve that, we have instruct Perch to hold any redirects.\n\n1. [Enabled debug](/docs/installing-perch/configuration/debug/) for your page.\n2. Before your call to `perch_shop_checkout()` add: `PerchUtil::hold_redirects();`\n\nYou should then be able to see any error messages. They may be verbose! Often the part of the message that is most useful is in red near the end.\n\n### 'Transaction cannot complete'\n\nIt's important that the seller's PayPal account is configured for each currency you wish to sell in. This applies to sandbox (testing) accounts as much as live accounts. If your account is set to accept GBP and you put a transaction through in USD, it will fail with a message that looks like an insufficient funds error:\n\n> 10417: Transaction cannot complete. Instruct the customer to retry the transaction using an alternative payment method from the customers PayPal wallet. The transaction did not complete with the customers selected payment method.\n\nDon't be fooled; this problem is nothing to do with the _buyer_ and everything to do with the _seller's_ account configuration. To fix this, log into the seller account (either live, or via sandbox.paypal.com if testing) and add the currency you're selling in:\n\n1. Go to My Account\n2. In the Profile menu, select My Account Settings\n3. Under Financial Information, select Currency Balances\n4. Find the currency in the select list, and click Add Currency\n\nYou should then be able to sell in that currency.","type":"addons"},{"title":"Revolut","permalink":"https://docs.grabaperch.com/addons/shop/gateways/revolut/","id":"addons.shop.gateways.revolut","excerpt":"*Gateway slug:* `revolut`","text":"*Gateway slug:* `revolut`\n\n\n## Settings\n\nIn your `perch/config/shop.php` file, add your settings for Revolut Business.\n\n```php\n<?php\n  return [\n    'gateways' => [\n      'revolut' => [\n        'enabled'   => true,\n        'test_mode' => true,\n        'live' => [\n          'secret_key'      => 'sk_live_ABC123',\n          'publishable_key' => 'pk_live_ABC123',\n        ],\n        'test' => [\n          'secret_key'      => 'sk_test_ABC123',\n          'publishable_key' => 'pk_test_ABC123',\n        ],\n      ],\n    ],\n  ];\n?>\n```\n\n## Payment flow\n\nRevolut Business is a payment-page gateway process, so the user will be sent off to Revolut's site to enter their card details. The payment flow goes like this:\n\n\n### Step 1: Initiating checkout\n\n```php\n<?php\n\n perch_shop_checkout('revolut']);     \n  \n\n?>\n```\n\n### Step 2: Shop Payment Button\n\nThen will return to the same page returning a `token` and puts it in a hidden field.At this point a Pay button wil show which pop ups the card field,on the completion of the payment\n```php\n<?php\n if (perch_get('token')) {\n$success_url=\"payment/success.php\";\n$cancel_url=\"payment/failure.php\";\nperch_shop_payment_form('revolut', [\n                                      'success_url' => success_url,\n                                       'cancel_url' => $cancel_url,\n                                      'token'      =>perch_get(\"token\")\n                                    ]);\n}\n   ?>\n   ```                                 \n  ### Step 3: Complete Payment \n  On the $success_url add the complete payment function.\n    ```php <?php     perch_shop_revolut_complete_payment(perch_get(\"id\"));     ?> ```","type":"addons"},{"title":"Stripe SCA","permalink":"https://docs.grabaperch.com/addons/shop/gateways/stripe-sca/","id":"addons.shop.gateways.stripe-sca","excerpt":"*Gateway slug:* `stripe`","text":"*Gateway slug:* `stripe`\n\nThese are instructions for Stripe token-based payment using the `stripe.js` route.\n\n## Settings\n\nIn your `perch/config/shop.php` file, add your settings for Stripe.\n\n```php\n<?php\n  return [\n    'gateways' => [\n      'stripe' => [\n       'returnUrl'=>'/payment/stripe',\n        'enabled'   => true,\n        'test_mode' => true,\n        'live' => [\n          'secret_key'      => 'sk_live_ABC123',\n          'publishable_key' => 'pk_live_ABC123',\n        ],\n        'test' => [\n          'secret_key'      => 'sk_test_ABC123',\n          'publishable_key' => 'pk_test_ABC123',\n        ],\n      ],\n    ],\n  ];\n?>\n```\n\n## Payment flow\n\nThe process for Stripe involves adding the Stripe JavaScript to the page in a step before calling `perch_shop_checkout()`. This enables you to collect the Stripe card token and pass it as the option for payment.\n\nIn the *body* of your page, you need to add the Stripe form which uses JavaScript to collect a payment token. We have a pre-built form for this which you can use, via the `perch_shop_payment_form()` function. You can also customise its template, or replace it completely with your own if you need to.\n\n```php\n<?php\n  perch_shop_payment_form('stripe');\n?>\n```\n\nThis form collects a `stripeToken` and puts it in a hidden field. The form then posts back to the same page. At the *top of the page* (before any HTML is output) you need to look for the token. If it's been posted, you can continue the checkout process.\n\n```php\n<?php\nif (perch_member_logged_in() && perch_post('stripeToken')) {\n\n  // your 'return'  URL\n  $return_url = '/payment/stripe';\n\n\n  perch_shop_checkout('stripe', [\n       'return_url' => $return_url,\n       'confirm' => true,\n       'token'      => perch_post('stripeToken')\n     ]);\n\n}\n?>\n```\nIn the *body* of your return page, you need to add the Stripe complete payment function.\n\n```php\n<?php\n\n      // your 'success' and 'failure' URLs\n      $success_url= '/payment/success';\n      $cancel_url = '/payment/went/wrong';\n\n      perch_shop_complete_payment('stripe',[\n         'success_url' => $success_url,\n         'cancel_url'=> $cancel_url\n       ]);\n\n\n?>\n```","type":"addons"},{"title":"Stripe","permalink":"https://docs.grabaperch.com/addons/shop/gateways/stripe/","id":"addons.shop.gateways.stripe","excerpt":"*Gateway slug:* `stripe`","text":"*Gateway slug:* `stripe`\n\nThese are instructions for Stripe token-based payment using the `stripe.js` route.\n\n## Settings\n\nIn your `perch/config/shop.php` file, add your settings for Stripe.\n\n```php\n<?php\n  return [\n    'gateways' => [\n      'stripe' => [\n        'enabled'   => true,\n        'test_mode' => true,\n        'live' => [\n          'secret_key'      => 'sk_live_ABC123',\n          'publishable_key' => 'pk_live_ABC123',\n        ],\n        'test' => [\n          'secret_key'      => 'sk_test_ABC123',\n          'publishable_key' => 'pk_test_ABC123',\n        ],\n      ],\n    ],\n  ];\n?>\n```\n\n## Payment flow\n\nThe process for Stripe involves adding the Stripe JavaScript to the page in a step before calling `perch_shop_checkout()`. This enables you to collect the Stripe card token and pass it as the option for payment.\n\nIn the *body* of your page, you need to add the Stripe form which uses JavaScript to collect a payment token. We have a pre-built form for this which you can use, via the `perch_shop_payment_form()` function. You can also customise its template, or replace it completely with your own if you need to.\n\n```php\n<?php\n  perch_shop_payment_form('stripe');\n?>\n```\n\nThis form collects a `stripeToken` and puts it in a hidden field. The form then posts back to the same page. At the *top of the page* (before any HTML is output) you need to look for the token. If it's been posted, you can continue the checkout process.\n\n```php\n<?php\nif (perch_member_logged_in() && perch_post('stripeToken')) {\n\n  // your 'success' and 'failure' URLs\n  $return_url = '/payment/stripe';\n  $cancel_url = '/payment/went/wrong';\n\n  perch_shop_checkout('stripe', [\n    'return_url' => $return_url,\n    'cancel_url' => $cancel_url,\n    'token'      => perch_post('stripeToken')\n  ]);\n}\n?>\n```","type":"addons"},{"title":"WorldPay","permalink":"https://docs.grabaperch.com/addons/shop/gateways/worldpay/","id":"addons.shop.gateways.worldpay","excerpt":"*Gateway slug:* `worldpay`","text":"*Gateway slug:* `worldpay`\n\n## Settings\n\nIn your `perch/config/shop.php` file, add your settings for WorldPay.\n\n```php\n<?php\n  return [\n    'gateways' => [\n      'worldpay' => [\n        'enabled'   => true,\n        'test_mode' => true,\n        'live' => [\n            'installationId'   => '1234',\n            'accountId'        => 'MYACCOUNTNAME',\n            'secretWord'       => 'md5secret',\n            'callbackPassword' => 'paymentresp_pws',\n        ],\n        'test' => [\n            'installationId'   => '1234',\n            'accountId'        => 'MYACCOUNTNAME',\n            'secretWord'       => 'md5secret',\n            'callbackPassword' => 'paymentresp_pws',\n        ],\n      ],\n    ],\n  ];\n?>\n```\n\n## Payment flow\n\nWorldPay is a payment-page gateway process, so the user will be sent off to WorldPay's site to enter their card details. The payment flow goes like this:\n\n1. When you're ready to check out, call `perch_shop_checkout()` (with your options) at the top of your page before any HTML is output\n2. The user will be redirected to WorldPay to make payment.\n3. After the user completes payment, the result page is requested by WorldPay and then re-presented to the user from the WorldPay server.\n\n### Step 1: Initiating checkout\n\n```php\n<?php\nif (perch_member_logged_in()) {\n\n  // your 'success' return URL\n  $return_url = 'http://mysite.com/payment';\n  $cancel_url = 'http://mysite.com/';\n\n  perch_shop_checkout('worldpay', [\n    'return_url' => $return_url,\n    'cancel_url' => $cancel_url,\n  ]);\n}\n?>\n```\n\n### Step 2: The user goes off to WorldPay\n\nThe user will be sent to WorldPay. If they cancel, they'll be sent to the `cancel_url` URL - you don't really need to do anything.\n\nIf the payment is authorised at WorldPay, the user will be returned to the `return_url` - your 'payment' page.\n\n### Step 3: Confirm payment\n\nWorldPay is a bit weird at this point. The user doesn't get sent back to your `return_url` page, but instead the page is requested by the WorldPay server, and the result is then presented to the user, _who is still on the WorldPay site_. \n\nThe request comes along with details of the transaction that Perch Shop will pick up - all you need to do is call `perch_shop_complete_payment()` and let it know that you're using `worldpay` as the gateway.\n\n```php\n<?php\n  perch_shop_complete_payment('worldpay');\n\n  if (perch_shop_order_successful()) {\n      echo '<h1>Thank you for your order!</h1>';\n    }else{\n      echo '<h1>Sorry!</h1>';\n    }\n?>\n```","type":"addons"},{"title":"PayPal","permalink":"https://docs.grabaperch.com/addons/shop/gateways/paypal/","id":"addons.shop.gateways.paypal","excerpt":"*Gateway slug:* `paypal`","text":"*Gateway slug:* `paypal`\n\nThese are instructions for PayPal payments.\n\n## Settings\n\nIn your `perch/config/shop.php` file, add your settings for PayPal.\n\n```php\n<?php\n  return [\n    'gateways' => [\n      'paypal' => [\n        'enabled'   => true,\n        'test_mode' => true,\n        'live' => [\n            'client_id'  => 'paypal_api_client_id',\n           'client_secret'  => 'paypal_api_client_secret',\n\n        ],\n        'test' => [\n          'client_id'  => 'paypal_api_client_id',\n           'client_secret'  => 'paypal_api_client_secret',\n\n        ],\n      ],\n    ],\n  ];\n?>\n```\n\n**Note:** these are _not_ your regular PayPal account details - see below.\n\n## Getting your PayPal test credentials\n\nTo start testing with PayPal, you need to create an account in the PayPal Sandbox, and then get API credentials for that account. These go into your Shop config file.\n\n1. Go to [https://developer.paypal.com/](https://developer.paypal.com/)\n2. Log in using your regular PayPal account\n3. Go to Dashboard\n4. Under Sandbox to go Accounts\n5. Either create a new Merchant (seller) Business account, or select one from the list\n6. To to Profile and then API Credentials\n7. Your Client ID and Secret  are displayed\n\nCopy that Client ID and Secret into the `test` section of the Shop config file.\n\nWhen you’re [ready to go live](https://developer.paypal.com/docs/classic/lifecycle/goingLive/), your client can log into the PayPal account money is to be paid into and obtain a set of [live credentials](https://www.paypal.com/us/cgi-bin/webscr?cmd=_profile-api-signature) directly from PayPal.\n\n## Payment flow\n\nThe process for PayPal  goes like this:\n\n1. You call `perch_shop_checkout()` and the user gets sent to PayPal to make the payment\n2. The user gets sent back to a page on your site with a `payment_id` in the URL\n3. You need to then call `perch_shop_paypal_complete_payment()` to take that payment_id and complete the payment (the user says on your page)\n\n### Step 1: Initiating checkout\n\n```php\n<?php\nif (perch_member_logged_in()) {\n\n  // your 'success' return URL\n  $return_url = 'http://mysite.com/payment';\n  $cancel_url = 'http://mysite.com/';\n\n  perch_shop_checkout('paypal', [\n    'return_url' => $return_url,\n    'cancel_url' => $cancel_url,\n  ]);\n}\n?>\n```\n\n\n### Step 2: The user goes off to PayPal\n\nThe user will be sent to PayPal. If they cancel, they'll be sent to the `cancel_url` URL - you don't really need to do anything.\n\nIf the payment is authorised at PayPal, the user will be returned to the `return_url` - your 'payment' page.\n\n### Step 3: Confirm payment\n\nThe user gets sent back to your `return_url` page with a token in the URL. Perch Shop will pick up the token automatically - all you need to do is call `perch_shop_paypal_complete_payment()` and let it know that you're using `paypal` as the gateway.\n\n```php\n<?php\n  perch_shop_paypal_complete_payment();\n\n  if (perch_shop_order_successful()) {\n      echo '<h1>Thank you for your order!</h1>';\n    }else{\n      echo '<h1>Sorry!</h1>';\n    }\n?>\n```\n\n## Troubleshooting\n\n### Failed payments\n\nWhile getting your shop set up, it's likely you might see some issues processing payments until everything is configured just right. Shop outputs any payment gateway errors into its debug console. Turning on debug mode will enable you to see this output.\n\nOne issue you may need to combat is the payment process redirecting the browser before you can see the debug console. To solve that, we have instruct Perch to hold any redirects.\n\n1. [Enabled debug](/docs/installing-perch/configuration/debug/) for your page.\n2. Before your call to `perch_shop_checkout()` add: `PerchUtil::hold_redirects();`\n\nYou should then be able to see any error messages. They may be verbose! Often the part of the message that is most useful is in red near the end.\n\n### 'Transaction cannot complete'\n\nIt's important that the seller's PayPal account is configured for each currency you wish to sell in. This applies to sandbox (testing) accounts as much as live accounts. If your account is set to accept GBP and you put a transaction through in USD, it will fail with a message that looks like an insufficient funds error:\n\n> 10417: Transaction cannot complete. Instruct the customer to retry the transaction using an alternative payment method from the customers PayPal wallet. The transaction did not complete with the customers selected payment method.\n\nDon't be fooled; this problem is nothing to do with the _buyer_ and everything to do with the _seller's_ account configuration. To fix this, log into the seller account (either live, or via sandbox.paypal.com if testing) and add the currency you're selling in:\n\n1. Go to My Account\n2. In the Profile menu, select My Account Settings\n3. Under Financial Information, select Currency Balances\n4. Find the currency in the select list, and click Add Currency\n\nYou should then be able to sell in that currency.","type":"addons"}]
